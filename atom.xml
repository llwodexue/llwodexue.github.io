<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>奇幻的梦之旅</title>
  
  <subtitle>http://llmysnow.top/</subtitle>
  <link href="http://llmysnow.top/atom.xml" rel="self"/>
  
  <link href="http://llmysnow.top/"/>
  <updated>2021-05-24T08:28:34.352Z</updated>
  <id>http://llmysnow.top/</id>
  
  <author>
    <name>LiLyn</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>HTTP网络层性能优化</title>
    <link href="http://llmysnow.top/posts/2623edef/"/>
    <id>http://llmysnow.top/posts/2623edef/</id>
    <published>2021-05-24T07:48:01.285Z</published>
    <updated>2021-05-24T08:28:34.352Z</updated>
    
    <content type="html"><![CDATA[<h2 id="客户端和服务端之间的信息通信"><a href="#客户端和服务端之间的信息通信" class="headerlink" title="客户端和服务端之间的信息通信"></a>客户端和服务端之间的信息通信</h2><ul><li>ajax / fetch 数据交互</li><li>跨域处理方案：ajax、fetch、jsonp、postMessage</li><li>资源获取【html|、css、js、image、音视频】</li><li>webscoket</li></ul><a id="more"></a><p>请求：客户端把信息传递给服务器或者向服务器发送请求</p><p>响应：服务器接受客户端信息并且返回给客户端相关的内容</p><p>HTTP 报文：客户端和服务器之间的传输的所有内容</p><ul><li><p>起始行：基本信息【包含 HTTP 的版本等】</p><p>请求起始行：GET【请求方式】 xxx【请求地址】 HTTP/1.1【HTTP 版本号】</p><p>响应起始行：HTTP/1.1【HTTP 版本】 200【HTTP 响应状态码】 OK【状态码描述】</p></li><li><p>首部（头）：请求头【客户端-&gt;服务器】、响应头【服务器-&gt;客户端】</p></li><li><p>主体：请求主体【客户端-&gt;服务器】、响应主体【服务器-&gt;客户端】</p></li></ul><p>客户端和服务器之间的数据传输，依托于网络【通信模式 TCP/IP… 传输协议 HTTP/HTTPS/FTP…】</p><h2 id="从输入-URL-地址到看到页面，中间的经历"><a href="#从输入-URL-地址到看到页面，中间的经历" class="headerlink" title="从输入 URL 地址到看到页面，中间的经历"></a>从输入 URL 地址到看到页面，中间的经历</h2><ol><li>URL 解析</li><li>检查缓存【强缓存、协商缓存（针对资源文件请求）；本地缓存（针对数据请求）】</li><li>DNS 服务器解析【域名解析：根据域名解析出服务器外网 IP】</li><li>TCP 三次握手【建立客户端和服务器之间的网络连接通道】</li><li>基于 HTTP/HTTPS 等协议，实现客户端和服务端之间的信息通信</li><li>TCP 四次挥手【把建立好的网络通道释放掉】</li><li>客户端渲染【呈现出页面和效果】</li></ol><h3 id="URL-解析"><a href="#URL-解析" class="headerlink" title="URL 解析"></a>URL 解析</h3><p><img data-src="https://gitee.com/lilyn/pic/raw/master/js-img/URL%E8%A7%A3%E6%9E%90.jpg" alt="URL解析"></p><p>URI：统一资源标识符</p><ul><li>URL：统一资源定位符</li><li>URN：统一资源名称</li></ul><p><strong>传输协议：</strong>用什么样的协议负责客户端和服务端的信息传输</p><ul><li><p>HTTP：超文本传输协议</p><p>除了传输文本还可以传输其余的信息，例如：文件流、二进制或者 Buffer 格式或者 BASE64 格式的数据</p></li><li><p>HTTPS：HTTP + SSL（TSL） 更安全的 HTTP，传输的内容经过加密</p></li><li><p>FTP：文件的上传下载</p></li></ul><p><strong>域名：</strong>对服务器外网 IP 的一个重命名</p><p><code>www.baidu.com</code></p><ul><li>顶级域名 <code>baidu.com</code></li><li>一级域名 <code>www.baidu.com</code></li><li>二级域名 <code>video.baidu.com</code></li><li>三级域名 <code>image.video.baidu.com</code></li></ul><p>域名和服务器购买完后，需要在 DNS 服务器生成一条解析记录，用于以后的 DNS 解析</p><p><strong>端口号：</strong>区分同一台服务器上不同的服务的</p><ul><li><p>取值范围：0~65535 之间</p></li><li><p>默认端口号：浏览器会根据输入的协议，给与默认端口号</p><p>HTTP -&gt; 80</p><p>HTTPS -&gt; 443</p><p>FTP -&gt; 21</p></li></ul><p><strong>请求资源的路径名称：</strong>基于路径找到客户端需要的资源文件</p><p>看到的 URL 地址可能是重写后的【看到的地址在文件目录不存在】</p><ul><li><p>ajax 数据请求 <code>/api/list</code></p></li><li><p>url 重写</p><p>动态网址，页面中的内容是无法被搜索引擎收录的（不利于 SEO 优化）</p><p>静态化地址 <code>https://item.jd.com/....</code>，通过 URL 重写为 <code>https://item.jd.com/detail.jsp?id=...</code></p><p><code>https://item.jd.com/info/100000</code> 路径参数【导航】</p><p><code>https://www.baidu.com/info?id=100000</code></p></li></ul><p><strong>问号传参：</strong></p><ul><li><p>把信息参数传递给服务器，GET 系列请求一般都是这样传递参数</p><p><code>xxx=xxx&amp;xxx=xxx</code> -&gt; x-www-form-urlencoded 格式</p></li><li><p>如果是页面跳转，把信息传递给另一个页面</p></li></ul><p><strong>HASH 值：</strong></p><ul><li>锚点定位</li><li>HASH 路由</li></ul><p>URL 编译问题：</p><ul><li>encodeURI decodeURI：编译空格和中文，一般编译整个 URL 中的信息（前后端都支持的 API）</li><li>encodeURIComponent decodeURIComponent：编译空格和中文以及一些特殊符号，所以一般只用来编译传递的信息的值，而不是整个 URL（前后端都支持的 API）</li><li>escape unescape（用于客户端页面信息传递或一些信息的编译【cookie 中的中文内容编译】）</li><li>也可以基于自己设定的加密机制规则处理（对称加密）</li><li>对于某些数据，需要采用不可解密的（非对称加密），例如：md5</li></ul><h3 id="缓存检测"><a href="#缓存检测" class="headerlink" title="缓存检测"></a>缓存检测</h3><p><strong>缓存处理是基于 HTTP 网络层进行优化的一个非常重要的手段</strong>【针对资源文件请求】</p><p>强缓存还是协商缓存都是服务器设置的，客户端浏览器自己会根据返回的一些信息，进行相关处理，无需前端单独设置东西</p><p><strong>缓存位置：</strong></p><ul><li>Memory Cache : 内存缓存（页面没有关闭，只是刷新）</li><li>Disk Cache：硬盘缓存（页面关闭后重新打开）</li></ul><p>打开网页：查找硬盘缓存中是否有匹配，如有则使用，如没有则发送网络请求</p><p>普通刷新（F5）：因 TAB 没关闭，因此内存缓存是可用的，会被优先使用，其次才是硬盘缓存</p><p>强制刷新（Ctrl + F5）：浏览器不使用缓存，因此发送的请求头均带有 <code>Cache-Control: no-cache</code>，服务器直接返回 200 和最新内容</p><p><strong>强缓存：</strong> <code>Expires / Cache-Control</code></p><blockquote><p>Expires：缓存过期时间，用来指定资源到期的事件（HTTP/1.0）</p><p>Cache-Control：<code>cache-control: public, max-age=2592000</code> 第一次拿到资源后的 2592000 秒内（30 天），再次发生请求，读取缓存中的信息（HTTP/1.1）</p></blockquote><ul><li>如果获取的是强缓存信息，HTTP 状态码是 <strong>200</strong></li><li>如果是从服务器成功重新获取，HTTP 状态码也是 <strong>200</strong></li></ul><p>问题：本地缓存了文件，但是服务对应的资源文件更新了，如何保证获取的是最新的内容？</p><ol><li>所有请求的资源文件（css / js / 图片）后面都带一个时间戳</li><li>每一次资源的更新，基于 webpack 生成不同的资源名称（HASH 值）</li></ol><p>所以 HTML 永远不会做强缓存，资源文件一般会使用 强缓存+协商缓存</p><p><strong>协商缓存：</strong> <code>Last-Modified / ETag</code></p><blockquote><p>Last-Modified：记录服务器资源文件最后一次更新的时间（HTTP/1.0）请求头： <code>If-Modified-Since</code></p><p>ETag：只要服务器资源文件改变，会生成一个不同的标识（HTTP/1.1）请求头： <code>If-None-Match</code></p></blockquote><p>当强缓存失效（不存在）【html 可以做协商缓存】，会校验协商缓存，每一次都会向服务器校验资源是否更新</p><ul><li>如果没有更新，返回 <strong>304</strong> 通知客户端读取缓存信息，从本地缓存中获取内容进行渲染</li><li>如果有更新，返回 <strong>200</strong> 及最新资源信息，直接渲染，并把最新的 Last-Modified / ETag 和最新的资源信息缓存到本地</li></ul><p><strong>数据缓存：</strong></p><p>没有缓存数据，从服务器拉取最新数据；有缓存数据，直接读取缓存数据【减少和服务器之间的交互频率，降低服务器压力，也可以提高页面的渲染速度】</p><ul><li>页面不刷新，某些内容频繁操作，但是数据不是需要实时更新，可以做缓存【不经常更新的数据】</li><li>页面只要不关闭，直接读取缓存，如果页面关闭，重新打开我们也可以读取缓存中的数据【数据更新频率更低，可以设置过期时间】</li></ul><p>客户端存储数据的方案：</p><ol><li>（全局）变量存储【vuex / redux】：页面刷新或关闭后打开，之前存储的数据都没有（内存释放）</li><li>cookie</li><li>webStorage：LocalStorage SessionStorage</li><li>IndexedDB 浏览器数据库存储</li><li>Cache</li><li>Manifest 离线存储</li></ol><p><strong>LocalStorage V.S. SessionStorage</strong></p><ul><li>LocalStorage 持久化本地存储（没有过期时间），页面关闭存储内容也是存在的，除非用户手动清除 <code>removeItem clear</code></li><li>SessionStorage 会话存储，页面关闭后，存储的信息会消息【页面刷新不消失】</li></ul><p><strong>Cookie V.S. LocalStorage</strong></p><ul><li><p>Cookie 只允许一个源下最多存储 4KB 内容，所以不能存储太多的数据</p><p>本地存储的数据是由同源访问限制的，只允许读取本源下存储的内容</p></li><li><p>LocalStorage 可以在同源下存储 5MB 内容</p><br></li><li><p>Cookie 需要设置过期时间，超过时间就失效，并且有路径限制</p></li><li><p>LocalStorage 持久化存储，没有过期时间，除非手动清除</p><br></li><li><p>Cookie 不稳定</p><p>基于安全卫士或浏览器自带的清除操作，会把 Cookie 删除掉，开启无痕浏览，不能存储 Cookie</p></li><li><p>LocalStorage 不受这些操作影响</p><br></li><li><p>Cookie 兼容低版本浏览器</p></li><li><p>LocalStorage HTML5 新增的 API【不兼容 IE8 以下浏览器】</p><br></li><li><p>Cookie 不算严格本地存储</p><p>客户端向服务器发送请求，会默认把本地的 Cookie 基于请求头发送给服务器，并且服务器返回的响应头中有 Set-Cookie 字段，浏览器会默认把这些信息种在客户端本地中</p></li><li><p>LocalStorage 严格本地存储，默认情况下和服务器没有任何关系</p></li></ul><p>想要基于 ajax 获取数据，必须要保证当前页面的运行是在 http/https 协议下，file 文件协议不行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getData</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">    xhr.open(<span class="string">&#x27;get&#x27;</span>, <span class="string">&#x27;./data.json&#x27;</span>)</span><br><span class="line">    xhr.onreadystatechange = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (xhr.status === <span class="number">200</span> &amp;&amp; xhr.readyState === <span class="number">4</span>) &#123;</span><br><span class="line">        resolve(<span class="built_in">JSON</span>.parse(xhr.responseText))</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    xhr.send()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">;(<span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> cache_data = <span class="built_in">localStorage</span>.getItem(<span class="string">&#x27;cache-data&#x27;</span>)</span><br><span class="line">  <span class="keyword">if</span> (cache_data) &#123;</span><br><span class="line">    cache_data = <span class="built_in">JSON</span>.parse(cache_data)</span><br><span class="line">    <span class="keyword">if</span> (+<span class="keyword">new</span> <span class="built_in">Date</span>() - cache_data.time &lt;= <span class="number">10000</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> result = <span class="keyword">await</span> getData()</span><br><span class="line">  <span class="built_in">localStorage</span>.setItem(</span><br><span class="line">    <span class="string">&#x27;cache-data&#x27;</span>,</span><br><span class="line">    <span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">      time: +<span class="keyword">new</span> <span class="built_in">Date</span>(),</span><br><span class="line">      data: result,</span><br><span class="line">    &#125;)</span><br><span class="line">  )</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><h3 id="DNS-解析"><a href="#DNS-解析" class="headerlink" title="DNS 解析"></a>DNS 解析</h3><ul><li>递归查询</li></ul><p><img data-src="https://gitee.com/lilyn/pic/raw/master/company-img/DNS%E8%A7%A3%E6%9E%90-%E9%80%92%E5%BD%92%E6%9F%A5%E8%AF%A2.jpg"></p><ul><li>迭代查询</li></ul><p><img data-src="https://gitee.com/lilyn/pic/raw/master/company-img/DNS%E8%A7%A3%E6%9E%90-%E8%BF%AD%E4%BB%A3%E6%9F%A5%E8%AF%A2.jpg"></p><p>多服务器部署</p><ul><li>弊端：增加了 DNS 解析次数</li><li>优势：资源合理利用、抗压能力增强、提高 HTTP 并发性【同源并发 HTTP 5~7 个】</li></ul><p>每一次 DNS 解析时间预计在 20~120 毫秒</p><ul><li>减少 DNS 请求次数</li><li>DNS 预获取（DNS Prefetch）</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta http-equiv=<span class="string">&quot;x-dns-prefetch-control&quot;</span> content=<span class="string">&quot;on&quot;</span>&gt;</span><br><span class="line">&lt;link rel=<span class="string">&quot;dns-prefetch&quot;</span> href=<span class="string">&quot;//static.360buyimg.com&quot;</span>/&gt;</span><br></pre></td></tr></table></figure><h3 id="TCP-三次握手"><a href="#TCP-三次握手" class="headerlink" title="TCP 三次握手"></a>TCP 三次握手</h3><ul><li>seq 序号，用来标识从 TCP 源端向目的端发送的字节流，发起方发送数据时对此进行标记</li><li>ack 确认序号，只有 ACK 标识为 1 时，确认序号字段才有效，ack=seq+1</li><li>标识位<ul><li>ACK：确认序号有效（acknowledge）</li><li>RST：重置连接 （reset）</li><li>SYN：发起一个新连接（synchronous）</li><li>FIN：释放一个新连接（finish）</li><li>seq：序号（sequence）</li></ul></li></ul><p><img data-src="https://img-blog.csdnimg.cn/20200430211404285.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4Njg5Mzk1,size_16,color_FFFFFF,t_70#pic_center" alt="三次握手"></p><p>TCP 三次握手通俗理解，C→S：在不在，S→C：我在你在不在，C→S：我在</p><p><strong>三次握手为什么不用两次或四次？</strong></p><ul><li>TCP 作为一种可靠传输控制协议，其核心思想：<strong>既要保证数据可靠传输，又要提高传输的效率</strong></li><li>两次握手只能保证客户端给服务器端的信息收到了，不能保证服务端给客户端的信息收到了（不够稳定）</li><li>四次握手就多余了，因为服务端已经知道客户端收到信息了，再给客户端发信息就没有意义了</li></ul><p><img data-src="https://gitee.com/lilyn/pic/raw/master/company-img/OSI%20TCP.png"></p><p>UDP(User Datagram Protocol) 连接没有三次握手机制</p><ol><li>相对于 TCP 来讲快</li><li>不稳定可靠</li></ol><h3 id="数据传输"><a href="#数据传输" class="headerlink" title="数据传输"></a>数据传输</h3><p>HTTP 报文</p><ul><li>请求报文</li><li>响应报文</li></ul><p>响应状态码</p><ul><li>200 OK：请求已成功</li><li>202 Accepted：服务器已接受请求，但尚未处理（异步）</li><li>204 No Content：服务器成功处理了请求，但不需要返回任何实体内容</li><li>301 Moved Permanently：永久重定向</li><li>302 Move Temporarily：临时重定向</li><li>304 Not Modified：文档内容没有改变，走协商缓存</li><li>400 Bad Request : 请求参数有误</li><li>401 Unauthorized：请求需要权限验证</li><li>404 Not Found：请求失败，服务器没有这个资源</li><li>405 Method Not Allowed：请求方法不能由于请求相应资源</li><li>500 Internal Server Error：服务器未知错误</li><li>502 Bad Gateway：网关有误</li><li>503 Service Unavailable：服务器维护或过载，无法处理请求</li></ul><h3 id="TCP-四次挥手"><a href="#TCP-四次挥手" class="headerlink" title="TCP 四次挥手"></a>TCP 四次挥手</h3><p>服务受到信息和标识后</p><ol><li>准备客户端需要的东西【需要时间】</li><li>把信息返回给客户端</li></ol><p>但是为了保证消息的及时反馈，此时需要立即告诉客户端：我收到你的东西了，我现在开始准备等我一会</p><p><img data-src="https://img-blog.csdnimg.cn/20200430211431423.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4Njg5Mzk1,size_16,color_FFFFFF,t_70#pic_center" alt="四次握手"></p><p>TCP 四次挥手通俗理解，C→S：我要走了，S→C：等下，我看看还有没有数据要传输，C→S：好了，没事了，挂了吧（已经挂了），C→S：挂了</p><p><strong>为什么连接的时候是三次握手，关闭的时候却是四次挥手？</strong></p><ul><li>服务端收到客户端的 SYN 连接请求，可以直接发送 SYN+ACK 报文</li><li>但关闭连接时，当服务器收到 FIN 报文时，很可能并不会立即关闭连接，所以只能先回复以一个 ACK 报文，告诉客户端：你发的 FIN 报文我收到了，只有等到服务端所有的报文都发送完了，才能发送 FIN 报文，因此不能一起发送，故需要四次握手</li></ul><p><strong>为了减少 TCP 握手和挥手的时间，一般都使用 <code>Connection: keep-alive</code></strong></p><p>数据请求：</p><ul><li>长轮询：设置定时器，每隔多久发送一次请求，拿到最新数据</li><li>长连接：如果数据没有更新则连接不中断（服务器挂起），监听数据改变</li></ul><h3 id="页面渲染"><a href="#页面渲染" class="headerlink" title="页面渲染"></a>页面渲染</h3><h2 id="性能优化汇总"><a href="#性能优化汇总" class="headerlink" title="性能优化汇总"></a>性能优化汇总</h2><ol><li><p>利用缓存</p><ul><li>对于静态资源文件实现强缓存和协商缓存（扩展：文件有更新，如何保证及时刷新？）</li><li>对于不经常更新的接口数据采用本地存储做数据缓存（扩展：cookie / localStorage / vuex|redux 区别？）</li></ul></li><li><p>DNS 优化</p><ul><li>分服务器部署，增加 HTTP 并发性（导致 DNS 解析变慢）</li><li>DNS Prefetch</li></ul></li><li><p>TCP 的三次握手和四次挥手</p><ul><li>Connection: keep-alive</li></ul></li><li><p>数据传输</p><ul><li><p>减少数据传输的大小</p><p>内容或者数据压缩（webpack 等）</p><p>服务器端一定要开启 GZIP 压缩（一般能压缩 60%左右）</p><p>大批量数据分批次请求（例如：下拉刷新或者分页，保证首次加载请求数据少）</p></li><li><p>减少 HTTP 请求的次数</p><p>资源文件合并处理</p><p>字体图标</p><p>雪碧图 CSS-Sprit</p><p>图片的 BASE64</p></li></ul></li><li><p>CDN 服务器“地域分布式“</p></li><li><p>采用 HTTP2.0</p></li></ol><p>网络优化是前端性能优化的中的重点内容，因为大部分的消耗都发生在网络层，尤其是第一次页面加载，如何减少等待时间很重要“减少白屏的效果和时间”</p><ul><li>loading 人性化体验</li><li>骨架屏：客户端骨屏 + 服务器骨架屏</li><li>图片延迟加载</li></ul><h2 id="HTTP1-0-VS-HTTP1-1-VS-HTTP2-0"><a href="#HTTP1-0-VS-HTTP1-1-VS-HTTP2-0" class="headerlink" title="HTTP1.0 VS HTTP1.1 VS HTTP2.0"></a>HTTP1.0 VS HTTP1.1 VS HTTP2.0</h2><h3 id="HTTP1-0-VS-HTTP1-1-区别："><a href="#HTTP1-0-VS-HTTP1-1-区别：" class="headerlink" title="HTTP1.0 VS HTTP1.1 区别："></a>HTTP1.0 VS HTTP1.1 区别：</h3><ul><li><strong>缓存处理：</strong>HTTP1.0 中主要使用 Last-Modified、Expires 来做缓存判断标准，HTTP1.1 则引入了更多的缓存控制策略：ETag、Cache-Control…</li><li><strong>带宽优化及网络连接的使用：</strong>HTTP1.1 支持断点续传，即返回码是 206（Partial Content）</li><li><strong>长连接：</strong>HTTP1.1 中默认开启 <code>Connection: keep-alive</code>，一定程度上弥补了 HTTP1.0 每次请求都要创建连接的缺点</li><li><strong>错误通知的管理：</strong>在 HTTP1.1 中新增了 24 个错误状态响应码，如 409（Conflict）表示请求的资源与资源的当前状态发生冲突；410（Gone）表示服务器上的某个资源被永久性的删除…</li><li><strong>Host 头处理：</strong>在 HTTP1.0 中认为每台服务器都绑定一个唯一的 IP 地址，因此，请求消息中的 URL 并没有传递主机名（hostname）。但随着虚拟主机技术的发展，在一台物理服务器上可以存在多个虚拟主机（Multi-homed Web Servers），并且它们共享一个 IP 地址。HTTP1.1 的请求消息和响应消息都应支持 Host 头域，且请求消息中如果没有 Host 头域会报告一个错误（400 Bad Request）</li></ul><h3 id="HTTP2-0-VS-HTTP1-x-的新特性："><a href="#HTTP2-0-VS-HTTP1-x-的新特性：" class="headerlink" title="HTTP2.0 VS HTTP1.x 的新特性："></a>HTTP2.0 VS HTTP1.x 的新特性：</h3><ul><li><p><strong>新的二进制格式（Binary Format）：</strong>HTTP1.x 的解析是基于文本，基于文本协议的格式解析存在天然缺陷，文本的表现形式有多样性，要做到健壮性考虑的场景必然很多，二进制则不同，只认 0 和 1 的组合，基于这种考虑 HTTP2.0 的协议解析决定采用二进制格式，实现方便且健壮</p></li><li><p><strong>header 压缩：</strong>HTTP1.x 的 header 带有大量信息，而且每次都要重复发送，HTTP2.0 使用 encoder 来减少需要传输的 header 大小，通讯双方各自 cache 一份 header fields 表，既避免了重复 header 的传输，又减小了需要传输的大小</p></li><li><p><strong>服务端推送（server push）：</strong>例如我的网页有一个 sytle.css 的请求，在客户端收到 sytle.css 数据的同时，服务端会将 sytle.js 的文件推送给客户端，当客户端再次尝试获取 sytle.js 时就可以直接从缓存中获取到，不用再发请求了</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Link: <span class="tag">&lt;/<span class="name">styles.css</span>&gt;</span>; rel=preload; as=style, <span class="tag">&lt;/<span class="name">example.png</span>&gt;</span>; rel=preload; as=image</span><br></pre></td></tr></table></figure></li><li><p><strong>多路复用（MultiPlexing）</strong></p><p>HTTP/1.0 每次请求响应，建立一个 TCP 连接，用完关闭</p><p>HTTP/1.1 「长连接」 若干个请求排队串行化单线程处理，后面的请求等待前面请求的返回才能获得执行机会，一旦有某请求超时等，后续请求只能被阻塞，毫无办法，也就是人们常说的线头阻塞；</p><p>HTTP/2.0 「多路复用」多个请求可同时在一个连接上并行执行，某个请求任务耗时严重，不会影响到其它连接的正常执行；</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;客户端和服务端之间的信息通信&quot;&gt;&lt;a href=&quot;#客户端和服务端之间的信息通信&quot; class=&quot;headerlink&quot; title=&quot;客户端和服务端之间的信息通信&quot;&gt;&lt;/a&gt;客户端和服务端之间的信息通信&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;ajax / fetch 数据交互&lt;/li&gt;
&lt;li&gt;跨域处理方案：ajax、fetch、jsonp、postMessage&lt;/li&gt;
&lt;li&gt;资源获取【html|、css、js、image、音视频】&lt;/li&gt;
&lt;li&gt;webscoket&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="网络" scheme="http://llmysnow.top/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
    <category term="性能优化" scheme="http://llmysnow.top/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
    <category term="HTTP网络层" scheme="http://llmysnow.top/tags/HTTP%E7%BD%91%E7%BB%9C%E5%B1%82/"/>
    
  </entry>
  
  <entry>
    <title>Canvas 学习（时钟 绘图板）</title>
    <link href="http://llmysnow.top/posts/453bf97e/"/>
    <id>http://llmysnow.top/posts/453bf97e/</id>
    <published>2021-05-23T05:43:16.145Z</published>
    <updated>2021-05-26T01:17:39.321Z</updated>
    
    <content type="html"><![CDATA[<h2 id="canvas画圆"><a href="#canvas画圆" class="headerlink" title="canvas画圆"></a>canvas画圆</h2><ul><li>为什么需要用canvas，如果用<code>onmousemove</code>，每一次移动都会进行DOM重绘，非常消耗性能，这时我们需要看一下 canvas</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;canvas&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    canvas.onmousemove = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> div = <span class="built_in">document</span>.createElement(<span class="string">&quot;div&quot;</span>);</span></span><br><span class="line"><span class="javascript">        div.style.position = <span class="string">&quot;absolute&quot;</span>;</span></span><br><span class="line"><span class="javascript">        div.style.left = e.clientX + <span class="string">&quot;px&quot;</span>;</span></span><br><span class="line"><span class="javascript">        div.style.top = e.clientY + <span class="string">&quot;px&quot;</span>;</span></span><br><span class="line"><span class="javascript">        div.style.width = <span class="string">&quot;6px&quot;</span>;</span></span><br><span class="line"><span class="javascript">        div.style.height = <span class="string">&quot;6px&quot;</span>;</span></span><br><span class="line"><span class="javascript">        div.style.marginLeft = <span class="string">&quot;-3px&quot;</span>;</span></span><br><span class="line"><span class="javascript">        div.style.marginRight = <span class="string">&quot;-3px&quot;</span>;</span></span><br><span class="line"><span class="javascript">        div.style.borderRadius = <span class="string">&quot;50%&quot;</span>;</span></span><br><span class="line"><span class="javascript">        div.style.backgroundColor = <span class="string">&quot;black&quot;</span>;</span></span><br><span class="line">        canvas.appendChild(div);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>我们现在已经给 canvas 设置一屏宽高，但还是出现滚动条，原因是 canvas 是 inline 元素，设置宽高不起作用，所以需要把它转换成块级元素（<strong>不要这样做，这样做会拉伸元素</strong>）</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">&quot;canvas&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-id">#canvas</span> &#123;</span></span><br><span class="line">        height: 100vh;</span><br><span class="line">        width: 100vw;</span><br><span class="line">        border: 1px solid red;</span><br><span class="line"><span class="css">        <span class="comment">/* display: block; */</span></span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>&lt;canvas&gt;</code> 标签只有两个属性<strong>——</strong> <code>width</code>和<code>height</code>，可以使用 JS 设置canvas 宽高，这里不能直接给 canvas 设置 <code>height: 100vh;</code> <code>width: 100vw;</code> </li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">&quot;canvas&quot;</span>);</span><br><span class="line">canvas.width = <span class="built_in">document</span>.documentElement.clientWidth;</span><br><span class="line">canvas.height = <span class="built_in">document</span>.documentElement.clientHeight;</span><br></pre></td></tr></table></figure><ul><li>canvas画圆</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> painting = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">let</span> ctx = canvas.getContext(<span class="string">&quot;2d&quot;</span>);</span><br><span class="line">ctx.fillStyle = <span class="string">&quot;black&quot;</span>;</span><br><span class="line">ctx.strokeStyle = <span class="string">&quot;none&quot;</span>;</span><br><span class="line"></span><br><span class="line">canvas.onmousedown = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    painting = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">canvas.onmousemove = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (painting === <span class="literal">true</span>) &#123;</span><br><span class="line">        ctx.beginPath();</span><br><span class="line">        ctx.arc(e.clientX, e.clientY, <span class="number">10</span>, <span class="number">0</span>, <span class="number">2</span> * <span class="built_in">Math</span>.PI);</span><br><span class="line">        ctx.stroke();</span><br><span class="line">        ctx.fill()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">canvas.onmouseup = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    painting = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Canvas"><a href="#Canvas" class="headerlink" title="Canvas"></a>Canvas</h2><h3 id="颜色、样式和阴影"><a href="#颜色、样式和阴影" class="headerlink" title="颜色、样式和阴影"></a>颜色、样式和阴影</h3><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://www.w3school.com.cn/tags/canvas_fillstyle.asp">fillStyle</a></td><td>设置或返回用于填充绘画的颜色、渐变或模式</td></tr><tr><td><a href="https://www.w3school.com.cn/tags/canvas_strokestyle.asp">strokeStyle</a></td><td>设置或返回用于笔触的颜色、渐变或模式</td></tr><tr><td><a href="https://www.w3school.com.cn/tags/canvas_shadowcolor.asp">shadowColor</a></td><td>设置或返回用于阴影的颜色</td></tr><tr><td><a href="https://www.w3school.com.cn/tags/canvas_shadowblur.asp">shadowBlur</a></td><td>设置或返回用于阴影的模糊级别</td></tr><tr><td><a href="https://www.w3school.com.cn/tags/canvas_shadowoffsetx.asp">shadowOffsetX</a></td><td>设置或返回阴影距形状的水平距离</td></tr><tr><td><a href="https://www.w3school.com.cn/tags/canvas_shadowoffsety.asp">shadowOffsetY</a></td><td>设置或返回阴影距形状的垂直距离</td></tr></tbody></table><h3 id="线条样式"><a href="#线条样式" class="headerlink" title="线条样式"></a>线条样式</h3><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://www.w3school.com.cn/tags/canvas_linecap.asp">lineCap</a></td><td>设置或返回线条的结束端点样式</td></tr><tr><td><a href="https://www.w3school.com.cn/tags/canvas_linejoin.asp">lineJoin</a></td><td>设置或返回两条线相交时，所创建的拐角类型</td></tr><tr><td><a href="https://www.w3school.com.cn/tags/canvas_linewidth.asp">lineWidth</a></td><td>设置或返回当前的线条宽度</td></tr><tr><td><a href="https://www.w3school.com.cn/tags/canvas_miterlimit.asp">miterLimit</a></td><td>设置或返回最大斜接长度</td></tr></tbody></table><h3 id="矩形"><a href="#矩形" class="headerlink" title="矩形"></a>矩形</h3><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://www.w3school.com.cn/tags/canvas_rect.asp">rect()</a></td><td>创建矩形</td></tr><tr><td><a href="https://www.w3school.com.cn/tags/canvas_fillrect.asp">fillRect()</a></td><td>绘制“被填充”的矩形</td></tr><tr><td><a href="https://www.w3school.com.cn/tags/canvas_strokerect.asp">strokeRect()</a></td><td>绘制矩形（无填充）</td></tr><tr><td><a href="https://www.w3school.com.cn/tags/canvas_clearrect.asp">clearRect()</a></td><td>在给定的矩形内清除指定的像素</td></tr></tbody></table><h3 id="路径"><a href="#路径" class="headerlink" title="路径"></a>路径</h3><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://www.w3school.com.cn/tags/canvas_fill.asp">fill()</a></td><td>填充当前绘图（路径）</td></tr><tr><td><a href="https://www.w3school.com.cn/tags/canvas_stroke.asp">stroke()</a></td><td>绘制已定义的路径</td></tr><tr><td><a href="https://www.w3school.com.cn/tags/canvas_beginpath.asp">beginPath()</a></td><td>起始一条路径，或重置当前路径</td></tr><tr><td><a href="https://www.w3school.com.cn/tags/canvas_moveto.asp">moveTo()</a></td><td>把路径移动到画布中的指定点，不创建线条</td></tr><tr><td><a href="https://www.w3school.com.cn/tags/canvas_closepath.asp">closePath()</a></td><td>创建从当前点回到起始点的路径</td></tr><tr><td><a href="https://www.w3school.com.cn/tags/canvas_lineto.asp">lineTo()</a></td><td>添加一个新点，然后在画布中创建从该点到最后指定点的线条</td></tr><tr><td><a href="https://www.w3school.com.cn/tags/canvas_clip.asp">clip()</a></td><td>从原始画布剪切任意形状和尺寸的区域</td></tr><tr><td><a href="https://www.w3school.com.cn/tags/canvas_quadraticcurveto.asp">quadraticCurveTo()</a></td><td>创建二次贝塞尔曲线</td></tr><tr><td><a href="https://www.w3school.com.cn/tags/canvas_beziercurveto.asp">bezierCurveTo()</a></td><td>创建三次方贝塞尔曲线</td></tr><tr><td><a href="https://www.w3school.com.cn/tags/canvas_arc.asp">arc()</a></td><td>创建弧/曲线（用于创建圆形或部分圆）</td></tr><tr><td><a href="https://www.w3school.com.cn/tags/canvas_arcto.asp">arcTo()</a></td><td>创建两切线之间的弧/曲线</td></tr><tr><td><a href="https://www.w3school.com.cn/tags/canvas_ispointinpath.asp">isPointInPath()</a></td><td>如果指定的点位于当前路径中，则返回 true，否则返回 false</td></tr></tbody></table><h3 id="转换"><a href="#转换" class="headerlink" title="转换"></a>转换</h3><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://www.w3school.com.cn/tags/canvas_scale.asp">scale()</a></td><td>缩放当前绘图至更大或更小</td></tr><tr><td><a href="https://www.w3school.com.cn/tags/canvas_rotate.asp">rotate()</a></td><td>旋转当前绘图</td></tr><tr><td><a href="https://www.w3school.com.cn/tags/canvas_translate.asp">translate()</a></td><td>重新映射画布上的 (0,0) 位置</td></tr><tr><td><a href="https://www.w3school.com.cn/tags/canvas_transform.asp">transform()</a></td><td>替换绘图的当前转换矩阵</td></tr><tr><td><a href="https://www.w3school.com.cn/tags/canvas_settransform.asp">setTransform()</a></td><td>将当前转换重置为单位矩阵。然后运行 transform()</td></tr></tbody></table><h3 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h3><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://www.w3school.com.cn/tags/canvas_font.asp">font</a></td><td>设置或返回文本内容的当前字体属性</td></tr><tr><td><a href="https://www.w3school.com.cn/tags/canvas_textalign.asp">textAlign</a></td><td>设置或返回文本内容的当前对齐方式</td></tr><tr><td><a href="https://www.w3school.com.cn/tags/canvas_textbaseline.asp">textBaseline</a></td><td>设置或返回在绘制文本时使用的当前文本基线</td></tr></tbody></table><h3 id="图像绘制"><a href="#图像绘制" class="headerlink" title="图像绘制"></a>图像绘制</h3><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://www.w3school.com.cn/tags/canvas_drawimage.asp">drawImage()</a></td><td>向画布上绘制图像、画布或视频</td></tr></tbody></table><h3 id="像素操作"><a href="#像素操作" class="headerlink" title="像素操作"></a>像素操作</h3><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>width</td><td>返回 ImageData 对象的宽度</td></tr><tr><td>height</td><td>返回 ImageData 对象的高度</td></tr><tr><td>data</td><td>返回一个对象，其包含指定的 ImageData 对象的图像数据</td></tr></tbody></table><h2 id="Canvas练习"><a href="#Canvas练习" class="headerlink" title="Canvas练习"></a>Canvas练习</h2><h3 id="绘制圆形和文本"><a href="#绘制圆形和文本" class="headerlink" title="绘制圆形和文本"></a>绘制圆形和文本</h3><ul><li>绘制线段</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">ctx.beginPath();</span><br><span class="line"><span class="comment">// 设置绘制的起始点</span></span><br><span class="line">ctx.moveTo(<span class="number">50</span>, <span class="number">50</span>);</span><br><span class="line"><span class="comment">// 设置经过某个位置</span></span><br><span class="line">ctx.lineTo(<span class="number">50</span>, <span class="number">300</span>);</span><br><span class="line">ctx.lineTo(<span class="number">300</span>, <span class="number">100</span>);</span><br><span class="line"><span class="comment">// 设置绘制的结束点</span></span><br><span class="line">ctx.closePath();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 起始路径的线段边缘设置为圆角</span></span><br><span class="line">ctx.lineCap = <span class="string">&quot;round&quot;</span>;</span><br><span class="line"><span class="comment">// 转折处的线段设置为圆角</span></span><br><span class="line">ctx.lineJoin = <span class="string">&quot;round&quot;</span></span><br><span class="line"><span class="comment">// 设置颜色样式</span></span><br><span class="line">ctx.strokeStyle = <span class="string">&quot;aqua&quot;</span>;</span><br><span class="line">ctx.lineWidth = <span class="number">20</span>;</span><br><span class="line">ctx.stroke()</span><br></pre></td></tr></table></figure><ul><li>绘制圆</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 默认为false，顺时针，true逆时针</span></span><br><span class="line"><span class="comment">// ctx,arc(x, y, radius, startAngle, endAngle, anticlockwise)</span></span><br><span class="line">ctx.arc(<span class="number">300</span>, <span class="number">300</span>, <span class="number">100</span>, <span class="number">0</span>, <span class="number">2</span> * <span class="built_in">Math</span>.PI, <span class="literal">true</span>);</span><br><span class="line">ctx.fillStyle = <span class="string">&quot;bisque&quot;</span>;</span><br><span class="line">ctx.fill();</span><br><span class="line">ctx.stroke();</span><br></pre></td></tr></table></figure><ul><li>弹幕字体</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ctx.font = <span class="string">&quot;50px sans-serif&quot;</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="number">1200</span>;</span><br><span class="line"><span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    ctx.clearRect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">1200</span>, <span class="number">1200</span>);</span><br><span class="line">    x -= <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">if</span> (x &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        x = <span class="number">1200</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ctx.fillText(<span class="string">&quot;hello&quot;</span>, x, <span class="number">100</span>);</span><br><span class="line">    ctx.strokeText(<span class="string">&quot;world&quot;</span>, x, <span class="number">200</span>);</span><br><span class="line">&#125;, <span class="number">40</span>)</span><br></pre></td></tr></table></figure><h3 id="绘制图形"><a href="#绘制图形" class="headerlink" title="绘制图形"></a>绘制图形</h3><ul><li>绘制图像（同一图片）</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> img = <span class="keyword">new</span> Image();</span><br><span class="line">img.src = <span class="string">&quot;./imgs/2.jpg&quot;</span>;</span><br><span class="line">img.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    ctx.drawImage(img, <span class="number">50</span>, <span class="number">100</span>, <span class="number">480</span>, <span class="number">270</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> img2 = <span class="keyword">new</span> Image();</span><br><span class="line">img2.src = <span class="string">&quot;./imgs/3.jpg&quot;</span>;</span><br><span class="line">img2.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    ctx.drawImage(img2, <span class="number">400</span>, <span class="number">400</span>, <span class="number">480</span>, <span class="number">270</span>, <span class="number">100</span>, <span class="number">400</span>, <span class="number">480</span>, <span class="number">270</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>绘制图像（视频抽帧）</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> video = <span class="built_in">document</span>.querySelector(<span class="string">&quot;video&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> interval = <span class="literal">null</span>;</span><br><span class="line">video.onplay = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    interval = <span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        ctx.drawImage(video, <span class="number">0</span>, <span class="number">800</span>, <span class="number">800</span>, <span class="number">400</span>)</span><br><span class="line">    &#125;, <span class="number">32</span>)</span><br><span class="line">&#125;</span><br><span class="line">video.onpause = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">clearInterval</span>(interval);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="绘制时钟"><a href="#绘制时钟" class="headerlink" title="绘制时钟"></a>绘制时钟</h2><p>ES6版本参考这个（附带效果）：<a href="https://github.com/llwodexue/clock">https://github.com/llwodexue/clock</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> canvas1 = <span class="built_in">document</span>.querySelector(<span class="string">&quot;#canvas1&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> ctx = canvas1.getContext(<span class="string">&quot;2d&quot;</span>);</span><br><span class="line">ctx.clearRect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">800</span>, <span class="number">600</span>);</span><br><span class="line">ctx.save();</span><br><span class="line">ctx.translate(<span class="number">400</span>, <span class="number">300</span>);</span><br><span class="line">ctx.rotate(-<span class="built_in">Math</span>.PI / <span class="number">2</span>);</span><br><span class="line"><span class="comment">// 绘制表盘</span></span><br><span class="line">ctx.beginPath();</span><br><span class="line">ctx.arc(<span class="number">0</span>, <span class="number">0</span>, <span class="number">200</span>, <span class="number">0</span>, <span class="number">2</span> * <span class="built_in">Math</span>.PI);</span><br><span class="line">ctx.strokeStyle = <span class="string">&quot;darkgrey&quot;</span>;</span><br><span class="line">ctx.lineWidth = <span class="number">10</span>;</span><br><span class="line">ctx.stroke();</span><br><span class="line">ctx.closePath();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">renderClock</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    ctx.clearRect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">800</span>, <span class="number">600</span>);</span><br><span class="line">    ctx.save();</span><br><span class="line">    ctx.translate(<span class="number">400</span>, <span class="number">300</span>);</span><br><span class="line">    ctx.rotate(-<span class="built_in">Math</span>.PI / <span class="number">2</span>);</span><br><span class="line">    <span class="comment">// 绘制表盘</span></span><br><span class="line">    ctx.beginPath();</span><br><span class="line">    ctx.arc(<span class="number">0</span>, <span class="number">0</span>, <span class="number">200</span>, <span class="number">0</span>, <span class="number">2</span> * <span class="built_in">Math</span>.PI);</span><br><span class="line">    ctx.strokeStyle = <span class="string">&quot;darkgrey&quot;</span>;</span><br><span class="line">    ctx.lineWidth = <span class="number">10</span>;</span><br><span class="line">    ctx.stroke();</span><br><span class="line">    ctx.closePath();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">drawLine</span>(<span class="params">&#123; count, start, end, width, color &#125;</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (; i &lt; count; i++) &#123;</span><br><span class="line">            ctx.beginPath();</span><br><span class="line">            ctx.rotate((<span class="number">2</span> * <span class="built_in">Math</span>.PI) / count);</span><br><span class="line">            ctx.moveTo(start, <span class="number">0</span>);</span><br><span class="line">            ctx.lineTo(end, <span class="number">0</span>);</span><br><span class="line">            ctx.lineWidth = width;</span><br><span class="line">            ctx.strokeStyle = color;</span><br><span class="line">            ctx.stroke();</span><br><span class="line">            ctx.closePath();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 绘制分针刻度线</span></span><br><span class="line">    drawLine(&#123;</span><br><span class="line">        count: <span class="number">60</span>,</span><br><span class="line">        start: <span class="number">180</span>,</span><br><span class="line">        end: <span class="number">190</span>,</span><br><span class="line">        width: <span class="number">2</span>,</span><br><span class="line">        color: <span class="string">&quot;orangered&quot;</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 绘制时针刻度线</span></span><br><span class="line">    drawLine(&#123;</span><br><span class="line">        count: <span class="number">12</span>,</span><br><span class="line">        start: <span class="number">180</span>,</span><br><span class="line">        end: <span class="number">200</span>,</span><br><span class="line">        width: <span class="number">10</span>,</span><br><span class="line">        color: <span class="string">&quot;darkgrey&quot;</span>,</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> time = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    <span class="keyword">let</span> min = time.getMinutes();</span><br><span class="line">    <span class="keyword">let</span> sec = time.getSeconds();</span><br><span class="line">    <span class="keyword">let</span> hour = time.getHours();</span><br><span class="line">    hour = hour &gt; <span class="number">12</span> ? hour - <span class="number">12</span> : hour;</span><br><span class="line">    <span class="comment">// 绘制秒针</span></span><br><span class="line">    ctx.save();</span><br><span class="line">    ctx.beginPath();</span><br><span class="line">    ctx.rotate(((<span class="number">2</span> * <span class="built_in">Math</span>.PI) / <span class="number">60</span>) * sec);</span><br><span class="line">    ctx.moveTo(-<span class="number">30</span>, <span class="number">0</span>);</span><br><span class="line">    ctx.lineTo(<span class="number">170</span>, <span class="number">0</span>);</span><br><span class="line">    ctx.lineWidth = <span class="number">2</span>;</span><br><span class="line">    ctx.strokeStyle = <span class="string">&quot;red&quot;</span>;</span><br><span class="line">    ctx.stroke();</span><br><span class="line">    ctx.closePath();</span><br><span class="line">    ctx.restore();</span><br><span class="line">    <span class="comment">// 绘制分针</span></span><br><span class="line">    ctx.save();</span><br><span class="line">    ctx.beginPath();</span><br><span class="line">    ctx.rotate(((<span class="number">2</span> * <span class="built_in">Math</span>.PI) / <span class="number">60</span>) * min + ((<span class="number">2</span> * <span class="built_in">Math</span>.PI) / <span class="number">3600</span>) * sec);</span><br><span class="line">    ctx.moveTo(-<span class="number">20</span>, <span class="number">0</span>);</span><br><span class="line">    ctx.lineTo(<span class="number">150</span>, <span class="number">0</span>);</span><br><span class="line">    ctx.lineWidth = <span class="number">4</span>;</span><br><span class="line">    ctx.strokeStyle = <span class="string">&quot;darkblue&quot;</span>;</span><br><span class="line">    ctx.stroke();</span><br><span class="line">    ctx.closePath();</span><br><span class="line">    ctx.restore();</span><br><span class="line">    <span class="comment">// 绘制时针</span></span><br><span class="line">    ctx.save();</span><br><span class="line">    ctx.beginPath();</span><br><span class="line">    ctx.rotate(</span><br><span class="line">        ((<span class="number">2</span> * <span class="built_in">Math</span>.PI) / <span class="number">12</span>) * hour +</span><br><span class="line">            ((<span class="number">2</span> * <span class="built_in">Math</span>.PI) / <span class="number">12</span> / <span class="number">60</span>) * min +</span><br><span class="line">            ((<span class="number">2</span> * <span class="built_in">Math</span>.PI) / <span class="number">12</span> / <span class="number">60</span> / <span class="number">60</span>) * sec</span><br><span class="line">    );</span><br><span class="line">    ctx.moveTo(-<span class="number">10</span>, <span class="number">0</span>);</span><br><span class="line">    ctx.lineTo(<span class="number">130</span>, <span class="number">0</span>);</span><br><span class="line">    ctx.lineWidth = <span class="number">6</span>;</span><br><span class="line">    ctx.strokeStyle = <span class="string">&quot;darkgrey&quot;</span>;</span><br><span class="line">    ctx.stroke();</span><br><span class="line">    ctx.closePath();</span><br><span class="line">    ctx.restore();</span><br><span class="line">    <span class="comment">// 绘制表圈</span></span><br><span class="line">    ctx.beginPath();</span><br><span class="line">    ctx.arc(<span class="number">0</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">2</span> * <span class="built_in">Math</span>.PI);</span><br><span class="line">    ctx.fillStyle = <span class="string">&quot;deepskyblue&quot;</span>;</span><br><span class="line">    ctx.fill();</span><br><span class="line">    ctx.closePath();</span><br><span class="line">    ctx.restore();</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    renderClock();</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure><h2 id="Canvas-绘图板"><a href="#Canvas-绘图板" class="headerlink" title="Canvas 绘图板"></a>Canvas 绘图板</h2><p>绘图板参考（附带效果）： <a href="https://github.com/llwodexue/canvas_painting">https://github.com/llwodexue/canvas_painting</a></p><p><img data-src="https://gitee.com/lilyn/pic/raw/master/company-img/%E7%BB%98%E5%9B%BE%E6%9D%BF.gif"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.jianshu.com/p/266b4fa2c446">Fira Code | 为写程序而生的字体</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Canvas_API/Tutorial">Canvas教程</a></p><p><a href="https://stackoverflow.com/questions/3974827/detecting-touch-screen-devices-with-javascript">Detecting touch screen devices with Javascript</a></p><p><a href="https://www.w3school.com.cn/tags/html_ref_canvas.asp">HTML 5 Canvas 参考手册</a></p>]]></content>
    
    
    <summary type="html">Canvas画圆、时钟、绘图板</summary>
    
    
    
    <category term="JavaScript" scheme="http://llmysnow.top/categories/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="http://llmysnow.top/tags/JavaScript/"/>
    
    <category term="Canvas" scheme="http://llmysnow.top/tags/Canvas/"/>
    
  </entry>
  
  <entry>
    <title>JS 实现 sizeOf 函数，计算 object 占用了多少个 bytes</title>
    <link href="http://llmysnow.top/posts/9cad4e3f/"/>
    <id>http://llmysnow.top/posts/9cad4e3f/</id>
    <published>2021-05-23T05:43:10.501Z</published>
    <updated>2021-05-26T01:23:07.763Z</updated>
    
    <content type="html"><![CDATA[<h2 id="实现-sizeOf-函数，传入一个-object，计算这个-Object-占用了多少个-bytes"><a href="#实现-sizeOf-函数，传入一个-object，计算这个-Object-占用了多少个-bytes" class="headerlink" title="实现 sizeOf 函数，传入一个 object，计算这个 Object 占用了多少个 bytes"></a>实现 sizeOf 函数，传入一个 object，计算这个 Object 占用了多少个 bytes</h2><p>可以参考：<a href="https://github.com/miktam/sizeof">https://github.com/miktam/sizeof</a></p><ul><li>Number：一个数字 8 字节（64 位存储）</li><li>String：一个字符 2 字节</li><li>Boolean：4 个字节</li></ul><a id="more"></a><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> same = &#123;&#125;</span><br><span class="line"><span class="keyword">const</span> testData = &#123;</span><br><span class="line">  a: <span class="number">111</span>,</span><br><span class="line">  b: <span class="string">&#x27;ccc&#x27;</span>,</span><br><span class="line">  <span class="number">222</span>: <span class="literal">false</span>,</span><br><span class="line">  c: same,</span><br><span class="line">  d: same,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> seen = <span class="keyword">new</span> <span class="built_in">WeakSet</span>()</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sizeOfObj</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (obj === <span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> bytes = <span class="number">0</span></span><br><span class="line">  <span class="comment">// 对象里的key也是占用内存空间的</span></span><br><span class="line">  <span class="keyword">const</span> props = <span class="built_in">Object</span>.keys(obj)</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; props.length; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> key = props[i]</span><br><span class="line">    <span class="comment">// 无论value是否重复，都需要计算key</span></span><br><span class="line">    bytes += calculator(key)</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> obj[key] === <span class="string">&#x27;object&#x27;</span> &amp;&amp; obj[key] !== <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="comment">// 这里需要注意value使用相同内存空间（只需计算一次内存）</span></span><br><span class="line">      <span class="keyword">if</span> (seen.has(obj[key])) <span class="keyword">continue</span></span><br><span class="line">      seen.add(obj[key])</span><br><span class="line">    &#125;</span><br><span class="line">    bytes += calculator(obj[key])</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> bytes</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">calculator</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> objType = <span class="keyword">typeof</span> obj</span><br><span class="line">  <span class="keyword">switch</span> (objType) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;string&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> obj.length * <span class="number">2</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;boolean&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="number">4</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;number&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="number">8</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;object&#x27;</span>:</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(obj)) &#123;</span><br><span class="line">        <span class="comment">// 数组处理 [1,2] [&#123;x:1&#125;,&#123;y:2&#125;]</span></span><br><span class="line">        <span class="keyword">return</span> obj.map(calculator).reduce(<span class="function">(<span class="params">res, cur</span>) =&gt;</span> res + cur, <span class="number">0</span>)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 对象处理</span></span><br><span class="line">        <span class="keyword">return</span> sizeOfObj(obj)</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(calculator(testData)) <span class="comment">// 32</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;实现-sizeOf-函数，传入一个-object，计算这个-Object-占用了多少个-bytes&quot;&gt;&lt;a href=&quot;#实现-sizeOf-函数，传入一个-object，计算这个-Object-占用了多少个-bytes&quot; class=&quot;headerlink&quot; title=&quot;实现 sizeOf 函数，传入一个 object，计算这个 Object 占用了多少个 bytes&quot;&gt;&lt;/a&gt;实现 sizeOf 函数，传入一个 object，计算这个 Object 占用了多少个 bytes&lt;/h2&gt;&lt;p&gt;可以参考：&lt;a href=&quot;https://github.com/miktam/sizeof&quot;&gt;https://github.com/miktam/sizeof&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Number：一个数字 8 字节（64 位存储）&lt;/li&gt;
&lt;li&gt;String：一个字符 2 字节&lt;/li&gt;
&lt;li&gt;Boolean：4 个字节&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="JavaScript" scheme="http://llmysnow.top/categories/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="http://llmysnow.top/tags/JavaScript/"/>
    
    <category term="字节数" scheme="http://llmysnow.top/tags/%E5%AD%97%E8%8A%82%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>Vue 大量数据展示 卡顿解决方案（滚动展示）</title>
    <link href="http://llmysnow.top/posts/b05a9b29/"/>
    <id>http://llmysnow.top/posts/b05a9b29/</id>
    <published>2021-05-13T08:03:22.701Z</published>
    <updated>2021-05-13T09:18:17.893Z</updated>
    
    <content type="html"><![CDATA[<h2 id="需求分析（长列表展示）"><a href="#需求分析（长列表展示）" class="headerlink" title="需求分析（长列表展示）"></a>需求分析（长列表展示）</h2><p>页面某处需要渲染 <strong>1w+</strong> 条数据，并需要<strong>滚动展示</strong>，这时如果直接把这些数据渲染到页面上，会导致系统内存大量被占用，导致页面卡顿或崩溃</p><p>我们都知道，每次 DOM 修改，浏览器都会重新计算元素布局，再重新渲染（回流 / 重绘）。如果数据量很大，页面计算时间就会加成，造成页面卡顿</p><a id="more"></a><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><ul><li>根源：DOM 元素太多</li><li>思路：限制元素数量 / 虚拟DOM</li></ul><p><img data-src="https://gitee.com/lilyn/pic/raw/master/company-img/bigData.gif"></p><p>后台数据格式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        checked: <span class="number">0</span>，</span><br><span class="line">        data: <span class="string">&quot;xxx&quot;</span>，</span><br><span class="line">        label: <span class="string">&quot;xxx&quot;</span>，</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>Vue 中就有一个现成的轮子可以解决这个问题：<a href="https://github.com/Akryum/vue-virtual-scroller#recyclescroller">vue-virtual-scroller</a></p><ol><li>安装 <code>vue-virtual-scroller</code> 插件</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save vue-virtual-scroller</span><br></pre></td></tr></table></figure><ol start="2"><li>在 <code>main.js</code> 引入</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注意：别忘了引用这个css</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;vue-virtual-scroller/dist/vue-virtual-scroller.css&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; RecycleScroller &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-virtual-scroller&#x27;</span></span><br><span class="line"></span><br><span class="line">Vue.component(<span class="string">&#x27;RecycleScroller&#x27;</span>, RecycleScroller)</span><br></pre></td></tr></table></figure><ol start="3"><li>在组件里使用<ul><li><code>items</code>：呈现数据</li><li><code>item-size</code>：呈现数据的大小 / 高度</li><li><code>key-filed</code>：如果 <code>items</code> 是对象，需要用这个做唯一标识</li></ul></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;RecycleScroller</span><br><span class="line">  style=&quot;height: 200px; overflow: auto&quot;</span><br><span class="line">  class=&quot;scroller&quot;</span><br><span class="line">  :items=&quot;listItem&quot;</span><br><span class="line">  :item-size=&quot;20&quot;</span><br><span class="line">  key-field=&quot;data&quot;</span><br><span class="line">&gt;</span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot</span>=<span class="string">&quot;&#123; item &#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-checkbox</span> <span class="attr">:key</span>=<span class="string">&quot;item.data&quot;</span> <span class="attr">:label</span>=<span class="string">&quot;item.label&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">RecycleScroller</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line">            listItem: []</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>使用  <code>vue-virtual-scroller</code> 插件展示大量数据，是可以比较流畅的渲染 / 滚动的</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;需求分析（长列表展示）&quot;&gt;&lt;a href=&quot;#需求分析（长列表展示）&quot; class=&quot;headerlink&quot; title=&quot;需求分析（长列表展示）&quot;&gt;&lt;/a&gt;需求分析（长列表展示）&lt;/h2&gt;&lt;p&gt;页面某处需要渲染 &lt;strong&gt;1w+&lt;/strong&gt; 条数据，并需要&lt;strong&gt;滚动展示&lt;/strong&gt;，这时如果直接把这些数据渲染到页面上，会导致系统内存大量被占用，导致页面卡顿或崩溃&lt;/p&gt;
&lt;p&gt;我们都知道，每次 DOM 修改，浏览器都会重新计算元素布局，再重新渲染（回流 / 重绘）。如果数据量很大，页面计算时间就会加成，造成页面卡顿&lt;/p&gt;</summary>
    
    
    
    <category term="Vue" scheme="http://llmysnow.top/categories/Vue/"/>
    
    
    <category term="Vue" scheme="http://llmysnow.top/tags/Vue/"/>
    
    <category term="滚动展示" scheme="http://llmysnow.top/tags/%E6%BB%9A%E5%8A%A8%E5%B1%95%E7%A4%BA/"/>
    
    <category term="大数据" scheme="http://llmysnow.top/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
  <entry>
    <title>Axios 二次封装</title>
    <link href="http://llmysnow.top/posts/84a23fec/"/>
    <id>http://llmysnow.top/posts/84a23fec/</id>
    <published>2021-05-06T08:45:20.419Z</published>
    <updated>2021-05-26T01:25:22.098Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>目的：把当前项目中，所有请求的公共部分进行统一处理</p></blockquote><ul><li><code>axios.defaults</code> 设置公共的配置项</li><li><code>axios.interceptors</code> 基于拦截器做统一处理</li></ul><a id="more"></a><p>配置请求接口的统一前缀</p><ul><li>开发 <code>development</code></li><li>测试 <code>test</code></li><li>灰度 <code>grayscale</code></li><li>生成 <code>production</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Qs <span class="keyword">from</span> <span class="string">&#x27;qs&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;@/router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; Message &#125; <span class="keyword">from</span> <span class="string">&#x27;element-ui&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Cookies <span class="keyword">from</span> <span class="string">&#x27;js-cookie&#x27;</span></span><br><span class="line"></span><br><span class="line">axios.defaults.baseURL =</span><br><span class="line">  process.env.NODE_ENV === <span class="string">&#x27;development&#x27;</span> ? <span class="string">&#x27;&#x27;</span> : <span class="string">&#x27;http://127.0.0.1:9999&#x27;</span></span><br><span class="line">axios.defaults.withCredentials = <span class="literal">true</span> <span class="comment">// 设置跨域请求中是否携带资源凭证</span></span><br><span class="line">axios.defaults.timeout = <span class="number">1000</span></span><br><span class="line">axios.defaults.headers.post[<span class="string">&#x27;Content-Type&#x27;</span>] =</span><br><span class="line">  <span class="string">&#x27;application/x-www-form-urlencoded;charset=UTF-8&#x27;</span> <span class="comment">// 配置公共的自定义请求头信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// POST系列请求对于请求主体信息的统一格式化</span></span><br><span class="line">axios.defaults.transformRequest = <span class="function"><span class="keyword">function</span> (<span class="params">data, headers</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (data === <span class="literal">null</span> || <span class="keyword">typeof</span> data !== <span class="string">&#x27;object&#x27;</span>) <span class="keyword">return</span> data</span><br><span class="line">  <span class="keyword">let</span> contentType = headers[<span class="string">&#x27;Content-Type&#x27;</span>] || headers.post[<span class="string">&#x27;Content-Type&#x27;</span>]</span><br><span class="line">  <span class="keyword">if</span> (contentType.includes(<span class="string">&#x27;urlencoded&#x27;</span>)) <span class="keyword">return</span> Qs.stringify(data)</span><br><span class="line">  <span class="keyword">if</span> (contentType.includes(<span class="string">&#x27;json&#x27;</span>)) <span class="keyword">return</span> <span class="built_in">JSON</span>.stringify(data)</span><br><span class="line">  <span class="keyword">return</span> data</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 设置响应状态码的校验处理&#123;状态码哪些是算请求成功，哪些算失败&#125;</span></span><br><span class="line">axios.defaults.validateStatus = <span class="function"><span class="keyword">function</span> (<span class="params">status</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> status &gt;= <span class="number">200</span> &amp;&amp; status &lt; <span class="number">400</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 请求拦截器，在向服务器发送请求之前，拦截到现有的配置，再去做一些统一修改</span></span><br><span class="line">axios.interceptors.request.use(</span><br><span class="line">  config =&gt; &#123;</span><br><span class="line">    <span class="comment">// 是否需要设置 token</span></span><br><span class="line">    <span class="keyword">const</span> token = Cookies.get(<span class="string">&#x27;token&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> (token) &#123;</span><br><span class="line">      config.headers[<span class="string">&#x27;Authorization&#x27;</span>] = token</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> config</span><br><span class="line">  &#125;,</span><br><span class="line">  error =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error) <span class="comment">// for debug</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 响应拦截器，当前请求有结果之后，做一些成功或者失败的统一提示处理等...</span></span><br><span class="line">axios.interceptors.response.use(</span><br><span class="line">  response =&gt; &#123;</span><br><span class="line">    <span class="comment">// 服务器正常返回结果 &amp; validateStatus状态码校验成功</span></span><br><span class="line">    <span class="keyword">return</span> response.data</span><br><span class="line">  &#125;,</span><br><span class="line">  error =&gt; &#123;</span><br><span class="line">    <span class="comment">// 取消请求也会在这里拦截到</span></span><br><span class="line">    <span class="keyword">if</span> (error.message === <span class="string">&#x27;取消请求&#x27;</span>) <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(<span class="string">&#x27;取消请求&#x27;</span>)</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    失败情况：</span></span><br><span class="line"><span class="comment">    1.服务器返回了结果但是状态码没有经过validateStatus校验</span></span><br><span class="line"><span class="comment">    2.服务器压根没有返回任何的结果</span></span><br><span class="line"><span class="comment">    3.请求中断或者超时</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">let</span> response = error.response</span><br><span class="line">    <span class="keyword">if</span> (response) &#123;</span><br><span class="line">      <span class="comment">// @1</span></span><br><span class="line">      <span class="keyword">switch</span> (response.status) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">401</span>:</span><br><span class="line">          router.push(&#123; <span class="attr">path</span>: <span class="string">&#x27;/login&#x27;</span> &#125;)</span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">500</span>:</span><br><span class="line">          router.push(&#123; <span class="attr">path</span>: <span class="string">&#x27;/login&#x27;</span> &#125;)</span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">      &#125;</span><br><span class="line">      Message(&#123;</span><br><span class="line">        message: <span class="string">&#x27;访问失败，请联系系统管理员&#x27;</span>,</span><br><span class="line">        type: <span class="string">&#x27;warning&#x27;</span>,</span><br><span class="line">        duration: <span class="number">3</span> * <span class="number">1000</span>,</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (error &amp;&amp; error.code === <span class="string">&#x27;ECONNABORTED&#x27;</span>) &#123;</span><br><span class="line">        Message(&#123;</span><br><span class="line">          message: <span class="string">&#x27;服务器拒绝了您的请求&#x27;</span>,</span><br><span class="line">          type: <span class="string">&#x27;warning&#x27;</span>,</span><br><span class="line">          duration: <span class="number">3</span> * <span class="number">1000</span>,</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (!navigator.onLine) &#123;</span><br><span class="line">        Message(&#123;</span><br><span class="line">          message: <span class="string">&#x27;设备已离线&#x27;</span>,</span><br><span class="line">          type: <span class="string">&#x27;warning&#x27;</span>,</span><br><span class="line">          duration: <span class="number">3</span> * <span class="number">1000</span>,</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> axios</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;目的：把当前项目中，所有请求的公共部分进行统一处理&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;axios.defaults&lt;/code&gt; 设置公共的配置项&lt;/li&gt;
&lt;li&gt;&lt;code&gt;axios.interceptors&lt;/code&gt; 基于拦截器做统一处理&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Vue" scheme="http://llmysnow.top/categories/Vue/"/>
    
    
    <category term="Vue" scheme="http://llmysnow.top/tags/Vue/"/>
    
    <category term="Axios" scheme="http://llmysnow.top/tags/Axios/"/>
    
    <category term="封装" scheme="http://llmysnow.top/tags/%E5%B0%81%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>手撕 Promise（内附then链实现）</title>
    <link href="http://llmysnow.top/posts/c7bac255/"/>
    <id>http://llmysnow.top/posts/c7bac255/</id>
    <published>2021-05-06T08:42:11.069Z</published>
    <updated>2021-05-26T01:27:12.431Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h2><h3 id="了解-Promise"><a href="#了解-Promise" class="headerlink" title="了解  Promise"></a>了解  Promise</h3><p>Promise 是一个异步操作返回的对象，用来传递异步操作的消息</p><p><strong>可以解决的问题</strong></p><ol><li>解决回调地狱问题，不会导致难以维护</li><li>合并多个异步请求，节约时间</li></ol><a id="more"></a><p><strong>Promise 的三种状态</strong></p><ol><li>Pending 等待态</li><li>Fulfilled 成功态</li><li>Rejected 失败态</li></ol><h3 id="使用-Promise"><a href="#使用-Promise" class="headerlink" title="使用 Promise"></a>使用 Promise</h3><p><strong>Promise.resolve：将现有对象转为 Promise 对象，这个对象处于 resolve 状态</strong></p><p>作用：</p><ul><li>改状态</li><li>发布事件池子里的方法</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.resolve([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]).then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;); <span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure><p><strong>Promise.reject：将现有对象转为 Promise 对象，这个对象处于 reject 状态</strong></p><p>作用：</p><ul><li>改状态</li><li>发布事件池子里的方法</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.reject([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]).then(<span class="literal">null</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">&#125;); <span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure><p><strong>Promise.then：用来指定 Promise 对象的状态改变时要执行的操作</strong></p><ul><li>then 是同步的，then 里的回调函数是异步的</li></ul><p><strong>注意几点：</strong></p><ul><li>如果当前 then 中回调函数的执行结果是一个 Promise 实例，那当前这个实例的状态会接管下一个 then 中回调函数的执行</li><li>如果当前的 then 中的回调函数执行结果不是一个 Promise 实例，那下一个then中会默认执行成功的回调函数</li><li>当 Promise 的回调函数执行的时候出现了错误，那当前的实例会变成失败态</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    resolve(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">    <span class="comment">//reject(&#x27;fail&#x27;);</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">p.then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;data：&quot;</span>, data);</span><br><span class="line">    &#125;,<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;err：&quot;</span>, err);</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>Promise.all：接收一个数组，数组内是 Promise 实例。必须全部成功才表示成功</strong></p><p><strong>Promise.race：接收一个数组，数组内是 Promise 实例。最早返回的对象成功，就变成成功态；如果失败了，就变成失败态</strong></p><h2 id="封装-Promise"><a href="#封装-Promise" class="headerlink" title="封装 Promise"></a>封装 Promise</h2><p>Promise 是一个 ES6 的内置类</p><ul><li>当 new Promise 的时候，会给当前实例增加状态（默认是 pending 等待态）和两个事件池（成功和失败的事件池）</li><li>还会给 Promise 的内部传递一个 executor 函数，此函数会立即执行，而且此函数会传递两个形参函数 resolve 和 reject，形参对应的实参函数在 Promise 内部，当执行任何一个函数的时候，都会做两件事<ol><li>去改变当前 Promise 实例的状态（<strong>改状态</strong>）</li><li><strong>发布对应池子里的事件</strong></li></ol></li><li>Promise 的类的原型上还有一个 then 方法，用来给当前的 Promise 实例的事件池子订阅方法，而且还会返回一个新的 Promise 实例</li></ul><h3 id="不考虑-then-链式调用"><a href="#不考虑-then-链式调用" class="headerlink" title="不考虑 then 链式调用"></a>不考虑 then 链式调用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPromise</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">executor</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.state = <span class="string">&quot;pending&quot;</span>;</span><br><span class="line">        <span class="comment">// Promise实例可以多次then，为了保证then中方法按顺序执行，这里把then中成功的回调和失败的回调存放到数组内</span></span><br><span class="line">        <span class="built_in">this</span>.fulfilledEvent = [];</span><br><span class="line">        <span class="built_in">this</span>.rejectedEvent = [];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> resolve = <span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.state !== <span class="string">&quot;pending&quot;</span>) <span class="keyword">return</span>;</span><br><span class="line">            <span class="built_in">this</span>.state = <span class="string">&quot;resolved&quot;</span>;</span><br><span class="line">            <span class="comment">// resolve其实是一个微任务，这里宏任务替换一下</span></span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="comment">// 发布方法</span></span><br><span class="line">                <span class="built_in">this</span>.fulfilledEvent.forEach(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="keyword">typeof</span> item === <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">                        item(result);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;, <span class="number">0</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">let</span> reject = <span class="function">(<span class="params">reason</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.state !== <span class="string">&quot;pending&quot;</span>) <span class="keyword">return</span>;</span><br><span class="line">            <span class="built_in">this</span>.state = <span class="string">&quot;rejected&quot;</span>;</span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.rejectedEvent.forEach(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="keyword">typeof</span> item === <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">                        item(reason);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;, <span class="number">0</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            executor(resolve, reject);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">            reject(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">then</span>(<span class="params">onFulfilled, onRejected</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.state === <span class="string">&quot;resolved&quot;</span>) &#123;</span><br><span class="line">            <span class="comment">// 订阅方法</span></span><br><span class="line">            <span class="built_in">this</span>.fulfilledEvent.push(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">                onFulfilled(result);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.state === <span class="string">&quot;rejected&quot;</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.rejectedEvent.push(<span class="function">(<span class="params">reason</span>) =&gt;</span> &#123;</span><br><span class="line">                onRejected(reason);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>可以简单测试一下</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    resolve(<span class="number">100</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">p.then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;res: &quot;</span>, res);</span><br><span class="line">    &#125;,<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;err: &quot;</span>, err);</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br><span class="line"><span class="comment">// data: 100</span></span><br></pre></td></tr></table></figure><h3 id="then-链式调用"><a href="#then-链式调用" class="headerlink" title="then 链式调用"></a>then 链式调用</h3><ul><li><p>当我们连续调用 then 的时候（p1），如果当前 then 中的回调函数执行不返回一个 Promise 实例，那当前的 then（p1） 默认是成功态，然后去发布它的成功事件池子里的方法</p></li><li><p>如果当前 then 中的回调函数执行返回一个 Promise（p2） 实例，那这个 Promise（p2） 实例就会接管（p1）实例的状态，然后去影响（p1）事件池子里的方法发布</p><p>原理：把（p1）的 resolve 和 reject 放到 （p2） 的对应的事件池子里，然后（p2）去发布自己池子里的的方法时，（p1）的 resolve 和 reject 就会执行，从而达到间接的让 （p2）去发布（p1）池子里的方法</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPromise</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">executor</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.state = <span class="string">&quot;pending&quot;</span>;</span><br><span class="line">        <span class="built_in">this</span>.fulfilledEvent = [];</span><br><span class="line">        <span class="built_in">this</span>.rejectedEvent = [];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> resolve = <span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.state !== <span class="string">&quot;pending&quot;</span>) <span class="keyword">return</span>;</span><br><span class="line">            <span class="built_in">this</span>.state = <span class="string">&quot;resolved&quot;</span>;</span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.fulfilledEvent.forEach(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="keyword">typeof</span> item === <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">                        item(result);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;, <span class="number">0</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">let</span> reject = <span class="function">(<span class="params">reason</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.state !== <span class="string">&quot;pending&quot;</span>) <span class="keyword">return</span>;</span><br><span class="line">            <span class="built_in">this</span>.state = <span class="string">&quot;rejected&quot;</span>;</span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.rejectedEvent.forEach(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="keyword">typeof</span> item === <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">                        item(reason);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;, <span class="number">0</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            executor(resolve, reject);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">            reject(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    then(onFulfilled = <span class="function">() =&gt;</span> &#123;&#125;, onRejected = <span class="function">() =&gt;</span> &#123;&#125;) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.fulfilledEvent.push(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> fn = onFulfilled(result);</span><br><span class="line">                fn <span class="keyword">instanceof</span> MyPromise</span><br><span class="line">                    ? fn.then(resolve, reject)</span><br><span class="line">                    : resolve(result);</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="built_in">this</span>.rejectedEvent.push(<span class="function">(<span class="params">reason</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> fn = onRejected(reason);</span><br><span class="line">                fn <span class="keyword">instanceof</span> MyPromise</span><br><span class="line">                    ? fn.then(resolve, reject)</span><br><span class="line">                    : resolve(reason);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>可以简单测试一下</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    resolve(<span class="number">100</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p2 = p1.then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;p1 res: &quot;</span>, res);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            resolve(<span class="number">200</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;p1 err: &quot;</span>, err);</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">p2.then(res) =&gt; &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;p2 res: &quot;</span>, res);</span><br><span class="line">    &#125;,<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;p2 err: &quot;</span>, err);</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br><span class="line"><span class="comment">// p1 res:  100</span></span><br><span class="line"><span class="comment">// p2 res:  200</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Promise&quot;&gt;&lt;a href=&quot;#Promise&quot; class=&quot;headerlink&quot; title=&quot;Promise&quot;&gt;&lt;/a&gt;Promise&lt;/h2&gt;&lt;h3 id=&quot;了解-Promise&quot;&gt;&lt;a href=&quot;#了解-Promise&quot; class=&quot;headerlink&quot; title=&quot;了解  Promise&quot;&gt;&lt;/a&gt;了解  Promise&lt;/h3&gt;&lt;p&gt;Promise 是一个异步操作返回的对象，用来传递异步操作的消息&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;可以解决的问题&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;解决回调地狱问题，不会导致难以维护&lt;/li&gt;
&lt;li&gt;合并多个异步请求，节约时间&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="JavaScript" scheme="http://llmysnow.top/categories/JavaScript/"/>
    
    
    <category term="源码分析" scheme="http://llmysnow.top/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
    <category term="JavaScript" scheme="http://llmysnow.top/tags/JavaScript/"/>
    
    <category term="Promise" scheme="http://llmysnow.top/tags/Promise/"/>
    
    <category term="then链" scheme="http://llmysnow.top/tags/then%E9%93%BE/"/>
    
  </entry>
  
  <entry>
    <title>手撕React.createElement和ReactDOM.render</title>
    <link href="http://llmysnow.top/posts/7e319c36/"/>
    <id>http://llmysnow.top/posts/7e319c36/</id>
    <published>2021-05-06T08:40:10.928Z</published>
    <updated>2021-05-26T01:27:20.394Z</updated>
    
    <content type="html"><![CDATA[<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm install create-react-app -g</span><br><span class="line">create-react-app demo</span><br><span class="line"><span class="built_in">cd</span> demo</span><br><span class="line">yarn start</span><br></pre></td></tr></table></figure><a id="more"></a><ul><li>这时已经新建好了一个 react 项目，接下来 index.js 写入如下代码</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">console.log(</span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">&quot;h1&quot;</span> <span class="attr">className</span>=<span class="string">&quot;title&quot;</span> <span class="attr">key</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">    hello world</span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">color:</span> &#x27;<span class="attr">red</span>&#x27; &#125;&#125;&gt;</span>cat<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li>如下对象就是一个 React 对象，也就是虚拟 DOM</li></ul><p><img data-src="https://img-blog.csdnimg.cn/img_convert/723b629d0e10b5bd476871bed912c40b.png" alt="虚拟dom对象示例"></p><ul><li>接下来我们打开<a href="https://www.babeljs.cn/repl">babel 官网</a>，勾选 <code>react</code> ，粘贴上去。通过 babel 把 jsx 对象转换成 React 中的 createElement 函数</li></ul><p><img data-src="https://img-blog.csdnimg.cn/img_convert/c9c1436f832951ebbe63cb587d77585f.png" alt="babel_react"></p><ul><li>在项目中写入如下代码</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">&#x27;react-dom&#x27;</span></span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;h1 id=<span class="string">&quot;h1&quot;</span> className=<span class="string">&quot;title&quot;</span> key=<span class="string">&quot;1&quot;</span>&gt;</span><br><span class="line">    hello world</span><br><span class="line">    &lt;span style=&#123;&#123; <span class="attr">color</span>: <span class="string">&#x27;red&#x27;</span> &#125;&#125;&gt;cat&lt;/span&gt;</span><br><span class="line">  &lt;/h1&gt;,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li>效果图如下：</li></ul><p><img data-src="https://img-blog.csdnimg.cn/img_convert/1e643e0830b8155a555ee3261eed6a4a.png" alt="渲染示例"></p><p><strong>过程：</strong></p><ol><li>通过 babel（babel-preset-react-app）转换成 jsx 对象</li><li>默认会把 createElement 函数执行，得到 JSX 对象（虚拟 DOM 对象）<ul><li>第一个参数：type，后期要创建元素的标签名（或是组件）</li><li>第二个参数：props，属性对象，包含当前元素标签上设置的各个属性及属性值（不设置，props 值是 null）</li><li>第三个以后的参数：children，当前元素的所有子节点（没有写，则不存在这个参数），如果有，有几个就依次传递几个<ul><li>如果是文本节点，则直接传递文本内容</li><li>如果是元素节点，则把元素依次变为 createElement 格式，把执行的返回值，作为参数传递进来</li></ul></li></ul></li><li>ReactDOM.render，把虚拟 DOM 对象转换为真实 DOM 对象</li></ol><h3 id="React-中-createElement-函数"><a href="#React-中-createElement-函数" class="headerlink" title="React 中 createElement 函数"></a>React 中 createElement 函数</h3><p><strong>React.createElement 返回值</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  $$typeof: <span class="built_in">Symbol</span>(react.element),</span><br><span class="line">  key: <span class="literal">null</span>,</span><br><span class="line">  ref: <span class="literal">null</span>,</span><br><span class="line">  <span class="comment">// 存储的是传递给createElement的第一个参数</span></span><br><span class="line">  type: <span class="string">&#x27;h1&#x27;</span>,</span><br><span class="line">  <span class="comment">// 首先会把传递给createElement的属性对象，一项项的赋值给对象的props</span></span><br><span class="line">  props: &#123;</span><br><span class="line">    <span class="comment">// 并且返回对象的prop还包含children，记录当前元素的子节点（可能是一个值&#123;字符串或JSX返回的对象&#125;，如果有多个子节点，则其是一个数组）</span></span><br><span class="line">    children: <span class="string">&#x27;hello world&#x27;</span>,</span><br><span class="line">    className: <span class="string">&#x27;title&#x27;</span>,</span><br><span class="line">    id: <span class="string">&#x27;title&#x27;</span>,</span><br><span class="line">  &#125;, <span class="comment">// 即使没有传递任何属性，也没有任何的子节点，返回对象的props也是一个&#123;&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>这里需要注意，key 和 ref 虽然都在 props 里，但是这两个不在 props 里添加，而与 props 同级</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">React.createElement = <span class="function"><span class="keyword">function</span> <span class="title">createElement</span>(<span class="params">type, props, ...children</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> len = children.length,</span><br><span class="line">    obj = &#123;</span><br><span class="line">      type,</span><br><span class="line">      props: &#123;&#125;,</span><br><span class="line">      key: <span class="literal">null</span>,</span><br><span class="line">      ref: <span class="literal">null</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">// 处理传递进来的属性</span></span><br><span class="line">  <span class="keyword">if</span> (props !== <span class="literal">null</span> &amp;&amp; <span class="keyword">typeof</span> props === <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">    each(props, <span class="function">(<span class="params">value, key</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="regexp">/^(key|ref)$/</span>.test(key)) &#123;</span><br><span class="line">        obj[key] = value[key]</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      obj.props[key] = value[key]</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// for in 循环性能较差</span></span><br><span class="line">    <span class="comment">/* for (let key in props) &#123;</span></span><br><span class="line"><span class="comment">      if (!props.hasOwnProperty(key)) break</span></span><br><span class="line"><span class="comment">      if (/^(key|ref)$/.test(key)) &#123;</span></span><br><span class="line"><span class="comment">        obj[key] = props[key]</span></span><br><span class="line"><span class="comment">        continue</span></span><br><span class="line"><span class="comment">      &#125;</span></span><br><span class="line"><span class="comment">      obj.props[key] = props[key]</span></span><br><span class="line"><span class="comment">    &#125; */</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 处理子节点</span></span><br><span class="line">  <span class="keyword">if</span> (len &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    obj.props.children = len === <span class="number">1</span> ? children[<span class="number">0</span>] : children</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> obj</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>由于 <code>for...in...</code> 循环性能较差，这里稍微优化一下（封装一个 each 方法）</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> each = <span class="function"><span class="keyword">function</span> <span class="title">each</span>(<span class="params">obj, callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (obj == <span class="literal">null</span> || <span class="keyword">typeof</span> obj !== <span class="string">&#x27;object&#x27;</span>)</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">&#x27;obj must be an object&#x27;</span>)</span><br><span class="line">  <span class="keyword">let</span> keys = <span class="built_in">Object</span>.keys(obj),</span><br><span class="line">    key,</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">Symbol</span> !== <span class="string">&#x27;undefined&#x27;</span>) &#123;</span><br><span class="line">    keys = keys.concat(<span class="built_in">Object</span>.getOwnPropertySymbols(obj))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (; i &lt; keys.length; i++) &#123;</span><br><span class="line">    key = keys[i]</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> callback === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">      callback(obj[key], key)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ReactDOM-中-render-函数"><a href="#ReactDOM-中-render-函数" class="headerlink" title="ReactDOM 中 render 函数"></a>ReactDOM 中 render 函数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">ReactDOM.render = <span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params">obj, container, callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> &#123; type, props &#125; = obj,</span><br><span class="line">    element</span><br><span class="line">  <span class="comment">// 核心思想：动态创建指定类型的元素，插入到指定容器当中</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> type === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">    element = <span class="built_in">document</span>.createElement(type)</span><br><span class="line">    each(props, <span class="function">(<span class="params">value, key</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (key === <span class="string">&#x27;className&#x27;</span>) &#123;</span><br><span class="line">        element.setAttribute(<span class="string">&#x27;class&#x27;</span>, value)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (key === <span class="string">&#x27;style&#x27;</span>) &#123;</span><br><span class="line">        <span class="comment">// 把style对象中的每一项分别给元素设置样式 value:style对象</span></span><br><span class="line">        each(value, <span class="function">(<span class="params">item, attr</span>) =&gt;</span> &#123;</span><br><span class="line">          element.style[attr] = item</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (key === <span class="string">&#x27;children&#x27;</span>) &#123;</span><br><span class="line">        <span class="comment">// 肯定有子节点 value:children属性值</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">Array</span>.isArray(value)) value = [value] <span class="comment">// 让它都是数组</span></span><br><span class="line">        value.forEach(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="comment">// item每个子节点</span></span><br><span class="line">          <span class="comment">// 1.文本子节点：直接创建一个文本节点，插入到element中</span></span><br><span class="line">          <span class="comment">// 2.元素子节点：新的jsx对象（createElement），我们需要把它也创建成为一个元素标签，插入到element中即可</span></span><br><span class="line">          <span class="keyword">if</span> (<span class="keyword">typeof</span> item === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> textNode = <span class="built_in">document</span>.createTextNode(item)</span><br><span class="line">            element.appendChild(textNode)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">// 递归处理</span></span><br><span class="line">          render(item, element)</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      element.setAttribute(key, value)</span><br><span class="line">    &#125;)</span><br><span class="line">    container.appendChild(element)</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> callback === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">      callback()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 如果type是一个组件，有不同的处理方案</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;准备工作&quot;&gt;&lt;a href=&quot;#准备工作&quot; class=&quot;headerlink&quot; title=&quot;准备工作&quot;&gt;&lt;/a&gt;准备工作&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm install create-react-app -g&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;create-react-app demo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; demo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;yarn start&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="React" scheme="http://llmysnow.top/categories/React/"/>
    
    
    <category term="源码分析" scheme="http://llmysnow.top/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
    <category term="React" scheme="http://llmysnow.top/tags/React/"/>
    
    <category term="createElement" scheme="http://llmysnow.top/tags/createElement/"/>
    
    <category term="render" scheme="http://llmysnow.top/tags/render/"/>
    
  </entry>
  
  <entry>
    <title>Vue + Element 国际化(i18n)路由页面切换语言</title>
    <link href="http://llmysnow.top/posts/82482c19/"/>
    <id>http://llmysnow.top/posts/82482c19/</id>
    <published>2021-05-06T08:38:25.955Z</published>
    <updated>2021-05-06T08:50:53.934Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装-i18n"><a href="#安装-i18n" class="headerlink" title="安装 i18n"></a>安装 i18n</h2><p><code>internationalization</code> 这个单词中，i 和 n 之间有 18 个字母</p><a id="more"></a><p><strong>注意：</strong>当前 i18n 最新版本为 9 版本，9 版本没有 VueI18n，<code>import VueI18n from &#39;vue-i18n&#39;</code> 解构会报错 <code>Cannot read property &#39;install&#39; of undefined</code></p><ul><li>这里为了让 Element 兼容，安装的是 8 版本的</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vue-i18n@8</span><br></pre></td></tr></table></figure><h2 id="页面中使用国际化"><a href="#页面中使用国际化" class="headerlink" title="页面中使用国际化"></a>页面中使用国际化</h2><h3 id="i18n-文件夹下的-index-js-文件"><a href="#i18n-文件夹下的-index-js-文件" class="headerlink" title="i18n 文件夹下的 index.js 文件"></a>i18n 文件夹下的 index.js 文件</h3><p><code>require.context</code></p><blockquote><p>它允许传入一个目录进行搜索，一个标志指示是否应该搜索子目录，还有一个正则表达式来匹配文件</p></blockquote><ul><li>第一个参数：<code>directory</code> 要搜索的文件夹目录不能是变量，否则在编译阶段无法定位目录</li><li>第二个参数：<code>useSubdirectories</code> 是否搜索子目录</li><li>第三个参数：<code>regExp</code> 匹配文件的正则表达式</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>.context(<span class="string">&#x27;demo&#x27;</span>, <span class="literal">false</span>, <span class="regexp">/\.js$/</span>)</span><br></pre></td></tr></table></figure><p><code>function</code> 返回一个具有 resolve、keys、id 三属性的方法</p><ul><li><code>resolve</code> 返回请求被解析后得到的模板</li><li><code>keys</code> 返回一个数组，由所有符合上下文模板处理的请求组成</li><li><code>id</code> 是上下文模板里面所包含的模板，可能在你使用 <code>module.hot.accept</code> 的时候被调用到</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> VueI18n <span class="keyword">from</span> <span class="string">&#x27;vue-i18n&#x27;</span></span><br><span class="line"></span><br><span class="line">Vue.use(VueI18n)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> langFiles = <span class="built_in">require</span>.context(<span class="string">&#x27;./config&#x27;</span>, <span class="literal">false</span>, <span class="regexp">/\.js$/</span>)</span><br><span class="line"><span class="keyword">let</span> regExp = <span class="regexp">/\.\/([^\.\/]+)\.([^\.]+)$/</span></span><br><span class="line"><span class="keyword">let</span> messages = &#123;&#125;</span><br><span class="line"></span><br><span class="line">langFiles.keys().forEach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> prop = regExp.exec(key)[<span class="number">1</span>]</span><br><span class="line">  messages[prop] = langFiles(key).default</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getLanguage</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> locale = sessionStorage.getItem(<span class="string">&#x27;lang&#x27;</span>) || <span class="string">&#x27;zh&#x27;</span></span><br><span class="line">  <span class="keyword">return</span> locale</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> VueI18n(&#123;</span><br><span class="line">  locale: getLanguage(),</span><br><span class="line">  messages</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>messages 对象</li></ul><p><img data-src="https://gitee.com/lilyn/pic/raw/master/company-img/%E5%9B%BD%E9%99%85%E5%8C%96%E4%BF%A1%E6%81%AF.jpg"></p><h3 id="main-js-引入"><a href="#main-js-引入" class="headerlink" title="main.js 引入"></a>main.js 引入</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> i18n <span class="keyword">from</span> <span class="string">&#x27;./i18n&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App),</span><br><span class="line">  i18n</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="展示页面"><a href="#展示页面" class="headerlink" title="展示页面"></a>展示页面</h3><p>效果图如下：</p><p><img data-src="https://gitee.com/lilyn/pic/raw/master/company-img/%E5%88%87%E6%8D%A2%E8%AF%AD%E8%A8%80.gif"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;el-dropdown</span><br><span class="line">      trigger&#x3D;&quot;click&quot;</span><br><span class="line">      class&#x3D;&quot;international&quot;</span><br><span class="line">      @command&#x3D;&quot;handleSetLanguage&quot;</span><br><span class="line">    &gt;</span><br><span class="line">      &lt;div&gt;&lt;i class&#x3D;&quot;el-icon-s-tools&quot; &#x2F;&gt;切换语言&lt;&#x2F;div&gt;</span><br><span class="line">      &lt;el-dropdown-menu slot&#x3D;&quot;dropdown&quot;&gt;</span><br><span class="line">        &lt;el-dropdown-item :disabled&#x3D;&quot;language &#x3D;&#x3D;&#x3D; &#39;zh&#39;&quot; command&#x3D;&quot;zh&quot;&gt;</span><br><span class="line">          中文</span><br><span class="line">        &lt;&#x2F;el-dropdown-item&gt;</span><br><span class="line">        &lt;el-dropdown-item :disabled&#x3D;&quot;language &#x3D;&#x3D;&#x3D; &#39;en&#39;&quot; command&#x3D;&quot;en&quot;&gt;</span><br><span class="line">          English</span><br><span class="line">        &lt;&#x2F;el-dropdown-item&gt;</span><br><span class="line">      &lt;&#x2F;el-dropdown-menu&gt;</span><br><span class="line">    &lt;&#x2F;el-dropdown&gt;</span><br><span class="line">    &lt;el-table :data&#x3D;&quot;tableData&quot; style&#x3D;&quot;width: 100%&quot;&gt;</span><br><span class="line">      &lt;el-table-column prop&#x3D;&quot;date&quot; :label&#x3D;&quot;$t(&#39;table.date&#39;)&quot; width&#x3D;&quot;180&quot;&gt;</span><br><span class="line">      &lt;&#x2F;el-table-column&gt;</span><br><span class="line">      &lt;el-table-column prop&#x3D;&quot;name&quot; :label&#x3D;&quot;$t(&#39;table.name&#39;)&quot; width&#x3D;&quot;180&quot;&gt;</span><br><span class="line">      &lt;&#x2F;el-table-column&gt;</span><br><span class="line">      &lt;el-table-column prop&#x3D;&quot;age&quot; :label&#x3D;&quot;$t(&#39;table.age&#39;)&quot;&gt; &lt;&#x2F;el-table-column&gt;</span><br><span class="line">    &lt;&#x2F;el-table&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      tableData: [</span><br><span class="line">        &#123;</span><br><span class="line">          date: &#39;2016-05-02&#39;,</span><br><span class="line">          name: &#39;王小虎&#39;,</span><br><span class="line">          age: &#39;23&#39;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          date: &#39;2016-05-04&#39;,</span><br><span class="line">          name: &#39;李小鸭&#39;,</span><br><span class="line">          age: &#39;14&#39;</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      language: sessionStorage.getItem(&#39;lang&#39;) || &#39;zh&#39;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    handleSetLanguage(lang) &#123;</span><br><span class="line">      this.$i18n.locale &#x3D; lang</span><br><span class="line">      this.language &#x3D; lang</span><br><span class="line">      sessionStorage.setItem(&#39;lang&#39;, lang)</span><br><span class="line">      location.reload();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h3 id="语言配置文件"><a href="#语言配置文件" class="headerlink" title="语言配置文件"></a>语言配置文件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// en.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  table: &#123;</span><br><span class="line">    date: <span class="string">&#x27;Date&#x27;</span>,</span><br><span class="line">    name: <span class="string">&#x27;Name&#x27;</span>,</span><br><span class="line">    age: <span class="string">&#x27;Age&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// zh.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  table: &#123;</span><br><span class="line">    date: <span class="string">&#x27;日期&#x27;</span>,</span><br><span class="line">    name: <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">    age: <span class="string">&#x27;年龄&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="路由菜单国际化"><a href="#路由菜单国际化" class="headerlink" title="路由菜单国际化"></a>路由菜单国际化</h2><ul><li><p>首先需要处理一下标题名，如果这个名在语言配置文件中就直接返回，如果不在返回原信息中的标题</p><p><code>$te</code>这个方法用以判断需要翻译的<code>key</code>在你提供的<code>语言包(messages)</code>中是否存在</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">routeTitle</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> name = <span class="string">`route.<span class="subst">$&#123;item.path.substring(<span class="number">1</span>)&#125;</span>`</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">this</span>.$te(name)) &#123;</span><br><span class="line">    <span class="keyword">return</span> item.meta.title</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.$t(name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="展示页面中"><a href="#展示页面中" class="headerlink" title="展示页面中"></a>展示页面中</h3><p>把每一项传到处理标题的方法中</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in routesSystem&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">:index</span>=<span class="string">&quot;index.toString()&quot;</span>&gt;</span>&#123;&#123; routeTitle(item) &#125;&#125;<span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123; routeTitle &#125; <span class="keyword">from</span> <span class="string">&#x27;@/utils/get-page-title&#x27;</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    methods: &#123;</span><br><span class="line"><span class="javascript">        routeTitle <span class="comment">// 声明一下</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="配置语言文件"><a href="#配置语言文件" class="headerlink" title="配置语言文件"></a>配置语言文件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// zh.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  route: &#123;</span><br><span class="line">    application: <span class="string">&#x27;总计划&#x27;</span>,</span><br><span class="line">    plan: <span class="string">&#x27;计划&#x27;</span>,</span><br><span class="line">    equipment: <span class="string">&#x27;设备&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// en.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  route: &#123;</span><br><span class="line">    application: <span class="string">&#x27;Application&#x27;</span>,</span><br><span class="line">    plan: <span class="string">&#x27;Plan&#x27;</span>,</span><br><span class="line">    equipment: <span class="string">&#x27;Equipment&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="路由表"><a href="#路由表" class="headerlink" title="路由表"></a>路由表</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        path: <span class="string">&#x27;/application&#x27;</span>,</span><br><span class="line">        meta: &#123; <span class="attr">title</span>: <span class="string">&#x27;总计划&#x27;</span> &#125;,</span><br><span class="line">&#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        path: <span class="string">&#x27;/plan&#x27;</span>,</span><br><span class="line">        meta: &#123; <span class="attr">title</span>: <span class="string">&#x27;计划&#x27;</span> &#125;,</span><br><span class="line">&#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        path: <span class="string">&#x27;/equipment&#x27;</span>,</span><br><span class="line">        meta: &#123; <span class="attr">title</span>: <span class="string">&#x27;设备&#x27;</span> &#125;,</span><br><span class="line">&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="Element-国际化"><a href="#Element-国际化" class="headerlink" title="Element 国际化"></a>Element 国际化</h2><h3 id="main-js-引入-1"><a href="#main-js-引入-1" class="headerlink" title="main.js 引入"></a>main.js 引入</h3><ul><li>参考兼容 <code>vue-i18n@6.x</code> 的步骤（需要手动处理）</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> i18n <span class="keyword">from</span> <span class="string">&#x27;./i18n&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ElementUI <span class="keyword">from</span> <span class="string">&#x27;element-ui&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;element-ui/lib/theme-chalk/index.css&#x27;</span></span><br><span class="line"><span class="comment">// 因为是8版本需要这么使用</span></span><br><span class="line">Vue.use(ElementUI, &#123;</span><br><span class="line">  i18n: <span class="function">(<span class="params">key, value</span>) =&gt;</span> i18n.t(key, value),</span><br><span class="line">  size: <span class="string">&#x27;mini&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App),</span><br><span class="line">  i18n</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="语言配置文件-1"><a href="#语言配置文件-1" class="headerlink" title="语言配置文件"></a>语言配置文件</h3><ul><li>这样 Element 的国际化也就完成了</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// en.js</span></span><br><span class="line"><span class="keyword">import</span> enLocale <span class="keyword">from</span> <span class="string">&#x27;element-ui/lib/locale/lang/en&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  ...enLocale</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// zh.js</span></span><br><span class="line"><span class="keyword">import</span> zhLocale <span class="keyword">from</span> <span class="string">&#x27;element-ui/lib/locale/lang/zh-CN&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  ...zhLocale</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="推荐参考"><a href="#推荐参考" class="headerlink" title="推荐参考"></a>推荐参考</h2><p><a href="https://segmentfault.com/a/1190000008752459">前端国际化之Vue-i18n源码分析</a></p><p><a href="https://segmentfault.com/a/1190000016445415">vue中如何使用i18n实现国际化</a></p><p><a href="https://element.eleme.cn/#/zh-CN/component/i18n">Element国际化</a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;安装-i18n&quot;&gt;&lt;a href=&quot;#安装-i18n&quot; class=&quot;headerlink&quot; title=&quot;安装 i18n&quot;&gt;&lt;/a&gt;安装 i18n&lt;/h2&gt;&lt;p&gt;&lt;code&gt;internationalization&lt;/code&gt; 这个单词中，i 和 n 之间有 18 个字母&lt;/p&gt;</summary>
    
    
    
    <category term="Vue" scheme="http://llmysnow.top/categories/Vue/"/>
    
    
    <category term="Vue" scheme="http://llmysnow.top/tags/Vue/"/>
    
    <category term="Element" scheme="http://llmysnow.top/tags/Element/"/>
    
    <category term="i18n" scheme="http://llmysnow.top/tags/i18n/"/>
    
    <category term="切换语言" scheme="http://llmysnow.top/tags/%E5%88%87%E6%8D%A2%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>Element 日期选择器清除问题（Axios get请求问题）</title>
    <link href="http://llmysnow.top/posts/379f43e/"/>
    <id>http://llmysnow.top/posts/379f43e/</id>
    <published>2021-05-06T08:37:10.165Z</published>
    <updated>2021-05-26T01:20:24.487Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Element-日期选择器问题"><a href="#Element-日期选择器问题" class="headerlink" title="Element 日期选择器问题"></a>Element 日期选择器问题</h2><p>条件查询中需要根据日期进行筛选，为了用户便利性展示清除按钮</p><p><img data-src="https://gitee.com/lilyn/pic/raw/master/company-img/%E6%98%BE%E7%A4%BA%E6%B8%85%E9%99%A4%E6%8C%89%E9%92%AE.jpg"></p><ul><li>当点击清除按钮后进行查询（<strong>get 请求</strong>），报 500 了，看一下 Network，并<strong>没有进行 url 拼接</strong>（startDate 没有拼接到 url）</li><li>检查 api 文件的 params 参数，发现 params 中的 startDate 值为 null</li></ul><a id="more"></a><p><img data-src="https://gitee.com/lilyn/pic/raw/master/company-img/headersget%E8%AF%B7%E6%B1%82500.jpg"></p><p>到这里就出现了两个问题：</p><ol><li><strong>startDate 为什么赋值为 null 了</strong>（input 清除之后值变为空字符）</li><li>我使用的是 Axios 为什么，<strong>值为 null 没有进行 url 拼接</strong>（空字符串的就可以进行拼接）</li></ol><p>接下来先看先一下业务代码长什么样，之后就是 Axios 和 Element 源码分析</p><h3 id="vue-代码如下："><a href="#vue-代码如下：" class="headerlink" title="vue 代码如下："></a>vue 代码如下：</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-form</span> <span class="attr">ref</span>=<span class="string">&quot;queryForm&quot;</span> <span class="attr">label-width</span>=<span class="string">&quot;110px&quot;</span> <span class="attr">:model</span>=<span class="string">&quot;listQuery&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;开车日期：&quot;</span>&gt;</span></span><br><span class="line">        &lt;el-date-picker</span><br><span class="line">          v-model=&quot;listQuery.startDate&quot;</span><br><span class="line">          value-format=&quot;yyyy-MM-dd&quot;</span><br><span class="line">          type=&quot;date&quot;</span><br><span class="line">          clearable</span><br><span class="line">          placeholder=&quot;选择开车日期&quot;</span><br><span class="line">          style=&quot;width: 100%&quot;</span><br><span class="line">        /&gt;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">icon</span>=<span class="string">&quot;el-icon-search&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;getList&quot;</span></span></span><br><span class="line"><span class="tag">      &gt;</span>查 询&lt;/el-button</span><br><span class="line">    &gt;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> &#123; getStationBus &#125; <span class="keyword">from</span> <span class="string">&#x27;@/api/station-bus&#x27;</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line">        listQuery: &#123;</span><br><span class="line">          pageNumber: 1,</span><br><span class="line">          pageSize: 20,</span><br><span class="line"><span class="javascript">          startDate: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line">        &#125;,</span><br><span class="line">        list: [],</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">created</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.getList()</span></span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">getList</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        getStationBus(<span class="built_in">this</span>.listQuery).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.list = res.data</span></span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="api-代码如下："><a href="#api-代码如下：" class="headerlink" title="api 代码如下："></a>api 代码如下：</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">&#x27;@/utils/request&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getStationBus = <span class="function"><span class="params">params</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> request(&#123;</span><br><span class="line">    method: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">    url: <span class="string">&#x27;/stationBus/list&#x27;</span>,</span><br><span class="line">    params,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Axios-源码分析"><a href="#Axios-源码分析" class="headerlink" title="Axios 源码分析"></a>Axios 源码分析</h2><p><a href="https://github.com/axios/axios/blob/master/dist/axios.js">https://github.com/axios/axios/blob/master/dist/axios.js</a> 622 行左右（搜素 buildURL）</p><ul><li>当请是 get 系列请求时，如果 params 对象里面有值为 null/undefined，不会进行 url 拼接，直接 return 出去了</li></ul><p><img data-src="https://gitee.com/lilyn/pic/raw/master/company-img/get%E7%B3%BB%E5%88%97%E8%AF%B7%E6%B1%82.png"></p><h2 id="Element-源码分析-TimePicker组件"><a href="#Element-源码分析-TimePicker组件" class="headerlink" title="Element 源码分析[TimePicker组件]"></a>Element 源码分析[TimePicker组件]</h2><p><a href="https://github.com/ElemeFE/element/blob/dev/packages/date-picker/src/picker.vue">https://github.com/ElemeFE/element/blob/dev/packages/date-picker/src/picker.vue</a> ，搜 handleClickIcon</p><p><strong>点击清除按钮后，把值赋值为 null</strong>。这里需要注意！！！与 Input 组件不同</p><p><img data-src="https://gitee.com/lilyn/pic/raw/master/company-img/%E7%82%B9%E5%87%BB%E6%B8%85%E9%99%A4%E6%8C%89%E9%92%AE%E5%90%8E%E8%B5%8B%E5%80%BC%E4%B8%BAnull%E6%97%A5%E6%9C%9F%E7%BB%84%E4%BB%B6.jpg"></p><h2 id="Element-源码分析-Input组件"><a href="#Element-源码分析-Input组件" class="headerlink" title="Element 源码分析[Input组件]"></a>Element 源码分析[Input组件]</h2><p><a href="https://github.com/ElemeFE/element/blob/dev/packages/input/src/input.vue">https://github.com/ElemeFE/element/blob/dev/packages/input/src/input.vue</a>，搜 clear</p><p><strong>点击清除按钮后，把值赋值为 空字符串</strong></p><p><img data-src="https://gitee.com/lilyn/pic/raw/master/company-img/%E7%82%B9%E5%87%BB%E6%B8%85%E9%99%A4%E6%8C%89%E9%92%AE%E5%90%8E%E8%B5%8B%E5%80%BC%E4%B8%BAnull%E8%BE%93%E5%85%A5%E6%A1%86%E7%BB%84%E4%BB%B6.jpg"></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Element-日期选择器问题&quot;&gt;&lt;a href=&quot;#Element-日期选择器问题&quot; class=&quot;headerlink&quot; title=&quot;Element 日期选择器问题&quot;&gt;&lt;/a&gt;Element 日期选择器问题&lt;/h2&gt;&lt;p&gt;条件查询中需要根据日期进行筛选，为了用户便利性展示清除按钮&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&quot;https://gitee.com/lilyn/pic/raw/master/company-img/%E6%98%BE%E7%A4%BA%E6%B8%85%E9%99%A4%E6%8C%89%E9%92%AE.jpg&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当点击清除按钮后进行查询（&lt;strong&gt;get 请求&lt;/strong&gt;），报 500 了，看一下 Network，并&lt;strong&gt;没有进行 url 拼接&lt;/strong&gt;（startDate 没有拼接到 url）&lt;/li&gt;
&lt;li&gt;检查 api 文件的 params 参数，发现 params 中的 startDate 值为 null&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Vue" scheme="http://llmysnow.top/categories/Vue/"/>
    
    
    <category term="Vue" scheme="http://llmysnow.top/tags/Vue/"/>
    
    <category term="Axios" scheme="http://llmysnow.top/tags/Axios/"/>
    
    <category term="Element" scheme="http://llmysnow.top/tags/Element/"/>
    
    <category term="源码分析" scheme="http://llmysnow.top/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
    <category term="问题" scheme="http://llmysnow.top/tags/%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>前端 JS 加密常用方法（RSA MD5 SHA）</title>
    <link href="http://llmysnow.top/posts/9f5130f2/"/>
    <id>http://llmysnow.top/posts/9f5130f2/</id>
    <published>2021-05-06T08:36:02.084Z</published>
    <updated>2021-05-06T08:52:12.631Z</updated>
    
    <content type="html"><![CDATA[<h2 id="jsencrypt-进行-RSA-加密"><a href="#jsencrypt-进行-RSA-加密" class="headerlink" title="jsencrypt 进行 RSA 加密"></a>jsencrypt 进行 RSA 加密</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i jsencrypt</span><br></pre></td></tr></table></figure><p><a href="http://web.chacuo.net/netrsakeypair">生成 RSA 密钥对</a></p><p><img data-src="https://gitee.com/lilyn/pic/raw/master/company-img/rsa%E5%85%AC%E9%92%A5%E7%A7%81%E9%92%A5.jpg"></p><ul><li>将生产的公钥和私钥复制过来</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> JSEncrypt <span class="keyword">from</span> <span class="string">&#x27;jsencrypt/bin/jsencrypt&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> publicKey = <span class="string">`非对称加密公钥`</span></span><br><span class="line"><span class="keyword">const</span> privateKey = <span class="string">`非对称加密私钥`</span></span><br><span class="line"><span class="keyword">const</span> txt = <span class="string">&#x27;123&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 加密 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">encrypt</span>(<span class="params">pass</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> encryptor = <span class="keyword">new</span> JSEncrypt() <span class="comment">// 创建加密对象实例</span></span><br><span class="line">  encryptor.setPublicKey(publicKey) <span class="comment">// 设置公钥</span></span><br><span class="line">  <span class="keyword">return</span> encryptor.encrypt(pass) <span class="comment">// 对内容进行加密</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 解密 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">decrypt</span>(<span class="params">pass</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> decryptor = <span class="keyword">new</span> JSEncrypt() <span class="comment">// 创建解密对象实例</span></span><br><span class="line">  decryptor.setPrivateKey(privateKey) <span class="comment">// 设置私钥</span></span><br><span class="line">  <span class="keyword">return</span> decryptor.decrypt(pass) <span class="comment">// 拿私钥解密内容</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(decrypt(encrypt(txt))) <span class="comment">// &#x27;123&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="blueimp-md5-进行-MD5-加密"><a href="#blueimp-md5-进行-MD5-加密" class="headerlink" title="blueimp-md5 进行 MD5 加密"></a>blueimp-md5 进行 MD5 加密</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i blueimp-md5</span><br></pre></td></tr></table></figure><ul><li>使用 MD5 加密一般会结合处理字符串的方法</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> md5 <span class="keyword">from</span> <span class="string">&#x27;blueimp-md5&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> txt = <span class="string">&#x27;123&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">passTrans</span>(<span class="params">pass</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> md5(pass).substring(<span class="number">4</span>).split(<span class="string">&#x27;&#x27;</span>).reverse().join(<span class="string">&#x27;&#x27;</span>).substring(<span class="number">4</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(passTrans(txt)) <span class="comment">// 32d25170b469b57095ca269b</span></span><br></pre></td></tr></table></figure><h2 id="sha-进行-SHA-加密"><a href="#sha-进行-SHA-加密" class="headerlink" title="sha 进行 SHA 加密"></a>sha 进行 SHA 加密</h2><p>SHA 家族的五个算法，分别是 SHA-1、SHA-224、SHA-256、SHA-384，和 SHA-512，由美国国家安全局（NSA）所规划，并由美国国家规范与技能研究院（NIST）发布，这里只对 SHA-1 和 SHA-256 进行演示</p><ul><li>SHA-1</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install js-sha1</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sha1 <span class="keyword">from</span> <span class="string">&#x27;js-sha1&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> txt = <span class="string">&#x27;123&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">passTrans</span>(<span class="params">pass</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> sha1(pass)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(passTrans(txt)) <span class="comment">// 40bd001563085fc35165329ea1ff5c5ecbdbbeef</span></span><br></pre></td></tr></table></figure><ul><li>SHA-256</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install js-sha256</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; sha256 &#125; <span class="keyword">from</span> <span class="string">&#x27;js-sha256&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> txt = <span class="string">&#x27;123&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">passTrans</span>(<span class="params">pass</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> sha256(pass)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(passTrans(txt)) <span class="comment">// a665a45920422f9d417e4867efdc4fb8a04a1f3fff1fa07e998e86f7f7a27ae3</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">介绍jsencrypt、md5、sha等加密算法在Vue中如何使用</summary>
    
    
    
    <category term="Vue" scheme="http://llmysnow.top/categories/Vue/"/>
    
    
    <category term="Vue" scheme="http://llmysnow.top/tags/Vue/"/>
    
    <category term="jsencrypt" scheme="http://llmysnow.top/tags/jsencrypt/"/>
    
    <category term="md5" scheme="http://llmysnow.top/tags/md5/"/>
    
    <category term="sha" scheme="http://llmysnow.top/tags/sha/"/>
    
  </entry>
  
  <entry>
    <title>Vue 处理文件的下载和上传（FormData/Blob）</title>
    <link href="http://llmysnow.top/posts/4cfe3e8b/"/>
    <id>http://llmysnow.top/posts/4cfe3e8b/</id>
    <published>2021-05-06T08:35:16.810Z</published>
    <updated>2021-05-06T08:52:34.057Z</updated>
    
    <content type="html"><![CDATA[<h2 id="FormData-上传"><a href="#FormData-上传" class="headerlink" title="FormData 上传"></a>FormData 上传</h2><p>将本地数据上传或导入数据库，有时候需要使用 FormData 对象。FormData 接口提供了一种表示表单数据的键值对 <code>key/value</code> 的构造方式，组成一个 queryString 提交到后台</p><a id="more"></a><h3 id="创建一个-FormData-对象实例"><a href="#创建一个-FormData-对象实例" class="headerlink" title="创建一个 FormData 对象实例"></a>创建一个 FormData 对象实例</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// js中</span></span><br><span class="line"><span class="keyword">let</span> formDataJs = <span class="keyword">new</span> FormData()</span><br><span class="line"><span class="comment">// vue中</span></span><br><span class="line"><span class="keyword">let</span> formDataVue = <span class="keyword">new</span> <span class="built_in">window</span>.FormData()</span><br></pre></td></tr></table></figure><h3 id="FormData-常用方法"><a href="#FormData-常用方法" class="headerlink" title="FormData 常用方法"></a>FormData 常用方法</h3><p>formData 里存储的数据格式是 <code>key/value</code>形式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> formData = <span class="keyword">new</span> FormData()</span><br><span class="line"><span class="comment">// 获取值</span></span><br><span class="line">formData.get(<span class="string">&#x27;key&#x27;</span>)</span><br><span class="line"><span class="comment">// 添加数据</span></span><br><span class="line">formData.append(<span class="string">&#x27;key&#x27;</span>, value)</span><br><span class="line"><span class="comment">// 设置、修改数据</span></span><br><span class="line">formData.set(<span class="string">&#x27;key&#x27;</span>, value)</span><br><span class="line"><span class="comment">// 删除数据</span></span><br><span class="line">formData.delete(<span class="string">&#x27;key&#x27;</span>)</span><br><span class="line"><span class="comment">// 判断数据是否存在</span></span><br><span class="line">formData.has(<span class="string">&#x27;key&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="Vue-上传数据"><a href="#Vue-上传数据" class="headerlink" title="Vue 上传数据"></a>Vue 上传数据</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    &lt;input</span><br><span class="line">      ref=&quot;uploadFile&quot;</span><br><span class="line">      type=&quot;file&quot;</span><br><span class="line">      multiple</span><br><span class="line">      accept=&quot;.png&quot;</span><br><span class="line">      style=&quot;display: none&quot;</span><br><span class="line">      @change=&quot;upload($event)&quot;</span><br><span class="line">    /&gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">size</span>=<span class="string">&quot;small&quot;</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;$refs.uploadFile.click()&quot;</span></span></span><br><span class="line"><span class="tag">      &gt;</span>浏览&lt;/el-button</span><br><span class="line">    &gt;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    methods: &#123;</span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">upload</span>(<span class="params">e</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> files = e.target.files</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> suffix = <span class="string">&#x27;.png&#x27;</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> flag = <span class="literal">true</span></span></span><br><span class="line"><span class="javascript">        files.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">const</span> isSuffix = item.name.endsWith(suffix)</span></span><br><span class="line"><span class="javascript">          <span class="keyword">if</span> (!isSuffix) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.$message.error(</span></span><br><span class="line"><span class="javascript">              <span class="string">`<span class="subst">$&#123;item.name&#125;</span> 文件类型不符，请上传后缀名为 <span class="subst">$&#123;suffix&#125;</span> 的文件`</span></span></span><br><span class="line">            )</span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> (flag = <span class="literal">false</span>)</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (flag) &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">if</span> (files.length === <span class="number">0</span>) <span class="keyword">return</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">const</span> formData = <span class="keyword">new</span> <span class="built_in">window</span>.FormData()</span></span><br><span class="line"><span class="javascript">          files.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">            formData.append(<span class="string">&#x27;file&#x27;</span>, item)</span></span><br><span class="line">          &#125;)</span><br><span class="line"><span class="javascript">          <span class="keyword">const</span> config = &#123;</span></span><br><span class="line">            headers: &#123;</span><br><span class="line"><span class="javascript">              <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;multipart/form-data&#x27;</span>,</span></span><br><span class="line"><span class="javascript">              type: <span class="string">&#x27;file&#x27;</span>,</span></span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;</span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.$axios</span></span><br><span class="line"><span class="javascript">            .post(<span class="string">&#x27;····请求接口····&#x27;</span>, formData, config)</span></span><br><span class="line"><span class="javascript">            .then(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">              <span class="built_in">this</span>.$message.success(<span class="string">&#x27;导入成功!&#x27;</span>)</span></span><br><span class="line">            &#125;)</span><br><span class="line"><span class="javascript">            .catch(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">              <span class="built_in">this</span>.$message.error(<span class="string">&#x27;导入失败!&#x27;</span>)</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Blob-下载"><a href="#Blob-下载" class="headerlink" title="Blob 下载"></a>Blob 下载</h2><p>Blob 通常用于存储大文件，典型的 Blob 内容是一张图片或一个音频</p><ol><li>默认情况下 axios 不会处理二进制数据，即请求可以正常被浏览器接收，但 axios 不会去处理。需要在请求的时候设置 <code>responseType: &#39;blob&#39;</code> 才可以</li><li>拿到文件流之后，需要生成一个 URL 才可以下载，可以通过<code>URL.createObjectURL()</code>方法生成一个链接</li><li>a 标签添加文件名<br>正常情况下，通过 <code>window.location = url</code> 就可以下载文件。浏览器判断这个链接是一个资源而不是页面的时候，就会下载文件<br>但是通过文件流生成的 url 对应的资源是没有文件名的，需要添加文件名。这时候可以用到 a 标签<br>，a 标签我们通常会用到 href 属性，但是其实还有一个 download 属性，这个属性就指定了下载的文件名</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mimeMap = &#123;</span><br><span class="line">  xlsx: <span class="string">&#x27;application/vnd.openxmlformats-officedocument.spreadsheetml.sheet&#x27;</span>,</span><br><span class="line">  zip: <span class="string">&#x27;application/zip&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">downLoadZip</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">  axios</span><br><span class="line">    .get(&#123;</span><br><span class="line">      url: url,</span><br><span class="line">      responseType: <span class="string">&#x27;blob&#x27;</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">    .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">      resolveBlob(res, mimeMap.zip)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">resolveBlob</span>(<span class="params">res, mimeType</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 创建a标签，并处理二级制数据</span></span><br><span class="line">  <span class="keyword">const</span> aLink = <span class="built_in">document</span>.createElement(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> blob = <span class="keyword">new</span> Blob([res.data], &#123; <span class="attr">type</span>: mimeType &#125;)</span><br><span class="line">  <span class="comment">// 生成下载链接</span></span><br><span class="line">  <span class="keyword">const</span> URL = <span class="built_in">window</span>.URL || <span class="built_in">window</span>.webkitURL</span><br><span class="line">  aLink.href = URL.createObjectURL(blob)</span><br><span class="line">  <span class="comment">// 匹配出文件名</span></span><br><span class="line">  <span class="keyword">const</span> disposition = res.headers[<span class="string">&#x27;content-disposition&#x27;</span>]</span><br><span class="line">  <span class="keyword">const</span> fileName = <span class="regexp">/filename=&quot;([^;]+)&quot;/</span>.exec(a)[<span class="number">1</span>]</span><br><span class="line">  <span class="comment">// 设置下载文件名称并下载</span></span><br><span class="line">  aLink.setAttribute(<span class="string">&#x27;download&#x27;</span>, fileName)</span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(aLink)</span><br><span class="line">  aLink.click()</span><br><span class="line">  <span class="comment">// 释放URL对象</span></span><br><span class="line">  <span class="built_in">window</span>.URL.revokeObjectURL(aLink.href)</span><br><span class="line">  <span class="built_in">document</span>.body.removeChild(aLink)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;FormData-上传&quot;&gt;&lt;a href=&quot;#FormData-上传&quot; class=&quot;headerlink&quot; title=&quot;FormData 上传&quot;&gt;&lt;/a&gt;FormData 上传&lt;/h2&gt;&lt;p&gt;将本地数据上传或导入数据库，有时候需要使用 FormData 对象。FormData 接口提供了一种表示表单数据的键值对 &lt;code&gt;key/value&lt;/code&gt; 的构造方式，组成一个 queryString 提交到后台&lt;/p&gt;</summary>
    
    
    
    <category term="Vue" scheme="http://llmysnow.top/categories/Vue/"/>
    
    
    <category term="Vue" scheme="http://llmysnow.top/tags/Vue/"/>
    
    <category term="FormData" scheme="http://llmysnow.top/tags/FormData/"/>
    
    <category term="Blob" scheme="http://llmysnow.top/tags/Blob/"/>
    
  </entry>
  
  <entry>
    <title>Axios 取消请求</title>
    <link href="http://llmysnow.top/posts/a688a8da/"/>
    <id>http://llmysnow.top/posts/a688a8da/</id>
    <published>2021-05-06T08:33:43.881Z</published>
    <updated>2021-05-06T08:49:24.726Z</updated>
    
    <content type="html"><![CDATA[<h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p>取消请求偶尔会用到，以下是两个工作中可能用到的场景</p><ol><li>如果一个数据请求量比较大（可能会请求错误），还没请求完就切换路由，可能会出现错误的提示框（响应拦截器中配置错误提示）</li><li>导出文件或下载文件时，中途取消</li><li>一个请求请求量比较大，发送新请求时需要取消上一个请求</li></ol><a id="more"></a><h3 id="取消单个请求（结合生命周期使用）"><a href="#取消单个请求（结合生命周期使用）" class="headerlink" title="取消单个请求（结合生命周期使用）"></a>取消单个请求（结合生命周期使用）</h3><ul><li>页面销毁时取消请求</li><li>重复发送请求取消上一次请求</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; generatePlan &#125; <span class="keyword">from</span> <span class="string">&#x27;@/api&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">destroyed</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.cancelPost()</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    <span class="function"><span class="title">generateList</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.$confirm(<span class="string">&#x27;生成时间比较长，您是否确定生成？&#x27;</span>, <span class="string">&#x27;警告&#x27;</span>, &#123;</span><br><span class="line">        confirmButtonText: <span class="string">&#x27;确定&#x27;</span>,</span><br><span class="line">        cancaelButtonText: <span class="string">&#x27;取消&#x27;</span>,</span><br><span class="line">      &#125;)</span><br><span class="line">        .then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> self = <span class="built_in">this</span></span><br><span class="line">          <span class="built_in">this</span>.cancelPost()</span><br><span class="line">          <span class="comment">// post请求</span></span><br><span class="line">          <span class="keyword">return</span> generatePlan(&#123;</span><br><span class="line">            params: <span class="built_in">this</span>.listQuery,</span><br><span class="line">            cancelToken: <span class="keyword">new</span> axios.CancelToken(<span class="function"><span class="keyword">function</span> <span class="title">exector</span>(<span class="params">c</span>) </span>&#123;</span><br><span class="line">              self.$cancel = c</span><br><span class="line">            &#125;),</span><br><span class="line">          &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (res.code === <span class="number">200</span>) <span class="built_in">this</span>.list = res.data.result</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">        .catch(<span class="function">() =&gt;</span> &#123;&#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">cancelPost</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">typeof</span> <span class="built_in">this</span>.$cancel === <span class="string">&#x27;function&#x27;</span> ? <span class="built_in">this</span>.$cancel(<span class="string">&#x27;取消请求&#x27;</span>) : <span class="literal">null</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="取消所有请求（结合导航守卫）"><a href="#取消所有请求（结合导航守卫）" class="headerlink" title="取消所有请求（结合导航守卫）"></a>取消所有请求（结合导航守卫）</h3><p>思路：在请求拦截器中，给所有请求加一个 token，设置全局变量 source 控制 cancel token，在路由变化时调用 cancel 方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">http.interceptors.request.use(</span><br><span class="line">  config =&gt; &#123;</span><br><span class="line">    config.cancelToken = store.source.token</span><br><span class="line">    <span class="keyword">return</span> config</span><br><span class="line">  &#125;,</span><br><span class="line">  error =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> CancelToken = axios.CancelToken</span><br><span class="line">  store.source.cancel &amp;&amp; store.source.cancel()</span><br><span class="line">  store.source = CancelToken.source()</span><br><span class="line">  next()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="axios-取消请求原理"><a href="#axios-取消请求原理" class="headerlink" title="axios 取消请求原理"></a>axios 取消请求原理</h3><p>axios 是对 XMLHttpRequest 的封装，使用 XMLHttpRequest 实例的 abort()方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// https://github.com/axios/axios/blob/master/lib/adapters/xhr.js</span></span><br><span class="line"><span class="keyword">if</span> (config.cancelToken) &#123;</span><br><span class="line">  <span class="comment">// Handle cancellation</span></span><br><span class="line">  config.cancelToken.promise.then(<span class="function"><span class="keyword">function</span> <span class="title">onCanceled</span>(<span class="params">cancel</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!request) &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    request.abort()</span><br><span class="line">    reject(cancel)</span><br><span class="line">    <span class="comment">// Clean up request</span></span><br><span class="line">    request = <span class="literal">null</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;应用场景&quot;&gt;&lt;a href=&quot;#应用场景&quot; class=&quot;headerlink&quot; title=&quot;应用场景&quot;&gt;&lt;/a&gt;应用场景&lt;/h3&gt;&lt;p&gt;取消请求偶尔会用到，以下是两个工作中可能用到的场景&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如果一个数据请求量比较大（可能会请求错误），还没请求完就切换路由，可能会出现错误的提示框（响应拦截器中配置错误提示）&lt;/li&gt;
&lt;li&gt;导出文件或下载文件时，中途取消&lt;/li&gt;
&lt;li&gt;一个请求请求量比较大，发送新请求时需要取消上一个请求&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="Vue" scheme="http://llmysnow.top/categories/Vue/"/>
    
    
    <category term="Vue" scheme="http://llmysnow.top/tags/Vue/"/>
    
    <category term="Axios" scheme="http://llmysnow.top/tags/Axios/"/>
    
    <category term="二次封装" scheme="http://llmysnow.top/tags/%E4%BA%8C%E6%AC%A1%E5%B0%81%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>Vue 自定义指令应用场景</title>
    <link href="http://llmysnow.top/posts/13e591df/"/>
    <id>http://llmysnow.top/posts/13e591df/</id>
    <published>2021-05-06T08:32:23.756Z</published>
    <updated>2021-05-06T08:50:24.008Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Vue-自定义指令应用场景"><a href="#Vue-自定义指令应用场景" class="headerlink" title="Vue 自定义指令应用场景"></a>Vue 自定义指令应用场景</h2><blockquote><p>这段是从官网 copy 过来的，相信应该都一看就明白的</p></blockquote><ul><li>bind: 只调用一次，指令第一次绑定到元素时调用。在这里可以进行一次性的初始化设置</li><li>inserted: 被绑定元素插入父节点时调用 (仅保证父节点存在，但不一定已被插入文档中)</li><li>update: 所在组件的 VNode 更新时调用，但是可能发生在其子 VNode 更新之前。指令的值可能发生了改变，也可能没有</li><li>componentUpdated：指令所在组件的 VNode 及其子 VNode 全部更新后调用</li><li>unbind: 只调用一次，指令与元素解绑时调用</li></ul><a id="more"></a><h3 id="1-权限校验-v-permission"><a href="#1-权限校验-v-permission" class="headerlink" title="1.权限校验 v-permission"></a>1.权限校验 v-permission</h3><p>权限校验一般分为页面级别和按钮级别，其两种思路基本一致</p><p>详细可以参考：<a href="https://juejin.cn/post/6844903478880370701">手摸手，带你用 vue 撸后台 系列二(登录权限篇)</a>，如下简单说一下</p><p><strong>页面级别：</strong></p><ol><li>最快想到的可能就是使用 beforeEach，首先把所有路由都注册，用户登录后拿到后端返回的权限信息，如果没有此权限统一个提示信息<br>不过大部分需求都不希望你这么做，没有权限就不显示</li><li>首先把所有路由都注册，不过上来给所有路由做一个标识（前后端约定一下），根据这个标识显示/隐藏</li><li>路由完全由后端负责，按照后端返回的信息生成最终用户可访问的路由表，最后通过 <code>router.addRoutes</code> 动态挂载</li></ol><p><strong>按钮级别：</strong></p><ol><li>逻辑比较简单，使用 v-if 根据权限显示/隐藏</li><li>逻辑稍微复杂一点，使用自定义指令显示/隐藏</li></ol><p><strong>思路：</strong></p><ol><li>自定义一个权限数组（这里我放到 vuex 中）</li><li>判断用户的权限是否在这个数组内，如果在就显示，不在就移除</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;@/store&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkPermission</span>(<span class="params">el, binding</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; value &#125; = binding</span><br><span class="line">  <span class="keyword">const</span> roles = store.getters &amp;&amp; store.getters.roles</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (value &amp;&amp; <span class="built_in">Array</span>.isArray(value)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (value.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> hasPermission = roles.some(<span class="function"><span class="params">role</span> =&gt;</span> value.includes(role))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!hasPermission) &#123;</span><br><span class="line">      el.parentNode &amp;&amp; el.parentNode.removeChild(el)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`please use such as v-permission=&quot;[&#x27;admin&#x27;, &#x27;editor&#x27;]&quot;`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Vue.directive(<span class="string">&#x27;permission&#x27;</span>, &#123;</span><br><span class="line">  <span class="function"><span class="title">inserted</span>(<span class="params">el, binding</span>)</span> &#123;</span><br><span class="line">    checkPermission(el, binding)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">update</span>(<span class="params">el, binding</span>)</span> &#123;</span><br><span class="line">    checkPermission(el, binding)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="2-复制指令"><a href="#2-复制指令" class="headerlink" title="2.复制指令"></a>2.复制指令</h3><p><strong>思路：</strong></p><ol><li>动态创建 <code>textarea</code> 标签，并设置 <code>readOnly</code> 属性，并将其移出可视区域</li><li>将要复制的值赋给 <code>textarea</code> 标签的 <code>value</code> 属性，并插入到 body</li><li>选中值 <code>textarea</code> 并复制</li><li>将 body 中插入的 <code>textarea</code> 移除</li><li>在第一次调用时绑定事件，在解绑时移除事件</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Message &#125; <span class="keyword">from</span> <span class="string">&#x27;element-ui&#x27;</span></span><br><span class="line"></span><br><span class="line">Vue.directive(<span class="string">&#x27;copy&#x27;</span>, &#123;</span><br><span class="line">  <span class="function"><span class="title">bind</span>(<span class="params">el, &#123; value &#125;</span>)</span> &#123;</span><br><span class="line">    el.$value = value</span><br><span class="line">    el.$handle = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">let</span> textValue = el.$value</span><br><span class="line">      <span class="keyword">if</span> (!text) &#123;</span><br><span class="line">        Message(&#123;</span><br><span class="line">          message: <span class="string">&#x27;复制内容不能为空&#x27;</span>,</span><br><span class="line">          type: <span class="string">&#x27;warning&#x27;</span>,</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 步骤1</span></span><br><span class="line">      <span class="keyword">const</span> textarea = <span class="built_in">document</span>.createElement(<span class="string">&#x27;textarea&#x27;</span>)</span><br><span class="line">      textarea.readOnly = <span class="string">&#x27;readonly&#x27;</span></span><br><span class="line">      textarea.style.cssText = <span class="string">&#x27;opacity:0;position:fixed;left:-9999px&#x27;</span></span><br><span class="line">      <span class="comment">// 步骤2</span></span><br><span class="line">      textarea.value = textValue</span><br><span class="line">      <span class="built_in">document</span>.body.appendChild(textarea)</span><br><span class="line">      <span class="comment">// 步骤3</span></span><br><span class="line">      textarea.select()</span><br><span class="line">      <span class="keyword">const</span> copyText = <span class="built_in">document</span>.execCommand(<span class="string">&#x27;copy&#x27;</span>)</span><br><span class="line">      <span class="keyword">if</span> (copyText) &#123;</span><br><span class="line">        Message(&#123;</span><br><span class="line">          message: <span class="string">&#x27;复制成功&#x27;</span>,</span><br><span class="line">          type: <span class="string">&#x27;success&#x27;</span>,</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 步骤4</span></span><br><span class="line">      <span class="built_in">document</span>.body.removeChild(textarea)</span><br><span class="line">    &#125;</span><br><span class="line">    el.addEventListener(<span class="string">&#x27;click&#x27;</span>, el.$handle)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 当传入进来的值更新的时候触发</span></span><br><span class="line">  <span class="function"><span class="title">componentUpdated</span>(<span class="params">el, &#123; value &#125;</span>)</span> &#123;</span><br><span class="line">    el.$value = value</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">unbind</span>(<span class="params">el</span>)</span> &#123;</span><br><span class="line">    el.removeEventListener(<span class="string">&#x27;click&#x27;</span>, el.$handle)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="3-防抖节流"><a href="#3-防抖节流" class="headerlink" title="3.防抖节流"></a>3.防抖节流</h3><p>钩子函数参数</p><ul><li><code>arg</code>：传给指令的参数，可选。例如 <code>v-my-directive:foo</code> 中，参数为 <code>&quot;foo&quot;</code></li><li><code>modifiers</code>：一个包含修饰符的对象。例如：<code>v-my-directive.foo.bar</code> 中，修饰符对象为 <code>&#123; foo: true, bar: true &#125;</code></li></ul><p><strong>思路：</strong></p><ul><li>通过 <code>addEventListener</code>监听事件</li><li>调用方式：<code>&lt;button v-debounce:300.immediate=&quot;fn&quot;&gt;click&lt;/button&gt;</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">func, wait, immediate</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> timer = <span class="literal">null</span>,</span><br><span class="line">        result;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">proxy</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> self = <span class="built_in">this</span>,</span><br><span class="line">            params = [].slice.call(<span class="built_in">arguments</span>),</span><br><span class="line">            callNow = !timer &amp;&amp; immediate;</span><br><span class="line">        <span class="keyword">if</span> (timer) <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">        timer = <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">            timer = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (!immediate) result = func.apply(self, params);</span><br><span class="line">        &#125;, wait);</span><br><span class="line">        <span class="keyword">if</span> (callNow) result = func.apply(self, params);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">func, wait</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> timer = <span class="literal">null</span>,</span><br><span class="line">        previous = <span class="number">0</span>,</span><br><span class="line">        result;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">proxy</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> self = <span class="built_in">this</span>,</span><br><span class="line">            params = [].slice.call(<span class="built_in">arguments</span>);</span><br><span class="line">        <span class="keyword">var</span> now = +<span class="keyword">new</span> <span class="built_in">Date</span>,</span><br><span class="line">            remaining = wait - (now - previous);</span><br><span class="line">        <span class="keyword">if</span> (remaining &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (timer) &#123;</span><br><span class="line">                <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">                timer = <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            previous = now;</span><br><span class="line">            result = func.apply(self, params);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!timer) &#123;</span><br><span class="line">            timer = <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">                timer = <span class="literal">null</span>;</span><br><span class="line">                previous = +<span class="keyword">new</span> <span class="built_in">Date</span>;</span><br><span class="line">                result = func.apply(self, params);</span><br><span class="line">            &#125;, remaining);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  <span class="function"><span class="title">bind</span>(<span class="params">el, binding</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> &#123; value &#125; = binding.value,</span><br><span class="line">      immediate = <span class="literal">false</span>,</span><br><span class="line">      wait = <span class="number">500</span>,</span><br><span class="line">      type = <span class="string">&#x27;click&#x27;</span>,</span><br><span class="line">      params = [],</span><br><span class="line">      func,</span><br><span class="line">      handle = binding.name === <span class="string">&#x27;debounce&#x27;</span> ? debounce : throttle</span><br><span class="line">    <span class="keyword">if</span> (value === <span class="literal">null</span>) <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> val !== <span class="string">&#x27;object&#x27;</span> &amp;&amp; <span class="keyword">typeof</span> value !== <span class="string">&#x27;function&#x27;</span>) <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">if</span> (binding.arg) wait = +binding.arg</span><br><span class="line">    <span class="keyword">if</span> (binding.modifiers &amp;&amp; binding.modifiers.immediate) immediate = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> value === <span class="string">&#x27;function&#x27;</span>) func = value</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> value === <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">      func = value.func || <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">      type = value.type || <span class="string">&#x27;click&#x27;</span></span><br><span class="line">      params = value.params || []</span><br><span class="line">    &#125;</span><br><span class="line">    el.$type = type</span><br><span class="line">    el.$handle = handle(</span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">proxy</span>(<span class="params">...arg</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> func.call(<span class="built_in">this</span>, ...params.concat(arg))</span><br><span class="line">      &#125;,</span><br><span class="line">      wait,</span><br><span class="line">      immediate</span><br><span class="line">    )</span><br><span class="line">    el.addEventListener(el.$type, el.$handle)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">unbind</span>(<span class="params">el</span>)</span> &#123;</span><br><span class="line">    el.removeEventListener(el.$type, el.$handle)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Vue.directive(<span class="string">&#x27;debounce&#x27;</span>, config)</span><br><span class="line">Vue.directive(<span class="string">&#x27;throttle&#x27;</span>, config)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Vue-自定义指令应用场景&quot;&gt;&lt;a href=&quot;#Vue-自定义指令应用场景&quot; class=&quot;headerlink&quot; title=&quot;Vue 自定义指令应用场景&quot;&gt;&lt;/a&gt;Vue 自定义指令应用场景&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;这段是从官网 copy 过来的，相信应该都一看就明白的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;bind: 只调用一次，指令第一次绑定到元素时调用。在这里可以进行一次性的初始化设置&lt;/li&gt;
&lt;li&gt;inserted: 被绑定元素插入父节点时调用 (仅保证父节点存在，但不一定已被插入文档中)&lt;/li&gt;
&lt;li&gt;update: 所在组件的 VNode 更新时调用，但是可能发生在其子 VNode 更新之前。指令的值可能发生了改变，也可能没有&lt;/li&gt;
&lt;li&gt;componentUpdated：指令所在组件的 VNode 及其子 VNode 全部更新后调用&lt;/li&gt;
&lt;li&gt;unbind: 只调用一次，指令与元素解绑时调用&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Vue" scheme="http://llmysnow.top/categories/Vue/"/>
    
    
    <category term="Vue" scheme="http://llmysnow.top/tags/Vue/"/>
    
    <category term="自定义指令" scheme="http://llmysnow.top/tags/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8C%87%E4%BB%A4/"/>
    
    <category term="权限校验" scheme="http://llmysnow.top/tags/%E6%9D%83%E9%99%90%E6%A0%A1%E9%AA%8C/"/>
    
    <category term="复制" scheme="http://llmysnow.top/tags/%E5%A4%8D%E5%88%B6/"/>
    
    <category term="防抖节流" scheme="http://llmysnow.top/tags/%E9%98%B2%E6%8A%96%E8%8A%82%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>Element 二次封装——select选择框</title>
    <link href="http://llmysnow.top/posts/8bcae64c/"/>
    <id>http://llmysnow.top/posts/8bcae64c/</id>
    <published>2021-05-06T08:29:52.839Z</published>
    <updated>2021-05-26T01:24:58.564Z</updated>
    
    <content type="html"><![CDATA[<p>项目中出现多个地方使用相同的 <code>&lt;el-select&gt;</code> 标签，且更改的时候，下面的数据会自动发生改变。为减少代码对其进行二次封装是很有必要的，一般可以考虑如下几点：</p><ol><li>在封装的组件里发送数据请求，这样能降低耦合性（解耦）</li><li>可以使用 <code>v-bind=&quot;$attrs&quot;</code> 将父组件调用子组件时传入的属性展开（排除被 prop 注册、class、style）</li><li>可以使用 <code>v-on=&quot;$listeners&quot;</code> 将父组件调用子组件时传入的方法展开</li><li>可以使用 <code>v-model</code> 当子组件的值发生变化，自动修改父组件的传入的值</li></ol><a id="more"></a><ul><li>父组件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;train-select v-model&#x3D;&quot;listQuery.name&quot; &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure><ul><li>子组件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;el-select</span><br><span class="line">    :value&#x3D;&quot;selected&quot;</span><br><span class="line">    placeholder&#x3D;&quot;请选择信息&quot;</span><br><span class="line">    clearable</span><br><span class="line">    filterable</span><br><span class="line">    class&#x3D;&quot;select-option_table&quot;</span><br><span class="line">    @change&#x3D;&quot;selectChange&quot;</span><br><span class="line">  &gt;</span><br><span class="line">    &lt;template&gt;</span><br><span class="line">      &lt;li&gt;</span><br><span class="line">        &lt;span&gt;姓名&lt;&#x2F;span&gt;</span><br><span class="line">        &lt;span&gt;年龄&lt;&#x2F;span&gt;</span><br><span class="line">      &lt;&#x2F;li&gt;</span><br><span class="line">    &lt;&#x2F;template&gt;</span><br><span class="line">    &lt;el-option</span><br><span class="line">      v-for&#x3D;&quot;(item, i) in infoList&quot;</span><br><span class="line">      :key&#x3D;&quot;i&quot;</span><br><span class="line">      :label&#x3D;&quot;item.label&quot;</span><br><span class="line">      :value&#x3D;&quot;item.name&quot;</span><br><span class="line">      class&#x3D;&quot;select-option_li&quot;</span><br><span class="line">    &gt;</span><br><span class="line">      &lt;span&gt;&#123;&#123; item.name &#125;&#125;&lt;&#x2F;span&gt;</span><br><span class="line">      &lt;span&gt;&#123;&#123; item.age &#125;&#125;&lt;&#x2F;span&gt;</span><br><span class="line">    &lt;&#x2F;el-option&gt;</span><br><span class="line">  &lt;&#x2F;el-select&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; API_Info &#125; from &#39;@&#x2F;api&#x2F;common&#39;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#39;Select&#39;,</span><br><span class="line">  model: &#123;</span><br><span class="line">    prop: &#39;selected&#39;,</span><br><span class="line">    event: &#39;parent-event&#39;,</span><br><span class="line">  &#125;,</span><br><span class="line">  props: [&#39;selected&#39;],</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      infoList: [],</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  created() &#123;</span><br><span class="line">    this.getSelect()</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    getSelect() &#123;</span><br><span class="line">      API_Info().then(res &#x3D;&gt; &#123;</span><br><span class="line">        this.infoList &#x3D; res.data</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    selectChange(val) &#123;</span><br><span class="line">      this.$emit(&#39;parent-event&#39;, val)</span><br><span class="line">      this.$emit(</span><br><span class="line">        &#39;change&#39;,</span><br><span class="line">        this.infoList.find(item &#x3D;&gt; item.name &#x3D;&#x3D;&#x3D; val)</span><br><span class="line">      )</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h3 id="使用-attrs-和-listeners"><a href="#使用-attrs-和-listeners" class="headerlink" title="使用 $attrs 和 $listeners"></a>使用 <code>$attrs</code> 和 <code>$listeners</code></h3><ul><li><code>$attrs</code> 包含了父作用域中不作为 prop 被识别 (且获取) 的 attribute 绑定 (class 和 style 除外)</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">fu-input</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入&quot;</span> <span class="attr">maxlength</span>=<span class="string">&quot;50&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- fu-input组件内部实现 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-bind</span>=<span class="string">&quot;$attrs&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 上面代码渲染出的效果如下--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入&quot;</span> <span class="attr">maxlength</span>=<span class="string">&quot;50&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>$listeners</code> 包含了父作用域中的（不含 .native 修饰器的）v-on 事件监听器</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">fu-input</span> @<span class="attr">focus</span>=<span class="string">&quot;focus&quot;</span> @<span class="attr">input</span>=<span class="string">&quot;xxx&quot;</span> @<span class="attr">change</span>=<span class="string">&quot;xxx&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- fu-input组件内部实现 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-on</span>=<span class="string">&quot;$listeners&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 上面代码渲染出的效果如下--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> @<span class="attr">focus</span>=<span class="string">&quot;focus&quot;</span> @<span class="attr">input</span>=<span class="string">&quot;xxx&quot;</span> @<span class="attr">change</span>=<span class="string">&quot;xxx&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="使用-v-model"><a href="#使用-v-model" class="headerlink" title="使用 v-model"></a>使用 <code>v-model</code></h3><ul><li>自定义组件上，使用 v-model 指令，默认会向子组件传递一个字段名为 value 的 prop 属性，以及绑定一个名为 input 的事件</li><li>model 选项，允许一个自定义组件在使用 v-model 时定制 prop 和 event，可以回避一些冲突</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">my-div</span> <span class="attr">v-model</span>=<span class="string">&quot;someValue&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">my-div</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 等价于 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">my-div</span> <span class="attr">:value</span>=<span class="string">&quot;someValue&quot;</span> @<span class="attr">input</span>=<span class="string">&quot;someValue = $event&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">my-div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    props: &#123;</span><br><span class="line">      value: &#123;</span><br><span class="line"><span class="javascript">        type: <span class="built_in">String</span>,</span></span><br><span class="line"><span class="javascript">        required: <span class="literal">true</span>,</span></span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">modifyParentCompsValue</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.$emit(<span class="string">&#x27;input&#x27;</span>, <span class="string">&#x27;要设置的值&#x27;</span>)</span></span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;项目中出现多个地方使用相同的 &lt;code&gt;&amp;lt;el-select&amp;gt;&lt;/code&gt; 标签，且更改的时候，下面的数据会自动发生改变。为减少代码对其进行二次封装是很有必要的，一般可以考虑如下几点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在封装的组件里发送数据请求，这样能降低耦合性（解耦）&lt;/li&gt;
&lt;li&gt;可以使用 &lt;code&gt;v-bind=&amp;quot;$attrs&amp;quot;&lt;/code&gt; 将父组件调用子组件时传入的属性展开（排除被 prop 注册、class、style）&lt;/li&gt;
&lt;li&gt;可以使用 &lt;code&gt;v-on=&amp;quot;$listeners&amp;quot;&lt;/code&gt; 将父组件调用子组件时传入的方法展开&lt;/li&gt;
&lt;li&gt;可以使用 &lt;code&gt;v-model&lt;/code&gt; 当子组件的值发生变化，自动修改父组件的传入的值&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="Vue" scheme="http://llmysnow.top/categories/Vue/"/>
    
    
    <category term="Vue" scheme="http://llmysnow.top/tags/Vue/"/>
    
    <category term="Element" scheme="http://llmysnow.top/tags/Element/"/>
    
    <category term="v-model" scheme="http://llmysnow.top/tags/v-model/"/>
    
    <category term="$attr $listeners" scheme="http://llmysnow.top/tags/attr-listeners/"/>
    
    <category term="封装" scheme="http://llmysnow.top/tags/%E5%B0%81%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>免安装版 MySQL（附带 SQLyog 安装包）</title>
    <link href="http://llmysnow.top/posts/5a7a946b/"/>
    <id>http://llmysnow.top/posts/5a7a946b/</id>
    <published>2021-05-03T02:35:22.647Z</published>
    <updated>2021-05-13T09:22:16.330Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MySQL-免安装包"><a href="#MySQL-免安装包" class="headerlink" title="MySQL 免安装包"></a>MySQL 免安装包</h2><p>链接：<a href="https://pan.baidu.com/s/1T0m9hKmVAfEBRpOTbfTTHg">https://pan.baidu.com/s/1T0m9hKmVAfEBRpOTbfTTHg</a><br>提取码：1234 </p><ul><li><p>里面有 32 位安装包和 64 位安装包</p><h2 id="SQLyog-免安装包"><a href="#SQLyog-免安装包" class="headerlink" title="SQLyog 免安装包"></a>SQLyog 免安装包</h2><p>链接：<a href="https://pan.baidu.com/s/1v6jNPZID2vlIfdUsRbR5rw">https://pan.baidu.com/s/1v6jNPZID2vlIfdUsRbR5rw</a><br>提取码：1234 </p></li><li><p>里面有 32 位安装包和 64 位安装包，直接点击exe文件安装，最后输入破解序列号即可永久使用</p></li></ul><a id="more"></a><h2 id="MySQL-配置"><a href="#MySQL-配置" class="headerlink" title="MySQL 配置"></a>MySQL 配置</h2><ol><li>以<strong>管理员身份</strong>打开命令行，否则后续命令行部分命令需要权限，出现错误</li></ol><p><img data-src="https://img-blog.csdnimg.cn/img_convert/ac5ca3564e090872c1f6603b2d77c741.png"></p><ol start="2"><li>切换目录。切换到 MySQL 的 bin 目录下，我把 MySQL 放到 E 盘里了： <code>cd E:\mysql-5.7.15-winx64\bin &amp;&amp; e:</code></li></ol><p><img data-src="https://img-blog.csdnimg.cn/img_convert/6b0e8acb85a135e7a851332ebd4d7575.png"></p><ol start="3"><li>安装 MySQL的服务：<code>mysqld --install</code></li></ol><p><img data-src="https://img-blog.csdnimg.cn/img_convert/0b71b2ba5aa1519011bc3813aa3fda03.png"></p><ol start="4"><li>初始化 MySQL，初始化会产生一个随机密码，<strong>需要记住这个密码</strong>，后续会用到：<code>mysqld --initialize --console</code></li></ol><p><img data-src="https://img-blog.csdnimg.cn/img_convert/9679d8276c66f91db7c42fa185b37f75.png"></p><ol start="5"><li>开启 MySQL 服务：<code>net start mysql</code></li></ol><p><img data-src="https://img-blog.csdnimg.cn/img_convert/bd059673886450637521774116d49b11.png"></p><ol start="6"><li>登录验证。注意：这里的密码是初始化（步骤4）产生的随机密码；一定要先开启服务，再登录验证，不然会提示拒绝访问</li></ol><p><img data-src="https://img-blog.csdnimg.cn/img_convert/5b145a5f42335bf2b07604070ee93b79.png"></p><ol start="7"><li><p>修改密码。由于初始化的随机密码太复杂，不便于我们登录（记得结尾加 <code>;</code> ）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SET PASSWORD = PASSWORD(<span class="string">&#x27;123456&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img data-src="https://img-blog.csdnimg.cn/img_convert/777541fe2e82111e0cf0a3ee999d6051.png"></p></li></ol><h2 id="环境变量设置"><a href="#环境变量设置" class="headerlink" title="环境变量设置"></a>环境变量设置</h2><p>点击 “我的电脑” –&gt; “属性” –&gt; ‘’高级系统设置’’ –&gt; ‘’环境变量’’</p><p><img data-src="https://img-blog.csdnimg.cn/img_convert/ba4c3eabda8a6f4f04de19904ae56d28.png"></p><p>配置完成之后，每当我们想要用命令行使用 mysql 时，只需要登录即可使用</p><p><img data-src="https://img-blog.csdnimg.cn/img_convert/ff609eee38ff3da7be13555747104899.png"></p><p>在 mysql 目录下新建一个 <code>my.init</code> 文件，在里面粘贴如下代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">character-set-server=utf8mb4</span><br><span class="line">bind-address=0.0.0.0</span><br><span class="line">port=3306</span><br><span class="line">default-storage-engine=INNODB</span><br><span class="line">[mysql]</span><br><span class="line">default-character-set=utf8mb4</span><br><span class="line">[client]</span><br><span class="line">default-character-set=utf8mb4</span><br></pre></td></tr></table></figure><p>这样，免安装版的 MySQL 就安装并配置完成了</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;MySQL-免安装包&quot;&gt;&lt;a href=&quot;#MySQL-免安装包&quot; class=&quot;headerlink&quot; title=&quot;MySQL 免安装包&quot;&gt;&lt;/a&gt;MySQL 免安装包&lt;/h2&gt;&lt;p&gt;链接：&lt;a href=&quot;https://pan.baidu.com/s/1T0m9hKmVAfEBRpOTbfTTHg&quot;&gt;https://pan.baidu.com/s/1T0m9hKmVAfEBRpOTbfTTHg&lt;/a&gt;&lt;br&gt;提取码：1234 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;里面有 32 位安装包和 64 位安装包&lt;/p&gt;
&lt;h2 id=&quot;SQLyog-免安装包&quot;&gt;&lt;a href=&quot;#SQLyog-免安装包&quot; class=&quot;headerlink&quot; title=&quot;SQLyog 免安装包&quot;&gt;&lt;/a&gt;SQLyog 免安装包&lt;/h2&gt;&lt;p&gt;链接：&lt;a href=&quot;https://pan.baidu.com/s/1v6jNPZID2vlIfdUsRbR5rw&quot;&gt;https://pan.baidu.com/s/1v6jNPZID2vlIfdUsRbR5rw&lt;/a&gt;&lt;br&gt;提取码：1234 &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;里面有 32 位安装包和 64 位安装包，直接点击exe文件安装，最后输入破解序列号即可永久使用&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Python" scheme="http://llmysnow.top/categories/Python/"/>
    
    
    <category term="SQL" scheme="http://llmysnow.top/tags/SQL/"/>
    
    <category term="SQLyog" scheme="http://llmysnow.top/tags/SQLyog/"/>
    
    <category term="安装步骤" scheme="http://llmysnow.top/tags/%E5%AE%89%E8%A3%85%E6%AD%A5%E9%AA%A4/"/>
    
  </entry>
  
  <entry>
    <title>Vue 封装无限层级树形菜单组件（后台传的是扁平数组）</title>
    <link href="http://llmysnow.top/posts/9fef765/"/>
    <id>http://llmysnow.top/posts/9fef765/</id>
    <published>2021-04-22T03:05:10.504Z</published>
    <updated>2021-05-26T01:25:10.003Z</updated>
    
    <content type="html"><![CDATA[<p>项目原因，需要把一个扁平/线性数组转换成树形数组（符合 el-tree 数据要求）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> resData = [</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="string">&#x27;1&#x27;</span>, <span class="attr">label</span>: <span class="string">&#x27;动物&#x27;</span>, <span class="attr">parentId</span>: <span class="string">&#x27;&#x27;</span>, <span class="attr">icon</span>: <span class="string">&#x27;&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="string">&#x27;2&#x27;</span>, <span class="attr">label</span>: <span class="string">&#x27;狗&#x27;</span>, <span class="attr">parentId</span>: <span class="string">&#x27;1&#x27;</span>, <span class="attr">icon</span>: <span class="string">&#x27;icon-chongwutubiao13&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="string">&#x27;3&#x27;</span>, <span class="attr">label</span>: <span class="string">&#x27;哈士奇&#x27;</span>, <span class="attr">parentId</span>: <span class="string">&#x27;2&#x27;</span>, <span class="attr">icon</span>: <span class="string">&#x27;icon-hashiqi&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="string">&#x27;4&#x27;</span>, <span class="attr">label</span>: <span class="string">&#x27;柯基&#x27;</span>, <span class="attr">parentId</span>: <span class="string">&#x27;2&#x27;</span>, <span class="attr">icon</span>: <span class="string">&#x27;icon-keji-&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="string">&#x27;6&#x27;</span>, <span class="attr">label</span>: <span class="string">&#x27;猫&#x27;</span>, <span class="attr">parentId</span>: <span class="string">&#x27;1&#x27;</span>, <span class="attr">icon</span>: <span class="string">&#x27;icon-chongwutubiao04&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="string">&#x27;7&#x27;</span>, <span class="attr">label</span>: <span class="string">&#x27;植物&#x27;</span>, <span class="attr">parentId</span>: <span class="string">&#x27;&#x27;</span>, <span class="attr">icon</span>: <span class="string">&#x27;&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="string">&#x27;8&#x27;</span>, <span class="attr">label</span>: <span class="string">&#x27;微生物&#x27;</span>, <span class="attr">parentId</span>: <span class="string">&#x27;&#x27;</span>, <span class="attr">icon</span>: <span class="string">&#x27;&#x27;</span> &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="JS-代码：扁平数组转换成树形数组"><a href="#JS-代码：扁平数组转换成树形数组" class="headerlink" title="JS 代码：扁平数组转换成树形数组"></a>JS 代码：扁平数组转换成树形数组</h2><ul><li>直接上代码，不需要递归</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">transformData</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 深拷贝一份（以防连续调用出错）</span></span><br><span class="line">  <span class="keyword">const</span> cData = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(data))</span><br><span class="line">  <span class="keyword">const</span> map = &#123;&#125;</span><br><span class="line">  <span class="keyword">const</span> tData = []</span><br><span class="line">  <span class="comment">// 注意：这里item的引用地址指向cData</span></span><br><span class="line">  cData.forEach(<span class="function"><span class="params">item</span> =&gt;</span> (map[item.id] = item))</span><br><span class="line">  cData.forEach(<span class="function"><span class="params">child</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> mapItem = map[child.parentId]</span><br><span class="line">    <span class="keyword">if</span> (mapItem) &#123;</span><br><span class="line">      <span class="comment">// 注意：这里mapItem引用地址指向也是指向cData</span></span><br><span class="line">      <span class="keyword">if</span> (!mapItem.children) mapItem.children = []</span><br><span class="line">      mapItem.children.push(child)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 顶级节点</span></span><br><span class="line">      tData.push(child)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> tData</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="项目应用：el-tree-制作一个树形多级嵌套菜单栏"><a href="#项目应用：el-tree-制作一个树形多级嵌套菜单栏" class="headerlink" title="项目应用：el-tree 制作一个树形多级嵌套菜单栏"></a>项目应用：el-tree 制作一个树形多级嵌套菜单栏</h2><p>实现效果：</p><p><img data-src="https://img-blog.csdnimg.cn/img_convert/fd270ef62d9c02db91a340ae0b0a173f.png"></p><ul><li>Vue 代码</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-scrollbar</span> <span class="attr">wrap-class</span>=<span class="string">&quot;scrollbar-wrapper&quot;</span> <span class="attr">style</span>=<span class="string">&quot;height: 100%&quot;</span>&gt;</span></span><br><span class="line">    &lt;el-tree</span><br><span class="line">      ref=&quot;tree&quot;</span><br><span class="line">      v-loading=&quot;treeDataLoading&quot;</span><br><span class="line">      node-key=&quot;id&quot;</span><br><span class="line">      :data=&quot;treeData&quot;</span><br><span class="line">      :show-checkbox=&quot;showCheckBox&quot;</span><br><span class="line">      :default-expand-all=&quot;defaultExpandAll&quot;</span><br><span class="line">      style=&quot;height: 100%; padding-bottom: 20px&quot;</span><br><span class="line">    &gt;</span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">slot-scope</span>=<span class="string">&quot;&#123; node, data &#125;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;custom-tree-node&quot;</span>&gt;</span></span><br><span class="line">        &#123;&#123; node.label &#125;&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-if</span>=<span class="string">&quot;data.icon&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-tooltip</span> <span class="attr">effect</span>=<span class="string">&quot;dark&quot;</span> <span class="attr">:content</span>=<span class="string">&quot;data.label&quot;</span> <span class="attr">placement</span>=<span class="string">&quot;top-start&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">i</span> <span class="attr">:class</span>=<span class="string">&quot;[&#x27;iconfont&#x27;, data.icon]&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">el-tooltip</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-tree</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-scrollbar</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">  props: &#123;</span><br><span class="line"><span class="javascript">    <span class="comment">// 节点是否可被选择（显示前面的复选框）</span></span></span><br><span class="line">    showCheckBox: &#123;</span><br><span class="line"><span class="javascript">      type: <span class="built_in">Boolean</span>,</span></span><br><span class="line"><span class="javascript">      <span class="keyword">default</span>: <span class="literal">false</span>,</span></span><br><span class="line">    &#125;,</span><br><span class="line"><span class="javascript">    <span class="comment">// 是否默认展开所有节点</span></span></span><br><span class="line">    defaultExpandAll: &#123;</span><br><span class="line"><span class="javascript">      type: <span class="built_in">Boolean</span>,</span></span><br><span class="line"><span class="javascript">      <span class="keyword">default</span>: <span class="literal">false</span>,</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line">      treeData: [],</span><br><span class="line"><span class="javascript">      treeDataLoading: <span class="literal">false</span>,</span></span><br><span class="line">      resData: [</span><br><span class="line"><span class="javascript">        &#123; <span class="attr">id</span>: <span class="string">&#x27;1&#x27;</span>, <span class="attr">label</span>: <span class="string">&#x27;动物&#x27;</span>, <span class="attr">parentId</span>: <span class="string">&#x27;&#x27;</span>, <span class="attr">icon</span>: <span class="string">&#x27;&#x27;</span> &#125;,</span></span><br><span class="line"><span class="javascript">        &#123; <span class="attr">id</span>: <span class="string">&#x27;2&#x27;</span>, <span class="attr">label</span>: <span class="string">&#x27;狗&#x27;</span>, <span class="attr">parentId</span>: <span class="string">&#x27;1&#x27;</span>, <span class="attr">icon</span>: <span class="string">&#x27;icon-chongwutubiao13&#x27;</span> &#125;,</span></span><br><span class="line"><span class="javascript">        &#123; <span class="attr">id</span>: <span class="string">&#x27;3&#x27;</span>, <span class="attr">label</span>: <span class="string">&#x27;哈士奇&#x27;</span>, <span class="attr">parentId</span>: <span class="string">&#x27;2&#x27;</span>, <span class="attr">icon</span>: <span class="string">&#x27;icon-hashiqi&#x27;</span> &#125;,</span></span><br><span class="line"><span class="javascript">        &#123; <span class="attr">id</span>: <span class="string">&#x27;4&#x27;</span>, <span class="attr">label</span>: <span class="string">&#x27;柯基&#x27;</span>, <span class="attr">parentId</span>: <span class="string">&#x27;2&#x27;</span>, <span class="attr">icon</span>: <span class="string">&#x27;icon-keji-&#x27;</span> &#125;,</span></span><br><span class="line"><span class="javascript">        &#123; <span class="attr">id</span>: <span class="string">&#x27;6&#x27;</span>, <span class="attr">label</span>: <span class="string">&#x27;猫&#x27;</span>, <span class="attr">parentId</span>: <span class="string">&#x27;1&#x27;</span>, <span class="attr">icon</span>: <span class="string">&#x27;icon-chongwutubiao04&#x27;</span> &#125;,</span></span><br><span class="line"><span class="javascript">        &#123; <span class="attr">id</span>: <span class="string">&#x27;7&#x27;</span>, <span class="attr">label</span>: <span class="string">&#x27;植物&#x27;</span>, <span class="attr">parentId</span>: <span class="string">&#x27;&#x27;</span>, <span class="attr">icon</span>: <span class="string">&#x27;&#x27;</span> &#125;,</span></span><br><span class="line"><span class="javascript">        &#123; <span class="attr">id</span>: <span class="string">&#x27;8&#x27;</span>, <span class="attr">label</span>: <span class="string">&#x27;微生物&#x27;</span>, <span class="attr">parentId</span>: <span class="string">&#x27;&#x27;</span>, <span class="attr">icon</span>: <span class="string">&#x27;&#x27;</span> &#125;,</span></span><br><span class="line">      ],</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">init</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.treeDataLoading = <span class="literal">true</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// 发送数据请求（这里不发送请求以resData模拟）</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> tree = <span class="built_in">this</span>.resData</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.treeData = <span class="built_in">this</span>.transformData(tree)</span></span><br><span class="line">        res()</span><br><span class="line">      &#125;)</span><br><span class="line"><span class="javascript">        .catch(<span class="function">() =&gt;</span> &#123;&#125;)</span></span><br><span class="line"><span class="javascript">        .finally(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.treeDataLoading = <span class="literal">false</span></span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">transformData</span>(<span class="params">data, params = &#123;&#125;</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> cData = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(data))</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> map = &#123;&#125;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> tData = []</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> attr = &#123;</span></span><br><span class="line"><span class="javascript">        id: <span class="string">&#x27;id&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        parentId: <span class="string">&#x27;parentId&#x27;</span>,</span></span><br><span class="line">      &#125;</span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> arg = <span class="built_in">Object</span>.assign(&#123;&#125;, attr, params)</span></span><br><span class="line"><span class="javascript">      cData.forEach(<span class="function"><span class="params">item</span> =&gt;</span> (map[item[arg.id]] = item))</span></span><br><span class="line"><span class="javascript">      cData.forEach(<span class="function"><span class="params">child</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> mapItem = map[child[arg.parentId]]</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (mapItem) &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">if</span> (!mapItem.children) mapItem.children = []</span></span><br><span class="line">          mapItem.children.push(child)</span><br><span class="line"><span class="javascript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line">          tData.push(child)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> tData</span></span><br><span class="line">    &#125;,</span><br><span class="line"><span class="javascript">    <span class="comment">// 全选</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">checkAll</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.$refs.tree.setCheckedNodes(<span class="built_in">this</span>.treeData)</span></span><br><span class="line">    &#125;,</span><br><span class="line"><span class="javascript">    <span class="comment">// 取消全选</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">cancelAll</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.$refs.tree.setCheckedKeys([])</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;less&quot;</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-class">.scrollbar-wrapper</span> &#123;</span></span><br><span class="line">  overflow-x: hidden !important;</span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-class">.custom-tree-node</span> &#123;</span></span><br><span class="line">  font-size: 16px;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="父组件调用"><a href="#父组件调用" class="headerlink" title="父组件调用"></a>父组件调用</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tree-select</span> <span class="attr">ref</span>=<span class="string">&quot;tree&quot;</span> <span class="attr">defaultExpandAll</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> TreeSelect <span class="keyword">from</span> <span class="string">&#x27;./components/TreeSelect&#x27;</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">  components: &#123;</span><br><span class="line">    TreeSelect,</span><br><span class="line">  &#125;,</span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">this</span>.$refs[<span class="string">&#x27;tree&#x27;</span>].init()</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="还可以参考这篇文章，他使用的双-filter"><a href="#还可以参考这篇文章，他使用的双-filter" class="headerlink" title="还可以参考这篇文章，他使用的双 filter"></a>还可以参考这篇文章，他使用的双 filter</h2><p><a href="https://blog.csdn.net/Mr_JavaScript/article/details/82817177">js 实现无限层级树形数据结构（创新算法）</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;项目原因，需要把一个扁平/线性数组转换成树形数组（符合 el-tree 数据要求）&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; resData = [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#123; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&amp;#x27;1&amp;#x27;&lt;/span&gt;, &lt;span class=&quot;attr&quot;&gt;label&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&amp;#x27;动物&amp;#x27;&lt;/span&gt;, &lt;span class=&quot;attr&quot;&gt;parentId&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&amp;#x27;&amp;#x27;&lt;/span&gt;, &lt;span class=&quot;attr&quot;&gt;icon&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&amp;#x27;&amp;#x27;&lt;/span&gt; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#123; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&amp;#x27;2&amp;#x27;&lt;/span&gt;, &lt;span class=&quot;attr&quot;&gt;label&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&amp;#x27;狗&amp;#x27;&lt;/span&gt;, &lt;span class=&quot;attr&quot;&gt;parentId&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&amp;#x27;1&amp;#x27;&lt;/span&gt;, &lt;span class=&quot;attr&quot;&gt;icon&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&amp;#x27;icon-chongwutubiao13&amp;#x27;&lt;/span&gt; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#123; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&amp;#x27;3&amp;#x27;&lt;/span&gt;, &lt;span class=&quot;attr&quot;&gt;label&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&amp;#x27;哈士奇&amp;#x27;&lt;/span&gt;, &lt;span class=&quot;attr&quot;&gt;parentId&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&amp;#x27;2&amp;#x27;&lt;/span&gt;, &lt;span class=&quot;attr&quot;&gt;icon&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&amp;#x27;icon-hashiqi&amp;#x27;&lt;/span&gt; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#123; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&amp;#x27;4&amp;#x27;&lt;/span&gt;, &lt;span class=&quot;attr&quot;&gt;label&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&amp;#x27;柯基&amp;#x27;&lt;/span&gt;, &lt;span class=&quot;attr&quot;&gt;parentId&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&amp;#x27;2&amp;#x27;&lt;/span&gt;, &lt;span class=&quot;attr&quot;&gt;icon&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&amp;#x27;icon-keji-&amp;#x27;&lt;/span&gt; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#123; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&amp;#x27;6&amp;#x27;&lt;/span&gt;, &lt;span class=&quot;attr&quot;&gt;label&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&amp;#x27;猫&amp;#x27;&lt;/span&gt;, &lt;span class=&quot;attr&quot;&gt;parentId&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&amp;#x27;1&amp;#x27;&lt;/span&gt;, &lt;span class=&quot;attr&quot;&gt;icon&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&amp;#x27;icon-chongwutubiao04&amp;#x27;&lt;/span&gt; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#123; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&amp;#x27;7&amp;#x27;&lt;/span&gt;, &lt;span class=&quot;attr&quot;&gt;label&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&amp;#x27;植物&amp;#x27;&lt;/span&gt;, &lt;span class=&quot;attr&quot;&gt;parentId&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&amp;#x27;&amp;#x27;&lt;/span&gt;, &lt;span class=&quot;attr&quot;&gt;icon&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&amp;#x27;&amp;#x27;&lt;/span&gt; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#123; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&amp;#x27;8&amp;#x27;&lt;/span&gt;, &lt;span class=&quot;attr&quot;&gt;label&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&amp;#x27;微生物&amp;#x27;&lt;/span&gt;, &lt;span class=&quot;attr&quot;&gt;parentId&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&amp;#x27;&amp;#x27;&lt;/span&gt;, &lt;span class=&quot;attr&quot;&gt;icon&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&amp;#x27;&amp;#x27;&lt;/span&gt; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Vue" scheme="http://llmysnow.top/categories/Vue/"/>
    
    
    <category term="Vue" scheme="http://llmysnow.top/tags/Vue/"/>
    
    <category term="Element" scheme="http://llmysnow.top/tags/Element/"/>
    
    <category term="树形菜单" scheme="http://llmysnow.top/tags/%E6%A0%91%E5%BD%A2%E8%8F%9C%E5%8D%95/"/>
    
    <category term="封装" scheme="http://llmysnow.top/tags/%E5%B0%81%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>Yapi安装部署（接口管理服务）</title>
    <link href="http://llmysnow.top/posts/bb3fd12a/"/>
    <id>http://llmysnow.top/posts/bb3fd12a/</id>
    <published>2020-12-30T09:05:20.150Z</published>
    <updated>2021-01-19T02:32:47.650Z</updated>
    
    <content type="html"><![CDATA[<p><strong><code>Yapi</code></strong> 由 <code>YMFE</code>开源，旨在为开发、产品、测试人员提供更优雅的接口管理服务，可以帮助开发者轻松创建、发布、维护<code>API</code>。</p><p>官方文档：<a href="https://hellosean1025.github.io/yapi/devops/index.html">https://hellosean1025.github.io/yapi/devops/index.html</a></p><a id="more"></a><p><img data-src="https://gitee.com/lilyn/pic/raw/master/js-img/yapi%E7%95%8C%E9%9D%A2.jpg" alt="yapi界面"></p><h2 id="环境要求"><a href="#环境要求" class="headerlink" title="环境要求"></a>环境要求</h2><ul><li>nodejs（7.6+)</li><li>mongodb（2.6+）</li></ul><p><strong>安装Node注意：</strong>最好安装14版本之前的，推荐12版本的，不然可能Node版本过高，导致无法成功部署</p><p>下载链接：<a href="https://nodejs.org/download/release/v12.12.0/">Node v12.12.0/ (nodejs.org)</a></p><p><strong>安装MongoDB注意：</strong>选择 Custom：自定义安装路径。安装MongDB需要取消这个勾选，不然会死等…（剩下一路next）</p><p><img data-src="https://gitee.com/lilyn/pic/raw/master/js-img/install%20mongodb.png" alt="install mongodb"></p><p>下载链接：<a href="http://dl.mongodb.org/dl/win32/x86_64">Downloads for win32 (mongodb.org)</a></p><h3 id="配置Node淘宝源"><a href="#配置Node淘宝源" class="headerlink" title="配置Node淘宝源"></a>配置Node淘宝源</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><h3 id="配置MongoDB"><a href="#配置MongoDB" class="headerlink" title="配置MongoDB"></a>配置MongoDB</h3><p><img data-src="https://gitee.com/lilyn/pic/raw/master/js-img/mongodb%20config.jpg" alt="mongodb config"></p><p>在安装目录创建 <code>mongodb.config</code>，填入如下信息（需要修改安装目录：我安装在：<code>D:\MongoDB</code>）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改安装目录</span></span><br><span class="line">dbpath=D:\MongoDB\data\db <span class="comment"># 数据库路径</span></span><br><span class="line"><span class="comment"># 修改安装目录</span></span><br><span class="line">logpath=D:\MongoDB\<span class="built_in">log</span>\mongod.log <span class="comment">#日志输出文件路径</span></span><br><span class="line"></span><br><span class="line">logappend=<span class="literal">true</span> <span class="comment"># 错误日志采用追加模式</span></span><br><span class="line"></span><br><span class="line">journal=<span class="literal">true</span> <span class="comment">#启用日志文件，默认启用</span></span><br><span class="line"></span><br><span class="line">quiet=<span class="literal">true</span> <span class="comment">#过滤掉无用的日志信息，若需要调试使用请设置为false</span></span><br><span class="line"></span><br><span class="line">port=27017 <span class="comment">#端口号 默认为27017</span></span><br></pre></td></tr></table></figure><ul><li>在 data 文件夹中新建文件夹 db</li><li>在 log文 件夹中新建 logs文件夹，logs文件夹新建 log.txt</li></ul><p>在MongoDB文件夹的bin目录下，启动cmd命令窗口输入如下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> D:/MongoDB</span><br><span class="line"><span class="comment"># 修改安装目录</span></span><br><span class="line">mongod --dbpath <span class="string">&quot;D:\MongoDB\data\db&quot;</span>  --logpath <span class="string">&quot;D:\MongoDB\logs\log.txt&quot;</span>  --install -serviceName <span class="string">&quot;MongoDB&quot;</span>  </span><br></pre></td></tr></table></figure><p>打开浏览器访问 <a href="http://localhost:27017/">http://localhost:27017/</a> 或者 <a href="http://127.0.0.1:27017/">http://127.0.0.1:27017/</a></p><p>显示如下信息：说明启动成功</p><p><img data-src="https://gitee.com/lilyn/pic/raw/master/js-img/mongodb%20success.jpg" alt="mongodb success"></p><ul><li>右击“我的电脑”-&gt;属性-&gt;高级系统设置-&gt;环境变量</li></ul><p><img data-src="https://gitee.com/lilyn/pic/raw/master/js-img/%E6%B7%BB%E5%8A%A0%E7%B3%BB%E7%BB%9F%E5%8F%98%E9%87%8F.jpg" alt="添加系统变量"></p><p>新增你的 MongoDB 的 bin 目录的路径-&gt;保存</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改安装目录，我的安装在D盘</span></span><br><span class="line">D:\MongoDB\bin</span><br></pre></td></tr></table></figure><ul><li>之后可以在cmd里输入mongo测试一下</li></ul><h2 id="安装yapi"><a href="#安装yapi" class="headerlink" title="安装yapi"></a>安装yapi</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install -g yapi-cli</span><br><span class="line"><span class="comment"># 或使用淘宝源安装</span></span><br><span class="line">npm install -g yapi-cli --registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><h3 id="启动yapi"><a href="#启动yapi" class="headerlink" title="启动yapi"></a>启动yapi</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动</span></span><br><span class="line">yapi server</span><br></pre></td></tr></table></figure><p>yapi server 执行后提示：在浏览器打开 <a href="http://0.0.0.0:9090/">http://0.0.0.0:9090</a> 访问。非本地服务器，请将 0.0.0.0 替换成指定的域名或你本机IP</p><p>在CMD中，可以用如下方法查询查询本机IP:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 找到无线局域网适配器 WLAN</span></span><br><span class="line">ipconfig</span><br></pre></td></tr></table></figure><ul><li>找到后，输入ip+:9090，进入网址即可，界面如下：</li></ul><p><img data-src="https://gitee.com/lilyn/pic/raw/master/js-img/yapi%E5%B9%B3%E5%8F%B0%E9%83%A8%E7%BD%B2.jpg" alt="yapi平台部署"></p><p>填写完信息后，点击开始部署。<strong>注意：</strong>需要记住这个<strong>部署路径</strong></p><p>成功部署后会显示如下：</p><p><img data-src="https://gitee.com/lilyn/pic/raw/master/js-img/%E9%83%A8%E7%BD%B2%E6%88%90%E5%8A%9F.jpg" alt="部署成功"></p><p>进入<strong>部署路径</strong>，输入如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 切换到部署路径下启动</span></span><br><span class="line">node vendors/server/app.js</span><br></pre></td></tr></table></figure><ul><li><p>内网下可以通过本机IP+端口号，进行访问，界面如图：</p><p><img data-src="https://gitee.com/lilyn/pic/raw/master/js-img/yapi%E7%95%8C%E9%9D%A2.jpg" alt="yapi界面"></p></li></ul><h3 id="pm2方式管理进程"><a href="#pm2方式管理进程" class="headerlink" title="pm2方式管理进程"></a>pm2方式管理进程</h3><p>要保证后台保持进程，需要安装pm2，进入<strong>部署路径</strong>启动即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install -g pm2</span><br><span class="line"><span class="comment"># 切换到部署路径下启动</span></span><br><span class="line">pm2 start vendors/server/app.js --watch -i 1</span><br></pre></td></tr></table></figure><p><img data-src="https://gitee.com/lilyn/pic/raw/master/js-img/pm2%E5%90%AF%E5%8A%A8.jpg" alt="pm2启动"></p><p>这样以后就可以很方便的用pm2启动关闭就行了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动</span></span><br><span class="line">pm2 start vendors/server/app.js --watch -i 1</span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">pm2 list</span><br><span class="line"><span class="comment"># 停止</span></span><br><span class="line">pm2 stop vendors/server/app.js</span><br></pre></td></tr></table></figure><p>以后访问本机IP+端口号即可进入</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;&lt;code&gt;Yapi&lt;/code&gt;&lt;/strong&gt; 由 &lt;code&gt;YMFE&lt;/code&gt;开源，旨在为开发、产品、测试人员提供更优雅的接口管理服务，可以帮助开发者轻松创建、发布、维护&lt;code&gt;API&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;官方文档：&lt;a href=&quot;https://hellosean1025.github.io/yapi/devops/index.html&quot;&gt;https://hellosean1025.github.io/yapi/devops/index.html&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="基础配置" scheme="http://llmysnow.top/categories/%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE/"/>
    
    
    <category term="Yapi" scheme="http://llmysnow.top/tags/Yapi/"/>
    
    <category term="接口服务" scheme="http://llmysnow.top/tags/%E6%8E%A5%E5%8F%A3%E6%9C%8D%E5%8A%A1/"/>
    
    <category term="环境部署" scheme="http://llmysnow.top/tags/%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/"/>
    
    <category term="pm2" scheme="http://llmysnow.top/tags/pm2/"/>
    
  </entry>
  
  <entry>
    <title>检测公有属性的封装</title>
    <link href="http://llmysnow.top/posts/3c79077c/"/>
    <id>http://llmysnow.top/posts/3c79077c/</id>
    <published>2020-12-28T07:58:49.330Z</published>
    <updated>2021-01-19T02:32:47.649Z</updated>
    
    <content type="html"><![CDATA[<h2 id="检测属性方法"><a href="#检测属性方法" class="headerlink" title="检测属性方法"></a>检测属性方法</h2><h3 id="in"><a href="#in" class="headerlink" title="in"></a>in</h3><ul><li><p>检测当前对象是否存在某个属性，不论是公有还是私有，只要有，返回 true</p><p><code>[attr] in [object]</code></p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.age = <span class="number">14</span>;</span><br><span class="line">    <span class="built_in">this</span>.name = <span class="string">&quot;lion&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">Fn.prototype.category = <span class="string">&quot;animal&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> f = <span class="keyword">new</span> Fn();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;name&quot;</span> <span class="keyword">in</span> f);     <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;category&quot;</span> <span class="keyword">in</span> f); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="hasOwnProperty-NaN"><a href="#hasOwnProperty-NaN" class="headerlink" title="hasOwnProperty"></a>hasOwnProperty</h3><ul><li><p>检测一个属性是不是这个对象的私有属性，如果是，返回true</p><p><code>[object].hasOwnProperty([attr])</code></p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.age = <span class="number">14</span>;</span><br><span class="line">    <span class="built_in">this</span>.name = <span class="string">&quot;lion&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">Fn.prototype.category = <span class="string">&quot;animal&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> f = <span class="keyword">new</span> Fn();</span><br><span class="line"><span class="built_in">console</span>.log(f.hasOwnProperty(<span class="string">&quot;name&quot;</span>));     <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(f.hasOwnProperty(<span class="string">&quot;category&quot;</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h3 id="尝试封装检测公有属性"><a href="#尝试封装检测公有属性" class="headerlink" title="尝试封装检测公有属性"></a>尝试封装检测公有属性</h3><ul><li>了解了 <code>in</code> 和 <code>hasOwnProperty</code> 之后我们可以尝试封装检测公有属性的方法</li></ul><p>写出来大概是如下这样：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.prototype.hasPubProperty = <span class="function"><span class="keyword">function</span> (<span class="params">attr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> attr <span class="keyword">in</span> obj &amp;&amp; !obj.hasOwnProperty(attr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>但是这个是有弊端的，比如：某个属性既是私有的，也是公有的，就检测不出来了</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.prototype.hasPubProperty = <span class="function"><span class="keyword">function</span> (<span class="params">attr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> attr <span class="keyword">in</span> <span class="built_in">this</span> &amp;&amp; !<span class="built_in">this</span>.hasOwnProperty(attr);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.age = <span class="number">14</span>;</span><br><span class="line">    <span class="built_in">this</span>.name = <span class="string">&quot;lion&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">Fn.prototype.category = <span class="string">&quot;animal&quot;</span>;</span><br><span class="line">Fn.prototype.name = <span class="string">&quot;bird&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> f = <span class="keyword">new</span> Fn();</span><br><span class="line"><span class="comment">// name既是公有的也是私有的</span></span><br><span class="line"><span class="built_in">console</span>.log(f.hasPubProperty(<span class="string">&quot;name&quot;</span>));     <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(f.hasPubProperty(<span class="string">&quot;category&quot;</span>)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>这样肯定不行，有没有什么方法可以避免这个问题，接下来需要看一下 Object 的其它几个方法</p><h2 id="检测公有属性"><a href="#检测公有属性" class="headerlink" title="检测公有属性"></a>检测公有属性</h2><ul><li>期望结果如下：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.age = <span class="number">14</span>;</span><br><span class="line">    <span class="built_in">this</span>[A] = <span class="number">100</span>;</span><br><span class="line">    <span class="built_in">this</span>.name = <span class="string">&quot;lion&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> A = <span class="built_in">Symbol</span>(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">Fn.prototype.name = <span class="string">&quot;bird&quot;</span>;</span><br><span class="line">Fn.prototype[A] = <span class="number">200</span>;</span><br><span class="line"><span class="keyword">let</span> f = <span class="keyword">new</span> Fn();</span><br><span class="line"></span><br><span class="line"><span class="comment">// age是私有方法</span></span><br><span class="line"><span class="built_in">console</span>.log(f.hasPubProperty(<span class="string">&quot;age&quot;</span>));      <span class="comment">// false</span></span><br><span class="line"><span class="comment">// name既是公有的也是私有的</span></span><br><span class="line"><span class="built_in">console</span>.log(f.hasPubProperty(<span class="string">&quot;name&quot;</span>));     <span class="comment">// true</span></span><br><span class="line"><span class="comment">// A(Symbol)既是公有的也是私有的</span></span><br><span class="line"><span class="built_in">console</span>.log(f.hasPubProperty(A));          <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="Object-getPrototypeOf"><a href="#Object-getPrototypeOf" class="headerlink" title="Object.getPrototypeOf"></a>Object.getPrototypeOf</h3><blockquote><p>如果了解前置知识，可直接跳到封装方法处</p></blockquote><h4 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h4><blockquote><p>ES5新增方法</p></blockquote><ul><li><code>Object.getPrototypeOf([object])</code> 方法返回指定<strong>对象自身的原型</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Fn.prototype === <span class="built_in">Object</span>.getPrototypeOf(f); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h4 id="封装方法"><a href="#封装方法" class="headerlink" title="封装方法"></a>封装方法</h4><ul><li>借用原型链查找公有属性</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.prototype.hasPubProperty = <span class="function"><span class="keyword">function</span> (<span class="params">attr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> self = <span class="built_in">this</span>,</span><br><span class="line">        prototype = <span class="built_in">Object</span>.getPrototypeOf(self);</span><br><span class="line">    <span class="keyword">while</span> (prototype) &#123;</span><br><span class="line">        <span class="comment">// 检测是否存在attr这个属性</span></span><br><span class="line">        <span class="keyword">if</span> (prototype.hasOwnProperty(attr)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">// 一直按照原型链查找</span></span><br><span class="line">        prototype = <span class="built_in">Object</span>.getPrototypeOf(prototype);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>因为用到了 <code>hasOwnProperty</code>，它不仅能检测可枚举属性还可以检测内置属性</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(f.hasPubProperty(<span class="string">&quot;toString&quot;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(f.hasPubProperty(<span class="string">&quot;valueOf&quot;</span>));  <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="Object-keys"><a href="#Object-keys" class="headerlink" title="Object.keys"></a>Object.keys</h3><blockquote><p>如果了解前置知识，可直接跳到封装方法处</p></blockquote><h4 id="前置知识-1"><a href="#前置知识-1" class="headerlink" title="前置知识"></a>前置知识</h4><blockquote><p>ES5新增方法</p></blockquote><ul><li><code>Object.keys([object])</code> 方法会返回一个数组，数组里面存放指定<strong>对象自身的可枚举属性</strong></li><li><code>Object.keys([object])</code> 方法返回<strong>非 Symbol 私有属性</strong>的数组</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.prototype.xx = <span class="string">&quot;xx&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    name: <span class="string">&quot;lion&quot;</span>,</span><br><span class="line">    age: <span class="number">12</span>,</span><br><span class="line">    <span class="number">3</span>: <span class="number">200</span>,</span><br><span class="line">    <span class="number">0</span>: <span class="number">100</span>,</span><br><span class="line">    [<span class="built_in">Symbol</span>(<span class="string">&quot;a&quot;</span>)]: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.keys(obj)); <span class="comment">// [ &#x27;0&#x27;, &#x27;3&#x27;, &#x27;name&#x27;, &#x27;age&#x27; ]</span></span><br></pre></td></tr></table></figure><ul><li>如果想获取 Symbol 私有属性，可以使用 <code>Object.getOwnPropertySymbols(obj)</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getOwnPropertySymbols(obj)); <span class="comment">// [ Symbol(a) ]</span></span><br></pre></td></tr></table></figure><ul><li>如果想获取所有私有属性（包括Symbol）到一个数组中，可以这么写</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[...Object.keys(obj), ...Object.getOwnPropertySymbols(obj)];</span><br><span class="line"><span class="comment">// [&#x27;0&#x27;, &#x27;3&#x27;, &#x27;name&#x27;, &#x27;age&#x27;, Symbol(a)]</span></span><br></pre></td></tr></table></figure><h4 id="封装方法-1"><a href="#封装方法-1" class="headerlink" title="封装方法"></a>封装方法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.prototype.hasPubProperty = <span class="function"><span class="keyword">function</span> (<span class="params">attr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> self = <span class="built_in">this</span>,</span><br><span class="line">        prototype = <span class="built_in">Object</span>.getPrototypeOf(self);</span><br><span class="line">    <span class="keyword">while</span> (prototype) &#123;</span><br><span class="line">        <span class="comment">// 检测是否存在attr这个属性</span></span><br><span class="line">        <span class="keyword">var</span> keys = <span class="built_in">Object</span>.keys(prototype);</span><br><span class="line">        <span class="comment">// 检测浏览器是否支持Symbol</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">Symbol</span> !== <span class="string">&quot;undefined&quot;</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果支持，把Symbol属性合并到数组中</span></span><br><span class="line">            keys = keys.concat(<span class="built_in">Object</span>.getOwnPropertySymbols(prototype));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 一直按照原型链查找</span></span><br><span class="line">        prototype = <span class="built_in">Object</span>.getPrototypeOf(prototype);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>注意：内置属性不可以枚举，<code>Object.keys([object])</code> 方法检测不到内置属性</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(f.hasPubProperty(<span class="string">&quot;toString&quot;</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(f.hasPubProperty(<span class="string">&quot;valueOf&quot;</span>));  <span class="comment">// false</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">检测公有属性方法用 in+hasOwnProperty 结合会有一些弊端，比如：某个属性既是私有的，也是公有的，就检测不出来了。使用 Object.getPrototypeOf+hasOwnProperty 可以准确检测</summary>
    
    
    
    <category term="JavaScript" scheme="http://llmysnow.top/categories/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="http://llmysnow.top/tags/JavaScript/"/>
    
    <category term="封装" scheme="http://llmysnow.top/tags/%E5%B0%81%E8%A3%85/"/>
    
    <category term="公有属性" scheme="http://llmysnow.top/tags/%E5%85%AC%E6%9C%89%E5%B1%9E%E6%80%A7/"/>
    
    <category term="私有属性" scheme="http://llmysnow.top/tags/%E7%A7%81%E6%9C%89%E5%B1%9E%E6%80%A7/"/>
    
    <category term="Object方法" scheme="http://llmysnow.top/tags/Object%E6%96%B9%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>JS 实现图片延迟加载（懒加载）</title>
    <link href="http://llmysnow.top/posts/399b5a63/"/>
    <id>http://llmysnow.top/posts/399b5a63/</id>
    <published>2020-12-20T14:39:21.440Z</published>
    <updated>2021-05-26T01:20:44.717Z</updated>
    
    <content type="html"><![CDATA[<h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><ol><li>结构中，我们使用一个盒子包裹着图片（图片不显示的时候，可以先占据着这个位置，并且设置默认背景图或背景颜色）</li><li>最开始，img 的 src 设置默认背景图，并把图片真实地址放到自定义属性中（比如：data-src ）</li><li>当 JS 监听到该图片元素进入可视窗口时，将自定义属性中的地址放到 src 属性中，达到懒加载效果</li></ol><a id="more"></a><p><img data-src="https://img-blog.csdnimg.cn/20201220232703325.gif" alt="懒加载"></p><p><strong>作用：</strong></p><ol><li>防止页面一次性向服务器发送大量请求，导致页面卡顿</li><li>全部加载会耗费大量流量</li></ol><p><strong>预备知识：</strong></p><ol><li><code>clientHeight</code>：当前盒子可视区域的高度（height+上下padding）</li><li><code>offsetHeight</code>：获取当前盒子的总高度（height+上下padding+上下border）</li><li><code>offsetTop</code>：当前盒子距离父级参照物的上偏移量</li><li><code>offsetParent</code>：当前盒子的父级参照物</li><li><code>scrollTop</code>：获取和设置当前盒子纵向滚动条卷曲的高度</li></ol><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>为了显示更加明显，当图片的下边框 = 浏览器可视窗口的下边框时，显示图片真实路径</p><ul><li>图片下边框：图片距离 body 的上偏移量 + 图片自身的总高度</li><li>浏览器可视窗口下边框：浏览器滚动条卷曲高度 + 当前浏览器可视窗口的高度</li></ul><h3 id="单张图片懒加载"><a href="#单张图片懒加载" class="headerlink" title="单张图片懒加载"></a>单张图片懒加载</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>单张图片延时加载<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        * &#123;</span><br><span class="line">            margin: 0;</span><br><span class="line">            padding: 0;</span><br><span class="line">        &#125;</span><br><span class="line">        img &#123;</span><br><span class="line">            width: 100%;</span><br><span class="line">            height: 100%;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#box</span> &#123;</span></span><br><span class="line">            width: 300px;</span><br><span class="line">            height: 200px;</span><br><span class="line">            margin: 800px auto;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/default.jpg&quot;</span> <span class="attr">true-img</span>=<span class="string">&quot;img/1.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;utils.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> box = <span class="built_in">document</span>.getElementById(<span class="string">&quot;box&quot;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> img = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;img&quot;</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 让图片只加载一次</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (img.flag) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">        <span class="comment">// 当前图片盒子的总高度</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> boxH = box.offsetHeight;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 获取当前图片盒子距离 body 上偏移量</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> boxT = utils.offset(box).top;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 获取浏览器可视区域高度</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> winH = utils.win(<span class="string">&quot;clientHeight&quot;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 获取浏览器滚动条卷曲高度</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> winT = utils.win(<span class="string">&quot;scrollTop&quot;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (winH + winT &gt;= boxH + boxT) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 创建一个 img 标签</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> newImg = <span class="keyword">new</span> Image();</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> trueImg = img.getAttribute(<span class="string">&quot;true-img&quot;</span>);</span></span><br><span class="line">            newImg.src = trueImg;</span><br><span class="line"><span class="javascript">            <span class="comment">// 动态创建一个 img 标签用来检测当前的路径是否正确</span></span></span><br><span class="line"><span class="javascript">            newImg.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">// 如果路径正确，执行onload函数</span></span></span><br><span class="line">                img.src = trueImg;</span><br><span class="line"><span class="javascript">                img.flag = <span class="literal">true</span>;</span></span><br><span class="line"><span class="javascript">                newImg = <span class="literal">null</span>;</span></span><br><span class="line">            &#125;;</span><br><span class="line"><span class="javascript">            newImg.onerror = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">// 如果路径错误，执行onerror函数</span></span></span><br><span class="line"><span class="javascript">                img.src = <span class="string">&quot;img/2.jpg&quot;</span>;</span></span><br><span class="line"><span class="javascript">                img.flag = <span class="literal">true</span>;</span></span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onscroll = check;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="多张图片懒加载"><a href="#多张图片懒加载" class="headerlink" title="多张图片懒加载"></a>多张图片懒加载</h3><p>这里使用 <code>getElementsByClassName</code> ，这个具有映射关系，下面简单介绍一下这个映射关系：</p><blockquote><p><code>getElementsByClassName</code> 返回对象是动态的 HTMLCollection</p><ul><li><p>动态 添加/删除 元素 HTMLCollection 的长度会产生变化</p></li><li><ul><li>把最后一个 li，从 ul 中删除，lis的长度 -1</li></ul></li><li><ul><li>删除的属性，lis 中访问不到</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;lists&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;bg&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;end&quot;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> lis = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;li&quot;</span>);</span></span><br><span class="line"><span class="javascript">    lis[<span class="number">0</span>].classList.remove(<span class="string">&quot;bg&quot;</span>);</span></span><br><span class="line">    lists.removeChild(end);</span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(lis.length); <span class="comment">// 3</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(lis[<span class="number">0</span>].classList); <span class="comment">// DOMTokenList [value: &quot;&quot;]</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>uerySelectorAll</code> 返回对象是静态 NodeList</p><ul><li><p>动态 添加/删除 元素 NodeList 的长度不会产生变化</p></li><li><ul><li>把最后一个 li，从 ul 中删除，lis的长度并没有 -1</li></ul></li><li><ul><li>删除的属性，lis 中访问不到</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;lists&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;bg&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;end&quot;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> lis = <span class="built_in">document</span>.querySelectorAll(<span class="string">&quot;li&quot;</span>);</span></span><br><span class="line"><span class="javascript">    lis[<span class="number">0</span>].classList.remove(<span class="string">&quot;bg&quot;</span>);</span></span><br><span class="line">    lists.removeChild(end);</span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(lis.length); <span class="comment">// 4</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(lis[<span class="number">0</span>].classList); <span class="comment">// DOMTokenList [value: &quot;&quot;]</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        * &#123;</span><br><span class="line">            margin: 0;</span><br><span class="line">            padding: 0;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.box</span> &#123;</span></span><br><span class="line">            margin: 500px auto;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.box</span> <span class="selector-tag">img</span> &#123;</span></span><br><span class="line">            display: block;</span><br><span class="line">            margin: auto;</span><br><span class="line">            margin-bottom: 10px;</span><br><span class="line">            height: 200px;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/default.jpg&quot;</span> <span class="attr">class</span>=<span class="string">&quot;bg&quot;</span> <span class="attr">true-img</span>=<span class="string">&quot;img/1.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/default.jpg&quot;</span> <span class="attr">class</span>=<span class="string">&quot;bg&quot;</span> <span class="attr">true-img</span>=<span class="string">&quot;img/2.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/default.jpg&quot;</span> <span class="attr">class</span>=<span class="string">&quot;bg&quot;</span> <span class="attr">true-img</span>=<span class="string">&quot;img/3.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/default.jpg&quot;</span> <span class="attr">class</span>=<span class="string">&quot;bg&quot;</span> <span class="attr">true-img</span>=<span class="string">&quot;img/4.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/default.jpg&quot;</span> <span class="attr">class</span>=<span class="string">&quot;bg&quot;</span> <span class="attr">true-img</span>=<span class="string">&quot;img/5.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;utils.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 动态的 HTMLCollection 具有映射关系</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> imgs = <span class="built_in">document</span>.getElementsByClassName(<span class="string">&quot;bg&quot;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 判断每一张图片是否要加载</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">delay</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 当函数执行的时候，循环每一张图片，然后判断每一张图片是否需要加载</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; imgs.length; i++) &#123;</span></span><br><span class="line">            delayImg(imgs[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">delayImg</span>(<span class="params">img</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> imgH = img.offsetHeight;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> winH = utils.win(<span class="string">&quot;clientHeight&quot;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> imgT = utils.offset(img).top;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> winT = utils.win(<span class="string">&quot;scrollTop&quot;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (winT + winH &gt; imgH + imgT) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> trueSrc = img.getAttribute(<span class="string">&quot;true-img&quot;</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> newImg = <span class="keyword">new</span> Image();</span></span><br><span class="line">            newImg.src = trueSrc;</span><br><span class="line"><span class="javascript">            newImg.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line">                img.src = trueSrc;</span><br><span class="line"><span class="javascript">                img.className = <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="javascript">                newImg = <span class="literal">null</span>;</span></span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="comment">// 刚进界面把已经符合的图片显示出来</span></span></span><br><span class="line">    delay();</span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onscroll = delay;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;pratice2.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="utils"><a href="#utils" class="headerlink" title="utils"></a>utils</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> utils = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 获取盒子距离body的偏移量</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">offset</span>(<span class="params">el</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> left = el.offsetLeft;</span><br><span class="line">        <span class="keyword">let</span> top = el.offsetTop;</span><br><span class="line">        <span class="keyword">let</span> parent = el.offsetParent;</span><br><span class="line">        <span class="keyword">while</span> (parent !== <span class="built_in">document</span>.body) &#123;</span><br><span class="line">            left += parent.offsetLeft + parent.clientLeft;</span><br><span class="line">            top += parent.offsetTop + parent.clientTop;</span><br><span class="line">            parent = parent.offsetParent;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            left,</span><br><span class="line">            top,</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置或者获取浏览器的某些属性</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">win</span>(<span class="params">attr, val</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (val == <span class="literal">undefined</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">document</span>.documentElement[attr] || <span class="built_in">document</span>.body[attr];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">document</span>.documentElement[attr] = val;</span><br><span class="line">        <span class="built_in">document</span>.body[attr] = val;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        offset,</span><br><span class="line">        win,</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;实现原理&quot;&gt;&lt;a href=&quot;#实现原理&quot; class=&quot;headerlink&quot; title=&quot;实现原理&quot;&gt;&lt;/a&gt;实现原理&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;结构中，我们使用一个盒子包裹着图片（图片不显示的时候，可以先占据着这个位置，并且设置默认背景图或背景颜色）&lt;/li&gt;
&lt;li&gt;最开始，img 的 src 设置默认背景图，并把图片真实地址放到自定义属性中（比如：data-src ）&lt;/li&gt;
&lt;li&gt;当 JS 监听到该图片元素进入可视窗口时，将自定义属性中的地址放到 src 属性中，达到懒加载效果&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="JavaScript" scheme="http://llmysnow.top/categories/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="http://llmysnow.top/tags/JavaScript/"/>
    
    <category term="延迟加载" scheme="http://llmysnow.top/tags/%E5%BB%B6%E8%BF%9F%E5%8A%A0%E8%BD%BD/"/>
    
    <category term="懒加载" scheme="http://llmysnow.top/tags/%E6%87%92%E5%8A%A0%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>JS实现商城排序</title>
    <link href="http://llmysnow.top/posts/d2addf30/"/>
    <id>http://llmysnow.top/posts/d2addf30/</id>
    <published>2020-12-20T11:38:43.308Z</published>
    <updated>2021-05-26T01:22:18.904Z</updated>
    
    <content type="html"><![CDATA[<h2 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h2><ul><li>根据上架时间/热度/价格进行升序/降序排序</li><li>上箭头亮代表升序，下箭头亮代表降序</li></ul><a id="more"></a><p><img data-src="https://img-blog.csdnimg.cn/20201220203345422.gif" alt="商城排序"></p><h3 id="渲染-li-标签"><a href="#渲染-li-标签" class="headerlink" title="渲染 li 标签"></a>渲染 li 标签</h3><ul><li>获取 ul 以便让每一个 li 渲染到页面</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> lists = <span class="built_in">document</span>.querySelector(<span class="string">&quot;.lists&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> lis = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><ul><li><p>把每一个 li 渲染到页面上</p><p>这里为了操作方便，给每一个 li 绑定自定义属性，之后根据属性值获取其中内容 <code>li.getAttribute(...)</code> 即可</p><p>如果不这样做，则需要通过 <code>li.querySelector(...).innerText</code> 获取</p><p><strong>注意：</strong><code>querySelectorAll</code> 获取到的是类数组，因为需要进行排序，使用数组的 sort() 方法，所以需要用 <code>[].slice.call()</code> 或 <code>Array.from</code> 转换成数组</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Init</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> str = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; data.length; i++) &#123;</span><br><span class="line">        <span class="keyword">const</span> el = data[i];</span><br><span class="line">        str += <span class="string">`&lt;li time=&quot;<span class="subst">$&#123;el.time&#125;</span>&quot; hot=&quot;<span class="subst">$&#123;el.hot&#125;</span>&quot; price=&quot;<span class="subst">$&#123;el.price&#125;</span>&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;img src=&quot;<span class="subst">$&#123;el.img&#125;</span>&quot; alt=&quot;&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;p class=&quot;title&quot;&gt;<span class="subst">$&#123;el.title&#125;</span>&lt;/p&gt;</span></span><br><span class="line"><span class="string">        &lt;p class=&quot;time&quot;&gt;<span class="subst">$&#123;el.time&#125;</span>&lt;/p&gt;</span></span><br><span class="line"><span class="string">        &lt;p class=&quot;info&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;span class=&quot;price&quot;&gt;<span class="subst">$&#123;el.price&#125;</span>&lt;/span&gt;</span></span><br><span class="line"><span class="string">            &lt;span class=&quot;hot&quot;&gt;<span class="subst">$&#123;el.hot&#125;</span>&lt;/span&gt;</span></span><br><span class="line"><span class="string">        &lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;/li&gt;`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    lists.innerHTML = str;</span><br><span class="line">    lis = [].slice.call(lists.querySelectorAll(<span class="string">&quot;li&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="点击-a-标签进行排序"><a href="#点击-a-标签进行排序" class="headerlink" title="点击 a 标签进行排序"></a>点击 a 标签进行排序</h3><ul><li>获取 a 标签</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> links = <span class="built_in">document</span>.querySelectorAll(<span class="string">&quot;.top a&quot;</span>);</span><br></pre></td></tr></table></figure><ul><li><p>给 a 标签添加鼠标点击事件</p><p>为实现每次排序都是上一次的倒序，需要给每一个 a 标签添加一个自定义属性作为标志 <code>links[i].flag = -1</code> ，flag 值为1代表升序，每次点击事件只需 flag 取反即可 <code>this.flag *= -1</code></p><p><strong>注意：</strong> sort() 方法中回调函数 this 指向 window，所以需要用一个变量存储 this <code>let that = this;</code></p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; links.length; i++) &#123;</span><br><span class="line">    links[i].flag = -<span class="number">1</span>;</span><br><span class="line">    links[i].onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.flag *= -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">let</span> that = <span class="built_in">this</span>;</span><br><span class="line">        <span class="keyword">let</span> sortFlag = <span class="built_in">this</span>.getAttribute(<span class="string">&quot;sortFlag&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (sortFlag == <span class="string">&quot;time&quot;</span>) &#123;</span><br><span class="line">            lis.sort(<span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> (a.getAttribute(sortFlag).replace(<span class="regexp">/-/g</span>, <span class="string">&quot;&quot;</span>) - b.getAttribute(sortFlag).replace(<span class="regexp">/-/g</span>, <span class="string">&quot;&quot;</span>)) * that.flag;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            lis.sort(<span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> (a.getAttribute(sortFlag) - b.getAttribute(sortFlag)) * that.flag;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; lis.length; i++) &#123;</span><br><span class="line">            lists.appendChild(lis[i])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="点击-a-标签点亮排序箭头"><a href="#点击-a-标签点亮排序箭头" class="headerlink" title="点击 a 标签点亮排序箭头"></a>点击 a 标签点亮排序箭头</h3><ul><li>升/降序高亮对应箭头字体图标</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arrows = <span class="built_in">this</span>.querySelectorAll(<span class="string">&quot;b&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> arrCur = <span class="built_in">document</span>.querySelectorAll(<span class="string">&quot;.top b.current&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arrCur.length; i++) &#123;</span><br><span class="line">    arrCur[i].classList.remove(<span class="string">&quot;current&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.flag == <span class="number">1</span>) &#123;</span><br><span class="line">    arrows[<span class="number">0</span>].classList.add(<span class="string">&quot;current&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    arrows[<span class="number">1</span>].classList.add(<span class="string">&quot;current&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><ul><li>for 每进行一次循环都会引起浏览器的回流，非常耗性能</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; lis.length; i++) &#123;</span><br><span class="line">    lists.appendChild(lis[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>可以使用 <code>DocumentFragment</code> 来创建一个新的空白的文档片段，把元素附加到这个文档片段中，之后通过这个文档片段附加到 DOM 树</p><p>因为<strong>文档片段存在内存中</strong>，并不在 DOM 树中，所以将子元素插入到文档片段时不会引起页面回流。因此，使用文档片段会带来更好的性能</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> frg = <span class="built_in">document</span>.createDocumentFragment();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; lis.length; i++) &#123;</span><br><span class="line">    frg.appendChild(lis[i]);</span><br><span class="line">&#125;</span><br><span class="line">lists.appendChild(frg)</span><br></pre></td></tr></table></figure><ul><li>如果希望点击完当前a标签，再点击其他a标签时都是升序排列的话，需要每次都将其他标签的flag设置为 -1</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; links.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (links[i] != <span class="built_in">this</span>) &#123;</span><br><span class="line">        links[i].flag = -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><h3 id="index-html（html-css）"><a href="#index-html（html-css）" class="headerlink" title="index.html（html+css）"></a>index.html（html+css）</h3><ul><li>创建 <code>index.html</code> 文件，粘贴如下代码</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>商城排序<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        * &#123;</span><br><span class="line">            margin: 0;</span><br><span class="line">            padding: 0;</span><br><span class="line">        &#125;</span><br><span class="line">        ul &#123;</span><br><span class="line">            list-style: none;</span><br><span class="line">        &#125;</span><br><span class="line">        a &#123;</span><br><span class="line">            text-decoration: none;</span><br><span class="line">        &#125;</span><br><span class="line">        body, html &#123;</span><br><span class="line">            background: lavender;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.main</span> &#123;</span></span><br><span class="line">            width: 1185px;</span><br><span class="line">            margin: 0 auto;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.main</span> <span class="selector-class">.topBar</span> &#123;</span></span><br><span class="line">            height: 50px;</span><br><span class="line"><span class="css">            <span class="selector-tag">background</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line">            display: flex;</span><br><span class="line">            align-items: center;</span><br><span class="line">            padding-left: 20px;</span><br><span class="line">            box-sizing: border-box;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.main</span> <span class="selector-class">.shortBtn</span> &#123;</span></span><br><span class="line">            display: flex;</span><br><span class="line">            align-items: center;</span><br><span class="line">            margin: 0 10px;</span><br><span class="line">            color: blue;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.main</span> <span class="selector-class">.shortBtn</span> <span class="selector-class">.arrows</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">color</span>: <span class="selector-id">#333</span>;</span></span><br><span class="line">            display: flex;</span><br><span class="line">            flex-direction: column;</span><br><span class="line">            margin-left: 10px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.main</span> <span class="selector-class">.shortBtn</span> <span class="selector-class">.iconfont</span> &#123;</span></span><br><span class="line">            font-size: 14px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.shortBtn</span><span class="selector-pseudo">:hover</span>&gt;<span class="selector-tag">span</span> &#123;</span></span><br><span class="line">            color: red;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.lists</span> &#123;</span></span><br><span class="line">            display: flex;</span><br><span class="line">            flex-wrap: wrap;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.lists</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line">            margin-top: 20px;</span><br><span class="line">            width: 225px;</span><br><span class="line"><span class="css">            <span class="selector-tag">background</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line">            padding: 20px;</span><br><span class="line">            box-sizing: border-box;</span><br><span class="line">            font-size: 14px;</span><br><span class="line">            margin-right: 15px;</span><br><span class="line">            line-height: 30px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.lists</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child(5n)</span>&#123;</span></span><br><span class="line">            margin-right: 0;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.lists</span> <span class="selector-tag">li</span> <span class="selector-tag">img</span> &#123;</span></span><br><span class="line">            width: 140px;</span><br><span class="line">            display: block;</span><br><span class="line">            margin: 0 auto;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.lists</span> <span class="selector-tag">li</span> <span class="selector-class">.numInfo</span> &#123;</span></span><br><span class="line">            display: flex;</span><br><span class="line">            justify-content: space-between;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.arrowUp</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">border</span>: 5<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#333</span>;</span></span><br><span class="line">            margin-bottom: 10px;</span><br><span class="line"><span class="css">            <span class="selector-tag">border-color</span>: <span class="selector-tag">transparent</span> <span class="selector-tag">transparent</span> <span class="selector-id">#333</span> <span class="selector-tag">transparent</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.arrowUp</span><span class="selector-class">.current</span> &#123;</span></span><br><span class="line">            border-color: transparent transparent red transparent;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.arrowDown</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">border</span>: 5<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#333</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">border-color</span>: <span class="selector-id">#333</span> <span class="selector-tag">transparent</span> <span class="selector-tag">transparent</span> <span class="selector-tag">transparent</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.arrowDown</span><span class="selector-class">.current</span> &#123;</span></span><br><span class="line">            border-color: red transparent transparent transparent;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;topBar&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>排序<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;shortBtn&quot;</span> <span class="attr">sortFlag</span>=<span class="string">&quot;time&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span>&gt;</span>上架时间<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;arrows&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">b</span> <span class="attr">class</span>=<span class="string">&quot;arrowUp&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">b</span> <span class="attr">class</span>=<span class="string">&quot;arrowDown&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;shortBtn&quot;</span> <span class="attr">sortFlag</span>=<span class="string">&quot;hot&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span>&gt;</span>热度<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;arrows&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">b</span> <span class="attr">class</span>=<span class="string">&quot;arrowUp&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">b</span> <span class="attr">class</span>=<span class="string">&quot;arrowDown&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;shortBtn&quot;</span> <span class="attr">sortFlag</span>=<span class="string">&quot;price&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span>&gt;</span>价格<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;arrows&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">b</span> <span class="attr">class</span>=<span class="string">&quot;arrowUp&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">b</span> <span class="attr">class</span>=<span class="string">&quot;arrowDown&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 图片列表 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;lists&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;index.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="data-json"><a href="#data-json" class="headerlink" title="data.json"></a>data.json</h3><ul><li>这里需要用 Ajax 请求一下如下 json 数据</li><li>创建 <code>data.json</code> ，粘贴如下数据</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;id&quot;</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="string">&quot;title&quot;</span>: <span class="string">&quot;HUAWEI全网通版（亮黑色）&quot;</span>,</span><br><span class="line">        <span class="string">&quot;price&quot;</span>: <span class="number">499</span>,</span><br><span class="line">        <span class="string">&quot;time&quot;</span>: <span class="string">&quot;2017-03-15&quot;</span>,</span><br><span class="line">        <span class="string">&quot;hot&quot;</span>: <span class="number">198</span>,</span><br><span class="line">        <span class="string">&quot;img&quot;</span>: <span class="string">&quot;img/1.jpg&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;id&quot;</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="string">&quot;title&quot;</span>: <span class="string">&quot;HUAWEI（曜石黑）&quot;</span>,</span><br><span class="line">        <span class="string">&quot;price&quot;</span>: <span class="number">129</span>,</span><br><span class="line">        <span class="string">&quot;time&quot;</span>: <span class="string">&quot;2017-02-08&quot;</span>,</span><br><span class="line">        <span class="string">&quot;hot&quot;</span>: <span class="number">25</span>,</span><br><span class="line">        <span class="string">&quot;img&quot;</span>: <span class="string">&quot;img/2.jpg&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;id&quot;</span>: <span class="number">3</span>,</span><br><span class="line">        <span class="string">&quot;title&quot;</span>: <span class="string">&quot;华为畅享7（香槟金）&quot;</span>,</span><br><span class="line">        <span class="string">&quot;price&quot;</span>: <span class="number">895</span>,</span><br><span class="line">        <span class="string">&quot;time&quot;</span>: <span class="string">&quot;2017-01-25&quot;</span>,</span><br><span class="line">        <span class="string">&quot;hot&quot;</span>: <span class="number">568</span>,</span><br><span class="line">        <span class="string">&quot;img&quot;</span>: <span class="string">&quot;img/3.jpg&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;id&quot;</span>: <span class="number">4</span>,</span><br><span class="line">        <span class="string">&quot;title&quot;</span>: <span class="string">&quot;HUAWEI全网通版（曜石黑）&quot;</span>,</span><br><span class="line">        <span class="string">&quot;price&quot;</span>: <span class="number">1895</span>,</span><br><span class="line">        <span class="string">&quot;time&quot;</span>: <span class="string">&quot;2016-12-30&quot;</span>,</span><br><span class="line">        <span class="string">&quot;hot&quot;</span>: <span class="number">20000</span>,</span><br><span class="line">        <span class="string">&quot;img&quot;</span>: <span class="string">&quot;img/4.jpg&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;id&quot;</span>: <span class="number">5</span>,</span><br><span class="line">        <span class="string">&quot;title&quot;</span>: <span class="string">&quot;HUAWEI全网通版（玫瑰金）&quot;</span>,</span><br><span class="line">        <span class="string">&quot;price&quot;</span>: <span class="number">3587</span>,</span><br><span class="line">        <span class="string">&quot;time&quot;</span>: <span class="string">&quot;2016-01-30&quot;</span>,</span><br><span class="line">        <span class="string">&quot;hot&quot;</span>: <span class="number">1032654</span>,</span><br><span class="line">        <span class="string">&quot;img&quot;</span>: <span class="string">&quot;img/5.jpg&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;id&quot;</span>: <span class="number">6</span>,</span><br><span class="line">        <span class="string">&quot;title&quot;</span>: <span class="string">&quot;华为畅享7（香槟金）&quot;</span>,</span><br><span class="line">        <span class="string">&quot;price&quot;</span>: <span class="number">992</span>,</span><br><span class="line">        <span class="string">&quot;time&quot;</span>: <span class="string">&quot;2018-01-01&quot;</span>,</span><br><span class="line">        <span class="string">&quot;hot&quot;</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="string">&quot;img&quot;</span>: <span class="string">&quot;img/6.jpg&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;id&quot;</span>: <span class="number">7</span>,</span><br><span class="line">        <span class="string">&quot;title&quot;</span>: <span class="string">&quot;HUAWEI全网通版（樱语粉）&quot;</span>,</span><br><span class="line">        <span class="string">&quot;price&quot;</span>: <span class="number">564</span>,</span><br><span class="line">        <span class="string">&quot;time&quot;</span>: <span class="string">&quot;2017-02-19&quot;</span>,</span><br><span class="line">        <span class="string">&quot;hot&quot;</span>: <span class="number">400</span>,</span><br><span class="line">        <span class="string">&quot;img&quot;</span>: <span class="string">&quot;img/7.jpg&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;id&quot;</span>: <span class="number">8</span>,</span><br><span class="line">        <span class="string">&quot;title&quot;</span>: <span class="string">&quot;HUAWEI全网通版（曜石黑）&quot;</span>,</span><br><span class="line">        <span class="string">&quot;price&quot;</span>: <span class="number">420</span>,</span><br><span class="line">        <span class="string">&quot;time&quot;</span>: <span class="string">&quot;2017-01-25&quot;</span>,</span><br><span class="line">        <span class="string">&quot;hot&quot;</span>: <span class="number">240</span>,</span><br><span class="line">        <span class="string">&quot;img&quot;</span>: <span class="string">&quot;img/8.jpg&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;id&quot;</span>: <span class="number">9</span>,</span><br><span class="line">        <span class="string">&quot;title&quot;</span>: <span class="string">&quot;HUAWEI P10（钻雕金）&quot;</span>,</span><br><span class="line">        <span class="string">&quot;price&quot;</span>: <span class="number">12</span>,</span><br><span class="line">        <span class="string">&quot;time&quot;</span>: <span class="string">&quot;2014-01-01&quot;</span>,</span><br><span class="line">        <span class="string">&quot;hot&quot;</span>: <span class="number">12345678</span>,</span><br><span class="line">        <span class="string">&quot;img&quot;</span>: <span class="string">&quot;img/9.jpg&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;id&quot;</span>: <span class="number">10</span>,</span><br><span class="line">        <span class="string">&quot;title&quot;</span>: <span class="string">&quot;HUAWEI全网通版（曜石黑）&quot;</span>,</span><br><span class="line">        <span class="string">&quot;price&quot;</span>: <span class="number">420</span>,</span><br><span class="line">        <span class="string">&quot;time&quot;</span>: <span class="string">&quot;2017-01-25&quot;</span>,</span><br><span class="line">        <span class="string">&quot;hot&quot;</span>: <span class="number">240</span>,</span><br><span class="line">        <span class="string">&quot;img&quot;</span>: <span class="string">&quot;img/8.jpg&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="index-js"><a href="#index-js" class="headerlink" title="index.js"></a>index.js</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取页面元素</span></span><br><span class="line"><span class="keyword">let</span> lists = <span class="built_in">document</span>.querySelector(<span class="string">&quot;.lists&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> links = <span class="built_in">document</span>.querySelectorAll(<span class="string">&quot;.topBar a&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> lis = lists.getElementsByTagName(<span class="string">&quot;li&quot;</span>);</span><br><span class="line"><span class="comment">// Ajax 请求数据</span></span><br><span class="line"><span class="keyword">let</span> data = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.数据请求 Ajax四部曲</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getData</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    xhr.open(<span class="string">&quot;get&quot;</span>, url);</span><br><span class="line">    xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (xhr.readyState == <span class="number">4</span> &amp;&amp; xhr.status == <span class="number">200</span>) &#123;</span><br><span class="line">            data = <span class="built_in">JSON</span>.parse(xhr.responseText);</span><br><span class="line">            BindHtml(data);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    xhr.send();</span><br><span class="line">&#125;</span><br><span class="line">getData(<span class="string">&quot;data/data.json&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.渲染li</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">BindHtml</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> str = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; data.length; i++) &#123;</span><br><span class="line">        <span class="keyword">const</span> el = data[i];</span><br><span class="line">        str += <span class="string">`&lt;li time=&quot;<span class="subst">$&#123;el.time&#125;</span>&quot; price=&quot;<span class="subst">$&#123;el.price&#125;</span>&quot; hot=&quot;<span class="subst">$&#123;el.hot&#125;</span>&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;img src=&quot;<span class="subst">$&#123;el.img&#125;</span>&quot; alt=&quot;&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;p class=&quot;title&quot;&gt;<span class="subst">$&#123;el.title&#125;</span>&lt;/p&gt;</span></span><br><span class="line"><span class="string">        &lt;p class=&quot;time&quot;&gt;<span class="subst">$&#123;el.time&#125;</span>&lt;/p&gt;</span></span><br><span class="line"><span class="string">        &lt;p class=&quot;numInfo&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;span class=&quot;price&quot;&gt;<span class="subst">$&#123;el.price&#125;</span>&lt;/span&gt;</span></span><br><span class="line"><span class="string">            &lt;span class=&quot;hot&quot;&gt;<span class="subst">$&#123;el.hot&#125;</span>&lt;/span&gt;</span></span><br><span class="line"><span class="string">        &lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;/li&gt;`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    lists.innerHTML = str;</span><br><span class="line">    lis = [].slice.call(lis);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 3.给link绑定事件</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; links.length; i++) &#123;</span><br><span class="line">    links[i].flag = -<span class="number">1</span>;</span><br><span class="line">    links[i].onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> that = <span class="built_in">this</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; links.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (links[i] != <span class="built_in">this</span>) &#123;</span><br><span class="line">                links[i].flag = -<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.flag *= -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">let</span> sortFlag = <span class="built_in">this</span>.getAttribute(<span class="string">&quot;sortFlag&quot;</span>);</span><br><span class="line">        <span class="keyword">let</span> arrows = <span class="built_in">this</span>.querySelectorAll(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">        <span class="keyword">let</span> arrCur = <span class="built_in">document</span>.querySelectorAll(<span class="string">&quot;b.current&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arrCur.length; i++) &#123;</span><br><span class="line">            arrCur[i].classList.remove(<span class="string">&quot;current&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.flag == <span class="number">1</span>) &#123;</span><br><span class="line">            arrows[<span class="number">0</span>].classList.add(<span class="string">&quot;current&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            arrows[<span class="number">1</span>].classList.add(<span class="string">&quot;current&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> frg = <span class="built_in">document</span>.createDocumentFragment();</span><br><span class="line">        <span class="keyword">if</span> (sortFlag == <span class="string">&quot;time&quot;</span>) &#123;</span><br><span class="line">            lis.sort(<span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> (a.getAttribute(sortFlag).replace(<span class="regexp">/-/g</span>, <span class="string">&quot;&quot;</span>) - b.getAttribute(sortFlag).replace(<span class="regexp">/-/g</span>, <span class="string">&quot;&quot;</span>)) * that.flag;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            lis.sort(<span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> (a.getAttribute(sortFlag) - b.getAttribute(sortFlag)) * that.flag;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; lis.length; i++) &#123;</span><br><span class="line">            frg.appendChild(lis[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        lists.appendChild(frg);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;实现效果&quot;&gt;&lt;a href=&quot;#实现效果&quot; class=&quot;headerlink&quot; title=&quot;实现效果&quot;&gt;&lt;/a&gt;实现效果&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;根据上架时间/热度/价格进行升序/降序排序&lt;/li&gt;
&lt;li&gt;上箭头亮代表升序，下箭头亮代表降序&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="JavaScript" scheme="http://llmysnow.top/categories/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="http://llmysnow.top/tags/JavaScript/"/>
    
    <category term="DocumentFragment" scheme="http://llmysnow.top/tags/DocumentFragment/"/>
    
    <category term="排序" scheme="http://llmysnow.top/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
</feed>
