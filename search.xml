<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>自动化构建（Grunt、Gulp）</title>
    <url>/posts/95392a2e/</url>
    <content><![CDATA[<h2 id="自动化构建"><a href="#自动化构建" class="headerlink" title="自动化构建"></a>自动化构建</h2><p><strong>源代码 -&gt; 生成代码</strong></p>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/lagoulearn-img/%E5%89%8D%E7%AB%AF%E6%A0%B7%E5%BC%8F%E8%87%AA%E5%8A%A8%E5%8C%96%E6%9E%84%E5%BB%BA.png" alt="前端样式自动化构建"></p>
<a id="more"></a>

<p>输入 <code>scss scss/main.scss css/style.css</code> 即可构建出 css</p>
<ul>
<li><p>缺点：每次都需要重复输入这个复杂的命令</p>
<p>npm script 就是用来解决这个问题</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;build&quot;</span>: <span class="string">&quot;sass scss/main.scss css/style.css --watch&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>接下来安装 <code>browser-sync</code> 用于启动测试服务器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn add browser-sync --dev</span><br></pre></td></tr></table></figure>

<p>运行测试服务器 <code>npm run serve</code></p>
<ul>
<li><code>--files</code> 监听文件变化</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;serve&quot;</span>: <span class="string">&quot;browser-sync . --files \&quot;css/*.css\&quot;</span></span><br><span class="line"><span class="string">  &#125;,</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>

<p>不过这里可能有个问题，如果在运行测试服务器之前，没有生成 css，浏览器就没办法展示样式</p>
<ul>
<li>这里就可以用到 npm script 的钩子机制 <code>preserve</code> 在启动任务之前，让 build 先去工作</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;preserve&quot;</span>: <span class="string">&quot;yarn build&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果给 build 增加 <code>--watch</code> 参数，scss 会阻塞命令行等待文件变化，就会导致 <code>browser-sync</code> 没办法直接去工作</p>
<ul>
<li><p>这里就需要用 <code>npm-run-all</code> 同时执行多个命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn add npm-run-all --dev</span><br></pre></td></tr></table></figure>

</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;start&quot;</span>: <span class="string">&quot;run-p build serve&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>常用工具</strong></p>
<ul>
<li>严格来说 Webpack 是模块打包工具</li>
<li>Grunt、Gulp、FIS 是自动化构建工具</li>
</ul>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/lagoulearn-img/%E5%B8%B8%E7%94%A8%E8%87%AA%E5%8A%A8%E5%8C%96%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7.png" alt="常用自动化构建工具"></p>
<ul>
<li>Grunt 老牌构建工具，插件生态完善，但是它的工作过程是基于临时文件实现的，所以构建速度较慢(Scss 编译后就会将结果写入到临时文件，下一个插件读取这个临时文件进行操作，环节越多读取文件次数越多)</li>
<li>Gulp 基于内存实现的，对文件的处理都是在内存中实现，速度快一些，默认同时支持多个任务，目前比较流行</li>
<li>FIS 百度团队研发，把项目中最典型需求都集成到内部，大而全</li>
</ul>
<h2 id="Grunt"><a href="#Grunt" class="headerlink" title="Grunt"></a>Grunt</h2><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn init –yes</span><br><span class="line">yarn add grunt</span><br></pre></td></tr></table></figure>

<p>新建 <code>gruntfile.js</code></p>
<ul>
<li>Grunt 的入口文件，用于定义一些需要 Grunt 自动执行的任务</li>
<li>需要导出一个函数，该函数接收一个 grunt 对象，内部提供一些创建任务可以用到的 API</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="params">grunt</span> =&gt;</span> &#123;</span><br><span class="line">  grunt.registerTask(<span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;任务描述&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;foo&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  grunt.registerTask(<span class="string">&#x27;bar&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;bar&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// 第二个参数可以指定此任务的映射任务</span></span><br><span class="line">  <span class="comment">// 这样执行 default 就相当于执行对应的任务</span></span><br><span class="line">  <span class="comment">// 这里映射的任务会按顺序依次执行，不会同步执行</span></span><br><span class="line">  grunt.registerTask(<span class="string">&#x27;default&#x27;</span>, [<span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;bar&#x27;</span>])</span><br><span class="line">  <span class="comment">// 由于函数体中需要使用 this，所以这里不能使用箭头函数</span></span><br><span class="line">  grunt.registerTask(<span class="string">&#x27;async-task&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> done = <span class="built_in">this</span>.async()</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;async task working~&#x27;</span>)</span><br><span class="line">      done()</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="标记任务失败"><a href="#标记任务失败" class="headerlink" title="标记任务失败"></a>标记任务失败</h3><ul>
<li><p>任务函数执行过程中如果返回 false，则意味着此任务执行失败</p>
</li>
<li><p>如果一个任务列表中的某个任务执行失败，则后续任务默认不会运行</p>
<p>除非 grunt 运行时指定 <code>--force</code> 参数强制执行</p>
</li>
<li><p>异步函数中标记当前任务执行失败的方式是为回调函数指定一个 false 的实参</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="params">grunt</span> =&gt;</span> &#123;</span><br><span class="line">  grunt.registerTask(<span class="string">&#x27;bad&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;bad working~&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;)</span><br><span class="line">  grunt.registerTask(<span class="string">&#x27;foo&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;foo working~&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  grunt.registerTask(<span class="string">&#x27;bar&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;bar working~&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  grunt.registerTask(<span class="string">&#x27;default&#x27;</span>, [<span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;bad&#x27;</span>, <span class="string">&#x27;bar&#x27;</span>])</span><br><span class="line">  grunt.registerTask(<span class="string">&#x27;bad-async&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> done = <span class="built_in">this</span>.async()</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;async task working~&#x27;</span>)</span><br><span class="line">      done(<span class="literal">false</span>)</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="配置选项方法"><a href="#配置选项方法" class="headerlink" title="配置选项方法"></a>配置选项方法</h3><p>用 <code>init</code> 配置，用 <code>grunt.config</code> 获取属性值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="params">grunt</span> =&gt;</span> &#123;</span><br><span class="line">  grunt.initConfig(&#123;</span><br><span class="line">    foo: &#123;</span><br><span class="line">      bar: <span class="number">123</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">  grunt.registerTask(<span class="string">&#x27;foo&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(grunt.config(<span class="string">&#x27;foo.bar&#x27;</span>))</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="多目标任务"><a href="#多目标任务" class="headerlink" title="多目标任务"></a>多目标任务</h3><p>用 <code>init</code> 配置，通过 <code>this</code> 拿到执行的名称和数据</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="params">grunt</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 多目标模式，可以让任务根据配置形成多个子任务</span></span><br><span class="line">  grunt.initConfig(&#123;</span><br><span class="line">    build: &#123;</span><br><span class="line">      options: &#123;</span><br><span class="line">        msg: <span class="string">&#x27;task options&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      foo: &#123;</span><br><span class="line">        options: &#123;</span><br><span class="line">          msg: <span class="string">&#x27;foo target options&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      bar: <span class="string">&#x27;456&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">  grunt.registerMultiTask(<span class="string">&#x27;build&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.options())</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`target:<span class="subst">$&#123;<span class="built_in">this</span>.target&#125;</span>,data:<span class="subst">$&#123;<span class="built_in">this</span>.data&#125;</span>`</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Grunt-插件"><a href="#Grunt-插件" class="headerlink" title="Grunt 插件"></a>Grunt 插件</h3><p>安装 <code>grunt-contrib-clean</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn add grunt-contrib-clean --dev</span><br></pre></td></tr></table></figure>

<p>将 temp 目录下所有文件都清除</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">module.exports = grunt =&gt; &#123;</span><br><span class="line">  grunt.initConfig(&#123;</span><br><span class="line">    clean: &#123;</span><br><span class="line">      temp: <span class="string">&#x27;temp/**&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  grunt.loadNpmTasks(<span class="string">&#x27;grunt-contrib-clean&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>安装 <code>grunt-sass</code>、<code>sass</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn add grunt-sass sass --dev</span><br></pre></td></tr></table></figure>

<p>安装 <code>grunt-babal</code>、<code>babel</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn add grunt-babel @babel/core @babel/preset-env --dev</span><br></pre></td></tr></table></figure>

<p>随着 <code>gruntfile.js</code> 越来越复杂，<code>loadNpmTasks</code> 操作也会越来越多，可以使用 <code>load-grunt-tasks</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn add load-grunt-tasks --dev</span><br></pre></td></tr></table></figure>

<p>当文件修改完，需要自动去编译，这时需要另外一个插件 <code>grunt-contrib-watch</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn add grunt-contrib-watch --dev</span><br></pre></td></tr></table></figure>

<p>Grunt 使用插件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> sass = <span class="built_in">require</span>(<span class="string">&#x27;sass&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> loadGruntTasks = <span class="built_in">require</span>(<span class="string">&#x27;load-grunt-tasks&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="params">grunt</span> =&gt;</span> &#123;</span><br><span class="line">  grunt.initConfig(&#123;</span><br><span class="line">    sass: &#123;</span><br><span class="line">      options: &#123;</span><br><span class="line">        sourceMap: <span class="literal">true</span>,</span><br><span class="line">        implementation: sass,</span><br><span class="line">      &#125;,</span><br><span class="line">      main: &#123;</span><br><span class="line">        files: &#123;</span><br><span class="line">          <span class="string">&#x27;dist/css/main.css&#x27;</span>: <span class="string">&#x27;src/scss/main.scss&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    babel: &#123;</span><br><span class="line">      options: &#123;</span><br><span class="line">        sourceMap: <span class="literal">true</span>,</span><br><span class="line">        presets: [<span class="string">&#x27;@babel/preset-env&#x27;</span>],</span><br><span class="line">      &#125;,</span><br><span class="line">      main: &#123;</span><br><span class="line">        files: &#123;</span><br><span class="line">          <span class="string">&#x27;dist/js/app.js&#x27;</span>: <span class="string">&#x27;src/js/app.js&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    watch: &#123;</span><br><span class="line">      js: &#123;</span><br><span class="line">        files: [<span class="string">&#x27;src/js/*.js&#x27;</span>],</span><br><span class="line">        tasks: [<span class="string">&#x27;babel&#x27;</span>],</span><br><span class="line">      &#125;,</span><br><span class="line">      css: &#123;</span><br><span class="line">        files: [<span class="string">&#x27;src/scss/*.scss&#x27;</span>],</span><br><span class="line">        tasks: [<span class="string">&#x27;sass&#x27;</span>],</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  loadGruntTasks(grunt) <span class="comment">// 自动加载所有 grunt 插件中的任务</span></span><br><span class="line">  grunt.registerTask(<span class="string">&#x27;default&#x27;</span>, [<span class="string">&#x27;sass&#x27;</span>, <span class="string">&#x27;babel&#x27;</span>, <span class="string">&#x27;watch&#x27;</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Gulp"><a href="#Gulp" class="headerlink" title="Gulp"></a>Gulp</h2><h3 id="基本使用-1"><a href="#基本使用-1" class="headerlink" title="基本使用"></a>基本使用</h3><p>Gulp 核心特点：高效易用</p>
<ul>
<li>安装 Gulp 同时会自动安装一个叫 gulpcli 模块</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn init --yes</span><br><span class="line">yarn add gulp --dev</span><br></pre></td></tr></table></figure>

<p>创建 <code>gulpfile.js</code> 入口，导出一个 foo 函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">exports</span>.foo = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;foo task working~&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行 <code>yarn gulp foo</code>,发现有报错</p>
<ul>
<li>gulp 取消了同步代码模式，约定每一个任务都是异步的，当任务执行完需要通过回调函数标记任务执行完毕</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[11:04:54] The following tasks did not complete: foo</span><br><span class="line">[11:04:54] Did you forget to signal async completion?</span><br><span class="line">error Command failed with <span class="built_in">exit</span> code 1.</span><br></pre></td></tr></table></figure>

<p>gulp 4.0 以后的保留了 <code>gulp.task</code> API</p>
<ul>
<li>gulp 4.0 以后推荐使用导出函数成员方式</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">exports</span>.foo = <span class="function"><span class="params">done</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;foo task working~&#x27;</span>)</span><br><span class="line">  done() <span class="comment">// 标识任务执行完成</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// default 是默认任务</span></span><br><span class="line"><span class="built_in">exports</span>.default = <span class="function"><span class="params">done</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;default task working~&#x27;</span>)</span><br><span class="line">  done()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// v4.0 之前需要通过 gulp.task() 方法注册任务</span></span><br><span class="line"><span class="keyword">const</span> gulp = <span class="built_in">require</span>(<span class="string">&#x27;gulp&#x27;</span>)</span><br><span class="line">gulp.task(<span class="string">&#x27;bar&#x27;</span>, <span class="function"><span class="params">done</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;bar task working~&#x27;</span>)</span><br><span class="line">  done()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="组合任务"><a href="#组合任务" class="headerlink" title="组合任务"></a>组合任务</h3><p>通过 <code>series</code>、<code>parallel</code> 组合多个任务</p>
<ul>
<li>编译 CSS、JS 任务互不干扰可以并行处理</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; series, parallel &#125; = <span class="built_in">require</span>(<span class="string">&#x27;gulp&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> task1 = <span class="function"><span class="params">done</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;task1 working~&#x27;</span>)</span><br><span class="line">    done()</span><br><span class="line">  &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> task2 = <span class="function"><span class="params">done</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;task2 working~&#x27;</span>)</span><br><span class="line">    done()</span><br><span class="line">  &#125;, <span class="number">1000</span>)  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> task3 = <span class="function"><span class="params">done</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;task3 working~&#x27;</span>)</span><br><span class="line">    done()</span><br><span class="line">  &#125;, <span class="number">1000</span>)  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 让多个任务按照顺序依次执行</span></span><br><span class="line"><span class="built_in">exports</span>.foo = series(task1, task2, task3)</span><br><span class="line"><span class="comment">// 让多个任务同时执行</span></span><br><span class="line"><span class="built_in">exports</span>.bar = parallel(task1, task2, task3)</span><br></pre></td></tr></table></figure>

<h3 id="异步任务"><a href="#异步任务" class="headerlink" title="异步任务"></a>异步任务</h3><ol>
<li>回调函数</li>
<li>Promsie、async 和 await（Node 8 以上的版本）</li>
<li>Stram 方式</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.callback = <span class="function"><span class="params">done</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;callback task&#x27;</span>)</span><br><span class="line">  done()</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">exports</span>.callback_error = <span class="function"><span class="params">done</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;callback task&#x27;</span>)</span><br><span class="line">  done(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;task failed&#x27;</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.promise = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;promise task&#x27;</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve()</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">exports</span>.promise_error = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;promise task&#x27;</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;task failed&#x27;</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> timeout = <span class="function"><span class="params">time</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(resolve, time)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">exports</span>.async = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">await</span> timeout(<span class="number">1000</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;async task&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.stream = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> readStream = fs.createReadStream(<span class="string">&#x27;package.json&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> writeStream = fs.createWriteStream(<span class="string">&#x27;temp.txt&#x27;</span>)</span><br><span class="line">  readStream.pipe(writeStream) <span class="comment">// pipe导入写入流中</span></span><br><span class="line">  <span class="comment">// gulp 只是注册了 end 事件去结束</span></span><br><span class="line">  <span class="comment">/* readStream.on(&#x27;end&#x27;, () =&gt; &#123;</span></span><br><span class="line"><span class="comment">    done()</span></span><br><span class="line"><span class="comment">  &#125;) */</span></span><br><span class="line">  <span class="keyword">return</span> readStream</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="核心工作原理"><a href="#核心工作原理" class="headerlink" title="核心工作原理"></a>核心工作原理</h3><ul>
<li>The streaming build system</li>
</ul>
<p>stream 的 Transform 类型可以创建文件转换流对象，里面需要指定 transform 属性（转化流核心转换过程）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; Transform &#125; = <span class="built_in">require</span>(<span class="string">&#x27;stream&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.default = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 文件读取流</span></span><br><span class="line">  <span class="keyword">const</span> readStream = fs.createReadStream(<span class="string">&#x27;normalize.css&#x27;</span>)</span><br><span class="line">  <span class="comment">// 文件写入流</span></span><br><span class="line">  <span class="keyword">const</span> writeStream = fs.createWriteStream(<span class="string">&#x27;normalize.min.css&#x27;</span>)</span><br><span class="line">  <span class="comment">// 文件转换流</span></span><br><span class="line">  <span class="keyword">const</span> transformStream = <span class="keyword">new</span> Transform(&#123;</span><br><span class="line">    <span class="comment">// 核心转换过程</span></span><br><span class="line">    transform: <span class="function">(<span class="params">chunk, encoding, callback</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> input = chunk.toString()</span><br><span class="line">      <span class="keyword">const</span> output = input.replace(<span class="regexp">/\s+/g</span>, <span class="string">&#x27;&#x27;</span>).replace(<span class="regexp">/\/\*.+?\*\//g</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">      callback(<span class="literal">null</span>, output)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> readStream</span><br><span class="line">    .pipe(transformStream) <span class="comment">// 转换</span></span><br><span class="line">    .pipe(writeStream) <span class="comment">// 写入</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img data-src="https://gitee.com/lilyn/pic/raw/master/lagoulearn-img/Gulp%E6%A0%B8%E5%BF%83%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86.png" alt="Gulp核心工作原理"></p>
<h3 id="文件操作-API"><a href="#文件操作-API" class="headerlink" title="文件操作 API"></a>文件操作 API</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn add gulp-clean-css --dev</span><br><span class="line">yarn add gulp-rename --dev</span><br></pre></td></tr></table></figure>

<p>通过 src 去 pipe 到插件转换流，再去 pipe 到写入流的过程就是使用 gulp 常规过程</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; src, dest &#125; = <span class="built_in">require</span>(<span class="string">&#x27;gulp&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> cleanCSS = <span class="built_in">require</span>(<span class="string">&#x27;gulp-clean-css&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> rename = <span class="built_in">require</span>(<span class="string">&#x27;gulp-rename&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.default = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> src(<span class="string">&#x27;src/*.css&#x27;</span>)</span><br><span class="line">    .pipe(cleanCSS())</span><br><span class="line">    .pipe(rename(&#123; <span class="attr">extname</span>: <span class="string">&#x27;.min.css&#x27;</span> &#125;))</span><br><span class="line">    .pipe(dest(<span class="string">&#x27;dist&#x27;</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Gulp-案例"><a href="#Gulp-案例" class="headerlink" title="Gulp 案例"></a>Gulp 案例</h2><h3 id="样式编译"><a href="#样式编译" class="headerlink" title="样式编译"></a>样式编译</h3><p>下载代码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/zec/zec-gulp-demo.git</span><br></pre></td></tr></table></figure>

<p>安装 <code>gulp</code>、<code>gulp-sass</code></p>
<ul>
<li>安装 <code>gulp-sass</code> 会安装 node-sass（是 C++ 模块），内部会有对 C++ 程序集的依赖，二进制包需要国外站点去下载，有时会下载不下来，可以配置淘宝镜像源下载</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yarn add gulp --dev</span><br><span class="line">yarn add gulp-sass --dev</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; src, dest &#125; = <span class="built_in">require</span>(<span class="string">&#x27;gulp&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> sass = <span class="built_in">require</span>(<span class="string">&#x27;gulp-sass&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> style = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> src(<span class="string">`src/assets/styles/*.scss`</span>, &#123; <span class="attr">base</span>: <span class="string">&#x27;src&#x27;</span> &#125;)</span><br><span class="line">    .pipe(sass(&#123; <span class="attr">outputStyle</span>: <span class="string">&#x27;expanded&#x27;</span> &#125;))</span><br><span class="line">    .pipe(dest(<span class="string">&#x27;dist&#x27;</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  style,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="脚本编译"><a href="#脚本编译" class="headerlink" title="脚本编译"></a>脚本编译</h3><p>安装 <code>gulp-babel</code>、<code>@babel/core</code>、<code>@babel/preset-env</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn add gulp-babel --dev</span><br><span class="line">yarn add @babel/core @babel/preset-env --dev</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; src, dest &#125; = <span class="built_in">require</span>(<span class="string">&#x27;gulp&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> babel = <span class="built_in">require</span>(<span class="string">&#x27;gulp-babel&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> script = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> src(<span class="string">`src/assets/scripts/*.js`</span>, &#123; <span class="attr">base</span>: <span class="string">&#x27;src&#x27;</span> &#125;)</span><br><span class="line">    .pipe(babel(&#123; <span class="attr">presets</span>: [<span class="string">&#x27;@babel/preset-env&#x27;</span>] &#125;))</span><br><span class="line">    .pipe(dest(<span class="string">&#x27;dist&#x27;</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  script,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="页面模板编译"><a href="#页面模板编译" class="headerlink" title="页面模板编译"></a>页面模板编译</h3><p>安装 <code>gulp-swig</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn add gulp-swig --dev</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; src, dest, parallel &#125; = <span class="built_in">require</span>(<span class="string">&#x27;gulp&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> swig = <span class="built_in">require</span>(<span class="string">&#x27;gulp-swig&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> data = &#123;</span><br><span class="line">  menus: [</span><br><span class="line">    &#123;</span><br><span class="line">      name: <span class="string">&#x27;Home&#x27;</span>,</span><br><span class="line">      icon: <span class="string">&#x27;aperture&#x27;</span>,</span><br><span class="line">      link: <span class="string">&#x27;index.html&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      name: <span class="string">&#x27;Features&#x27;</span>,</span><br><span class="line">      link: <span class="string">&#x27;features.html&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      name: <span class="string">&#x27;About&#x27;</span>,</span><br><span class="line">      link: <span class="string">&#x27;about.html&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      name: <span class="string">&#x27;Contact&#x27;</span>,</span><br><span class="line">      link: <span class="string">&#x27;#&#x27;</span>,</span><br><span class="line">      children: [</span><br><span class="line">        &#123;</span><br><span class="line">          name: <span class="string">&#x27;Twitter&#x27;</span>,</span><br><span class="line">          link: <span class="string">&#x27;https://twitter.com/w_zce&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          name: <span class="string">&#x27;About&#x27;</span>,</span><br><span class="line">          link: <span class="string">&#x27;https://weibo.com/zceme&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          name: <span class="string">&#x27;divider&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          name: <span class="string">&#x27;About&#x27;</span>,</span><br><span class="line">          link: <span class="string">&#x27;https://github.com/zce&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">  pkg: <span class="built_in">require</span>(<span class="string">&#x27;./package.json&#x27;</span>),</span><br><span class="line">  date: <span class="keyword">new</span> <span class="built_in">Date</span>(),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> page = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> src(<span class="string">`src/**/*.html`</span>, &#123; <span class="attr">base</span>: <span class="string">&#x27;src&#x27;</span> &#125;).pipe(swig(&#123; data &#125;)).pipe(dest(<span class="string">&#x27;dist&#x27;</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> compile = parallel(style, script, page)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  compile</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="图片和字体文件的转换"><a href="#图片和字体文件的转换" class="headerlink" title="图片和字体文件的转换"></a>图片和字体文件的转换</h3><p>安装 <code>gulp-imagemin</code></p>
<ul>
<li>内部依赖的模块也是通过 C++ 模块，需要下载二进制程序集（大部分 GitHub 下载），但是这个没办法配置镜像</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn add gulp-imagemin --dev</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; src, dest, parallel &#125; = <span class="built_in">require</span>(<span class="string">&#x27;gulp&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> imagemin = <span class="built_in">require</span>(<span class="string">&#x27;gulp-imagemin&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> image = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> src(<span class="string">`src/assets/images/**`</span>, &#123; <span class="attr">base</span>: <span class="string">&#x27;src&#x27;</span> &#125;).pipe(imagemin()).pipe(dest(<span class="string">&#x27;dist&#x27;</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> font = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> src(<span class="string">`src/assets/fonts/**`</span>, &#123; <span class="attr">base</span>: <span class="string">&#x27;src&#x27;</span> &#125;).pipe(imagemin()).pipe(dest(<span class="string">&#x27;dist&#x27;</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> compile = parallel(style, script, page, image, font)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  compile</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="其它文件及文件清除"><a href="#其它文件及文件清除" class="headerlink" title="其它文件及文件清除"></a>其它文件及文件清除</h3><p>安装 <code>del</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn add del --dev</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; src, dest, parallel, series &#125; = <span class="built_in">require</span>(<span class="string">&#x27;gulp&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> del = <span class="built_in">require</span>(<span class="string">&#x27;del&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> clean = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> del([<span class="string">&#x27;dist&#x27;</span>])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> compile = parallel(style, script, page, image, font)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> build = series(clean, parallel(compile, extra))</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  build,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="自动加载插件"><a href="#自动加载插件" class="headerlink" title="自动加载插件"></a>自动加载插件</h3><p>安装 <code>gulp-load-plugins</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn add gulp-load-plugins --dev</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; src, dest, parallel, series &#125; = <span class="built_in">require</span>(<span class="string">&#x27;gulp&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> del = <span class="built_in">require</span>(<span class="string">&#x27;del&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> loadPlugins = <span class="built_in">require</span>(<span class="string">&#x27;gulp-load-plugins&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> plugins = loadPlugins()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> data = &#123;...&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> clean = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> del([<span class="string">&#x27;dist&#x27;</span>])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> style = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> src(<span class="string">`src/assets/styles/*.scss`</span>, &#123; <span class="attr">base</span>: <span class="string">&#x27;src&#x27;</span> &#125;)</span><br><span class="line">    .pipe(plugins.sass(&#123; <span class="attr">outputStyle</span>: <span class="string">&#x27;expanded&#x27;</span> &#125;))</span><br><span class="line">    .pipe(dest(<span class="string">&#x27;dist&#x27;</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> script = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> src(<span class="string">`src/assets/scripts/*.js`</span>, &#123; <span class="attr">base</span>: <span class="string">&#x27;src&#x27;</span> &#125;)</span><br><span class="line">    .pipe(plugins.babel(&#123; <span class="attr">presets</span>: [<span class="string">&#x27;@babel/preset-env&#x27;</span>] &#125;))</span><br><span class="line">    .pipe(dest(<span class="string">&#x27;dist&#x27;</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> page = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> src(<span class="string">`src/**/*.html`</span>, &#123; <span class="attr">base</span>: <span class="string">&#x27;src&#x27;</span> &#125;).pipe(plugins.swig(&#123; data &#125;)).pipe(dest(<span class="string">&#x27;dist&#x27;</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> image = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> src(<span class="string">`src/assets/images/**`</span>, &#123; <span class="attr">base</span>: <span class="string">&#x27;src&#x27;</span> &#125;).pipe(plugins.imagemin()).pipe(dest(<span class="string">&#x27;dist&#x27;</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> font = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> src(<span class="string">`src/assets/fonts/**`</span>, &#123; <span class="attr">base</span>: <span class="string">&#x27;src&#x27;</span> &#125;).pipe(plugins.imagemin()).pipe(dest(<span class="string">&#x27;dist&#x27;</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> extra = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> src(<span class="string">`public/**`</span>, &#123; <span class="attr">base</span>: <span class="string">&#x27;public&#x27;</span> &#125;).pipe(dest(<span class="string">&#x27;dist&#x27;</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> compile = parallel(style, script, page, image, font)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> build = series(clean, parallel(compile, extra))</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  build,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="热更新开发服务器"><a href="#热更新开发服务器" class="headerlink" title="热更新开发服务器"></a>热更新开发服务器</h3><p>安装 <code>browser-sync</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn add browser-sync --dev</span><br></pre></td></tr></table></figure>

<ul>
<li><p>编译过程中并没有处理 <code>node_modules</code> 模块下面的拷贝</p>
<p>可以给 <code>browser-sync</code> 增加一个单独的路由（<code>routes</code>），这个路由优先级比 <code>baseDir</code> 高</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> browserSync = <span class="built_in">require</span>(<span class="string">&#x27;browser-sync&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> bs = browserSync.create()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> serve = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  bs.init(&#123;</span><br><span class="line">    notify: <span class="literal">false</span>,</span><br><span class="line">    port: <span class="number">2080</span>,</span><br><span class="line">    <span class="comment">// open: false,</span></span><br><span class="line">    files: <span class="string">&#x27;dist/**&#x27;</span>,</span><br><span class="line">    server: &#123;</span><br><span class="line">      baseDir: <span class="string">&#x27;dist&#x27;</span>,</span><br><span class="line">      routes: &#123;</span><br><span class="line">        <span class="string">&#x27;/node_modules&#x27;</span>: <span class="string">&#x27;node_modules&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  serve,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="监听变化及构建优化"><a href="#监听变化及构建优化" class="headerlink" title="监听变化及构建优化"></a>监听变化及构建优化</h3><ul>
<li><p><code>style</code>、<code>script</code>、<code>page</code> 文件改变可以 <code>.pipe(bs.reload(&#123; stream: true &#125;))</code></p>
<p>这样 <code>files: &#39;dist/**&#39;</code> 就不需要了 </p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; src, dest, parallel, series, watch &#125; = <span class="built_in">require</span>(<span class="string">&#x27;gulp&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> style = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> src(<span class="string">`src/assets/styles/*.scss`</span>, &#123; <span class="attr">base</span>: <span class="string">&#x27;src&#x27;</span> &#125;)</span><br><span class="line">    .pipe(plugins.sass(&#123; <span class="attr">outputStyle</span>: <span class="string">&#x27;expanded&#x27;</span> &#125;))</span><br><span class="line">    .pipe(dest(<span class="string">&#x27;dist&#x27;</span>))</span><br><span class="line">    .pipe(bs.reload(&#123; <span class="attr">stream</span>: <span class="literal">true</span> &#125;))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> script = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> src(<span class="string">`src/assets/scripts/*.js`</span>, &#123; <span class="attr">base</span>: <span class="string">&#x27;src&#x27;</span> &#125;)</span><br><span class="line">    .pipe(plugins.babel(&#123; <span class="attr">presets</span>: [<span class="string">&#x27;@babel/preset-env&#x27;</span>] &#125;))</span><br><span class="line">    .pipe(dest(<span class="string">&#x27;dist&#x27;</span>))</span><br><span class="line">    .pipe(bs.reload(&#123; <span class="attr">stream</span>: <span class="literal">true</span> &#125;))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> page = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> src(<span class="string">`src/**/*.html`</span>, &#123; <span class="attr">base</span>: <span class="string">&#x27;src&#x27;</span> &#125;)</span><br><span class="line">    .pipe(plugins.swig(&#123; data &#125;))</span><br><span class="line">    .pipe(dest(<span class="string">&#x27;dist&#x27;</span>))</span><br><span class="line">    .pipe(bs.reload(&#123; <span class="attr">stream</span>: <span class="literal">true</span> &#125;))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> serve = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  watch(<span class="string">&#x27;src/assets/styles/*.scss&#x27;</span>, style)</span><br><span class="line">  watch(<span class="string">&#x27;src/assets/scripts/*.js&#x27;</span>, script)</span><br><span class="line">  watch(<span class="string">&#x27;src/*.html&#x27;</span>, page)</span><br><span class="line">  <span class="comment">// watch(&#x27;src/assets/images/**&#x27;, image)</span></span><br><span class="line">  <span class="comment">// watch(&#x27;src/assets/fonts/**&#x27;, font)</span></span><br><span class="line">  <span class="comment">// watch(&#x27;public/**&#x27;, extra)</span></span><br><span class="line">  watch([<span class="string">&#x27;src/assets/images/**&#x27;</span>, <span class="string">&#x27;src/assets/fonts/**&#x27;</span>, <span class="string">&#x27;public/**&#x27;</span>], bs.reload)</span><br><span class="line"></span><br><span class="line">  bs.init(&#123;</span><br><span class="line">    notify: <span class="literal">false</span>,</span><br><span class="line">    port: <span class="number">2080</span>,</span><br><span class="line">    <span class="comment">// open: false,</span></span><br><span class="line">    <span class="comment">// files: &#x27;dist/**&#x27;,</span></span><br><span class="line">    server: &#123;</span><br><span class="line">      baseDir: [<span class="string">&#x27;dist&#x27;</span>, <span class="string">&#x27;src&#x27;</span>, <span class="string">&#x27;public&#x27;</span>],</span><br><span class="line">      routes: &#123;</span><br><span class="line">        <span class="string">&#x27;/node_modules&#x27;</span>: <span class="string">&#x27;node_modules&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> compile = parallel(style, script, page)</span><br><span class="line"><span class="keyword">const</span> build = series(clean, parallel(compile, image, font, extra))</span><br><span class="line"><span class="keyword">const</span> develop = series(compile, serve)</span><br></pre></td></tr></table></figure>

<h3 id="useref-文件引用处理"><a href="#useref-文件引用处理" class="headerlink" title="useref 文件引用处理"></a>useref 文件引用处理</h3><p>有些文件依赖的是 <code>node_modules</code> 下的文件，这里并没有将其拷贝到 dist 目录，如果上线肯定找不到，本地能找到是因为做了路由映射</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn add gulp-useref --dev</span><br></pre></td></tr></table></figure>

<p>构建注释</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- build:css assets/styles/vendor.css --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/node_modules/bootstrap/dist/css/bootstrap.css&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- endbuild --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- build:css assets/styles/main.css --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;assets/styles/main.css&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- endbuild --&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> useref = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> src(<span class="string">&#x27;dist/*.html&#x27;</span>, &#123; <span class="attr">base</span>: <span class="string">&#x27;dist&#x27;</span> &#125;)</span><br><span class="line">    .pipe(plugins.useref(&#123; <span class="attr">searchPath</span>: [<span class="string">&#x27;dist&#x27;</span>, <span class="string">&#x27;.&#x27;</span>] &#125;))</span><br><span class="line">    .pipe(dest(<span class="string">&#x27;dist&#x27;</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>分别压缩 HTML、CSS、JS</p>
<ul>
<li>另外还需要判断对不同文件的操作，这个时候就需要一个额外的插件去判断</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn add gulp-htmlmin gulp-uglify gulp-clean-css --dev</span><br><span class="line">yarn add gulp-if --dev</span><br></pre></td></tr></table></figure>

<p>操作时会发现 <code>main.css</code> 没有内容，这时因为文件读写冲突，一边读一边写</p>
<ul>
<li>可以把最终转换的结果放在其他目录中</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> useref = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> src(<span class="string">&#x27;dist/*.html&#x27;</span>, &#123; <span class="attr">base</span>: <span class="string">&#x27;dist&#x27;</span> &#125;)</span><br><span class="line">    .pipe(plugins.useref(&#123; <span class="attr">searchPath</span>: [<span class="string">&#x27;dist&#x27;</span>, <span class="string">&#x27;.&#x27;</span>] &#125;))</span><br><span class="line">    .pipe(plugins.if(<span class="regexp">/\.js$/</span>, plugins.uglify()))</span><br><span class="line">    .pipe(plugins.if(<span class="regexp">/\.css$/</span>, plugins.cleanCss()))</span><br><span class="line">    .pipe(</span><br><span class="line">      plugins.if(</span><br><span class="line">        /\.html$/,</span><br><span class="line">        plugins.htmlmin(&#123;</span><br><span class="line">          collapseWhitespace: <span class="literal">true</span>,</span><br><span class="line">          minifyCSS: <span class="literal">true</span>,</span><br><span class="line">          minifyJS: <span class="literal">true</span>,</span><br><span class="line">        &#125;)</span><br><span class="line">      )</span><br><span class="line">    )</span><br><span class="line">    .pipe(dest(<span class="string">&#x27;release&#x27;</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="重新规划构建过程"><a href="#重新规划构建过程" class="headerlink" title="重新规划构建过程"></a>重新规划构建过程</h3><p>useref 打破了我们的目录结构</p>
<ul>
<li>打包上线是 dist 目录，而 useref 把目录改成了 release</li>
</ul>
<p>增加临时目录 temp</p>
<ol>
<li><code>script</code>、<code>style</code>、<code>page</code> 放到 temp 目录</li>
<li><code>image</code>、<code>font</code>、<code>extra</code> 不需要改，这三个只需要 build 时候去做，只有被 useref 影响才需要</li>
<li><code>serve</code> 里的 baseDir 需要改为 temp</li>
<li><code>useref</code> src 从 temp 里取，把结果放到 <code>dist</code> 目录里</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; src, dest, parallel, series, watch &#125; = <span class="built_in">require</span>(<span class="string">&#x27;gulp&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> del = <span class="built_in">require</span>(<span class="string">&#x27;del&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> browserSync = <span class="built_in">require</span>(<span class="string">&#x27;browser-sync&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> loadPlugins = <span class="built_in">require</span>(<span class="string">&#x27;gulp-load-plugins&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> plugins = loadPlugins()</span><br><span class="line"><span class="keyword">const</span> bs = browserSync.create()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> clean = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> del([<span class="string">&#x27;dist&#x27;</span>, <span class="string">&#x27;temp&#x27;</span>])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> style = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> src(<span class="string">&#x27;src/assets/styles/*.scss&#x27;</span>, &#123; <span class="attr">base</span>: <span class="string">&#x27;src&#x27;</span> &#125;)</span><br><span class="line">    .pipe(plugins.sass(&#123; <span class="attr">outputStyle</span>: <span class="string">&#x27;expanded&#x27;</span> &#125;))</span><br><span class="line">    .pipe(dest(<span class="string">&#x27;temp&#x27;</span>))</span><br><span class="line">    .pipe(bs.reload(&#123; <span class="attr">stream</span>: <span class="literal">true</span> &#125;))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> script = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> src(<span class="string">&#x27;src/assets/scripts/*.js&#x27;</span>, &#123; <span class="attr">base</span>: <span class="string">&#x27;src&#x27;</span> &#125;)</span><br><span class="line">    .pipe(plugins.babel(&#123; <span class="attr">presets</span>: [<span class="string">&#x27;@babel/preset-env&#x27;</span>] &#125;))</span><br><span class="line">    .pipe(dest(<span class="string">&#x27;temp&#x27;</span>))</span><br><span class="line">    .pipe(bs.reload(&#123; <span class="attr">stream</span>: <span class="literal">true</span> &#125;))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> page = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> src(<span class="string">&#x27;src/*.html&#x27;</span>, &#123; <span class="attr">base</span>: <span class="string">&#x27;src&#x27;</span> &#125;)</span><br><span class="line">    .pipe(plugins.swig(&#123; data, <span class="attr">defaults</span>: &#123; <span class="attr">cache</span>: <span class="literal">false</span> &#125; &#125;)) <span class="comment">// 防止模板缓存导致页面不能及时更新</span></span><br><span class="line">    .pipe(dest(<span class="string">&#x27;temp&#x27;</span>))</span><br><span class="line">    .pipe(bs.reload(&#123; <span class="attr">stream</span>: <span class="literal">true</span> &#125;))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> image = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> src(<span class="string">&#x27;src/assets/images/**&#x27;</span>, &#123; <span class="attr">base</span>: <span class="string">&#x27;src&#x27;</span> &#125;)</span><br><span class="line">    .pipe(plugins.imagemin())</span><br><span class="line">    .pipe(dest(<span class="string">&#x27;dist&#x27;</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> font = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> src(<span class="string">&#x27;src/assets/fonts/**&#x27;</span>, &#123; <span class="attr">base</span>: <span class="string">&#x27;src&#x27;</span> &#125;)</span><br><span class="line">    .pipe(plugins.imagemin())</span><br><span class="line">    .pipe(dest(<span class="string">&#x27;dist&#x27;</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> extra = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> src(<span class="string">&#x27;public/**&#x27;</span>, &#123; <span class="attr">base</span>: <span class="string">&#x27;public&#x27;</span> &#125;)</span><br><span class="line">    .pipe(dest(<span class="string">&#x27;dist&#x27;</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> serve = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  watch(<span class="string">&#x27;src/assets/styles/*.scss&#x27;</span>, style)</span><br><span class="line">  watch(<span class="string">&#x27;src/assets/scripts/*.js&#x27;</span>, script)</span><br><span class="line">  watch(<span class="string">&#x27;src/*.html&#x27;</span>, page)</span><br><span class="line">  <span class="comment">// watch(&#x27;src/assets/images/**&#x27;, image)</span></span><br><span class="line">  <span class="comment">// watch(&#x27;src/assets/fonts/**&#x27;, font)</span></span><br><span class="line">  <span class="comment">// watch(&#x27;public/**&#x27;, extra)</span></span><br><span class="line">  watch([</span><br><span class="line">    <span class="string">&#x27;src/assets/images/**&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;src/assets/fonts/**&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;public/**&#x27;</span></span><br><span class="line">  ], bs.reload)</span><br><span class="line"></span><br><span class="line">  bs.init(&#123;</span><br><span class="line">    notify: <span class="literal">false</span>,</span><br><span class="line">    port: <span class="number">2080</span>,</span><br><span class="line">    <span class="comment">// open: false,</span></span><br><span class="line">    <span class="comment">// files: &#x27;dist/**&#x27;,</span></span><br><span class="line">    server: &#123;</span><br><span class="line">      baseDir: [<span class="string">&#x27;temp&#x27;</span>, <span class="string">&#x27;src&#x27;</span>, <span class="string">&#x27;public&#x27;</span>],</span><br><span class="line">      routes: &#123;</span><br><span class="line">        <span class="string">&#x27;/node_modules&#x27;</span>: <span class="string">&#x27;node_modules&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> useref = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> src(<span class="string">&#x27;temp/*.html&#x27;</span>, &#123; <span class="attr">base</span>: <span class="string">&#x27;temp&#x27;</span> &#125;)</span><br><span class="line">    .pipe(plugins.useref(&#123; <span class="attr">searchPath</span>: [<span class="string">&#x27;temp&#x27;</span>, <span class="string">&#x27;.&#x27;</span>] &#125;))</span><br><span class="line">    <span class="comment">// html js css</span></span><br><span class="line">    .pipe(plugins.if(<span class="regexp">/\.js$/</span>, plugins.uglify()))</span><br><span class="line">    .pipe(plugins.if(<span class="regexp">/\.css$/</span>, plugins.cleanCss()))</span><br><span class="line">    .pipe(plugins.if(<span class="regexp">/\.html$/</span>, plugins.htmlmin(&#123;</span><br><span class="line">      collapseWhitespace: <span class="literal">true</span>,</span><br><span class="line">      minifyCSS: <span class="literal">true</span>,</span><br><span class="line">      minifyJS: <span class="literal">true</span></span><br><span class="line">    &#125;)))</span><br><span class="line">    .pipe(dest(<span class="string">&#x27;dist&#x27;</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> compile = parallel(style, script, page)</span><br><span class="line"><span class="keyword">const</span> build =  series(</span><br><span class="line">  clean,</span><br><span class="line">  parallel(</span><br><span class="line">    series(compile, useref),</span><br><span class="line">    image,</span><br><span class="line">    font,</span><br><span class="line">    extra</span><br><span class="line">  )</span><br><span class="line">)</span><br><span class="line"><span class="keyword">const</span> develop = series(compile, serve)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  clean,</span><br><span class="line">  build,</span><br><span class="line">  develop</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>构建完这套系统，如果你不想写文档说明，导出几个常用即可，<code>clean</code>、<code>build</code>、<code>develop</code></p>
<ul>
<li>并在 <code>package.json</code> 中增加 script 命令</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">  &quot;clean&quot;: &quot;gulp clean&quot;,</span><br><span class="line">  &quot;build&quot;: &quot;gulp build&quot;,</span><br><span class="line">  &quot;develop&quot;: &quot;gulp develop&quot;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h2 id="封装工作流"><a href="#封装工作流" class="headerlink" title="封装工作流"></a>封装工作流</h2><p>提取多个项目共同的自动化构建过程（Don’t repeat yourself)</p>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/lagoulearn-img/gulp%E8%87%AA%E5%8A%A8%E5%8C%96%E5%B7%A5%E4%BD%9C%E6%B5%81%E6%9E%84%E5%BB%BA.png" alt="gulp自动化工作流构建"></p>
<h3 id="提取-gulpfile"><a href="#提取-gulpfile" class="headerlink" title="提取 gulpfile"></a>提取 gulpfile</h3><p><code>zce-gulp-demo</code> 这里叫 A，<code>zce-pages</code> 这里叫 B</p>
<ul>
<li>在命令行输入 <code>code . -a</code> 在同一窗口打开这个项目</li>
</ul>
<p>把 A 项目工作流提取到 B 项目中，操作步骤如下：</p>
<ol>
<li>把 A 的 <code>gulpfile.js</code> 内容复制到 B 的 <code>lib/index.js</code></li>
<li>把 A 的 <code>package.json</code> 中的 <code>devDependencies</code> 复制到 B 中 <code>dependencies</code></li>
<li>把 A 的 <code>package.json</code> 中的 <code>devDependencies</code> 全部删除，并把 <code>node_modules</code> 全部删除</li>
<li>把 B link 到全局，切换到 A 输入命令 <code>yarn link zce-pages</code>，B 项目会通过软链接形式链过来</li>
<li>在 B 中新建 <code>gulpfile.js</code> 新增 <code>module.exports = require(&#39;zce-pages&#39;)</code> 内容</li>
<li>执行 <code>yarn build</code></li>
</ol>
<p>执行 <code>yarn build</code> 我这边报错了，是因为 <code>gulp-sass</code> 没有下载下来</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Error <span class="keyword">in</span> plugin <span class="string">&quot;gulp-sass&quot;</span></span><br><span class="line">Message:</span><br><span class="line"></span><br><span class="line">gulp-sass no longer has a default Sass compiler; please <span class="built_in">set</span> one yourself.</span><br><span class="line">Both the <span class="string">&quot;sass&quot;</span> and <span class="string">&quot;node-sass&quot;</span> packages are permitted.</span><br></pre></td></tr></table></figure>

<p>解决：安装 <code>sass</code> </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn add sass</span><br></pre></td></tr></table></figure>

<p>修改 <code>lib/index.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> sass = <span class="built_in">require</span>(<span class="string">&#x27;gulp-sass&#x27;</span>)(<span class="built_in">require</span>(<span class="string">&#x27;sass&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> style = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> src(<span class="string">&#x27;src/assets/styles/*.scss&#x27;</span>, &#123; <span class="attr">base</span>: <span class="string">&#x27;src&#x27;</span> &#125;)</span><br><span class="line">    .pipe(sass(&#123; <span class="attr">outputStyle</span>: <span class="string">&#x27;expanded&#x27;</span> &#125;))</span><br><span class="line">    .pipe(dest(<span class="string">&#x27;temp&#x27;</span>))</span><br><span class="line">    .pipe(bs.reload(&#123; <span class="attr">stream</span>: <span class="literal">true</span> &#125;))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="抽象路径配置"><a href="#抽象路径配置" class="headerlink" title="抽象路径配置"></a>抽象路径配置</h3><p>对于代码里写死的路径，如 sass 的路径，这样不是很灵活，我们可以抽象一下形成配置</p>
<ul>
<li><p><code>cwd</code> 返回命令行工作目录，然后拿到工作文件 <code>pages.config.js</code></p>
<p><code>require</code> 不存在的目录会报错，所以这里用 <code>try...catch...</code> 包裹一下</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> cwd = process.cwd()</span><br><span class="line"><span class="keyword">let</span> config = &#123;</span><br><span class="line">  build: &#123;</span><br><span class="line">    src: <span class="string">&#x27;src&#x27;</span>,</span><br><span class="line">    dist: <span class="string">&#x27;dist&#x27;</span>,</span><br><span class="line">    temp: <span class="string">&#x27;temp&#x27;</span>,</span><br><span class="line">    public: <span class="string">&#x27;public&#x27;</span>,</span><br><span class="line">    paths: &#123;</span><br><span class="line">      styles: <span class="string">&#x27;assets/styles/*.scss&#x27;</span>,</span><br><span class="line">      scripts: <span class="string">&#x27;assets/scripts/*.js&#x27;</span>,</span><br><span class="line">      pages: <span class="string">&#x27;*.html&#x27;</span>,</span><br><span class="line">      images: <span class="string">&#x27;assets/images/**&#x27;</span>,</span><br><span class="line">      fonts: <span class="string">&#x27;assets/fonts/**&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> loadConfig = <span class="built_in">require</span>(<span class="string">`<span class="subst">$&#123;cwd&#125;</span>/pages.config.js`</span>)</span><br><span class="line">  config = <span class="built_in">Object</span>.assign(&#123;&#125;, config, loadConfig)</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> style = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> src(config.build.paths.styles, &#123; <span class="attr">base</span>: config.build.src, <span class="attr">cwd</span>: config.build.src &#125;)</span><br><span class="line">    .pipe(sass(&#123; <span class="attr">outputStyle</span>: <span class="string">&#x27;expanded&#x27;</span> &#125;))</span><br><span class="line">    .pipe(dest(config.build.temp))</span><br><span class="line">    .pipe(bs.reload(&#123; <span class="attr">stream</span>: <span class="literal">true</span> &#125;))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="包装-Gulp-Cli"><a href="#包装-Gulp-Cli" class="headerlink" title="包装 Gulp Cli"></a>包装 Gulp Cli</h3><p><code>gulpfile.js</code> 里只是写了个 <code>module.exports = require(&#39;zce-pages&#39;)</code>，其实有点冗余，我们希望没有 <code>gulpfile.js</code> 也能正常工作</p>
<ul>
<li>这里需要制定一下工作目录为当前</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn gulp build --gulpfile ./node_modules/zce-pages/lib/index.js --cwd .</span><br></pre></td></tr></table></figure>

<p>不过这么多参数就很复杂了，可以集成 cli</p>
<ol>
<li><p>创建 <code>bin/zce-pages.js</code> 作为 cli 执行入口</p>
</li>
<li><p>在 <code>package.json</code> 中增加 <code>bin</code> 字段</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&quot;bin&quot;: &quot;bin/zce-pages.js&quot;,</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>修改 <code>zce-pages.js</code></p>
<ul>
<li><code>process.argv</code> 是一个数组</li>
<li><code>require</code> 是载入这个模块，<code>require.resolve</code> 是找到这个模块所在的路径</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env node</span></span><br><span class="line"></span><br><span class="line">process.argv.push(<span class="string">&#x27;--cwd&#x27;</span>)</span><br><span class="line">process.argv.push(process.cwd())</span><br><span class="line">process.argv.push(<span class="string">&#x27;--gulpfile&#x27;</span>)</span><br><span class="line">process.argv.push(<span class="built_in">require</span>.resolve(<span class="string">&#x27;..&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;gulp/bin/gulp&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>代码提交完，就可以使用 publish 提交 git</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn publish --registry https://registry.yarnpkg.com</span><br></pre></td></tr></table></figure>

<p>同步时可能会有问题，因为你发布的是 npm 源，但是你是从淘宝源下载，可能会存在同步问题，可以进入淘宝镜像搜一下你 publish 的包，然后更新</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol>
<li><p>新建项目如果想要使用工作流，直接运行 <code>package.json</code> 中的命令即可</p>
</li>
<li><p>创建的 cli 是 <code>node_modules/bin/zce-pages.cmd</code>，这个文件中是通过 node 去执行 <code>zce-pages/bin/zce-pages.js</code></p>
</li>
<li><p>在 <code>node_modules</code> 找到 <code>zce-pages/bin/zce-pages.js</code>，里面就是告诉 gulp 工作时的工作目录和 gulpfile 的工作目录</p>
<p>之后执行 <code>gulp/bin/gulp</code> 就可以执行 gulpifle 了，完成整个工作流过程</p>
</li>
</ol>
<h2 id="FIS"><a href="#FIS" class="headerlink" title="FIS"></a>FIS</h2><p>高度集成，只需要简单配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn global add fis3</span><br></pre></td></tr></table></figure>

<p>relase 解决的资源定位</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">fis3 realse -d output</span><br></pre></td></tr></table></figure>

<p>新建 <code>fis-conf.js</code></p>
<ul>
<li><p>编译与压缩</p>
<p>安装 <code>yarn add fis-parser-node-sass</code>、<code>yarn add fis-parser-babel-6.x</code></p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">fis.match(<span class="string">&#x27;*.&#123;js,scss,png&#125;&#x27;</span>, &#123;</span><br><span class="line">  release: <span class="string">&#x27;/assets/$0&#x27;</span>,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">fis.match(<span class="string">&#x27;**/*.scss&#x27;</span>, &#123;</span><br><span class="line">  rExt: <span class="string">&#x27;.css&#x27;</span>,</span><br><span class="line">  parser: fis.plugin(<span class="string">&#x27;node-sass&#x27;</span>),</span><br><span class="line">  optimizer: fis.plugin(<span class="string">&#x27;clean-css&#x27;</span>),</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">fis.match(<span class="string">&#x27;**/*.js&#x27;</span>, &#123;</span><br><span class="line">  parser: fis.plugin(<span class="string">&#x27;babel-6.x&#x27;</span>),</span><br><span class="line">  optimizer: fis.plugin(<span class="string">&#x27;uglify-js&#x27;</span>),</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>查看转换过程中转换的配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">fis3 inspect</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>工程化</category>
      </categories>
      <tags>
        <tag>Grunt</tag>
        <tag>Gulp</tag>
        <tag>封装工作流</tag>
      </tags>
  </entry>
  <entry>
    <title>手撕 Promise（then 链及 Promise 方法实现）</title>
    <url>/posts/c7bac255/</url>
    <content><![CDATA[<h2 id="Promise-类基础逻辑"><a href="#Promise-类基础逻辑" class="headerlink" title="Promise 类基础逻辑"></a>Promise 类基础逻辑</h2><p><strong>Promise 可以解决的问题</strong></p>
<ol>
<li>解决回调地狱问题，不会导致难以维护</li>
<li>合并多个异步请求，节约时间</li>
</ol>
<a id="more"></a>

<h3 id="基础逻辑"><a href="#基础逻辑" class="headerlink" title="基础逻辑"></a>基础逻辑</h3><ol>
<li><p><code>new Promise</code>：Promise 是一个类，在执行这个类的时候，需要传递一个执行器进去，执行器会立即执行</p>
</li>
<li><p>Promise 中有三种状态，分别为：成功（fulfilled）、失败（rejected）、等待（pending），一旦状态确定就不可更改</p>
<p><strong>如果状态不是等待，需要阻止程序向下执行</strong></p>
</li>
<li><p>resolve 和 reject 函数是用来更改状态的</p>
<p><strong>把 resolve 和 reject 定义为箭头函数是为了让函数内部的 this 指向，指向类的实例对象（Promise）</strong></p>
</li>
<li><p>then 方法内部做的事情就是判断状态，如果状态是成功，就调用成功的回调函数，如果状态是失败，就调用失败的回调函数。then 方法定义在原型对象上的</p>
</li>
<li><p>then 成功回调有一个参数，表示成功之后的值，then 失败回调有一个参数，表示失败的原因</p>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 可复用且有提示</span></span><br><span class="line"><span class="keyword">const</span> PENDING = <span class="string">&#x27;pending&#x27;</span> <span class="comment">// 等待</span></span><br><span class="line"><span class="keyword">const</span> FULFILLED = <span class="string">&#x27;fulfilled&#x27;</span> <span class="comment">// 成功</span></span><br><span class="line"><span class="keyword">const</span> REJECTED = <span class="string">&#x27;rejected&#x27;</span> <span class="comment">// 失败</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPromise</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">executor</span>)</span> &#123;</span><br><span class="line">    executor(<span class="built_in">this</span>.resolve, <span class="built_in">this</span>.reject)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// promise 状态</span></span><br><span class="line">  status = PENDING</span><br><span class="line">  <span class="comment">// 成功之后的值</span></span><br><span class="line">  value = <span class="literal">undefined</span></span><br><span class="line">  <span class="comment">// 失败之后的原因</span></span><br><span class="line">  reason = <span class="literal">undefined</span></span><br><span class="line">  resolve = <span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 如果状态不是等待，阻止程序向下执行</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.status !== PENDING) <span class="keyword">return</span></span><br><span class="line">    <span class="comment">// 将状态更改为成功</span></span><br><span class="line">    <span class="built_in">this</span>.status = FULFILLED</span><br><span class="line">    <span class="comment">// 保存成功之后的值</span></span><br><span class="line">    <span class="built_in">this</span>.value = value</span><br><span class="line">  &#125;</span><br><span class="line">  reject = <span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 如果状态不是等待，阻止程序向下执行</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.status !== PENDING) <span class="keyword">return</span></span><br><span class="line">    <span class="comment">// 将状态更改为失败</span></span><br><span class="line">    <span class="built_in">this</span>.status = REJECTED</span><br><span class="line">    <span class="comment">// 保存失败之后的原因</span></span><br><span class="line">    <span class="built_in">this</span>.reason = reason</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">then</span>(<span class="params">successCallback, failCallback</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 判断状态</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.status === FULFILLED) &#123;</span><br><span class="line">      successCallback(<span class="built_in">this</span>.value)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span>.status === REJECTED) &#123;</span><br><span class="line">      failCallback(<span class="built_in">this</span>.reason)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = MyPromise</span><br></pre></td></tr></table></figure>

<p>之后对其进行验证</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> MyPromise = <span class="built_in">require</span>(<span class="string">&#x27;./myPromise&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> promise = <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  resolve(<span class="string">&#x27;成功&#x27;</span>)</span><br><span class="line">  reject(<span class="string">&#x27;失败&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">promise.then(</span><br><span class="line">  value =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value)</span><br><span class="line">  &#125;,</span><br><span class="line">  reason =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(reason)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h3 id="加入-then-方法和异步逻辑"><a href="#加入-then-方法和异步逻辑" class="headerlink" title="加入 then 方法和异步逻辑"></a>加入 then 方法和异步逻辑</h3><p><strong>问题1：</strong> 如果要给 resolve 或 reject 包裹一层 setTimeout，发现什么都没有输出</p>
<ul>
<li>主线程是不会等待异步 setTimeout 执行完成的，then 会立即执行</li>
<li>由于当前 Promise 执行到 then 时状态为 <strong>等待态</strong>，而现在只判断成功与失败的状态，所以会什么都不输出</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> promise = <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    resolve(<span class="string">&#x27;成功&#x27;</span>)</span><br><span class="line">  &#125;, <span class="number">2000</span>)</span><br><span class="line">&#125;)</span><br><span class="line">promise.then(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value) <span class="comment">// 没有输出</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><strong>问题2：</strong> 当 then 方法被多次调用时，每一个 then 方法中传递的回调函数都是要执行的</p>
<ul>
<li>同步：如果调用 then 方法时，已经知道 promise 状态为 <strong>成功态或失败态</strong>，就可以直接调用回调即可</li>
<li>异步：如果调用 then 方法时，promise 状态为 <strong>等待态</strong>，每一个 then 方法的回调函数都应该存储起来，当状态为成功或失败时，再依次调用回调函数</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> promise = <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  resolve(<span class="string">&#x27;成功&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">promise.then(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value) <span class="comment">// 成功</span></span><br><span class="line">&#125;)</span><br><span class="line">promise.then(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value) <span class="comment">// 没有输出</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>接下来处理上面出现的两个问题</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> PENDING = <span class="string">&#x27;pending&#x27;</span></span><br><span class="line"><span class="keyword">const</span> FULFILLED = <span class="string">&#x27;fulfilled&#x27;</span></span><br><span class="line"><span class="keyword">const</span> REJECTED = <span class="string">&#x27;rejected&#x27;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPromise</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">executor</span>)</span> &#123;</span><br><span class="line">    executor(<span class="built_in">this</span>.resolve, <span class="built_in">this</span>.reject)</span><br><span class="line">  &#125;</span><br><span class="line">  status = PENDING</span><br><span class="line">  value = <span class="literal">undefined</span></span><br><span class="line">  reason = <span class="literal">undefined</span></span><br><span class="line">  <span class="comment">// 成功回调 undefined -&gt; []</span></span><br><span class="line">  successCallback = []</span><br><span class="line">  <span class="comment">// 失败回调 undefined -&gt; []</span></span><br><span class="line">  failCallback = []</span><br><span class="line">  resolve = <span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.status !== PENDING) <span class="keyword">return</span></span><br><span class="line">    <span class="built_in">this</span>.status = FULFILLED</span><br><span class="line">    <span class="built_in">this</span>.value = value</span><br><span class="line">    <span class="comment">// 判断成功回调是否存在，如果存在调用</span></span><br><span class="line">    <span class="comment">// this.successCallback &amp;&amp; this.successCallback(this.value)</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">this</span>.successCallback.length) <span class="built_in">this</span>.successCallback.shift()(<span class="built_in">this</span>.value)</span><br><span class="line">  &#125;</span><br><span class="line">  reject = <span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.status !== PENDING) <span class="keyword">return</span></span><br><span class="line">    <span class="built_in">this</span>.status = REJECTED</span><br><span class="line">    <span class="built_in">this</span>.reason = reason</span><br><span class="line">    <span class="comment">// 判断失败回调是否存在，如果存在调用</span></span><br><span class="line">    <span class="comment">// this.failCallback &amp;&amp; this.failCallback(this.value)</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">this</span>.failCallback.length) <span class="built_in">this</span>.failCallback.shift()(<span class="built_in">this</span>.reason)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">then</span>(<span class="params">successCallback, failCallback</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.status === FULFILLED) &#123;</span><br><span class="line">      successCallback(<span class="built_in">this</span>.value)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span>.status === REJECTED) &#123;</span><br><span class="line">      failCallback(<span class="built_in">this</span>.reason)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 将成功回调和失败回调存储起来</span></span><br><span class="line">      <span class="built_in">this</span>.successCallback.push(successCallback)</span><br><span class="line">      <span class="built_in">this</span>.failCallback.push(failCallback)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = MyPromise</span><br></pre></td></tr></table></figure>

<h2 id="实现-then-链"><a href="#实现-then-链" class="headerlink" title="实现 then 链"></a>实现 then 链</h2><h3 id="链式调用"><a href="#链式调用" class="headerlink" title="链式调用"></a>链式调用</h3><p>then 方法是可以被链式调用的，后面 then 方法的回调函数拿到上一个 then 方法的回调函数的返回值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> promise = <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  resolve(<span class="string">&#x27;成功&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">promise.then(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value) <span class="comment">// 成功</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">100</span></span><br><span class="line">&#125;).then(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value) <span class="comment">// 没有输出</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>接下来需要实现如下需求</p>
<ul>
<li><p>实现 then 方法链式调用（then 方法返回一个 promise）</p>
</li>
<li><p>如何把上一个 then 回调函数的返回值传递给下一个 then 方法的回调函数</p>
<p>这里需要判断回调函数返回值是普通值还是 Promise 对象</p>
<ul>
<li>如果是普通值，直接调用 resolve</li>
<li>如果是 promise 对象，查看 promise 对象返回的结果，根据结果决定调用 resolve 还是 reject</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPromise</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">then</span>(<span class="params">successCallback, failCallback</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 返回一个新的 Promise</span></span><br><span class="line">    <span class="keyword">const</span> promise2 = <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.status === FULFILLED) &#123;</span><br><span class="line">        <span class="keyword">let</span> x = successCallback(<span class="built_in">this</span>.value)</span><br><span class="line">        <span class="comment">// 判断 x 的是普通值还是 promise 对象</span></span><br><span class="line">        resolvePromise(x, resolve, reject)</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span>.status === REJECTED) &#123;</span><br><span class="line">        failCallback(<span class="built_in">this</span>.reason)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.successCallback.push(successCallback)</span><br><span class="line">        <span class="built_in">this</span>.failCallback.push(failCallback)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> promise2</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resolvePromise</span>(<span class="params">x, resolve, reject</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (x <span class="keyword">instanceof</span> MyPromise) &#123;</span><br><span class="line">    <span class="comment">// promise 对象</span></span><br><span class="line">    <span class="comment">/* x.then(</span></span><br><span class="line"><span class="comment">      value =&gt; resolve(value),</span></span><br><span class="line"><span class="comment">      reason =&gt; reject(reason)</span></span><br><span class="line"><span class="comment">    ) */</span></span><br><span class="line">    x.then(resolve, reject)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 普通值</span></span><br><span class="line">    resolve(x)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="循环引用"><a href="#循环引用" class="headerlink" title="循环引用"></a>循环引用</h3><p>如果在 p1 里返回 p1 这个 Promise，就会发生循环调用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> promise = <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  resolve(<span class="string">&#x27;成功&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">let</span> p1 = promise.then(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value)</span><br><span class="line">  <span class="keyword">return</span> p1</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">p1.then(</span><br><span class="line">  value =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value)</span><br><span class="line">  &#125;,</span><br><span class="line">  reason =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(reason) <span class="comment">// TypeError: Chaining cycle detected for promise #&lt;Promise&gt;</span></span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong>  举个例子 <code>var obj = &#123; n: 10, x: obj.n *10 &#125;</code>，因为 obj 还没有创建完，而在创建属性 x 时是获取不到 obj.n 的。因为全局作用于只声明了 obj，却没有赋值（<code>obj -&gt; undefiend</code>），promise 也是有这样的情况的，我们可以使用异步任务，让其赋值完成</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPromise</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">then</span>(<span class="params">successCallback, failCallback</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> promise2 = <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.status === FULFILLED) &#123;</span><br><span class="line">        <span class="comment">// 变为异步任务这样 promise2 就赋值完成了</span></span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">let</span> x = successCallback(<span class="built_in">this</span>.value)</span><br><span class="line">          resolvePromise(promise2, x, resolve, reject)</span><br><span class="line">        &#125;, <span class="number">0</span>)</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span>.status === REJECTED) &#123;</span><br><span class="line">        failCallback(<span class="built_in">this</span>.reason)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.successCallback.push(successCallback)</span><br><span class="line">        <span class="built_in">this</span>.failCallback.push(failCallback)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> promise2</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resolvePromise</span>(<span class="params">promise2, x, resolve, reject</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (promise2 === x) &#123;</span><br><span class="line">    <span class="keyword">return</span> reject(<span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">&#x27;Chaining cycle detected for promise #&lt;Promise&gt;&#x27;</span>))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (x <span class="keyword">instanceof</span> MyPromise) &#123;</span><br><span class="line">    x.then(resolve, reject)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    resolve(x)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="捕获错误"><a href="#捕获错误" class="headerlink" title="捕获错误"></a>捕获错误</h3><ol>
<li><p>当执行器（<code>executor</code>）中代码执行时发生错误，将 promise 状态改为失败态</p>
</li>
<li><p>回调函数在执行时发生错误，这个错误要在下个 then 方法的回调函数中捕获到</p>
<p>当代码为失败状态或等待态也需要用 <code>try...catch</code> 包裹</p>
</li>
<li><p>当代码为等待态时，如果碰到异步，不能把回调函数直接 push 到数组里，这样没有办法对其进行处理，我们可以 push 一个函数进去，函数里面调用成功或失败回调</p>
<p>这时就可以对进行异步和错误捕获处理了</p>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> PENDING = <span class="string">&#x27;pending&#x27;</span></span><br><span class="line"><span class="keyword">const</span> FULFILLED = <span class="string">&#x27;fulfilled&#x27;</span></span><br><span class="line"><span class="keyword">const</span> REJECTED = <span class="string">&#x27;rejected&#x27;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPromise</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">executor</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 捕获执行器错误</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      executor(<span class="built_in">this</span>.resolve, <span class="built_in">this</span>.reject)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      <span class="built_in">this</span>.reject(e)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  status = PENDING</span><br><span class="line">  value = <span class="literal">undefined</span></span><br><span class="line">  reason = <span class="literal">undefined</span></span><br><span class="line">  successCallback = []</span><br><span class="line">  failCallback = []</span><br><span class="line">  resolve = <span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.status !== PENDING) <span class="keyword">return</span></span><br><span class="line">    <span class="built_in">this</span>.status = FULFILLED</span><br><span class="line">    <span class="built_in">this</span>.value = value</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">this</span>.successCallback.length) <span class="built_in">this</span>.successCallback.shift()()</span><br><span class="line">  &#125;</span><br><span class="line">  reject = <span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.status !== PENDING) <span class="keyword">return</span></span><br><span class="line">    <span class="built_in">this</span>.status = REJECTED</span><br><span class="line">    <span class="built_in">this</span>.reason = reason</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">this</span>.failCallback.length) <span class="built_in">this</span>.failCallback.shift()()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">then</span>(<span class="params">successCallback, failCallback</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> promise2 = <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.status === FULFILLED) &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="comment">// 捕获回调函数发生的错误</span></span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> x = successCallback(<span class="built_in">this</span>.value)</span><br><span class="line">            resolvePromise(promise2, x, resolve, reject)</span><br><span class="line">          &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">            reject(e)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;, <span class="number">0</span>)</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span>.status === REJECTED) &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> x = failCallback(<span class="built_in">this</span>.reason)</span><br><span class="line">            resolvePromise(promise2, x, resolve, reject)</span><br><span class="line">          &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">            reject(e)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;, <span class="number">0</span>)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// push 函数进去，函数里面调用成功回调函数</span></span><br><span class="line">        <span class="built_in">this</span>.successCallback.push(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">              <span class="keyword">let</span> x = successCallback(<span class="built_in">this</span>.value)</span><br><span class="line">              resolvePromise(promise2, x, resolve, reject)</span><br><span class="line">            &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">              reject(e)</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;, <span class="number">0</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">// push 函数进去，函数里面调用失败回调函数</span></span><br><span class="line">        <span class="built_in">this</span>.failCallback.push(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">              <span class="keyword">let</span> x = failCallback(<span class="built_in">this</span>.reason)</span><br><span class="line">              resolvePromise(promise2, x, resolve, reject)</span><br><span class="line">            &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">              reject(e)</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;, <span class="number">0</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> promise2</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resolvePromise</span>(<span class="params">promise2, x, resolve, reject</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (promise2 === x) &#123;</span><br><span class="line">    <span class="keyword">return</span> reject(<span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">&#x27;Chaining cycle detected for promise #&lt;Promise&gt;&#x27;</span>))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (x <span class="keyword">instanceof</span> MyPromise) &#123;</span><br><span class="line">    x.then(resolve, reject)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    resolve(x)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = MyPromise</span><br></pre></td></tr></table></figure>

<h3 id="then-方法参数变为可选"><a href="#then-方法参数变为可选" class="headerlink" title="then 方法参数变为可选"></a>then 方法参数变为可选</h3><p>链式调用 then 时，即使不传递参数也会依次向后传递</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  resolve(<span class="number">100</span>)</span><br><span class="line">&#125;)</span><br><span class="line">promise</span><br><span class="line">  .then()</span><br><span class="line">  .then()</span><br><span class="line">  .then(<span class="function"><span class="params">value</span> =&gt;</span> <span class="built_in">console</span>.log(value)) <span class="comment">// 100</span></span><br></pre></td></tr></table></figure>

<p>其实就是判断 <code>successCallback</code> 与 <code>failCallback</code> 是否存在，如果不存在给它进行赋值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPromise</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">then</span>(<span class="params">successCallback, failCallback</span>)</span> &#123;</span><br><span class="line">    successCallback = successCallback ? successCallback : <span class="function"><span class="params">value</span> =&gt;</span> value</span><br><span class="line">    failCallback = failCallback</span><br><span class="line">      ? failCallback</span><br><span class="line">      : <span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">throw</span> reason</span><br><span class="line">        &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="其他方法实现"><a href="#其他方法实现" class="headerlink" title="其他方法实现"></a>其他方法实现</h2><h3 id="Promise-all"><a href="#Promise-all" class="headerlink" title="Promise.all"></a>Promise.all</h3><ul>
<li>all 方法是通过类直接调用，所以 all 方法是一个静态方法</li>
<li>all 传入的必须是一个数组，如果数组中某一项不是 Promise 实例，需要把它转换为成功的 Promise 实例</li>
<li>之后每一项依次执行，只要有一项失败返回就是失败的，必须全部成功才是成功</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">p1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      resolve(<span class="string">&#x27;p1&#x27;</span>)</span><br><span class="line">    &#125;, <span class="number">2000</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">p2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    resolve(<span class="string">&#x27;p2&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MyPromise.all([<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, p1(), p2(), <span class="string">&#x27;c&#x27;</span>]).then(<span class="function"><span class="params">result</span> =&gt;</span> <span class="built_in">console</span>.log(result)) <span class="comment">// [ &#x27;a&#x27;, &#x27;b&#x27;, &#x27;p1&#x27;, &#x27;p2&#x27;, &#x27;c&#x27; ]</span></span><br></pre></td></tr></table></figure>

<p>注意：</p>
<ul>
<li>返回结果的顺序跟传入的顺序一致（不能使用 push，因为不能确定谁先到，需要使用索引）</li>
<li>for 循环执行就是一瞬间的，但是里面可能存在异步操作，需要等待所有都执行完，再执行 resolve 操作</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPromise</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="function"><span class="title">all</span>(<span class="params">array</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> result = []</span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">addData</span>(<span class="params">key, value</span>) </span>&#123;</span><br><span class="line">        result[key] = value</span><br><span class="line">        index++</span><br><span class="line">        <span class="keyword">if</span> (index === array.length) &#123;</span><br><span class="line">          resolve(result)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">        <span class="keyword">const</span> current = array[i]</span><br><span class="line">        <span class="keyword">if</span> (current <span class="keyword">instanceof</span> MyPromise) &#123;</span><br><span class="line">          <span class="comment">// promise 对象</span></span><br><span class="line">          current.then(</span><br><span class="line">            value =&gt; addData(i, value),</span><br><span class="line">            reason =&gt; reject(reason)</span><br><span class="line">          )</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// 普通值</span></span><br><span class="line">          addData(i, array[i])</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Promise-resolve"><a href="#Promise-resolve" class="headerlink" title="Promise.resolve"></a>Promise.resolve</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">p1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    resolve(<span class="string">&#x27;p1&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Promise</span>.resolve(<span class="number">10</span>).then(<span class="function"><span class="params">value</span> =&gt;</span> <span class="built_in">console</span>.log(value))</span><br><span class="line"><span class="built_in">Promise</span>.resolve(p1()).then(<span class="function"><span class="params">value</span> =&gt;</span> <span class="built_in">console</span>.log(value))</span><br></pre></td></tr></table></figure>

<ul>
<li>如果参数是 Promise 实例，那么 <code>Promise.resolve</code> 将不做任何修改，原封不动地返回这个实例</li>
<li>有如果参数是普通值，就直接将值转换为成功的 Promise 实例</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPromise</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="function"><span class="title">resolve</span>(<span class="params">value</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (value <span class="keyword">instanceof</span> MyPromise) <span class="keyword">return</span> value</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MyPromise(<span class="function"><span class="params">resolve</span> =&gt;</span> resolve(value))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="finally"><a href="#finally" class="headerlink" title="finally"></a>finally</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">p1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      resolve(<span class="string">&#x27;p1&#x27;</span>)</span><br><span class="line">    &#125;, <span class="number">2000</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">p2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    resolve(<span class="string">&#x27;p2&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">p2()</span><br><span class="line">  .finally(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;finally&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> p1()</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(</span><br><span class="line">    value =&gt; &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(value)</span><br><span class="line">    &#125;,</span><br><span class="line">    reason =&gt; &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(reason)</span><br><span class="line">    &#125;</span><br><span class="line">  )</span><br></pre></td></tr></table></figure>

<ul>
<li>无论当前 Promise 最终状态是成功的还是失败的，finally 中的回调函数始终都会被执行一次</li>
<li>在 finally 方法后面链式调用 then 方法拿到当前这个 promise 最终返回的结果</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPromise</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">finally</span>(<span class="params">callback</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.then(</span><br><span class="line">      value =&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> MyPromise.resolve(callback()).then(<span class="function">() =&gt;</span> value)</span><br><span class="line">      &#125;,</span><br><span class="line">      reason =&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> MyPromise.resolve(callback()).then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">throw</span> reason()</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="catch"><a href="#catch" class="headerlink" title="catch"></a>catch</h3><ul>
<li>处理当前 promise 为失败状态，内部调用的也是 then 方法（只注册失败回调）</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPromise</span> </span>&#123;</span><br><span class="line">  <span class="keyword">catch</span>(failCallback) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.then(<span class="literal">undefined</span>, failCallback)</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<h2 id="完整版"><a href="#完整版" class="headerlink" title="完整版"></a>完整版</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> PENDING = <span class="string">&#x27;pending&#x27;</span></span><br><span class="line"><span class="keyword">const</span> FULFILLED = <span class="string">&#x27;fulfilled&#x27;</span></span><br><span class="line"><span class="keyword">const</span> REJECTED = <span class="string">&#x27;rejected&#x27;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPromise</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">executor</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      executor(<span class="built_in">this</span>.resolve, <span class="built_in">this</span>.reject)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      <span class="built_in">this</span>.reject(e)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  status = PENDING</span><br><span class="line">  value = <span class="literal">undefined</span></span><br><span class="line">  reason = <span class="literal">undefined</span></span><br><span class="line">  successCallback = []</span><br><span class="line">  failCallback = []</span><br><span class="line">  resolve = <span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.status !== PENDING) <span class="keyword">return</span></span><br><span class="line">    <span class="built_in">this</span>.status = FULFILLED</span><br><span class="line">    <span class="built_in">this</span>.value = value</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">this</span>.successCallback.length) <span class="built_in">this</span>.successCallback.shift()()</span><br><span class="line">  &#125;</span><br><span class="line">  reject = <span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.status !== PENDING) <span class="keyword">return</span></span><br><span class="line">    <span class="built_in">this</span>.status = REJECTED</span><br><span class="line">    <span class="built_in">this</span>.reason = reason</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">this</span>.failCallback.length) <span class="built_in">this</span>.failCallback.shift()()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">then</span>(<span class="params">successCallback, failCallback</span>)</span> &#123;</span><br><span class="line">    successCallback = successCallback ? successCallback : <span class="function"><span class="params">value</span> =&gt;</span> value</span><br><span class="line">    failCallback = failCallback</span><br><span class="line">      ? failCallback</span><br><span class="line">      : <span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">throw</span> reason</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">const</span> promise2 = <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.status === FULFILLED) &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> x = successCallback(<span class="built_in">this</span>.value)</span><br><span class="line">            resolvePromise(promise2, x, resolve, reject)</span><br><span class="line">          &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">            reject(e)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;, <span class="number">0</span>)</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span>.status === REJECTED) &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> x = failCallback(<span class="built_in">this</span>.reason)</span><br><span class="line">            resolvePromise(promise2, x, resolve, reject)</span><br><span class="line">          &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">            reject(e)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;, <span class="number">0</span>)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.successCallback.push(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">              <span class="keyword">let</span> x = successCallback(<span class="built_in">this</span>.value)</span><br><span class="line">              resolvePromise(promise2, x, resolve, reject)</span><br><span class="line">            &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">              reject(e)</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;, <span class="number">0</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="built_in">this</span>.failCallback.push(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">              <span class="keyword">let</span> x = failCallback(<span class="built_in">this</span>.reason)</span><br><span class="line">              resolvePromise(promise2, x, resolve, reject)</span><br><span class="line">            &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">              reject(e)</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;, <span class="number">0</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> promise2</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">finally</span>(<span class="params">callback</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.then(</span><br><span class="line">      value =&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> MyPromise.resolve(callback()).then(<span class="function">() =&gt;</span> value)</span><br><span class="line">      &#125;,</span><br><span class="line">      reason =&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> MyPromise.resolve(callback()).then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">throw</span> reason()</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">catch</span>(failCallback) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.then(<span class="literal">undefined</span>, failCallback)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> <span class="function"><span class="title">all</span>(<span class="params">array</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> result = []</span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">addData</span>(<span class="params">key, value</span>) </span>&#123;</span><br><span class="line">        result[key] = value</span><br><span class="line">        index++</span><br><span class="line">        <span class="keyword">if</span> (index === array.length) &#123;</span><br><span class="line">          resolve(result)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">        <span class="keyword">const</span> current = array[i]</span><br><span class="line">        <span class="keyword">if</span> (current <span class="keyword">instanceof</span> MyPromise) &#123;</span><br><span class="line">          current.then(</span><br><span class="line">            value =&gt; addData(i, value),</span><br><span class="line">            reason =&gt; reject(reason)</span><br><span class="line">          )</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          addData(i, array[i])</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> <span class="function"><span class="title">resolve</span>(<span class="params">value</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (value <span class="keyword">instanceof</span> MyPromise) <span class="keyword">return</span> value</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MyPromise(<span class="function"><span class="params">resolve</span> =&gt;</span> resolve(value))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resolvePromise</span>(<span class="params">promise2, x, resolve, reject</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (promise2 === x) &#123;</span><br><span class="line">    <span class="keyword">return</span> reject(<span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">&#x27;Chaining cycle detected for promise #&lt;Promise&gt;&#x27;</span>))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (x <span class="keyword">instanceof</span> MyPromise) &#123;</span><br><span class="line">    x.then(resolve, reject)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    resolve(x)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = MyPromise</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>源码分析</tag>
        <tag>JavaScript</tag>
        <tag>Promise</tag>
        <tag>then链</tag>
      </tags>
  </entry>
  <entry>
    <title>优化8.性能优化问题面试指南</title>
    <url>/posts/387d32f8/</url>
    <content><![CDATA[<h2 id="从输入-URL-到页面加载显示完成都发生了什么"><a href="#从输入-URL-到页面加载显示完成都发生了什么" class="headerlink" title="从输入 URL 到页面加载显示完成都发生了什么"></a>从输入 URL 到页面加载显示完成都发生了什么</h2><ol>
<li>URL 解析</li>
<li>检查缓存</li>
<li>DNS 解析</li>
<li>TCP 三次握手</li>
<li>客户端与服务端进行信息通信</li>
<li>TCP 四次挥手</li>
<li>客户端渲染</li>
</ol>
<p><strong>URL解析：</strong>UI 线程会判断输入的地址地址是搜索的关键词还是访问站点的 URL</p>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/jslearn-img/202203191342891.png"></p>
<p><strong>DNS 解析：</strong> 接下来 UI 线程会通知 Network 线程，让其发起网络请求</p>
<ul>
<li><p>先要进行 DNS 查找，要去把域名转换成 IP 地址</p>
</li>
<li><p>建立链接过程中还要看协议，如果使 HTTPS 需要建立 TLS 连接</p>
</li>
<li><p>如果碰到 301 （永久移动）则要重新发起请求</p>
</li>
<li><p>Server 上处理请求，最后会组织成 Response 返回给前端</p>
<p>读到 Response 前几个字节会开始分析数据的类型，虽然我们会在 <code>Content-Type</code> 告诉服务器这个类型是什么，但是这个不一定是正确的，浏览器会对此进行判断（安全检查）</p>
</li>
</ul>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/jslearn-img/202203191345078.png"></p>
<p><strong>客户端渲染：</strong> 数据和渲染进程都准备好了会传递给主线程</p>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/jslearn-img/202203191910533.png"></p>
<p>主线程开始进行文本解析，把文档转换成 DOM 对象</p>
<ol>
<li><p>主线程在解析构造 DOM 时，为了加快速度，会进行一个 <strong>预扫描</strong> ，先把 HTML 里的标签给扫描出来。HTML 解析器碰到 JS 会暂停文档进一步解析（因为 JS 会修改 DOM） ，可以使用 <code>async/defer</code> 防止 JS 阻塞 HTML 解析</p>
</li>
<li><p>主线程解析 CSS 计算样式，<strong>创建布局树</strong> 并确定每一个元素的几何位置</p>
</li>
<li><p>接下来任务交给绘画线程和复合线程来做</p>
<p>主线程遍历布局树后会创建绘制记录，因为绘画是有顺序的，之后将页面拆分构建成 <strong>图层树</strong>，最后复合线程把图层创建一成一个 <strong>复合帧</strong></p>
</li>
</ol>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/jslearn-img/202203191915980.png"></p>
<h2 id="首屏加载优化"><a href="#首屏加载优化" class="headerlink" title="首屏加载优化"></a>首屏加载优化</h2><ul>
<li>Web 增量加载的特点决定了首屏性能不会完美</li>
<li>过长的白屏影响用户体验和留存</li>
<li>首屏（above the fold） -&gt; 初次印象</li>
</ul>
<p><strong>首屏 —— 用户加载体验的 3 个关键时刻</strong></p>
<blockquote>
<p> <a href="https://addyosmani.com/blog/usability/">Web Page Usability Matters</a></p>
</blockquote>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/jslearn-img/202203192119746.png"></p>
<p><strong>测量指标：</strong></p>
<ul>
<li>First Contentful Paint（FCP）</li>
<li>Largest Contentful Paint（LCP）</li>
<li>Time to Interactive（TTI）</li>
</ul>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/jslearn-img/202203192122947.png"></p>
<p><strong>影响原因：</strong></p>
<ul>
<li><p>资源体积太大</p>
<p>对 HTML、CSS、JS（压缩与混淆） 进行资源压缩</p>
<p>传输压缩启用 Gzip</p>
<p>使用 splitChunks 对代码拆分（将第三方库、业务逻辑、公共代码拆分出去）</p>
<p>使用 TreeShaking 将没有用到的代码摇下去（基于 ES6 import export）</p>
<p>利用 HTTP 2 多路复用加快资源加载</p>
<p>合理利用缓存（Cache-Control/Expires）</p>
</li>
<li><p>首页内容太多</p>
<p>路由、组件、图片列表进行懒加载</p>
<p>使用预渲染或 SSR，把 HTML 内容进行生成减少请求传输时间</p>
<p>把首屏最需要的 CSS 嵌入到页面 Inline CSS</p>
</li>
<li><p>加载顺序不合适</p>
<p>使用 prefetch、preload 提高加载顺序</p>
</li>
</ul>
<h2 id="JavaScript-内存管理"><a href="#JavaScript-内存管理" class="headerlink" title="JavaScript 内存管理"></a>JavaScript 内存管理</h2><ul>
<li>内存泄露严重影响性能</li>
<li>高级语言不等于不需要管理内存</li>
</ul>
<p><strong>变量创建时自动分配内存，不使用时 “自动” 释放内存（GC）</strong></p>
<ul>
<li>内存释放的主要问题是如何确定不再需要使用的内存</li>
<li>所有的 GC 都是近似实现，只能通过判断变量是否还能再次访问到</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> number = <span class="number">123</span> <span class="comment">// 给数分配内存</span></span><br><span class="line"><span class="keyword">var</span> string = <span class="string">&#x27;myString&#x27;</span> <span class="comment">// 给字符串分配内存</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  m: <span class="number">1</span>,</span><br><span class="line">  n: onj2,</span><br><span class="line">&#125; <span class="comment">// 给对象和它的属性分配内存</span></span><br><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, <span class="literal">null</span>, <span class="string">&#x27;str&#x27;</span>] <span class="comment">// 给数组和它包含的值分配内存</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + <span class="number">3</span></span><br><span class="line">&#125; <span class="comment">// 给函数分配内存</span></span><br></pre></td></tr></table></figure>

<p>JavaScript 有相关作用域</p>
<ul>
<li>局部变量，函数执行完，没有闭包引用，就会被标记回收</li>
<li>全局变量，直至浏览器卸载页面时释放</li>
</ul>
<p><strong>GC 实现机制</strong></p>
<ul>
<li><p>引用计数 —— 无法解决循环引用的问题（a 引用 b，b 引用 a，即使其他变量没有对 a 和 b 进行引用）</p>
<p>当创建变量后，去看一下有哪些对其进行引用，一旦被引用就不能被垃圾回收</p>
</li>
<li><p>标记清除</p>
<p>会从根节点进行扫描，去看一下所有根节点是否能被访问到，如果有节点不能被访问到就会被回收掉</p>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/jslearn-img/202203192154737.png"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// b 属性始终没有用到，但是从根节点始终可以访问到 b 属性，所以 b 属性不能被回收</span></span><br><span class="line"><span class="keyword">const</span> object = &#123; <span class="attr">a</span>: <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1000</span>), <span class="attr">b</span>: <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">2000</span>) &#125;</span><br><span class="line"><span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> <span class="built_in">console</span>.log(object.a), <span class="number">1000</span>)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><strong>解决方法：</strong></p>
<ul>
<li><p>避免意外的全局变量产生</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">accidentalGlobal</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  leak1 = <span class="string">&#x27;leak1&#x27;</span></span><br><span class="line">  <span class="built_in">this</span>.leak2 = <span class="string">&#x27;leak2&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">accidentalGlobal()</span><br><span class="line"><span class="built_in">window</span>.leak1</span><br><span class="line"><span class="built_in">window</span>.leak2</span><br></pre></td></tr></table></figure>
</li>
<li><p>避免反复运行引用大量闭包</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// store会持有outer的上下文</span></span><br><span class="line"><span class="keyword">var</span> store</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">outer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> largeData = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1000</span>)</span><br><span class="line">  <span class="keyword">var</span> preStore = store</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">inner</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (preStore) <span class="keyword">return</span> largeData</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  store = outer()</span><br><span class="line">&#125;, <span class="number">10</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>避免脱离的 DOM 元素</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createElement</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> div = <span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line">  div.id = <span class="string">&#x27;detached&#x27;</span></span><br><span class="line">  <span class="keyword">return</span> div</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> detachedDiv = createElement()</span><br><span class="line"><span class="built_in">document</span>.body.appendChild(detachedDiv)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deleteElement</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">document</span>.body.removeChild(<span class="built_in">document</span>.getElementById(<span class="string">&#x27;detached&#x27;</span>))</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 虽然 DOM 删除了，但是变量还在引用</span></span><br><span class="line">deleteElement()</span><br></pre></td></tr></table></figure>

</li>
</ul>
]]></content>
      <categories>
        <category>性能优化</category>
      </categories>
      <tags>
        <tag>性能优化</tag>
        <tag>内存管理优化</tag>
        <tag>首屏加载优化</tag>
      </tags>
  </entry>
  <entry>
    <title>函数式编程范式</title>
    <url>/posts/65bef143/</url>
    <content><![CDATA[<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><p>[toc]</p>
<a id="more"></a>

<p><img data-src="https://gitee.com/lilyn/pic/raw/master/lagoulearn-img/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B.png"></p>
<h2 id="认识函数式编程"><a href="#认识函数式编程" class="headerlink" title="认识函数式编程"></a>认识函数式编程</h2><blockquote>
<p><a href="https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch1.html">函数式编程指北</a><br><a href="http://www.ruanyifeng.com/blog/2017/02/fp-tutorial.html">阮一峰 函数式编程入门</a></p>
</blockquote>
<p><strong>为什么要学习</strong></p>
<ul>
<li>函数式编程随着 React 的流行受到越来越多的关注</li>
<li>Vue 3 也开始拥抱函数式编程</li>
<li>函数式编程可以抛弃 this</li>
<li>打包过程中可以更好的利用 tree shaking 过滤无用代码</li>
<li>方便测试、并行处理</li>
<li>有很多库可以帮助我们进行函数式开发：lodash、underscore、ramda</li>
</ul>
<p><strong>函数式编程概述</strong></p>
<p>函数式编程（Function Programming, FP）是编程范式之一，我们常听说的编程范式还有面向过程编程、面向对象编程</p>
<ul>
<li>面向过程编程：按照 <strong>步骤</strong> 来实现，一步一步实现想要的功能</li>
<li>面向对象编程：把现实世界中的事物抽象成程序世界中的类和对象，通过 <strong>封装、继承和多态</strong> 来演示事物之间的联系（对现实世界的事物进行抽象）</li>
<li>函数式编程：把现实世界的事物和事物之间的 <strong>联系</strong> 抽象到程序世界（对运算过程进行抽象）<ul>
<li><strong>函数式编程中的函数指的不是程序中的函数（方法）</strong>，而是数学中的函数（描述映射关系），例如： <code>y = sin(x)</code> ，x 值确定 y 值就确定了</li>
<li><strong>相同的输入始终要得到相同的输出</strong>（纯函数）</li>
<li>函数式编程用来描述数据（函数）之间的映射</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 非函数式</span></span><br><span class="line"><span class="keyword">let</span> num1 = <span class="number">2</span></span><br><span class="line"><span class="keyword">let</span> num2 = <span class="number">3</span></span><br><span class="line"><span class="keyword">let</span> sum = num1 + num2</span><br><span class="line"><span class="built_in">console</span>.log(sum)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数式</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">n1, n2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> n1 + n2</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> sum = add(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="built_in">console</span>.log(sum)</span><br></pre></td></tr></table></figure>

<h2 id="一等公民的函数"><a href="#一等公民的函数" class="headerlink" title="一等公民的函数"></a>一等公民的函数</h2><h3 id="函数是一等公民"><a href="#函数是一等公民" class="headerlink" title="函数是一等公民"></a>函数是一等公民</h3><blockquote>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Glossary/First-class_Function">MDN First-class Function（头等函数）</a></p>
</blockquote>
<p>判断一门语言是否支持函数式编程，一个重要的判断标准就是：它是否将函数看做是 “一等公民”</p>
<p>一等公民意味着函数和其它数据类型具备相同地位，可以做如下事情：</p>
<ul>
<li>函数可以存储在变量中</li>
<li>函数可以作为参数</li>
<li>函数可以作为返回值</li>
</ul>
<p>在 JavaScript 中 <strong>函数就是一个普通的对象</strong>（可以通过 <code>new Function()</code> 创建），我们可以把函数存储到变量或数组中，它还可以作为另一个函数的参数和返回值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 把函数赋值给变量</span></span><br><span class="line"><span class="keyword">let</span> fn = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;Hello First-class Function&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">fn()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> BlogController = &#123;</span><br><span class="line">  <span class="comment">// index 方法和 Views.index 方法调用形式一样</span></span><br><span class="line">  <span class="function"><span class="title">index</span>(<span class="params">posts</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> Views.index(posts)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> BlogController = &#123;</span><br><span class="line">  <span class="comment">// 把 Views.index 方法赋值给 index 方法（不是把方法返回值赋值）</span></span><br><span class="line">  index: Views.index</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h3><p>高阶函数（Higher-order function）</p>
<ul>
<li>可以把函数作为参数传递给另一个函数</li>
<li>可以把函数作为另一个函数的返回结果</li>
</ul>
<p><strong>高阶函数的意义</strong></p>
<ul>
<li>函数式编程是对运算过程的抽象，抽象可以帮助我们屏蔽细节，只需要关注目标即可</li>
<li>高阶函数是用来抽象通用的问题</li>
</ul>
<p><strong>函数作为参数：</strong>  可以让函数变得更灵活，且在调用时不需要考虑内部是如何实现的</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 高阶函数-函数作为参数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">forEach</span>(<span class="params">array, fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">    fn(array[i])</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">8</span>]</span><br><span class="line">forEach(arr, <span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(item)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 让函数变得通用 -&gt; 在变化位置传一个函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params">array, fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> results = []</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (fn(array[i])) &#123;</span><br><span class="line">      results.push(array[i])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> results</span><br><span class="line">&#125;</span><br><span class="line">filter(arr, <span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> item % <span class="number">2</span> === <span class="number">0</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><strong>函数作为返回值：</strong> 让一个函数生成一个函数，这样可以在其中增加一些判断，比如：让函数只执行一次</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 高阶函数-函数作为返回值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeFn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> msg = <span class="string">&#x27;Hello function&#x27;</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(msg)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">makeFn()()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">once</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> done = <span class="literal">false</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!done) &#123;</span><br><span class="line">      done = <span class="literal">true</span></span><br><span class="line">      <span class="keyword">return</span> fn.apply(<span class="built_in">this</span>, <span class="built_in">arguments</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> pay = once(<span class="function"><span class="keyword">function</span> (<span class="params">money</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`支付：<span class="subst">$&#123;money&#125;</span> RMB`</span>)</span><br><span class="line">&#125;)</span><br><span class="line">pay(<span class="number">5</span>)</span><br></pre></td></tr></table></figure>

<p><strong>常用高阶函数</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 函数表达式形式声明</span></span><br><span class="line"><span class="keyword">const</span> map = <span class="function">(<span class="params">array, fn</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> results = []</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> value <span class="keyword">of</span> array) &#123;</span><br><span class="line">    results.push(fn(value))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> results</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// let arr = [1, 2, 3, 4]</span></span><br><span class="line"><span class="comment">// arr = map(arr, v =&gt; v * v)</span></span><br><span class="line"><span class="comment">// console.log(arr)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 检测数组中元素是否都满足条件</span></span><br><span class="line"><span class="keyword">const</span> every = <span class="function">(<span class="params">array, fn</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> result = <span class="literal">true</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> value <span class="keyword">of</span> array) &#123;</span><br><span class="line">    result = fn(value)</span><br><span class="line">    <span class="keyword">if</span> (!result) <span class="keyword">break</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// let arr = [11, 9, 14]</span></span><br><span class="line"><span class="comment">// let r = every(arr, v =&gt; v &gt; 10)</span></span><br><span class="line"><span class="comment">// console.log(r)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 检测数组中元素是否有一个满足</span></span><br><span class="line"><span class="keyword">const</span> some = <span class="function">(<span class="params">array, fn</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> result = <span class="literal">false</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> array) &#123;</span><br><span class="line">    result = fn(value)</span><br><span class="line">    <span class="keyword">if</span> (result) <span class="keyword">break</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">9</span>]</span><br><span class="line"><span class="keyword">let</span> r = some(arr, <span class="function"><span class="params">v</span> =&gt;</span> v % <span class="number">2</span> === <span class="number">0</span>)</span><br><span class="line"><span class="built_in">console</span>.log(r)</span><br></pre></td></tr></table></figure>

<h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><p>闭包（Closure）：函数和其周围的状态的引用捆绑在一起形成闭包</p>
<ul>
<li>可以在另一个作用域中调用一个函数的内部函数，并访问到该函数的作用域的成员（延长了外部函数作用的范围）</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeFn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> msg = <span class="string">&#x27;Hello function&#x27;</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(msg)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> fn = makeFn()</span><br><span class="line">fn()</span><br></pre></td></tr></table></figure>

<p>闭包的本质：函数在执行的时候会放到一个执行栈上，当函数执行完毕之后会从执行栈上移除， <strong>但是堆上的作用域成员因为被外部引用不能释放</strong>，因此内部函数依然可以访问外部函数的成员</p>
<ul>
<li>调用时观察 <code>Call Stack</code>（调用栈）和 <code>Scope</code>（作用域）观察闭包清空</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makePower</span>(<span class="params">power</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">number</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.pow(number, power)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> power2 = makePower(<span class="number">2</span>)</span><br><span class="line"><span class="keyword">let</span> power3 = makePower(<span class="number">3</span>)</span><br><span class="line"><span class="built_in">console</span>.log(power2(<span class="number">4</span>))</span><br><span class="line"><span class="built_in">console</span>.log(power3(<span class="number">4</span>))</span><br></pre></td></tr></table></figure>

<h2 id="函数式编程基础"><a href="#函数式编程基础" class="headerlink" title="函数式编程基础"></a>函数式编程基础</h2><h3 id="纯函数"><a href="#纯函数" class="headerlink" title="纯函数"></a>纯函数</h3><p><strong>纯函数：相同的输入永远会得到相同的输出</strong>，而且没有任何可观察的副作用</p>
<ul>
<li>纯函数就类似数学中的函数（用来描述输入和输出之间的关系），<code>y = f(x)</code></li>
<li><a href="https://github.com/lodash/lodash">lodash</a> 是一个纯函数的功能库，提供了对数组、数字、对象、字符串、函数等操作的一些方法</li>
</ul>
<p>数组的 <code>slice</code> 和 <code>splice</code> 分别是：纯函数和不纯的函数</p>
<ul>
<li><code>slice</code> 返回数组中指定部分，不会改变原数组</li>
<li><code>splice</code> 对数组进行操作返回改数组，会改变原数组</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 纯函数</span></span><br><span class="line"><span class="built_in">console</span>.log(array.slice(<span class="number">0</span>, <span class="number">3</span>)) <span class="comment">// [ 1, 2, 3 ]</span></span><br><span class="line"><span class="built_in">console</span>.log(array.slice(<span class="number">0</span>, <span class="number">3</span>)) <span class="comment">// [ 1, 2, 3 ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 不纯的函数</span></span><br><span class="line"><span class="built_in">console</span>.log(array.splice(<span class="number">0</span>, <span class="number">3</span>)) <span class="comment">// [ 1, 2, 3 ]</span></span><br><span class="line"><span class="built_in">console</span>.log(array.splice(<span class="number">0</span>, <span class="number">3</span>)) <span class="comment">// [ 4, 5 ]</span></span><br></pre></td></tr></table></figure>

<ul>
<li>函数式编程不会保留计算中间的结果，所以变量是不可变的（无状态的）</li>
<li>我们可以把一个函数的执行结果交给另一个函数去处理</li>
</ul>
<p><strong>lodash 中的纯函数</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> _ = <span class="built_in">require</span>(<span class="string">&#x27;lodash&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> array = [<span class="string">&#x27;jack&#x27;</span>, <span class="string">&#x27;tom&#x27;</span>, <span class="string">&#x27;lucy&#x27;</span>, <span class="string">&#x27;kate&#x27;</span>]</span><br><span class="line"><span class="built_in">console</span>.log(_.first(array))</span><br><span class="line"><span class="built_in">console</span>.log(_.last(array))</span><br><span class="line"><span class="built_in">console</span>.log(_.toUpper(_.first(array)))</span><br><span class="line"><span class="built_in">console</span>.log(_.reverse(array))</span><br><span class="line"><span class="keyword">const</span> r = _.each(array, <span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(item, index)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(r)</span><br></pre></td></tr></table></figure>

<p><strong>纯函数好处</strong></p>
<ul>
<li><p>可缓存</p>
<p>因为纯函数对相同的输入始终有相同的结果，所以可以把纯函数的结果缓存起来</p>
</li>
<li><p>可测试</p>
<p>纯函数让测试更方便</p>
</li>
<li><p>并行处理</p>
<p>在多线程环境下并行操作共享的内存数据很可能会出现意外情况</p>
<p>纯函数不需要访问共享的内存数据（封闭的空间），所以在并行环境下可以任意运行纯函数（Web Worker）</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> _ = <span class="built_in">require</span>(<span class="string">&#x27;lodash&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getArea</span>(<span class="params">r</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(r)</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.PI * r * r</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// let getAreaWithMemory = _.memoize(getArea)</span></span><br><span class="line"><span class="comment">// console.log(getAreaWithMemory(4))</span></span><br><span class="line"><span class="comment">// console.log(getAreaWithMemory(4))</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 模拟memoize</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">memoize</span>(<span class="params">f</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> cache = &#123;&#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> key = <span class="built_in">JSON</span>.stringify(<span class="built_in">arguments</span>)</span><br><span class="line">    cache[key] = cache[key] || f.apply(f, <span class="built_in">arguments</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(key)</span><br><span class="line">    <span class="keyword">return</span> cache[key]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> getAreaWithMemory = memoize(getArea)</span><br><span class="line"><span class="built_in">console</span>.log(getAreaWithMemory(<span class="number">4</span>))</span><br><span class="line"><span class="built_in">console</span>.log(getAreaWithMemory(<span class="number">4</span>))</span><br></pre></td></tr></table></figure>

<p><strong>纯函数副作用</strong></p>
<ul>
<li>纯函数：相同的输入永远会得到相同的输出，而且 <strong>没有任何可观察的 副作用</strong></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 不纯函数</span></span><br><span class="line"><span class="keyword">let</span> min = <span class="number">18</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkAge</span>(<span class="params">age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> age &gt;= min</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 纯函数（有硬编码，可以通过柯里化解决）</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkAge</span>(<span class="params">age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> min = <span class="number">18</span></span><br><span class="line">  <span class="keyword">return</span> age &gt;= min</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果函数依赖于外部的状态就无法保证输出相同，就会带来副作用，副作用来源：</p>
<ul>
<li>配置文件</li>
<li>数据库</li>
<li>获取用户的输入</li>
</ul>
<p>所有的外部交互都有可能产生副作用，副作用也使得方法通用性下降不适合扩展和可重用性，同时副作用会给程序中带来安全隐患给程序带来不确定性，但是副作用不可能完全禁止，尽可能控制他们在可控范围内发生</p>
<h3 id="柯里化（Haskell-Brooks-Curry）"><a href="#柯里化（Haskell-Brooks-Curry）" class="headerlink" title="柯里化（Haskell Brooks Curry）"></a>柯里化（Haskell Brooks Curry）</h3><ul>
<li>当一个函数有多个参数的时候会先传递一部分参数调用它（这部分参数以后永远不变）</li>
<li>然后返回一个新的函数接收剩余的参数，返回结果</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 普通纯函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkAge</span>(<span class="params">min, age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> age &gt;= min</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(checkAge(<span class="number">18</span>, <span class="number">20</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用柯里化解决硬编码问题</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkAge</span>(<span class="params">min</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">age</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> age &gt;= min</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(checkAge(<span class="number">18</span>)(<span class="number">20</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6 写法</span></span><br><span class="line"><span class="keyword">let</span> checkAge = <span class="function"><span class="params">min</span> =&gt;</span> <span class="function"><span class="params">age</span> =&gt;</span> age &gt;= min</span><br><span class="line"><span class="keyword">let</span> checkAge18 = checkAge(<span class="number">18</span>)</span><br><span class="line"><span class="built_in">console</span>.log(checkAge18(<span class="number">24</span>))</span><br></pre></td></tr></table></figure>

<p><strong>lodash 中的柯里化函数</strong></p>
<p><code>_.curry(func)</code></p>
<ul>
<li>功能：创建一个函数，该函数接收一个或多个 func 的参数，如果 func 所需要的参数都被提供则执行 func 并返回执行的结果，否则继续返回该函数并等待接收剩余的参数</li>
<li>参数：需要柯里化的函数</li>
<li>返回值：柯里化后的函数</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> _ = <span class="built_in">require</span>(<span class="string">&#x27;lodash&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 面向过程方式提取字符串中的空白字符</span></span><br><span class="line"><span class="string">&#x27;&#x27;</span>.match(<span class="regexp">/\s+/g</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 想要重用代码需要使用函数式编程</span></span><br><span class="line"><span class="keyword">const</span> match = _.curry(<span class="function"><span class="keyword">function</span> (<span class="params">reg, str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> str.match(reg)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> haveSpace = match(<span class="regexp">/\s+/g</span>)</span><br><span class="line"><span class="built_in">console</span>.log(haveSpace(<span class="string">&#x27;hello world&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 找到数组中所有有空白字符的元素</span></span><br><span class="line"><span class="keyword">const</span> filter = _.curry(<span class="function"><span class="keyword">function</span> (<span class="params">func, array</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> array.filter(func)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> findSpace = filter(haveSpace)</span><br><span class="line"><span class="built_in">console</span>.log(findSpace([<span class="string">&#x27;John Connor&#x27;</span>, <span class="string">&#x27;John_Donne&#x27;</span>]))</span><br></pre></td></tr></table></figure>

<p>模拟 <code>_.curry()</code> 的实现</p>
<ul>
<li><code>getSum</code> 需要几个参数，在调用 <code>curried</code> 时就传递几个参数，立即调用并返回执行结果</li>
<li>调用 <code>curried</code> 时只传递 <code>getSum</code> 需要的部分参数，此时 <code>curried</code> 函数会返回一个新的函数并等待 <code>getSum</code> 所需要的其他参数</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getSum</span>(<span class="params">a, b, c</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b + c</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">curry</span>(<span class="params">func</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">curriedFn</span>(<span class="params">...args</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 判断实参和形参的个数</span></span><br><span class="line">    <span class="keyword">if</span> (args.length &lt; func.length) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> curried(...args.concat(<span class="built_in">Array</span>.from(<span class="built_in">arguments</span>)))</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> func(...args)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> curried = curry(getSum)</span><br><span class="line"><span class="built_in">console</span>.log(curried(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>))</span><br><span class="line"><span class="built_in">console</span>.log(curried(<span class="number">1</span>, <span class="number">2</span>)(<span class="number">3</span>))</span><br></pre></td></tr></table></figure>

<p><strong>柯里化总结</strong></p>
<ul>
<li><p>柯里化可以让我们给一个函数传递较少的参数得到一个已经记住了某些固定参数的新函数</p>
<p>柯里化可以帮我们生成一个新的函数，生成的函数已经记住了某些固定的参数</p>
</li>
<li><p>这是一种对函数参数的 “缓存”</p>
</li>
<li><p>让函数变的更灵活，让函数的粒度更小</p>
</li>
<li><p>可以把多元函数转换成一元函数，可以组合使用函数产生强大的功能</p>
</li>
</ul>
<h3 id="函数组合"><a href="#函数组合" class="headerlink" title="函数组合"></a>函数组合</h3><p>纯函数和柯里化很容易写出洋葱代码：<code>h(g(f(x)))</code></p>
<ul>
<li>获取数组的最后一个元素再转换成大写字母：<code>_.toUpper(_.first(_.reverse(array)))</code></li>
<li>函数组合可以让我们把细粒度的函数重新组合生成一个新的函数</li>
</ul>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/lagoulearn-img/%E6%B4%8B%E8%91%B1%E4%BB%A3%E7%A0%81.png"></p>
<p><strong>管道</strong></p>
<p>下面这张图表示程序中使用函数处理数据的过程，把参数 a 经过管道 fn 传入，经过处理返回 b</p>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/lagoulearn-img/%E7%AE%A1%E9%81%931.png"></p>
<p>如果管道 fn 特别长（如果哪个地方漏水，可能很难去找到具体位置），可以把管道 fn 拆分成多个。下面这张图表示把 fn 这个管道拆分成 3 个管道 f1、f2、f3，最终把 参数 a 处理后返回 b</p>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/lagoulearn-img/%E7%AE%A1%E9%81%932.png"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 伪代码来实现上面逻辑</span></span><br><span class="line">fn = compose(f1, f2, f3)</span><br><span class="line">b = fn(a)</span><br></pre></td></tr></table></figure>

<p><strong>函数组合：</strong> 如果一个函数要经过多个函数才能得到最终值，这个时候可以把中间过程的函数合并成一个函数</p>
<ul>
<li>函数就像是数据的管道，函数组合就是把这些管道连接起来，让数据穿过多个管道形成最终结果</li>
<li><strong>函数组合默认是从右到左执行</strong></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 函数组合</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compose</span>(<span class="params">f, g</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> f(g(value))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reverse</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> array.reverse()</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">first</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> array[<span class="number">0</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 从右到左运行</span></span><br><span class="line"><span class="keyword">const</span> last = compose(first, reverse)</span><br><span class="line"><span class="built_in">console</span>.log(last([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]))</span><br></pre></td></tr></table></figure>

<p><strong>lodash 中的组合函数</strong></p>
<ul>
<li>lodash 中组合函数 <code>flow()</code> 或 <code>flowRight()</code>，他们都可以组合多个函数</li>
<li><code>flow()</code> 是从左到右</li>
<li><code>flowRight()</code> 是从右到左运行，使用的更多一些</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> _ = <span class="built_in">require</span>(<span class="string">&#x27;lodash&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> reverse = <span class="function"><span class="params">arr</span> =&gt;</span> arr.reverse()</span><br><span class="line"><span class="keyword">const</span> first = <span class="function"><span class="params">arr</span> =&gt;</span> arr[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">const</span> toUpper = <span class="function"><span class="params">s</span> =&gt;</span> s.toUpperCase()</span><br><span class="line"><span class="keyword">const</span> f = _.flowRight(toUpper, first, reverse)</span><br><span class="line"><span class="built_in">console</span>.log(f([<span class="string">&#x27;one&#x27;</span>, <span class="string">&#x27;two&#x27;</span>, <span class="string">&#x27;three&#x27;</span>]))</span><br></pre></td></tr></table></figure>

<p>模拟实现 lodash 的 <code>flowRight</code> 方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compose</span>(<span class="params">...args</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> args.reverse().reduce(<span class="function"><span class="keyword">function</span> (<span class="params">acc, fn</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> fn(acc)</span><br><span class="line">    &#125;, value)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6写法</span></span><br><span class="line"><span class="keyword">const</span> compose =</span><br><span class="line">  (...args) =&gt;</span><br><span class="line">  value =&gt;</span><br><span class="line">    args.reverse().reduce(<span class="function">(<span class="params">acc, fn</span>) =&gt;</span> fn(acc), value)</span><br></pre></td></tr></table></figure>

<p>函数的组合要满足 <strong>结合律</strong>（associativity）</p>
<ul>
<li><code>compose(f, g, h)</code> 我们既可以把 g 和 h 组合 <code>compose(f, compose(g, h))</code>，还可以把 f 和 g 组合 <code>compose(compose(f, g), h)</code>，结果都是一样的</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 结合律</span></span><br><span class="line"><span class="keyword">const</span> _ = <span class="built_in">require</span>(<span class="string">&#x27;lodash&#x27;</span>)</span><br><span class="line"><span class="comment">// const f = _.flowRight(_.toUpper, _.first, _.reverse)</span></span><br><span class="line"><span class="comment">// const f = _.flowRight(_.flowRight(_.toUpper, _.first), _.reverse)</span></span><br><span class="line"><span class="keyword">const</span> f = _.flowRight(_.toUpper, _.flowRight(_.first, _.reverse))</span><br><span class="line"><span class="built_in">console</span>.log(f([<span class="string">&#x27;one&#x27;</span>, <span class="string">&#x27;two&#x27;</span>, <span class="string">&#x27;three&#x27;</span>]))</span><br></pre></td></tr></table></figure>

<p><strong>如何调试组合函数</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> _ = <span class="built_in">require</span>(<span class="string">&#x27;lodash&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> trace = _.curry(<span class="function">(<span class="params">tag, v</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(tag, v)</span><br><span class="line">  <span class="keyword">return</span> v</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> split = _.curry(<span class="function">(<span class="params">sep, str</span>) =&gt;</span> _.split(str, sep))</span><br><span class="line"><span class="keyword">const</span> join = _.curry(<span class="function">(<span class="params">sep, array</span>) =&gt;</span> _.join(array, sep))</span><br><span class="line"><span class="keyword">const</span> map = _.curry(<span class="function">(<span class="params">fn, array</span>) =&gt;</span> _.map(array, fn))</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> f = _.flowRight(join(<span class="string">&#x27;-&#x27;</span>), trace(<span class="string">&#x27;map 之后&#x27;</span>), map(_.toLower), trace(<span class="string">&#x27;split 之后&#x27;</span>), split(<span class="string">&#x27; &#x27;</span>))</span><br><span class="line"><span class="built_in">console</span>.log(f(<span class="string">&#x27;NEVER SAY DIE&#x27;</span>))</span><br></pre></td></tr></table></figure>

<p><a href="https://github.com/lodash/lodash/wiki/FP-Guide">lodash/fp</a></p>
<ul>
<li>lodash 默认调用方式是 <code>_.map([&#39;a&#39;, &#39;b&#39;], _.toUpper)</code>（数据优先，函数之后）</li>
<li>lodash 的 fp 模块提供了实用的对 <strong>函数式编程友好</strong> 的方法（函数优先，数据之后）</li>
<li>提供了不可变 <strong>auto-curried interatee-first data-last</strong> 的方法</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fp = <span class="built_in">require</span>(<span class="string">&#x27;lodash/fp&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数优先，数据之后</span></span><br><span class="line">fp.map(fp.toUpper, [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>])</span><br><span class="line"><span class="comment">// 返回的是柯里化后的函数，不需要用 curry 进行包装</span></span><br><span class="line">fp.split(<span class="string">&#x27; &#x27;</span>)(<span class="string">&#x27;Hello World&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> f = fp.flowRight(fp.join(<span class="string">&#x27;-&#x27;</span>), fp.map(fp.toLower), fp.split(<span class="string">&#x27; &#x27;</span>))</span><br><span class="line"><span class="built_in">console</span>.log(f(<span class="string">&#x27;NEVER SAY DIE&#x27;</span>))</span><br></pre></td></tr></table></figure>

<p><strong>lodash map 的问题</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> _ = <span class="built_in">require</span>(<span class="string">&#x27;lodash&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// lodash.map会传递三个参数value,index|key,collection</span></span><br><span class="line"><span class="built_in">console</span>.log(_.map([<span class="string">&#x27;23&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;10&#x27;</span>], <span class="built_in">parseInt</span>))</span><br><span class="line"><span class="comment">// parseInt(&#x27;23&#x27;, 0, array)</span></span><br><span class="line"><span class="comment">// parseInt(&#x27;8&#x27;, 1, array)</span></span><br><span class="line"><span class="comment">// parseInt(&#x27;10&#x27;, 2, array)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fp = <span class="built_in">require</span>(<span class="string">&#x27;lodash/fp&#x27;</span>)</span><br><span class="line"><span class="comment">// fp.map只传递一个参数接收一个函数</span></span><br><span class="line"><span class="built_in">console</span>.log(fp.map(<span class="built_in">parseInt</span>, [<span class="string">&#x27;23&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;10&#x27;</span>]))</span><br></pre></td></tr></table></figure>

<h3 id="Point-Free"><a href="#Point-Free" class="headerlink" title="Point Free"></a>Point Free</h3><blockquote>
<p>pointfree 指的是永远不说出你的数据，函数无须提及将要操作的数据是什么样的</p>
</blockquote>
<p><strong>Point Free：</strong> 我们可以把数据处理的过程定义成与数据无关的合成运算，不需要用代表数据的那个参数，只要把简单的运算合并到一起，在使用这种模式之前我们需要定义一些辅助的基本运算函数</p>
<ul>
<li>不需要指明处理的数据</li>
<li><strong>只需要合成运算过程</strong></li>
<li>需要定义一些辅助的基本运算函数</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 非Point Free模式</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">word</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> word.toLowerCase().replace(<span class="regexp">/\s+/g</span>, <span class="string">&#x27;_&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Point Free</span></span><br><span class="line"><span class="keyword">const</span> fp = <span class="built_in">require</span>(<span class="string">&#x27;lodash/fp&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> f = fp.flowRight(fp.replace(<span class="regexp">/\s+/g</span>, <span class="string">&#x27;_&#x27;</span>), fp.toLower)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(f(<span class="string">&#x27;Hello World&#x27;</span>))</span><br></pre></td></tr></table></figure>

<p>使用 Point Free 模式，把单词中的首字母提取并转换成大写</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fp = <span class="built_in">require</span>(<span class="string">&#x27;lodash/fp&#x27;</span>)</span><br><span class="line"><span class="comment">// 这里fp.map调用了两次，可以对其进行优化</span></span><br><span class="line"><span class="comment">/* const firstLetterToUpper = fp.flowRight(</span></span><br><span class="line"><span class="comment">  fp.join(&#x27;. &#x27;),</span></span><br><span class="line"><span class="comment">  fp.map(fp.first),</span></span><br><span class="line"><span class="comment">  fp.map(fp.toUpper),</span></span><br><span class="line"><span class="comment">  fp.split(&#x27; &#x27;)</span></span><br><span class="line"><span class="comment">) */</span></span><br><span class="line"><span class="keyword">const</span> firstLetterToUpper = fp.flowRight(</span><br><span class="line">  fp.join(<span class="string">&#x27;. &#x27;</span>),</span><br><span class="line">  fp.map(fp.flowRight(fp.first, fp.toUpper)),</span><br><span class="line">  fp.split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">)</span><br><span class="line"><span class="built_in">console</span>.log(firstLetterToUpper(<span class="string">&#x27;world wild web&#x27;</span>))</span><br></pre></td></tr></table></figure>

<h2 id="Functor（函子）"><a href="#Functor（函子）" class="headerlink" title="Functor（函子）"></a>Functor（函子）</h2><p>函子其实就可以理解成一个盒子</p>
<ul>
<li><p>盒子里面封装了一个值（value），这个值不对外提供，盒子对外提供 map 方法</p>
<p>如果想处理盒子里面的值，就需要给 map 方法里传递一个纯函数来处理这个值</p>
<p>map 返回的是包含新值的盒子，这样就形成了链式调用</p>
</li>
<li><p>如果传递了 null 值或 undefined，就会产生副作用导致函数不纯，这时就可以使用 MayBe 函子</p>
</li>
<li><p>如果 map 方法调用了很多次，返回的是 null，使用 MayBe 函子就比较难进行溯源了，这时就可以使用 Either 函子（类似 <code>if...else...</code>）</p>
</li>
<li><p>对于不纯的操作也可以使用 IO 函子，把不纯的操作延迟执行</p>
</li>
<li><p>函子可以帮我们控制副作用进行异常处理还可以处理异步任务</p>
</li>
<li><p>Pointed 函子是实现了 of 静态方法的函子</p>
</li>
<li><p>Monad 函子就是静态 IO 方法 + join 方法的函子（当一个函子返回一个函子时就可以使用 Monad）</p>
</li>
</ul>
<h3 id="函子"><a href="#函子" class="headerlink" title="函子"></a>函子</h3><p>函数式编程其实就是把运算抽象成函数，将来函数可以做到最大化重用，另外我们还知道函数式编程是建立在数学思想上的，比如：纯函数就是数学中的函数，而函子是建立数学范畴论的基础上（一个范畴到另一个范畴的投影）</p>
<p><strong>什么是 Functor</strong></p>
<ul>
<li><p>容器：包含值和值得变形关系（这个变形关系就是函数）</p>
</li>
<li><p>函子：是一个特殊的容器，通过一个普通函数的对象来实现，该对象具有 map 方法，map 方法可以运行一个函数对值进行处理（变形关系）</p>
<p>可以理解为盒子里面有一个值，并且对外公布一个对值处理的方法</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Functor函子</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Container</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 静态方法可以直接通过类名调用</span></span><br><span class="line">  <span class="keyword">static</span> <span class="function"><span class="title">of</span>(<span class="params">value</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Container(value)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">value</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 盒子里面有一个值</span></span><br><span class="line">    <span class="built_in">this</span>._value = value</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 对外公布一个 map 方法，接收一个处理值的纯函数</span></span><br><span class="line">  <span class="function"><span class="title">map</span>(<span class="params">fn</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 返回一个新盒子（函子）</span></span><br><span class="line">    <span class="keyword">return</span> Container.of(fn(<span class="built_in">this</span>._value))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用 map 方法时需要传递一个函数来处理 Container 里的值</span></span><br><span class="line"><span class="comment">// let r = new Container(5).map(x =&gt; x + 1).map(x =&gt; x * x)</span></span><br><span class="line"><span class="comment">// 每次创建一个函子都需要调用 new 来创建，可以对 new 进行封装</span></span><br><span class="line"><span class="comment">// console.log(r)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> r = Container.of(<span class="number">5</span>)</span><br><span class="line">  .map(<span class="function"><span class="params">x</span> =&gt;</span> x + <span class="number">1</span>)</span><br><span class="line">  .map(<span class="function"><span class="params">x</span> =&gt;</span> x * x)</span><br><span class="line"><span class="built_in">console</span>.log(r)</span><br></pre></td></tr></table></figure>

<p><strong>函子总结</strong></p>
<ul>
<li>函数式编程运算不直接操作值，而是由函子完成</li>
<li>函子就是一个实现了 map 契约的对象</li>
<li>我们可以把函子想象成一个盒子，这个盒子里封装了一个值</li>
<li>想要处理盒子中的值，需要给盒子的 map 方法传递一个处理值的函数（纯函数），由这个函数来对值进行处理</li>
<li>最终 map 方法返回一个包含新值得盒子（函子），所以就可以进行链式调用</li>
</ul>
<p>在 Functor 中我们传入了 null 或 undefined，这样就会导致函数不纯（副作用），这时需要了解一下 MayBe 函子</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// TypeError: Cannot read property &#x27;toUpperCase&#x27; of null</span></span><br><span class="line">Container.of(<span class="literal">null</span>).map(<span class="function"><span class="params">x</span> =&gt;</span> x.toUpperCase())</span><br></pre></td></tr></table></figure>

<h3 id="MayBe-函子"><a href="#MayBe-函子" class="headerlink" title="MayBe 函子"></a>MayBe 函子</h3><ul>
<li>我们在编程的过程中可能会遇到很多错误，需要对这些错误做相应的处理</li>
<li>MayBe 函子的作用就是可以对外部的空值情况做处理（控制副作用在允许的范围）</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// MayBe 函子</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MayBe</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="function"><span class="title">of</span>(<span class="params">value</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MayBe(value)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">value</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>._value = value</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">map</span>(<span class="params">fn</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.isNothing() ? MayBe.of(<span class="literal">null</span>) : MayBe.of(fn(<span class="built_in">this</span>._value))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">isNothing</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>._value === <span class="literal">null</span> || <span class="built_in">this</span>._value === <span class="literal">undefined</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// let r = MayBe.of(&#x27;Hello World&#x27;).map(x =&gt; x.toUpperCase())</span></span><br><span class="line"><span class="keyword">let</span> r = MayBe.of(<span class="string">&#x27;Hello World&#x27;</span>)</span><br><span class="line">  .map(<span class="function"><span class="params">x</span> =&gt;</span> x.toUpperCase())</span><br><span class="line">  .map(<span class="function"><span class="params">x</span> =&gt;</span> <span class="literal">null</span>)</span><br><span class="line">  .map(<span class="function"><span class="params">x</span> =&gt;</span> x.split(<span class="string">&#x27; &#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(r)</span><br></pre></td></tr></table></figure>

<p>在多次调用后，最后返回 null 值。这里什么时候出现null，我们是不太容易知道的，就需要了解一下 Either 函子</p>
<h3 id="Either-函子"><a href="#Either-函子" class="headerlink" title="Either 函子"></a>Either 函子</h3><ul>
<li>Either 两者中的任何一个，类似于 <code>if...else...</code> 的处理</li>
<li>异常会让函数变的不纯，Either 函子可以用来做异常处理</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Either 函子</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Left</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="function"><span class="title">of</span>(<span class="params">value</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Left(value)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">value</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>._value = value</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">map</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Right</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="function"><span class="title">of</span>(<span class="params">value</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Right(value)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">value</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>._value = value</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">map</span>(<span class="params">fn</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> Right.of(fn(<span class="built_in">this</span>._value))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parseJSON</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> Right.of(<span class="built_in">JSON</span>.parse(str))</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="keyword">return</span> Left.of(&#123; <span class="attr">error</span>: e.message &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> r = parseJSON(<span class="string">&#x27;&#123; &quot;name&quot;: &quot;zs&quot; &#125;&#x27;</span>).map(<span class="function"><span class="params">x</span> =&gt;</span> x.name.toUpperCase())</span><br><span class="line"><span class="built_in">console</span>.log(r)</span><br></pre></td></tr></table></figure>

<h3 id="IO-函子"><a href="#IO-函子" class="headerlink" title="IO 函子"></a>IO 函子</h3><ul>
<li>IO 函子中的 <code>_value</code> 是一个函数，因为函数式一等公民，这里是把函数作为值来处理</li>
<li>IO 函子可以把不纯的动作存储到 <code>_value</code> 中，延迟执行这个不纯的操作（惰性执行），包装为纯的操作</li>
<li>把不纯的操作交给调用者来处理（类似工作中的甩锅）</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// IO 函子</span></span><br><span class="line"><span class="keyword">const</span> fp = <span class="built_in">require</span>(<span class="string">&#x27;lodash/fp&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IO</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="function"><span class="title">of</span>(<span class="params">value</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// IO 函子最终想要的还是一个结果，只不过它把取值过程包装到函数里</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> IO(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> value</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">fn</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>._value = fn</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">map</span>(<span class="params">fn</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 把当前函子的 value 和传入的 fn 组合成一个新的函数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> IO(fp.flowRight(fn, <span class="built_in">this</span>._value))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> r = IO.of(process).map(<span class="function"><span class="params">p</span> =&gt;</span> p.execPath)</span><br><span class="line"><span class="built_in">console</span>.log(r._value())</span><br></pre></td></tr></table></figure>

<h3 id="Task-函子"><a href="#Task-函子" class="headerlink" title="Task 函子"></a>Task 函子</h3><p>异步任务使用 <a href="https://folktale.origamitower.com/">folktale</a> 标准的函数式变成库来对 Task 演示</p>
<ul>
<li>folktale 和 lodash、ramda 不同的是，他没有提供很多功能函数</li>
<li>只提供了一些函数式的操作，例如：compose、curry 等，一些函子 Task、Eitther、MayBe 等</li>
</ul>
<p><strong>安装</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install folktale</span><br></pre></td></tr></table></figure>

<p>folktale 模块的 <code>compose</code> 和 <code>curry</code> 使用方式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; compose, curry &#125; = <span class="built_in">require</span>(<span class="string">&#x27;folktale/core/lambda&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; first, toUpper &#125; = <span class="built_in">require</span>(<span class="string">&#x27;lodash/fp&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> f = curry(<span class="number">2</span>, <span class="function">(<span class="params">x, y</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> x + y</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(f(<span class="number">1</span>, <span class="number">2</span>))</span><br><span class="line"><span class="built_in">console</span>.log(f(<span class="number">1</span>)(<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> fun = compose(toUpper, first)</span><br><span class="line"><span class="built_in">console</span>.log(fun([<span class="string">&#x27;one&#x27;</span>, <span class="string">&#x27;two&#x27;</span>]))</span><br></pre></td></tr></table></figure>

<p>Task 异步执行</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; task &#125; = <span class="built_in">require</span>(<span class="string">&#x27;folktale/concurrency/task&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; split, find &#125; = <span class="built_in">require</span>(<span class="string">&#x27;lodash/fp&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readFile</span>(<span class="params">filename</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> task(<span class="function"><span class="params">resolver</span> =&gt;</span> &#123;</span><br><span class="line">    fs.readFile(filename, <span class="string">&#x27;utf-8&#x27;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) resolver.reject(err)</span><br><span class="line">      resolver.resolve(data)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">readFile(<span class="string">&#x27;package.json&#x27;</span>)</span><br><span class="line">  .map(split(<span class="string">&#x27;\n&#x27;</span>))</span><br><span class="line">  .map(find(<span class="function"><span class="params">x</span> =&gt;</span> x.includes(<span class="string">&#x27;version&#x27;</span>)))</span><br><span class="line">  .run()</span><br><span class="line">  .listen(&#123;</span><br><span class="line">    onRejected: <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(err)</span><br><span class="line">    &#125;,</span><br><span class="line">    onResolved: <span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(value) <span class="comment">// &quot;version&quot;: &quot;1.0.0&quot;,</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> version = <span class="built_in">require</span>(<span class="string">&#x27;../package.json&#x27;</span>).version</span><br><span class="line"><span class="built_in">console</span>.log(version) <span class="comment">// 1.0.0</span></span><br></pre></td></tr></table></figure>

<h3 id="Pointed-函子"><a href="#Pointed-函子" class="headerlink" title="Pointed 函子"></a>Pointed 函子</h3><ul>
<li>Pointed 函子是实现了 of 静态方法的函子</li>
<li>of 方法是为了避免使用 new 来创建对象（避免看起来很面向对象），更深层的含义是 of 方法用来把值放到上下文 Context（把值放到容器中，使用 map来处理值）</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Container</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="function"><span class="title">of</span>(<span class="params">value</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Container(value)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">Container.of(<span class="number">2</span>).map(<span class="function"><span class="params">x</span> =&gt;</span> x + <span class="number">5</span>)</span><br></pre></td></tr></table></figure>

<h3 id="Monad-函子"><a href="#Monad-函子" class="headerlink" title="Monad 函子"></a>Monad 函子</h3><blockquote>
<p><a href="http://www.ruanyifeng.com/blog/2015/07/monad.html">图解 Monad</a></p>
</blockquote>
<p>在使用 IO 函数的时候，如果想要同步读取文件，利用 IO 函子会写出如下带嵌套的代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// IO 函子的问题</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> fp = <span class="built_in">require</span>(<span class="string">&#x27;lodash/fp&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IO</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="function"><span class="title">of</span>(<span class="params">value</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> IO(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> value</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">fn</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>._value = fn</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">map</span>(<span class="params">fn</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> IO(fp.flowRight(fn, <span class="built_in">this</span>._value))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> readFile = <span class="function"><span class="keyword">function</span> (<span class="params">filename</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 因为读取文件会产生副作用让函数变的不纯，这里直接返回 IO 函子</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> IO(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> fs.readFileSync(filename, <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> print = <span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> IO(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> cat = fp.flowRight(print, readFile)</span><br><span class="line"><span class="comment">// IO(IO(x))</span></span><br><span class="line"><span class="keyword">let</span> r = cat(<span class="string">&#x27;package.json&#x27;</span>)._value()._value()</span><br><span class="line"><span class="built_in">console</span>.log(r)</span><br></pre></td></tr></table></figure>

<p>这里如果想拿到文件里的信息，就需要好几层 <code>._value()</code> 的调用，这时就可以了解一下 Monad 函子</p>
<ul>
<li>Monad 函子是可以变扁的 Pointed 函子，<code>IO(IO(X))</code></li>
<li>一个函子如果具有 join 和 of 两个方法并遵守一些定律就是一个 Monad</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// IO Monad</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> fp = <span class="built_in">require</span>(<span class="string">&#x27;lodash/fp&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IO</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="function"><span class="title">of</span>(<span class="params">value</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> IO(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> value</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">fn</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>._value = fn</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">map</span>(<span class="params">fn</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> IO(fp.flowRight(fn, <span class="built_in">this</span>._value))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">join</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>._value()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">flatMap</span>(<span class="params">fn</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.map(fn).join()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> readFile = <span class="function"><span class="keyword">function</span> (<span class="params">filename</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> IO(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> fs.readFileSync(filename, <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> print = <span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> IO(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> r = readFile(<span class="string">&#x27;package.json&#x27;</span>).map(fp.toUpper).flatMap(print).join()</span><br><span class="line"><span class="built_in">console</span>.log(r)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>函数式编程</tag>
        <tag>柯里化</tag>
        <tag>组合函数</tag>
        <tag>函子</tag>
      </tags>
  </entry>
  <entry>
    <title>优化7.前沿优化解决方案</title>
    <url>/posts/9e7b88f/</url>
    <content><![CDATA[<h2 id="拯救移动端图标-SVG"><a href="#拯救移动端图标-SVG" class="headerlink" title="拯救移动端图标 SVG"></a>拯救移动端图标 SVG</h2><h3 id="Iconfont"><a href="#Iconfont" class="headerlink" title="Iconfont"></a>Iconfont</h3><blockquote>
<p><a href="https://www.iconfont.cn/">iconfont</a></p>
<p><a href="https://icofont.com/">icofont</a></p>
<p><a href="http://www.fontawesome.com.cn/faicons/">fontawesome</a></p>
</blockquote>
<p>Iconfont 相较于 PNG 的优势：</p>
<ul>
<li><p>多个图标使用一套字体，减少获取时的请求数量和体积</p>
<p>因为网站会有很多图标，如果使用 PNG，每个图标都需要单独设计一个文件，这样浏览器就需要对每一个文件进行加载。虽然可以使用雪碧图来规避请求数量，但是这就需要关心 icon 的定位了</p>
<p>iconfont 就是一套字体，就只需要获取一套字体即可</p>
</li>
<li><p>矢量图形，可伸缩，可以直接通过 CSS 修改样式（颜色、大小等）</p>
<p>PNG 需要关注图片的宽度、比例，以避免失真、变形</p>
</li>
</ul>
<p>Iconfont  缺陷：</p>
<ul>
<li>Iconfont 很难做到多色</li>
<li>浏览器和搜索引擎很难理解这个字体图标代表什么意思</li>
</ul>
<p>这时人们就在想有没有什么方式类似 HTML，把这个图片描述出来，这样一方面可以显示图标，另一方面还能让搜索引擎理解这个代表什么意思。这时人们就把一项老技术 svg 翻出来了</p>
<h3 id="svg"><a href="#svg" class="headerlink" title="svg"></a>svg</h3><blockquote>
<p><a href="https://juejin.cn/post/6844903517564436493">手摸手，带你优雅的使用 icon</a> 这里使用 <code>svg-sprite-loader</code> 对 svg 进行处理</p>
</blockquote>
<p>采用 <code>@svgr/webpack</code> 支持 svg 作为组件引用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -D @svgr/webpack</span><br></pre></td></tr></table></figure>

<p>之后在 <code>webpack.config.js</code> 里配置即可</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = smp.wrap(&#123;</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.svg$/</span>,</span><br><span class="line">        use: [<span class="string">&#x27;@svgr/webpack&#x27;</span>],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>在页面里直接使用</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">About</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;main className=&#123;<span class="built_in">this</span>.props.classes.root&#125;&gt;</span><br><span class="line">        &lt;AddressCardSvg width=&#123;<span class="number">100</span>&#125; color=&#123;<span class="string">&#x27;#fa1010&#x27;</span>&#125;/&gt;</span><br><span class="line">      &lt;/main&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>svg优势：</strong></p>
<ul>
<li>保持了图片能力，支持色彩和复杂图标的绘制</li>
<li>独立的矢量图形，用哪个加载哪个</li>
<li>XML 语法，搜索引擎 SEO 和无障碍读屏软件读取</li>
</ul>
<h2 id="使用-Flexbox-布局"><a href="#使用-Flexbox-布局" class="headerlink" title="使用 Flexbox 布局"></a>使用 Flexbox 布局</h2><p>我们把一个元素的 <code>display: flex</code>，这个元素就会变成 flex 容器</p>
<p>flex 容器有如下属性：</p>
<ol>
<li>flex-direction：容器的主轴的方向</li>
<li>flex-wrap：是否换行</li>
<li>flex-flow：上面两个属性的简写</li>
<li>justify-content：主轴上的对齐方式</li>
<li>align-items：交叉轴上的对齐方式</li>
<li>align-content：多条轴的 flex 在交叉轴的对齐</li>
</ol>
<p>子元素有如下属性：</p>
<ol>
<li>order：排列时的顺序</li>
<li>flex-grow：宽度或长度的增长系数（容器空间多大时）</li>
<li>flex-shrink：缩小系数（容器空间不足时）</li>
<li>flex-basis：主轴方向上的初始大小</li>
<li>flex：2、3、4 的简写方式</li>
<li>align-self：交叉轴上的排列方向</li>
</ol>
<h3 id="float-与-flexbox-进行对比"><a href="#float-与-flexbox-进行对比" class="headerlink" title="float 与 flexbox 进行对比"></a>float 与 flexbox 进行对比</h3><p><strong>使用 float 进行布局</strong></p>
<ul>
<li><code>display: inline-block</code>：进行换行会 <code>float: left</code> 要快，但也没有 <code>dispaly: flex</code> 快</li>
</ul>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/jslearn-img/202203141005322.png"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.main</span> &#123;</span></span><br><span class="line">      width: 100%;</span><br><span class="line">      height: 1000px;</span><br><span class="line">      background-color: gray;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.box</span> &#123;</span></span><br><span class="line">      width: 100px;</span><br><span class="line">      height: 100px;</span><br><span class="line">      background-color: red;</span><br><span class="line">      margin: 5px;</span><br><span class="line">      float: left;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;main&quot;</span> <span class="attr">class</span>=<span class="string">&quot;main&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="built_in">window</span>.addEventListener(<span class="string">&#x27;load&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> mainNode = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;main&#x27;</span>)</span></span><br><span class="line"><span class="javascript">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> divNode = <span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>)</span></span><br><span class="line"><span class="javascript">      divNode.setAttribute(<span class="string">&#x27;class&#x27;</span>, <span class="string">&#x27;box&#x27;</span>)</span></span><br><span class="line">      mainNode.appendChild(divNode)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>使用 Flexbox 进行布局</strong></p>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/jslearn-img/202203141009448.png"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.main</span> &#123;</span></span><br><span class="line">      width: 100%;</span><br><span class="line">      height: 1000px;</span><br><span class="line">      background-color: gray;</span><br><span class="line">      display: flex;</span><br><span class="line">      flex-flow: row wrap;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.box</span> &#123;</span></span><br><span class="line">      width: 100px;</span><br><span class="line">      height: 100px;</span><br><span class="line">      background-color: red;</span><br><span class="line">      margin: 5px;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;main&quot;</span> <span class="attr">class</span>=<span class="string">&quot;main&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="built_in">window</span>.addEventListener(<span class="string">&#x27;load&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> mainNode = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;main&#x27;</span>)</span></span><br><span class="line"><span class="javascript">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> divNode = <span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>)</span></span><br><span class="line"><span class="javascript">      divNode.setAttribute(<span class="string">&#x27;class&#x27;</span>, <span class="string">&#x27;box&#x27;</span>)</span></span><br><span class="line">      mainNode.appendChild(divNode)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="Flexbox-优势"><a href="#Flexbox-优势" class="headerlink" title="Flexbox 优势"></a>Flexbox 优势</h3><ul>
<li>更好性能的实现方案：使用 Flexbox 布局在 Layout 和 Paint 耗时小于其他布局方式</li>
<li>容器可以决定子元素的几何属性：大小、顺序、对齐方式、间隔等</li>
<li>双向布局</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.flex-container</span> &#123;</span></span><br><span class="line">      display: flex;</span><br><span class="line">      flex-flow: row wrap;</span><br><span class="line">      justify-content: space-around;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.flex-card</span> &#123;</span></span><br><span class="line">      width: 200px;</span><br><span class="line">      height: 200px;</span><br><span class="line">      display: flex;</span><br><span class="line">      justify-content: center;</span><br><span class="line">      align-items: center;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.flex-card-number</span> &#123;</span></span><br><span class="line">      font-size: 120px;</span><br><span class="line">      color: white;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;flex-container&quot;</span> <span class="attr">class</span>=<span class="string">&quot;flex-container&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="keyword">function</span> <span class="title">generateRandomColor</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> r = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">256</span>)</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> g = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">256</span>)</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> b = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">256</span>)</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> <span class="string">&#x27;rgb(&#x27;</span> + r + <span class="string">&#x27;,&#x27;</span> + g + <span class="string">&#x27;,&#x27;</span> + b + <span class="string">&#x27;)&#x27;</span></span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="javascript">  <span class="built_in">window</span>.addEventListener(<span class="string">&#x27;load&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> containerNode = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;flex-container&#x27;</span>)</span></span><br><span class="line"><span class="javascript">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> divNode = <span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>)</span></span><br><span class="line"><span class="javascript">      divNode.setAttribute(<span class="string">&#x27;class&#x27;</span>, <span class="string">&#x27;flex-card&#x27;</span>)</span></span><br><span class="line">      divNode.style.backgroundColor = generateRandomColor()</span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> spanNode = <span class="built_in">document</span>.createElement(<span class="string">&#x27;span&#x27;</span>)</span></span><br><span class="line"><span class="javascript">      spanNode.setAttribute(<span class="string">&#x27;class&#x27;</span>, <span class="string">&#x27;flex-card-number&#x27;</span>)</span></span><br><span class="line"><span class="javascript">      spanNode.appendChild(<span class="built_in">document</span>.createTextNode((i + <span class="number">1</span>).toString()))</span></span><br><span class="line">      divNode.appendChild(spanNode)</span><br><span class="line">      containerNode.appendChild(divNode)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="优化资源加载顺序"><a href="#优化资源加载顺序" class="headerlink" title="优化资源加载顺序"></a>优化资源加载顺序</h2><blockquote>
<p><a href="https://zhuanlan.zhihu.com/p/30558018">从Chrome源码看浏览器如何加载资源</a></p>
</blockquote>
<p>使用 Preload 和 Prefetch 改变浏览器默认的资源加载优先级</p>
<ul>
<li><p>Preload：提前加载较晚出现，但对当前页面非常重要的资源</p>
<p>字体比较特殊，需要设置 <code>crossorigin=&quot;anonymous&quot;</code></p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;preload&quot;</span> <span class="attr">href</span>=<span class="string">&quot;test.jpg&quot;</span> <span class="attr">as</span>=<span class="string">&quot;font&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;link</span><br><span class="line">  rel=&quot;preload&quot;</span><br><span class="line">  href=&quot;https://fonts.gstatic.com/s/longcang/v15/LYjAdGP8kkgoTec8zkRgqBgxXsWsMfnCm1_q1j3gcsptb8OMg_Z2HVZhDbPBCIyx.119.woff2&quot;</span><br><span class="line">  as=&quot;font&quot;</span><br><span class="line">  type=&quot;font/woff2&quot;</span><br><span class="line">  crossorigin=&quot;anonymous&quot;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>Prefetch：提前加载后续页面或后续路由所需的资源，优先级低</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;prefetch&quot;</span> <span class="attr">as</span>=<span class="string">&quot;style&quot;</span> <span class="attr">href</span>=<span class="string">&quot;product-font.css&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p><img data-src="https://gitee.com/lilyn/pic/raw/master/jslearn-img/202203141704726.png"></p>
<p>对于那些在当前页面使用的资源可以利用 Preload，而对一些可能在将来某些页面中使用的资源可以利用 Prefetch。从加载优先级上看，Preload 会提升请求优先级，而 Prefetch 会把资源的优先级防止最低，当浏览器空闲时采取加载</p>
<blockquote>
<p><a href="https://webpack.js.org/guides/code-splitting/#prefetchingpreloading-modules">prefetchingpreloading-modules</a></p>
</blockquote>
<p>webpack 提前预加载处理，只需要加上一行注释</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>(<span class="comment">/* webpackPrefetch: true */</span> <span class="string">&#x27;./path/to/LoginModal.js&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span>(<span class="comment">/* webpackPreload: true */</span> <span class="string">&#x27;ChartingLibrary&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="预渲染页"><a href="#预渲染页" class="headerlink" title="预渲染页"></a>预渲染页</h2><blockquote>
<p><a href="https://github.com/stereobooster/react-snap">react-snap</a></p>
<p><a href="https://awesome-vue.js.org/components-and-libraries/prerendering.html">Awesome Prerendering</a></p>
<p><a href="https://juejin.cn/post/6844903668488093704">Vue项目预渲染机制引入实践</a></p>
<p><a href="https://blog.csdn.net/weixin_44524835/article/details/110221911">Vue实现预渲染</a></p>
</blockquote>
<p>SEO 为什么对 SPA 不友好</p>
<ol>
<li>爬虫在爬去页面时，不会去执行 JS，所以隐藏在 JS 中的跳转不会获取到</li>
<li>加载页面时，浏览器的渲染包括：Html 解析、Dom 树构建、Cssom 树构建、JavaScript 解析、布局、绘制，当解析到 JavaScript 时才会去触发 Vue 渲染，然后元素挂载上去，所以即使 vue 渲染机制很快我们仍然需要看到一段时间白屏</li>
</ol>
<p><strong>服务端渲染（Server Side Rendering）</strong> 可以用于 SEO 优化，但其牺牲了 TTFB 来补救首屏渲染，即使有 Next.js等技术，SSR 实现起来还是比较复杂。这里还有一种解决方案，就是<strong>预渲染（Prerending）</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -D react-snap</span><br></pre></td></tr></table></figure>

<p>在 <code>package.json</code> 中增加一条 scipts，这里可以通过 npm 一个钩子函数，在 build 完成后，自动触发 postbuild</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;build&quot;</span>: <span class="string">&quot;cross-env NODE_ENV=production webpack&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;postbuild&quot;</span>: <span class="string">&quot;react-snap&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果使用 React 做 SSR，它会对页面渲染进行修改，通常使用 <code>ReactDOM.render</code>，对主节点上相关元素进行渲染，如果主节点已经有元素了，就不需要触发 <code>ReactDOM.render</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> root = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;main&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (root.hasChildNodes()) &#123;</span><br><span class="line">  ReactDOM.hydrate(<span class="xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span>, root)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span>, root)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Vue 中使用只配置 <code>package.json</code> 即可</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;postbuild&quot;</span>: <span class="string">&quot;react-snap&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;reactSnap&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;source&quot;</span>: <span class="string">&quot;dist&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;inlineCss&quot;</span>: <span class="literal">true</span>, <span class="comment">// 内联样式，避免明显的样式闪动</span></span><br><span class="line">    <span class="attr">&quot;minifyHtml&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;collapseWhitespace&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">&quot;removeComments&quot;</span>: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>预渲染的作用：</p>
<ul>
<li>大型单页应用的性能瓶颈：<strong>JS 下载 + 解析 + 执行</strong></li>
<li>SSR 主要问题：牺牲 <strong>TTFB</strong> 来补救 <strong>First Paint</strong>，<strong>实现复杂</strong></li>
<li>Pre-rendering 打包时提前渲染页面，没有服务端参与</li>
</ul>
<h2 id="Windowing（窗口化）提高列表性能"><a href="#Windowing（窗口化）提高列表性能" class="headerlink" title="Windowing（窗口化）提高列表性能"></a>Windowing（窗口化）提高列表性能</h2><p><img data-src="https://gitee.com/lilyn/pic/raw/master/jslearn-img/202203151034771.png"></p>
<blockquote>
<p><a href="https://bvaughn.github.io/forward-js-2017/#/13/5">What can windowing be used for</a></p>
</blockquote>
<ul>
<li><p>Tables, lists, spreadsheets (<a href="https://github.com/bvaughn/react-virtualized">react-virtualized</a>)</p>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/jslearn-img/202203151041604.gif"></p>
</li>
<li><p>Drop-down menus (<a href="https://github.com/bvaughn/react-virtualized-select">react-virtualized-select</a>)</p>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/jslearn-img/202203151040676.gif"></p>
</li>
</ul>
<p>安装：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i -D react-window</span><br></pre></td></tr></table></figure>

<p>使用：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; FixedSizeGrid, FixedSizeList &#125; <span class="keyword">from</span> <span class="string">&#x27;react-window&#x27;</span></span><br><span class="line"><span class="keyword">import</span> model <span class="keyword">from</span> <span class="string">&#x27;./model&#x27;</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> items = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">  items.push(model.map(<span class="function"><span class="params">m</span> =&gt;</span> <span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#123;m.image&#125;</span> <span class="attr">alt</span>=<span class="string">&#123;m.name&#125;</span> <span class="attr">width</span>=<span class="string">&#123;100&#125;</span> <span class="attr">height</span>=<span class="string">&#123;90&#125;</span> /&gt;</span></span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Row = <span class="function">(<span class="params">&#123; index, style &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> styleExt = &#123;</span><br><span class="line">    ...style,</span><br><span class="line">    borderBottom: <span class="string">&#x27;1px solid #fff&#x27;</span>,</span><br><span class="line">    display: <span class="string">&#x27;flex&#x27;</span>,</span><br><span class="line">    alignItems: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">    justifyContent: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;styleExt&#125;</span>&gt;</span>&#123;items[index]&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListComponent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  listRef = React.createRef()</span><br><span class="line"></span><br><span class="line">  scrollToRow = <span class="function"><span class="params">rowNum</span> =&gt;</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (rowNum &lt;= <span class="number">0</span> || rowNum &gt; items.length) <span class="keyword">return</span></span><br><span class="line">    <span class="built_in">this</span>.listRef.current.scrollToItem(rowNum)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;button onClick=&#123;<span class="built_in">this</span>.scrollToRow(<span class="number">50</span>)&#125;&gt;Scroll&lt;/button&gt;</span><br><span class="line">		<span class="comment">/* 一维列表List */</span></span><br><span class="line">        &lt;FixedSizeList</span><br><span class="line">          ref=&#123;<span class="built_in">this</span>.listRef&#125;</span><br><span class="line">          height=&#123;<span class="number">360</span>&#125;</span><br><span class="line">          width=&#123;<span class="number">400</span>&#125;</span><br><span class="line">          itemSize=&#123;<span class="number">120</span>&#125;</span><br><span class="line">          itemCount=&#123;items.length&#125;</span><br><span class="line">          className=&#123;<span class="built_in">this</span>.props.className&#125;</span><br><span class="line">        &gt;</span><br><span class="line">          &#123;Row&#125;</span><br><span class="line">        &lt;/FixedSizeList&gt;</span><br><span class="line">		<span class="comment">/* 二维列表Grid */</span></span><br><span class="line">        &#123;<span class="comment">/* &lt;FixedSizeGrid</span></span><br><span class="line"><span class="comment">          columnCount=&#123;1000&#125;</span></span><br><span class="line"><span class="comment">          columnWidth=&#123;100&#125;</span></span><br><span class="line"><span class="comment">          height=&#123;150&#125;</span></span><br><span class="line"><span class="comment">          rowCount=&#123;1000&#125;</span></span><br><span class="line"><span class="comment">          rowHeight=&#123;35&#125;</span></span><br><span class="line"><span class="comment">          width=&#123;300&#125;</span></span><br><span class="line"><span class="comment">        &gt;</span></span><br><span class="line"><span class="comment">          &#123;Row&#125;</span></span><br><span class="line"><span class="comment">        &lt;/FixedSizeGrid&gt; */</span>&#125;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> ListComponent</span><br></pre></td></tr></table></figure>

<p>windowing 的作用：</p>
<ul>
<li>加载大列表、大表单的每一行严重影响性能</li>
<li>Lazy loading 仍然会让 DOM 变得过大</li>
<li>windowing 只渲染可见的行，渲染和滚动的性能都会提升</li>
</ul>
<h2 id="使用骨架组件减少布局移动（Layout-Shift）"><a href="#使用骨架组件减少布局移动（Layout-Shift）" class="headerlink" title="使用骨架组件减少布局移动（Layout Shift）"></a>使用骨架组件减少布局移动（Layout Shift）</h2><p>当相关组件数据还没有完全加载时，如果样式没有控制好，会导致组件没有完全撑开，当样式加载好之后，组件的布局会发生变化，对周围的组件也会造成影响，这个性能消耗比较高，我们应该尽量避免</p>
<p>骨架组件也叫 Skeleton 或 Placeholder（占位符），用来占位和提升用户感知，可以在 Google DevTools 里键入 <code>ctrl + shift + p</code>，输入 <code>Layout Shift Regions</code></p>
<ul>
<li>安装</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i -D react-placeholder</span><br></pre></td></tr></table></figure>

<ul>
<li>使用</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> ReactPlaceholder <span class="keyword">from</span> <span class="string">&#x27;react-placeholder&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Contact</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; ready &#125; = <span class="built_in">this</span>.state</span><br><span class="line">    <span class="keyword">const</span> imageStyle = !ready ? &#123; <span class="attr">display</span>: <span class="string">&#x27;none&#x27;</span> &#125; : &#123;&#125;</span><br><span class="line">    <span class="keyword">let</span> cardMedia = (</span><br><span class="line">      &lt;CardMedia</span><br><span class="line">        component=&#123;<span class="string">&#x27;img&#x27;</span>&#125;</span><br><span class="line">        style=&#123;imageStyle&#125;</span><br><span class="line">        className=&#123;<span class="built_in">this</span>.props.classes.media&#125;</span><br><span class="line">        image=&#123;<span class="built_in">this</span>.props.image&#125;</span><br><span class="line">        onLoad=&#123;<span class="built_in">this</span>.becomeReady&#125;</span><br><span class="line">      /&gt;</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div className=&#123;<span class="built_in">this</span>.props.classes.root&#125;&gt;</span><br><span class="line">        &lt;ReactPlaceholder ready=&#123;<span class="built_in">this</span>.state.ready&#125; customPlaceholder=&#123;<span class="xml"><span class="tag">&lt;<span class="name">ContactPlaceholder</span> /&gt;</span></span>&#125;&gt;</span><br><span class="line">          <span class="comment">/* ... */</span></span><br><span class="line">        &lt;/ReactPlaceholder&gt;</span><br><span class="line">        &#123;!ready &amp;&amp; cardMedia&#125;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>性能优化</category>
      </categories>
      <tags>
        <tag>性能优化</tag>
        <tag>SVG</tag>
        <tag>Flexbox 布局</tag>
        <tag>预渲染与长列表优化</tag>
      </tags>
  </entry>
  <entry>
    <title>优化6.传输加载优化</title>
    <url>/posts/66264067/</url>
    <content><![CDATA[<h2 id="启用压缩-Gzip"><a href="#启用压缩-Gzip" class="headerlink" title="启用压缩 Gzip"></a>启用压缩 Gzip</h2><p>Gzip 是用来做网络资源压缩，帮助我们减少资源文件在网络传输大小的技术，可以高达 90%</p>
<blockquote>
<p>如下是 MacOs 安装方法，Windows 安装方法及使用可以参考我这篇文章：<a href="https://blog.csdn.net/qq_38689395/article/details/121020211?spm=1001.2014.3001.5501">项目技术架构-Nginx 服务器搭建</a></p>
</blockquote>
<ul>
<li>安装 homebrew：<a href="https://brew.sh/index_zh-cn">https://brew.sh/index_zh-cn</a></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/bin/bash -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>安装 nginx</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install nginx</span><br></pre></td></tr></table></figure>

<ul>
<li>运行 ngix</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo brew services start nginx</span><br></pre></td></tr></table></figure>

<ul>
<li>查看配置文件</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /usr/<span class="built_in">local</span>/etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure>

<p>修改为如下配置：</p>
<ul>
<li>访问：<code>localhost:8090</code> 即可（注意每行结尾都需要加  <code>;</code>，路径需要使用 <code>/</code>）</li>
</ul>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line">server</span><br><span class="line">&#123; </span><br><span class="line">  <span class="attribute">charset</span> utf-<span class="number">8</span>;                                        <span class="comment"># 字符编码</span></span><br><span class="line">  <span class="attribute">listen</span> <span class="number">8090</span>;                                          <span class="comment"># 端口</span></span><br><span class="line">  <span class="attribute">server_name</span> localhost;</span><br><span class="line">  <span class="attribute">root</span> E:/dist;                                         <span class="comment"># 资源文件路径</span></span><br><span class="line">  <span class="attribute">location</span> / &#123; 											<span class="comment"># 对所有路由生效的配置</span></span><br><span class="line">    <span class="attribute">add_header</span> Access-Control-Allow-Origin *;			<span class="comment"># 防止跨域（生产环境需改为实际域名）</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置 gzip：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">  // 开启gzip</span><br><span class="line">  <span class="attribute">gzip</span> <span class="literal">on</span>;</span><br><span class="line">  // 文件至少1k才进行压缩</span><br><span class="line">  <span class="attribute">gzip_min_length</span> <span class="number">1k</span>;</span><br><span class="line">  // 压缩级别，有1-9，压缩比例越高，对cpu的消耗也越高，权衡下取6，比较合适的值</span><br><span class="line">  <span class="attribute">gzip_comp_level</span> <span class="number">6</span>;</span><br><span class="line">  // 压缩文件类型，通常会对文本类文件进行压缩，图片类一般不进行压缩</span><br><span class="line">  <span class="attribute">gzip_types</span> text/plain application/javascript application/x-javascript text/css application/xml text/xml text/javascript application/json;</span><br><span class="line">  // 对gzip已经压缩的静态资源直接利用</span><br><span class="line">  <span class="attribute">gzip_static</span> <span class="literal">on</span>;</span><br><span class="line">  // 会在响应头部添加vary的属性，告诉客户端我们是否启用了gzip压缩</span><br><span class="line">  <span class="attribute">gzip_vary</span> <span class="literal">on</span>;</span><br><span class="line">  // buffer优化压缩过程</span><br><span class="line">  <span class="attribute">gzip_buffers</span> <span class="number">4</span> <span class="number">16k</span>;</span><br><span class="line">  // 压缩使用的http版本</span><br><span class="line">  <span class="attribute">gzip_http_version</span> <span class="number">1</span>.<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="启用-Keep-Alive"><a href="#启用-Keep-Alive" class="headerlink" title="启用 Keep Alive"></a>启用 Keep Alive</h2><p>这个技术可以帮助我们对 TCP 链接进行复用，也就是说当我们和一台服务器进行 TCP 建立连接之后，接下来的请求就都不需要重复建立链接。Nginx 默认开启 <code>keep-alive</code></p>
<ul>
<li>它是 HTTP 标准中的一部分，多数情况是有益无害的，所以在 HTTP1.1 以后，Keep Alive 默认开启</li>
<li>Initial connection 为 TCP 链接的建立，后续资源加载就没有 Initial connection</li>
</ul>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/jslearn-img/202203111026005.png"></p>
<p>可以在 Request Headers 中看到 <code>keep-alive</code> 参数</p>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/jslearn-img/202203111030225.png"></p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">  keepalive_timeout  65; // 超时时间，65s内没使用TCP链接就会断掉</span><br><span class="line">  keepalive_requests 100; // 客户端和服务端进行TCP链接后，会开始计数，第101个请求就需要重新建立 TCO链接</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="HTTP-资源缓存"><a href="#HTTP-资源缓存" class="headerlink" title="HTTP 资源缓存"></a>HTTP 资源缓存</h2><h3 id="缓存资源"><a href="#缓存资源" class="headerlink" title="缓存资源"></a>缓存资源</h3><ul>
<li>提高重复访问时资加载的速度</li>
</ul>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/jslearn-img/202203111045369.png"></p>
<blockquote>
<p><a href="https://www.cnblogs.com/kevingrace/p/10459429.html">Nginx下关于缓存控制字段cache-control的配置说明 - 运维小结</a></p>
</blockquote>
<p>HTTP 缓存方案：</p>
<ul>
<li>Cache-Control/Expires</li>
<li>Last-Modified + If-Modified-Since</li>
<li>Etag + If-None-Match</li>
</ul>
<p><strong>Cache-Control/Expires</strong></p>
<ul>
<li><p>HTTP 1.0 中通过 Pragma 控制页面缓存，通常设置为 <code>no-cache</code> 并加上 <code>expires: 0</code>（立即过期，下次再用时去服务端拿）</p>
</li>
<li><p>HTTP 1.1 中启用 Cache-Control 来控制页面是否缓存，常用参数：<code>no-cache</code>、<code>public</code>、<code>no-store</code>、<code>must-revalidate</code></p>
<p>配置后两个主要是为了兼容性问题</p>
</li>
<li><p>因为 JS 和 CSS 在 Webpack 里都使用 Hash 命名放，这也可以保证 HTML 更新到最新，拿到的 JS 和 CSS 也是最新的</p>
</li>
</ul>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line">server</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attribute">location</span> / &#123;</span><br><span class="line">    <span class="attribute">index</span> index.html index.htm;</span><br><span class="line">    <span class="attribute">try_files</span> $uri /index.html;</span><br><span class="line">    <span class="attribute">if</span> ($request_filename <span class="regexp">~* .*\.(?:htm|html)$)</span> &#123;</span><br><span class="line">      <span class="attribute">add_header</span> Cache-Control <span class="string">&quot;no-cache, must-revalidate&quot;</span>;</span><br><span class="line">	  <span class="attribute">add_header</span> <span class="string">&quot;Pragma&quot;</span> <span class="string">&quot;no-cache&quot;</span>;</span><br><span class="line">	  <span class="attribute">add_header</span> <span class="string">&quot;Expires&quot;</span> <span class="string">&quot;0&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="attribute">if</span> ($request_filename <span class="regexp">~* .*\.(?:js|css)$)</span> &#123;</span><br><span class="line">      <span class="attribute">expires</span> <span class="number">7d</span>;</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="attribute">if</span> ($request_filename <span class="regexp">~* .*\.(?:jpg|jpeg|gif|png|ico|cur|gz|svg|svgz|mp4|ogg|ogv|webm)$)</span> &#123;</span><br><span class="line">      <span class="attribute">expires</span> <span class="number">7d</span>;</span><br><span class="line">	&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>客户端第一次请求一个 URL，服务器返回状态是 200，同时有一个 <code>Last-Modified</code> 报头的属性标记</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Last-Modified:Tue, 24 Feb 2019 08:01:04 GMT</span><br></pre></td></tr></table></figure>

<p>客户端第二次请求此 URL，浏览器会向服务器传送 <code>If-Modified-Since</code> 报头，询问该时间是否被修改过。如果服务器资源没有变化，自动返回 304，内容为空，客户端直接从缓存中取内容即可；如果资源有变化，则向客户端发送最新资源</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">If-Modified-Since:Tue, 24 Feb 2019 08:01:04 GMT</span><br></pre></td></tr></table></figure>

<p>Etag 同理，第一次请求会服务器会返回 <code>Etag</code> 报头</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Etag:“5d8c72a5edda8d6a:3239“</span><br></pre></td></tr></table></figure>

<p>第二次请求会向服务器传送 <code>If-None-Match</code> 报头</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">If-None-Match:“5d8c72a5edda8d6a:3239“</span><br></pre></td></tr></table></figure>

<h3 id="缓存网站参考"><a href="#缓存网站参考" class="headerlink" title="缓存网站参考"></a>缓存网站参考</h3><blockquote>
<p>更多配置可以看：<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers">HTTP Headers</a></p>
</blockquote>
<p><a href="https://www.tmall.com/">天猫</a></p>
<ul>
<li><p><code>max-age</code>：设置缓存存储的周达周期，单位秒</p>
</li>
<li><p><code>s-maxage</code>：只用于共享缓存，比如：CDN 缓存（s -&gt; share）</p>
<p><code>max-age</code> 用于普通缓存，<code>s-maxage</code> 用于代理缓存</p>
</li>
<li><p>它会跟服务器进行重新确认（携带 <code>if-none-match</code> ）去确认</p>
</li>
</ul>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/jslearn-img/202203111541595.png"></p>
<p><a href="https://www.zhihu.com/signin">知乎</a></p>
<ul>
<li><code>public</code>：响应可以被任何对象（发送的客户端、代理服务器）缓存</li>
<li><code>private</code>：响应只能被单个用户缓存，不能作为共享缓存（代理服务器不能缓存）</li>
<li><code>no-store</code>：绝对禁止缓存</li>
<li><code>no-cache</code>：资源不进行缓存，但是设置了这个不代表浏览器不缓存，而是缓存前要向服务器确认资源是否被更改，因为有时为了保险起见还会加上 <code>private</code> 指令或将过期时间设为过去的时间</li>
</ul>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/jslearn-img/202203111559334.png"></p>
<p><a href="https://developers.google.com/">Google 开发者</a></p>
<ul>
<li><code>must-revalidate</code>：缓存必须在使用之前验证旧资源的状态，并且不可使用过期资源</li>
<li>由于通过了 service worker，它并没有真正和服务器进行确认，可以直接去使用</li>
</ul>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/jslearn-img/202203111611453.png"></p>
<h2 id="Service-Worker"><a href="#Service-Worker" class="headerlink" title="Service Worker"></a>Service Worker</h2><blockquote>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Service_Worker_API">Service Worker API</a></p>
</blockquote>
<ul>
<li><p>加速重复访问</p>
</li>
<li><p>离线支持</p>
<p>用户在没有网络的情况下（offline）也可以让用户访问我们的网页</p>
</li>
</ul>
<p>serviceWorker 也有自己的生命周期，首先要注册安装激活才能使用，打包后的目录里会生成 <code>asset-manifest.json</code> 里面定义了哪些资源要进行缓存、缓存文件的文件名、相关的版本信息会存在 <code>precache-manifest</code> 里，每个文件都有先关版本信息</p>
<ul>
<li>需要使用两个插件生成 serviceWorker，一个叫 WorkboxWebpackPlugin，另一个叫 ManifestPlugin（生成 <code>asset-manifest.json</code>）它会决定哪些资源进行缓存，通常会把所有静态资源 HTML、CSS、JS 都进行缓存，图片或视频资源一般不会缓存</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> SpeedMeasurePlugin = <span class="built_in">require</span>(<span class="string">&#x27;speed-measure-webpack-plugin&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> smp = <span class="keyword">new</span> SpeedMeasurePlugin()</span><br><span class="line"><span class="keyword">const</span> WorkboxWebpackPlugin = <span class="built_in">require</span>(<span class="string">&#x27;workbox-webpack-plugin&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> ManifestPlugin = <span class="built_in">require</span>(<span class="string">&#x27;webpack-manifest-plugin&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = smp.wrap(&#123;</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> WorkboxWebpackPlugin.GenerateSW(&#123;</span><br><span class="line">      clientsClaim: <span class="literal">true</span>,</span><br><span class="line">      exclude: [<span class="regexp">/\.map$/</span>, <span class="regexp">/asset-manifest\.json$/</span>],</span><br><span class="line">      importWorkboxFrom: <span class="string">&#x27;cdn&#x27;</span>,</span><br><span class="line">      navigateFallback: paths.publicUrlOrPath + <span class="string">&#x27;index.html&#x27;</span>,</span><br><span class="line">      navigateFallbackBlacklist: [</span><br><span class="line">        <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">&#x27;^/_&#x27;</span>),</span><br><span class="line">        <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">&#x27;/[^/?]+\\.[^/]+$&#x27;</span>),</span><br><span class="line">      ],</span><br><span class="line">    &#125;),</span><br><span class="line"></span><br><span class="line">    <span class="keyword">new</span> ManifestPlugin(&#123;</span><br><span class="line">      fileName: <span class="string">&#x27;asset-manifest.json&#x27;</span>,</span><br><span class="line">      publicPath: paths.publicUrlOrPath,</span><br><span class="line">      generate: <span class="function">(<span class="params">seed, files, entrypoints</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> manifestFiles = files.reduce(<span class="function">(<span class="params">manifest, file</span>) =&gt;</span> &#123;</span><br><span class="line">          manifest[file.name] = file.path</span><br><span class="line">          <span class="keyword">return</span> manifest</span><br><span class="line">        &#125;, seed)</span><br><span class="line">        <span class="comment">// 从入口文件开始把所有涉及到的文件全部加到asset-manifest.json里</span></span><br><span class="line">        <span class="comment">// app是入口文件，通常项目里的入口文件是main</span></span><br><span class="line">        <span class="keyword">const</span> entrypointFiles = entrypoints.app.filter(<span class="function"><span class="params">fileName</span> =&gt;</span> !fileName.endsWith(<span class="string">&#x27;.map&#x27;</span>))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">          files: manifestFiles,</span><br><span class="line">          entrypoints: entrypointFiles,</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>在入口文件里注册即可</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> serviceWorker <span class="keyword">from</span> <span class="string">&#x27;./serviceWorker&#x27;</span></span><br><span class="line"></span><br><span class="line">serviceWorker.register()</span><br></pre></td></tr></table></figure>

<p><strong>Service Worker 原理：</strong></p>
<ul>
<li>在客户端和服务端建立一个中间层，做了存储</li>
</ul>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/jslearn-img/202203111651788.png"></p>
<p><strong>Service Worker 注意：</strong></p>
<ul>
<li><p>延长了首屏时间，但页面总加载时间减少</p>
</li>
<li><p>兼容性</p>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/jslearn-img/202203111646165.png"></p>
</li>
<li><p>只能在 localhost 或者 https 下使用（为了保证安全性）</p>
</li>
</ul>
<h2 id="HTTP2-提升"><a href="#HTTP2-提升" class="headerlink" title="HTTP2 提升"></a>HTTP2 提升</h2><blockquote>
<p><a href="https://www.zhihu.com/question/306768582">HTTP 2.0 和 HTTP 1.1 相比有哪些优势呢？</a></p>
</blockquote>
<h3 id="HTTP2-优势"><a href="#HTTP2-优势" class="headerlink" title="HTTP2 优势"></a>HTTP2 优势</h3><ul>
<li><p>二进制传输</p>
<p>HTTP 1.1 基于文本传输，效率低且不安全</p>
<p>HTTP 2 基于二进制编码传输，安全且能进行很好的压缩，提高了传输效率</p>
</li>
<li><p>请求响应多路复用</p>
<p>HTTP 1.1 实现是基于请求-响应模型，同一个连接中 HTTP 完成一个事务才能处理下一个事务，如果响应迟迟不来，后续请求无法发送，造成了 <strong>对头阻塞</strong> 问题。如果并发多个请求就需要多个 TCP 连接，开启 keep-alive，虽然可以用多次，但是同一时刻只能有一个 HTTP 请求</p>
<p>HTTP 2 所有相同域名的请求都通过一个 TCP 连接并发完成，<strong>多个 Stream 复用一条 TCP 连接</strong></p>
</li>
<li><p>Server push</p>
<p>HTTP 1.1 不支持服务器主动推送资源给客户端，都是客户端向服务器发起请求后，才能获取到服务器响应的资源</p>
<p>HTTP 2 服务器可以主动推送资源文件，减少消息传递次数。客户端发起请求，必须使用奇数号 Stream，服务器主动推送，使用偶数号 Stream（会先发送 PUSH_PROMISE 帧，告诉客户端接下来在哪个 Stream 发送资源）</p>
</li>
<li><p>头部压缩（HTTP 协议报文是有 Header + Body 构成）</p>
<p>HTTP 1.1 可以使用头字段（Content-Encoding）指定 Body 压缩方式（gzip），但是 Header 没有针对它的优化手段</p>
<p>HTTP 2 使用 HPACK 算法进行压缩，对于常见的头通过 <strong>静态表和 Huffman 编码</strong> 方式，后续请求头，可以建立 <strong>动态表</strong></p>
</li>
</ul>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/jslearn-img/202203131740043.jpg"></p>
<h3 id="开启-HTTP2"><a href="#开启-HTTP2" class="headerlink" title="开启 HTTP2"></a>开启 HTTP2</h3><ul>
<li>HTTPS</li>
<li>适合较高的请求量</li>
</ul>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/jslearn-img/202203111655698.png"></p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line">server</span><br><span class="line">&#123; </span><br><span class="line">  <span class="attribute">listen</span> <span class="number">843</span> ssl;</span><br><span class="line">  <span class="attribute">server_name</span> localhost;</span><br><span class="line">  <span class="attribute">ssl</span> <span class="literal">on</span>;</span><br><span class="line">  <span class="attribute">ssl_certificate</span> /path/to/server.crt;</span><br><span class="line">  <span class="attribute">ssl_certificate_key</span> /path/to/server.key;</span><br><span class="line">  <span class="attribute">ssl_session_cache</span> shared:SSL:<span class="number">1m</span>;</span><br><span class="line">  <span class="attribute">ssl_session_timeout</span> <span class="number">5m</span>;</span><br><span class="line">  <span class="attribute">ssl_ciphers</span> HIGH:!aNULL:!MD5;</span><br><span class="line">  <span class="attribute">ssl_prefer_server_ciphers</span> <span class="literal">on</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>自签名证书</strong></p>
<ul>
<li>执行最得到 <code>server.crt</code> 和 <code>server.key</code>，在工程目录下新建 ssl 文件夹，将其拷贝进去</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">openssl genrsa -des3 -passout pass:x -out server.pass.key 2048</span><br><span class="line"></span><br><span class="line">openssl rsa -passin pass:x -<span class="keyword">in</span> server.pass.key -out server.key </span><br><span class="line"></span><br><span class="line">openssl req -new -key server.key -out server.csr </span><br><span class="line"></span><br><span class="line">openssl x509 -req -sha256 -days 3650 -<span class="keyword">in</span> server.csr -signkey server.key -out server.crt </span><br></pre></td></tr></table></figure>

<p>访问 <code>https://localhost:843</code>，会出现如下图。因为我们使用的是自签名证书，直接在键盘输入 <code>thisisunsafe</code>，页面就可以绕过证书的验证了</p>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/jslearn-img/202203131502415.png"></p>
<p>所有的网络资源都变成 http2 的协议了，还有 h3（这里 h3 是对 google 外部资源的请求）</p>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/jslearn-img/202203131519745.png"></p>
<p>HTTP 1.1 虽然可以用 <code>keep-alive</code> 复用同个 TCP 链接，但是资源还是有顺序的，会形成阻塞</p>
<p>HTTP 2 真正做到了异步或并发的对资源进行传输，同一个时刻可以发起多个资源请求，可以将不同资源信息同时通过网络传回浏览器</p>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/jslearn-img/202203131603933.png"></p>
<h3 id="Server-Push（服务器推送）"><a href="#Server-Push（服务器推送）" class="headerlink" title="Server Push（服务器推送）"></a>Server Push（服务器推送）</h3><p>正常客户端拿到资源都是向服务器发起请求，服务器再把资源推送给客户端，这个来回是有消耗的（TTFB），如果能让服务器提前把这些东西推送到客户端，就能节约一定的网络开销</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line">server</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attribute">location</span> / &#123;</span><br><span class="line">    <span class="attribute">index</span> index.html index.htm;</span><br><span class="line">    <span class="attribute">http2_push</span> /img/me0.jpg;</span><br><span class="line">    <span class="attribute">http2_push</span> /img/me1.jpg;</span><br><span class="line">    <span class="attribute">http2_push</span> /img/me2.jpg;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>重启 nginx，可以发现图片没有了绿色部分（TTFB），少了请求返还回路的过程</p>
<ul>
<li>Initiator 图片为 Push，这种资源是通过 server push 提前推送到浏览器的</li>
</ul>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/jslearn-img/202203131632885.png"></p>
<h2 id="服务端渲染-SSR"><a href="#服务端渲染-SSR" class="headerlink" title="服务端渲染 SSR"></a>服务端渲染 SSR</h2><blockquote>
<p><a href="https://github.com/yacan8/blog/issues/30">彻底理解服务端渲染 - SSR原理 #30</a></p>
</blockquote>
<p><strong>SSR 好处：</strong></p>
<ul>
<li>加速首屏加载</li>
<li>更好的 SEO</li>
</ul>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/jslearn-img/202203132103453.png"></p>
<p><strong>基于 Next.js 实现SSR</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm init -y</span><br><span class="line">npm install next react react-dom</span><br></pre></td></tr></table></figure>

<p>添加 scripts 执行脚本：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// package.json</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;dev&quot;</span>: <span class="string">&quot;next&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在 <code>index.jsx</code> 中添加如下内容，之后 <code>npm run dev</code> 即可</p>
<ul>
<li>服务端渲染会把页面上显示的所有内容都放在 html 里</li>
<li>next.js 已经帮我们把代码进行基于路由的代码拆分，里面提供了 Link 组件</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Header <span class="keyword">from</span> <span class="string">&#x27;./Header.jsx&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> () =&gt; (</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;Header /&gt;</span><br><span class="line">    &lt;p&gt;Home&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p><strong>是否使用 SSR</strong></p>
<ul>
<li>架构-大型，动态页面，面向公众用户（是否关心首屏速度）</li>
<li>搜索引擎排名很重要（前面的页面使用静态页面，后面页面使用 vue react 实现动态加载）</li>
</ul>
]]></content>
      <categories>
        <category>性能优化</category>
      </categories>
      <tags>
        <tag>性能优化</tag>
        <tag>启用压缩 Gzip</tag>
        <tag>启用 Keep Alive</tag>
        <tag>HTTP 资源缓存</tag>
      </tags>
  </entry>
  <entry>
    <title>优化5.构建优化</title>
    <url>/posts/e8da84b8/</url>
    <content><![CDATA[<h2 id="webpack-优化配置"><a href="#webpack-优化配置" class="headerlink" title="webpack 优化配置"></a>webpack 优化配置</h2><p>webpack4 引入了 mode 模式，可以配置开发和生产模式，就可以使用一些已经默认好的插件帮我们达到想做的效果</p>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/jslearn-img/202203071749797.png"></p>
<h3 id="Tree-shaking"><a href="#Tree-shaking" class="headerlink" title="Tree-shaking"></a>Tree-shaking</h3><ul>
<li><p>上下文未用到的代码（dead code）</p>
</li>
<li><p>给予 ES6 import export</p>
<p>Tree-shaking 基础：无论是自己还是第三方，必须是模块化的，要基于 ES6 import export 导入导出的形式才可以，生产模式会默认启动 Tree-shaking，主要依赖于 <code>TerserPlugin</code> 插件</p>
<p>Tree-shaking 原理：从 index.js 开始，去看引用了哪些东西，进一步分析所有引入的包或模块里又引用了哪些模块或其他一些包，最后会把需要的东西都留下</p>
</li>
<li><p><code>package.json</code> 中配置 <code>sideEffects</code></p>
<p>因为它的实现是基于一定的规则，不过在 JS 里，可能会涉及到修改全局作用域（window 对象），如果把这个 shake 掉，代码就会出现问题，这时就需要使用 <code>sideEffects</code> 来告诉 webpack 哪些文件不需要 shake</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;sideEffects&quot;</span>: [</span><br><span class="line">  <span class="string">&quot;*.css&quot;</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>
</li>
<li><p>注意 Babel 默认配置的影响</p>
<p><code>presets</code> 就是把常用的 babel 插件做了一个集合。它有个问题：在转码时会把 ES6 模块化的语法转换成其他语法，我们希望保留 ES6 模块化语法，所以要加上 <code>modules: false</code>，这样 Tree-shaking 才能起到作用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  presets: [</span><br><span class="line">    [</span><br><span class="line">      <span class="string">&#x27;@babel/preset-env&#x27;</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        modules: <span class="literal">false</span>,</span><br><span class="line">        targets: &#123;</span><br><span class="line">          browsers: [<span class="string">&#x27;&gt;0.25%&#x27;</span>],</span><br><span class="line">        &#125;,</span><br><span class="line">        useBuiltIns: <span class="string">&#x27;usage&#x27;</span>,</span><br><span class="line">        bugfixes: <span class="literal">true</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&#x27;@babel/preset-react&#x27;</span>,</span><br><span class="line">  ],</span><br><span class="line">  plugins: [<span class="string">&#x27;@babel/plugin-proposal-class-properties&#x27;</span>, <span class="string">&#x27;@babel/plugin-transform-runtime&#x27;</span>],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="JS-压缩"><a href="#JS-压缩" class="headerlink" title="JS 压缩"></a>JS 压缩</h3><blockquote>
<p><a href="https://juejin.cn/post/6844904094281236487#refetch">再来一打Webpack面试题</a></p>
</blockquote>
<ul>
<li><p><code>uglifyjs-webpack-plugin</code>：不支持 ES6 压缩 (Webpack4 以前)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> UglifyJsPlugin = <span class="built_in">require</span>(<span class="string">&#x27;uglifyjs-webpack-plugin&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  optimization: &#123;</span><br><span class="line">    minimizer: [<span class="keyword">new</span> UglifyJsPlugin()],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>terser-webpack-plugin</code>：支持压缩 ES6 (Webpack4)</p>
<p>terser 无论从销量还是效果上都比 uglifyjs 好，所以 terser 后面座位生产模式下默认的压缩插件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> TerserPlugin = <span class="built_in">require</span>(<span class="string">&#x27;terser-webpack-plugin&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  optimization: &#123;</span><br><span class="line">    minimizer: [<span class="keyword">new</span> TerserPlugin()],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</li>
</ul>
<h3 id="作用域提升"><a href="#作用域提升" class="headerlink" title="作用域提升"></a>作用域提升</h3><ul>
<li><p>代码体积减小</p>
<p>减少调用关系逻辑上的代码，把一些函数进行合并</p>
</li>
<li><p>提高执行效率</p>
<p>要进行引用的话，回花时间进行查找</p>
</li>
<li><p>同样注意 Babel 的 modules 的配置</p>
<p>需要加上 <code>modules: false</code> 的配置</p>
</li>
</ul>
<p>没有启用作用域提升的话，会把这两个模块打成单独的模块，当其中一个依赖到另一个时，会把依赖到的模块 require 进来，再通过 require 进来的模块进行调用</p>
<p>启用作用域提升，会做一个合并和分析，发现有这种依赖调用时，试图把依赖合并到调用里，最终变得更加精简</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**************** util.js ********************/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="string">&#x27;Hello,Webpack&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**************** index.jsx ******************/</span></span><br><span class="line"><span class="keyword">import</span> str <span class="keyword">from</span> <span class="string">&#x27;./util&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str);</span><br><span class="line"></span><br><span class="line"><span class="comment">/***************** 没有 scope hoisting, webpack 打包后 *******************/</span></span><br><span class="line">[</span><br><span class="line">  (<span class="function"><span class="keyword">function</span> (<span class="params"><span class="built_in">module</span>, __webpack_exports__, __webpack_require__</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> __WEBPACK_IMPORTED_MODULE_0__util_js__ = __webpack_require__(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(__WEBPACK_IMPORTED_MODULE_0__util_js__[<span class="string">&quot;a&quot;</span>]);</span><br><span class="line">  &#125;),</span><br><span class="line">  (<span class="function"><span class="keyword">function</span> (<span class="params"><span class="built_in">module</span>, __webpack_exports__, __webpack_require__</span>) </span>&#123;</span><br><span class="line">    __webpack_exports__[<span class="string">&quot;a&quot;</span>] = (<span class="string">&#x27;Hello,Webpack&#x27;</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">]</span><br><span class="line"><span class="comment">/************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/***************** 有 scope hoisting, webpack 打包后 ********************/</span></span><br><span class="line">[</span><br><span class="line">  (<span class="function"><span class="keyword">function</span> (<span class="params"><span class="built_in">module</span>, __webpack_exports__, __webpack_require__</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> util = (<span class="string">&#x27;Hello,Webpack&#x27;</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(util);</span><br><span class="line">  &#125;)</span><br><span class="line">]</span><br><span class="line"><span class="comment">/************************************/</span></span><br></pre></td></tr></table></figure>

<h3 id="Babel-优化配置"><a href="#Babel-优化配置" class="headerlink" title="Babel 优化配置"></a>Babel 优化配置</h3><ul>
<li>在需要的地方引用 polyfill</li>
<li>辅助函数的按需引入</li>
<li>根据目标浏览器按需转换代码</li>
</ul>
<p><strong>按需加载 polyfill</strong></p>
<ul>
<li><p>polyfill 是兼容旧浏览器去进行新功能或新规范的实现</p>
<p>由于这个比较大，需要把所有涉及到的东西都引进来，但我们用到的可能是其中比较小的部分，这时配置 <code>useBuiltIns: &#39;usage&#39;</code> 即可</p>
<p>通过 <code>targets: &#123; browsers: [&#39;&gt;0.25%&#39;] &#125;</code> 来对市场份额超 0.25% 的浏览器进行支持。<a href="https://github.com/browserslist/browserslist">browserlist</a></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  presets: [</span><br><span class="line">    [</span><br><span class="line">      <span class="string">&#x27;@babel/preset-env&#x27;</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        modules: <span class="literal">false</span>,</span><br><span class="line">        targets: &#123;</span><br><span class="line">          browsers: [<span class="string">&#x27;&gt;0.25%&#x27;</span>],</span><br><span class="line">        &#125;,</span><br><span class="line">        useBuiltIns: <span class="string">&#x27;usage&#x27;</span>,</span><br><span class="line">        bugfixes: <span class="literal">true</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&#x27;@babel/preset-react&#x27;</span>,</span><br><span class="line">  ],</span><br><span class="line">  plugins: [<span class="string">&#x27;@babel/plugin-proposal-class-properties&#x27;</span>, <span class="string">&#x27;@babel/plugin-transform-runtime&#x27;</span>],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><strong>辅助函数的按需引入</strong></p>
<ul>
<li>声明一个 class，babel 转码后如下图：</li>
</ul>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/jslearn-img/202203091013592.png"></p>
<h2 id="webpack-依赖优化"><a href="#webpack-依赖优化" class="headerlink" title="webpack 依赖优化"></a>webpack 依赖优化</h2><h3 id="noParse（不解析）"><a href="#noParse（不解析）" class="headerlink" title="noParse（不解析）"></a>noParse（不解析）</h3><ul>
<li><p>提高构建速度</p>
</li>
<li><p>直接通知 webpack 忽略较大的库</p>
<p>通常是第三方的一些类库，一般是比较大的库，且没用模块化的方式去编写，那么它本身也不会有外部的依赖，所以我们就可以不对它进行解析</p>
</li>
<li><p>被忽略的库不能有 import、require、define 的引入方式</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">  noParse: <span class="regexp">/lodash/</span>, <span class="comment">// loadsh比较独立</span></span><br><span class="line">  noParse: <span class="regexp">/^(vue|vue-router|vuex|vuex-router-sync)$/</span>, <span class="comment">// vue-cli里的配置</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="DllPlugin"><a href="#DllPlugin" class="headerlink" title="DllPlugin"></a>DllPlugin</h3><ul>
<li><p>避免打包时对不变的库重复构建</p>
<p>比如：react 和 react-dom 其实从开始构建项目开始到最后上线都不太可能变了，我们可以对其进行动态链接库的引用，不再重复构建</p>
</li>
<li><p>提高构建速度</p>
</li>
<li><p>应用场景</p>
<p>生产环境应用的可能性比较小，因为生产环境不会经常打包，慢一点也不会介意</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* package.json */</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;dll-build&quot;</span>: <span class="string">&quot;cross-env NODE_ENV=production webpack --config webpack.dll.config.js&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* webpack.dll.config.js */</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">&#x27;webpack&#x27;</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  mode: <span class="string">&#x27;production&#x27;</span>,</span><br><span class="line">  entry: &#123;</span><br><span class="line">    react: [<span class="string">&#x27;react&#x27;</span>, <span class="string">&#x27;react-dom&#x27;</span>],</span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">&#x27;[name].dll.js&#x27;</span>,</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">&#x27;dll&#x27;</span>),</span><br><span class="line">    library: <span class="string">&#x27;[name]&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> webpack.DllPlugin(&#123;</span><br><span class="line">      name: <span class="string">&#x27;[name]&#x27;</span>,</span><br><span class="line">      path: path.resolve(__dirname, <span class="string">&#x27;dll/[name].manifest.json&#x27;</span>),</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* webpack.config.js */</span></span><br><span class="line"><span class="keyword">const</span> DllReferencePlugin = <span class="built_in">require</span>(<span class="string">&#x27;webpack/lib/DllReferencePlugin&#x27;</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = smp.wrap(&#123;</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="comment">/* 动态链接库引用 */</span></span><br><span class="line">    <span class="keyword">new</span> DllReferencePlugin(&#123;</span><br><span class="line">      manifest: <span class="built_in">require</span>(<span class="string">`<span class="subst">$&#123;__dirname&#125;</span>/dll/react.manifest.json`</span>),</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="webpack-细节优化"><a href="#webpack-细节优化" class="headerlink" title="webpack 细节优化"></a>webpack 细节优化</h2><h3 id="代码拆分"><a href="#代码拆分" class="headerlink" title="代码拆分"></a>代码拆分</h3><ul>
<li>把单个 bundle文件拆分成若干个 bundles/chunks</li>
<li>缩短首屏加载时间</li>
</ul>
<p><strong>webpack 代码拆分方法：</strong></p>
<ul>
<li><p>手工定义入口</p>
</li>
<li><p>splitChunks 提取公有代码，拆分业务代码与第三方库</p>
<ol>
<li>把我们代码中重复使用的东西提取出来</li>
<li>把我们这个业务逻辑与第三方依赖进行拆分</li>
</ol>
<p>webpack 处理文件路径时，它们始终包含 Unix 系统中的 <code>/</code> 和 Windows 系统中的 <code>\</code>，所以会在前面加上 <code>[\\/]</code></p>
<p>chunks：有效值为 <code>all</code>、<code>async</code>、<code>initial</code>，<code>initial</code> 是同步加载，<code>async</code> 是一部加载</p>
<p>minChunks：拆分前必须共享模块的最小 chunks 数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = smp.wrap(&#123;</span><br><span class="line">  optimization: &#123;</span><br><span class="line">    splitChunks: &#123;</span><br><span class="line">      cacheGroups: &#123;</span><br><span class="line">        vendor: &#123;</span><br><span class="line">          name: <span class="string">&#x27;vendor&#x27;</span>,</span><br><span class="line">          test: <span class="regexp">/[\\/]node_modules[\\/]/</span>,</span><br><span class="line">          minSize: <span class="number">0</span>,</span><br><span class="line">          minChunks: <span class="number">1</span>,</span><br><span class="line">          priority: <span class="number">10</span>,</span><br><span class="line">          chunks: <span class="string">&#x27;initial&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        common: &#123;</span><br><span class="line">          name: <span class="string">&#x27;common&#x27;</span>,</span><br><span class="line">          test: <span class="regexp">/[\\/]src[\\/]/</span>,</span><br><span class="line">          chunks: <span class="string">&#x27;all&#x27;</span>,</span><br><span class="line">          minSize: <span class="number">0</span>,</span><br><span class="line">          minChunks: <span class="number">2</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>动态加载</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;Suspense fallback=&#123;&lt;div&gt;Loading...&lt;/div&gt;&#125;&gt;</span><br><span class="line">  &lt;Card</span><br><span class="line">    key=&#123;panel.name&#125;</span><br><span class="line">    image=&#123;panel.image&#125;</span><br><span class="line">    title=&#123;panel.name&#125;</span><br><span class="line">    route=&#123;panel.route&#125;</span><br><span class="line">    description=&#123;panel.body&#125;</span><br><span class="line">  /&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">Suspense</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="资源压缩"><a href="#资源压缩" class="headerlink" title="资源压缩"></a>资源压缩</h3><ul>
<li>Terser 压缩 JS</li>
<li>mini-css-extract-plugin 压缩 CSS</li>
<li>HtmlWebpackPlugin-minify 压缩 HTML</li>
</ul>
<blockquote>
<p><a href="https://v4.webpack.docschina.org/concepts/mode/">webpack4 mode</a></p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// webpack.production.config.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  mode: <span class="string">&#x27;production&#x27;</span>,</span><br><span class="line">  performance: &#123;</span><br><span class="line">    hints: <span class="string">&#x27;warning&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    pathinfo: <span class="literal">false</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  optimization: &#123;</span><br><span class="line">    namedModules: <span class="literal">false</span>,</span><br><span class="line">    namedChunks: <span class="literal">false</span>,</span><br><span class="line">    nodeEnv: <span class="string">&#x27;production&#x27;</span>,</span><br><span class="line">    flagIncludedChunks: <span class="literal">true</span>,</span><br><span class="line">    occurrenceOrder: <span class="literal">true</span>,</span><br><span class="line">    sideEffects: <span class="literal">true</span>,</span><br><span class="line">    usedExports: <span class="literal">true</span>,</span><br><span class="line">    concatenateModules: <span class="literal">true</span>,</span><br><span class="line">    splitChunks: &#123;</span><br><span class="line">      hidePathInfo: <span class="literal">true</span>,</span><br><span class="line">      minSize: <span class="number">30000</span>,</span><br><span class="line">      maxAsyncRequests: <span class="number">5</span>,</span><br><span class="line">      maxInitialRequests: <span class="number">3</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    noEmitOnErrors: <span class="literal">true</span>,</span><br><span class="line">    checkWasmTypes: <span class="literal">true</span>,</span><br><span class="line">    minimize: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> TerserPlugin(<span class="comment">/* ... */</span>),</span><br><span class="line">    <span class="keyword">new</span> webpack.DefinePlugin(&#123; <span class="string">&#x27;process.env.NODE_ENV&#x27;</span>: <span class="built_in">JSON</span>.stringify(<span class="string">&#x27;production&#x27;</span>) &#125;),</span><br><span class="line">    <span class="keyword">new</span> webpack.optimize.ModuleConcatenationPlugin(),</span><br><span class="line">    <span class="keyword">new</span> webpack.NoEmitOnErrorsPlugin(),</span><br><span class="line">  ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>mini-css-extract-plugin 压缩 CSS</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> MiniCssExtractPlugin(&#123;</span><br><span class="line">      filename: <span class="string">&#x27;[name].[hash].css&#x27;</span>,</span><br><span class="line">      chunkFilename: <span class="string">&#x27;[id].[chunkhash:8].css&#x27;</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> OptimizeCssAssetsPlugin(&#123;</span><br><span class="line">      cssProcessorPluginOptions: &#123;</span><br><span class="line">        preset: [<span class="string">&#x27;default&#x27;</span>, &#123; <span class="attr">discardComments</span>: &#123; <span class="attr">removeAll</span>: <span class="literal">true</span> &#125; &#125;],</span><br><span class="line">      &#125;,</span><br><span class="line">      canPrint: <span class="literal">true</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>HtmlWebpackPlugin-minify 压缩 HTML</strong></p>
<blockquote>
<p><a href="https://github.com/jantimon/html-webpack-plugin#minification">minification</a></p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  collapseWhitespace: <span class="literal">true</span>, <span class="comment">// 移除空格、换行符</span></span><br><span class="line">  keepClosingSlash: <span class="literal">true</span>, <span class="comment">// 保留元素的末尾斜杠</span></span><br><span class="line">  removeComments: <span class="literal">true</span>, <span class="comment">// 移除注释</span></span><br><span class="line">  removeRedundantAttributes: <span class="literal">true</span>, <span class="comment">// 移除冗余属性（默认值）</span></span><br><span class="line">  removeScriptTypeAttributes: <span class="literal">true</span>, <span class="comment">// 移除script标签中的type属性</span></span><br><span class="line">  removeStyleLinkTypeAttributes: <span class="literal">true</span>, <span class="comment">// 移除style标签中的type属性</span></span><br><span class="line">  useShortDoctype: <span class="literal">true</span> <span class="comment">// 使用html5短的描述方式</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="资源持久化缓存"><a href="#资源持久化缓存" class="headerlink" title="资源持久化缓存"></a>资源持久化缓存</h3><ul>
<li><p>每次打包的资源文件有唯一的 hash 值</p>
</li>
<li><p>修改后只有受影响到的文件 hash 变化</p>
</li>
<li><p>充分利用浏览器缓存</p>
<p>hash 特点：离散唯一的值，如果内容不变，计算出来的值也不变</p>
<p>contenthash 会根据内容生成 hash，当只改 JS 时，进行重新打包后，CSS 就会保持原有的 hash 值。当更新部署时，就可以充分利用浏览器缓存，这样就可以保证用户体验且能进行一个平稳的更新过度</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: <span class="string">`<span class="subst">$&#123;__dirname&#125;</span>/build`</span>,</span><br><span class="line">    filename: <span class="string">&#x27;[name].[hash].bundle.js&#x27;</span>,</span><br><span class="line">    chunkFilename: <span class="string">&#x27;[name].[chunkhash:8].bundle.js&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> MiniCssExtractPlugin(&#123;</span><br><span class="line">      filename: <span class="string">&#x27;[name].[contenthash].css&#x27;</span>,</span><br><span class="line">      chunkFilename: <span class="string">&#x27;[id].[contenthash:8].css&#x27;</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="应用大小检测与分析"><a href="#应用大小检测与分析" class="headerlink" title="应用大小检测与分析"></a>应用大小检测与分析</h3><ul>
<li>Stats 分析与可视化图</li>
<li>webpack-bundle-analyzer 进行体积分析</li>
<li>speed-measure-webpack-plugin 速度分析</li>
</ul>
<blockquote>
<p><a href="https://alexkuz.github.io/webpack-chart/">webpack-chart</a></p>
</blockquote>
<p>通过：<code>webpack --profile --json &gt; stats.json</code> 生成 <code>stats.json</code>文件，之后将这个上传到这个网站即可</p>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/jslearn-img/202203101448357.png"></p>
<p>这个可能还是不够细，想进一步分析可以使用 bundle-analyzer 工具实现，这里使用 <code>source-map-explorer</code> 进一步分析</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i source-map-explorer</span><br></pre></td></tr></table></figure>

<p>这个分析不是基于我们的 bundle 文件，而是基于 sourcemap，需要需要生成 sourcemap</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* package.json */</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;analyze&quot;</span>: <span class="string">&quot;source-map-explorer &#x27;build/*.js&#x27;&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* webpack.config.js */</span></span><br><span class="line"><span class="built_in">module</span>.exports = smp.wrap(&#123;</span><br><span class="line">  mode: <span class="string">&#x27;production&#x27;</span>,</span><br><span class="line">  devtool: <span class="string">&#x27;source-map&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img data-src="https://gitee.com/lilyn/pic/raw/master/jslearn-img/202203101457701.png"></p>
<p>官方推荐的 <code>bundle-analyzer</code> 可以得到可视化图，不过相比 source-map-explorer 相比，它只能看个大概，少一些具体内容</p>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/jslearn-img/202203101459723.png"></p>
<p>速度分析可以使用<code>speed-measure-webpack-plugin</code>，运行 <code>npm run build</code> 即可看到所有 plugins 和所有 loaders 的使用情况</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> SpeedMeasurePlugin = <span class="built_in">require</span>(<span class="string">&#x27;speed-measure-webpack-plugin&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> smp = <span class="keyword">new</span> SpeedMeasurePlugin()</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = smp.wrap(&#123;...&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="React-按需加载实现方式"><a href="#React-按需加载实现方式" class="headerlink" title="React 按需加载实现方式"></a>React 按需加载实现方式</h2><ul>
<li>React router 基于 webpack 动态引入</li>
<li>使用 Reloadable 高级组件</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> loadable <span class="keyword">from</span> <span class="string">&#x27;@loadable/component&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用React-Loadable动态加载组件</span></span><br><span class="line"><span class="keyword">const</span> LoadableAbout = loadable(<span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;./About.jsx&#x27;</span>), &#123;</span><br><span class="line">  fallback: <span class="string">&#x27;&lt;div&gt;loading...&lt;/div&gt;&#x27;</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;Router&gt;</span><br><span class="line">        &lt;Switch&gt;</span><br><span class="line">          &lt;Route exact path=<span class="string">&quot;/&quot;</span> component=&#123;Home&#125; /&gt;</span><br><span class="line">          &lt;Route path=<span class="string">&quot;/about&quot;</span> component=&#123;LoadableAbout&#125; /&gt;</span><br><span class="line">        &lt;/Switch&gt;</span><br><span class="line">      &lt;/Router&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>代码拆分最初是为了解决一个过大请求的问题</p>
<ul>
<li><p>通过一个请求，把整个包加载到首页，这时网络开销相对少但是包体积大，所以下载耗时长</p>
</li>
<li><p>我们可以把较大的包做拆解，拆分成若干个小包，小包只有被调用时才会加载（按需加载）</p>
<p>假如拆分水平定义到组件，那所有组件都被拆分成一个独立的模块，就会有很多 bundle 或 chunk，那就要发起若干个请求，开销会更大</p>
</li>
<li><p>通常最合理的方式就是按照路由进行按需加载，而当页面上一些组件在不同路由页面会被进行复用时，才把组件单独进行拆解</p>
</li>
</ul>
]]></content>
      <categories>
        <category>性能优化</category>
      </categories>
      <tags>
        <tag>性能优化</tag>
        <tag>webpack 优化配置</tag>
        <tag>webpack 依赖优化</tag>
        <tag>webpack 细节优化</tag>
      </tags>
  </entry>
  <entry>
    <title>优化4.资源优化</title>
    <url>/posts/a7b3e4ca/</url>
    <content><![CDATA[<h2 id="资源的压缩与合并"><a href="#资源的压缩与合并" class="headerlink" title="资源的压缩与合并"></a>资源的压缩与合并</h2><p><strong>为什么要压缩合并</strong></p>
<ul>
<li>减少 HTTP 请求数量</li>
<li>减少请求资源大小</li>
</ul>
<p><strong>HTML 压缩：</strong></p>
<ul>
<li><p>使用在线工具进行压缩</p>
</li>
<li><p>使用 html-minifier 等 npm 工具</p>
<p><a href="https://terser.org/html-minifier-terser/">html-minifier-terser</a></p>
</li>
</ul>
<p><strong>CSS 压缩：</strong></p>
<ul>
<li>使用在线工具进行压缩</li>
<li>使用 clean-css 等 npm 工具</li>
</ul>
<p><strong>JS 压缩与混淆</strong></p>
<ul>
<li>使用在线工具进行压缩</li>
<li>使用 Webpack 对 JS 在构建时压缩</li>
</ul>
<p><strong>CSS JS 文件合并：</strong></p>
<ul>
<li>比如有 20 个 CSS，合并成一个 CSS 可能会比 20 个分别加载要快，因为每个资源请求都要经历不同的阶段：进行 DNS 查找、TCP 链接建立（这两个可以复用），TTFB 这个没办法避免，20 个肯定会比 1 个稍微大写，但是合并的话维护带来麻烦</li>
</ul>
<h2 id="图片格式优化"><a href="#图片格式优化" class="headerlink" title="图片格式优化"></a>图片格式优化</h2><p><img data-src="https://gitee.com/lilyn/pic/raw/master/jslearn-img/202203071404452.png"></p>
<h3 id="图片格式比较"><a href="#图片格式比较" class="headerlink" title="图片格式比较"></a>图片格式比较</h3><p><strong>JPEG/JPG：</strong></p>
<blockquote>
<p><a href="https://github.com/imagemin/imagemin">image-min</a></p>
<p><a href="https://imagemin.saasify.sh/">imahe-min playground</a></p>
</blockquote>
<p>优点：</p>
<ul>
<li>压缩比很高，画质还可以很好的保存，色彩保留也很丰富。JPG 通常采用 24 位存储方式，2^24 大约是 1万6千种颜色</li>
</ul>
<p>使用场景：</p>
<ul>
<li>需要展示比较大的图片时，还想保留画质和色彩</li>
</ul>
<p>缺陷：</p>
<ul>
<li>如果图片比较强调纹理或边缘，JPG 会显得有锯齿感或模糊，比如：Logo 不会用 JPG，边缘会显得粗糙</li>
</ul>
<p><strong>PNG：</strong></p>
<blockquote>
<p><a href="https://github.com/imagemin/imagemin-pngquant">imagemin-pngquant</a></p>
</blockquote>
<p>优点：</p>
<ul>
<li>可以做透明背景的图片，PNG也有 24 位格式，色彩丰富程度也是没问题</li>
<li>通常 quality 设置在 65% ~ 80% 之间是比较好的，这样可以达到 80% 的压缩比率</li>
</ul>
<p>使用场景：</p>
<ul>
<li>想强调线条、纹理、边缘这些细腻程度时</li>
</ul>
<p>缺陷：</p>
<ul>
<li>因为保留了细节，所以体积相对会大些</li>
</ul>
<p><strong>WebP：</strong></p>
<p>优点：</p>
<ul>
<li>Google 新提出的图片格式，已经推了几年，普及程度不是很高，跟 PNG有相同的质量，但是压缩比率比 PNG 要高</li>
</ul>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/jslearn-img/202203071445485.png"></p>
<h3 id="图片加载优化"><a href="#图片加载优化" class="headerlink" title="图片加载优化"></a>图片加载优化</h3><blockquote>
<p><a href="https://mathiasbynens.be/demo/img-loading-lazy">img-loading-lazy</a></p>
</blockquote>
<ul>
<li><p>原生的图片懒加载方案</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">loading</span>=<span class="string">&quot;lazy&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://placekitten.com/400/400&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>第三方图片懒加载方案</p>
<p><a href="https://github.com/verlok/vanilla-lazyload">vanilla-lazyload</a> ：用于延迟加载图片、背景图像、视频、iframe 和脚本。它利用 Intersection Observer，支持响应式图像</p>
<p><a href="https://github.com/malchata/yall.js">yall.js</a>：使用 Intersection Observer 并回退到事件处理程序的库</p>
<p><a href="https://github.com/ApoorvSaxena/lozad.js">lozad.js</a>：使用 Intersection Observer 的轻量级选项</p>
</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; LazyLoadImage &#125; <span class="keyword">from</span> <span class="string">&#x27;react-lazy-load-image-component&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCard</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;LazyLoadImage</span><br><span class="line">        className=&#123;<span class="built_in">this</span>.props.classes.media&#125;</span><br><span class="line">        src=&#123;<span class="built_in">this</span>.props.image&#125;</span><br><span class="line">        effect=<span class="string">&quot;blur&quot;</span></span><br><span class="line">        rel=<span class="string">&quot;preconnect&quot;</span></span><br><span class="line">      /&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="渐进式图片"><a href="#渐进式图片" class="headerlink" title="渐进式图片"></a>渐进式图片</h3><p>图片不是一步到位加载出来，而是逐渐变清楚，最后变成非常清楚</p>
<ul>
<li>基线 JPEG，自上而下的行扫描形式</li>
<li>渐进式 JPEG，会从低像素到高像素的过程</li>
</ul>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/jslearn-img/202203071508173.png"></p>
<p><strong>渐进式图片的优点和不足：</strong></p>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/jslearn-img/202203071511283.png"></p>
<p><strong>渐进式图片的解决方案：</strong></p>
<ul>
<li><a href="https://github.com/ccforward/progressive-image">progressive-image</a></li>
<li><a href="https://github.com/ImageMagick/ImageMagick">ImageMagick</a></li>
<li><a href="https://github.com/libjpeg-turbo/libjpeg-turbo">libjpeg-turbo</a></li>
<li><a href="https://github.com/imagemin/jpeg-recompress-bin">jpeg-recompress-bin</a></li>
<li><a href="https://github.com/imagemin/imagemin">imagemin</a></li>
</ul>
<h3 id="响应式图片"><a href="#响应式图片" class="headerlink" title="响应式图片"></a>响应式图片</h3><blockquote>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images">响应式图片 MDN</a></p>
</blockquote>
<p>不同屏幕尺寸都有一张合适的图片给用户达到最佳视觉体验，如何做？肯定不希望用一张超大的图加载到所有设备上，然后再根据屏幕尺寸去进行缩放，这样会造成浪费，而且在手机端网络情况可能不太好</p>
<ul>
<li><p>Srcset 属性的使用</p>
<p><strong>srcset</strong> 定义浏览器选择的图像集，以及每个图像的大小</p>
</li>
<li><p>Sizes 属性的使用</p>
<p><strong>sizes</strong> 定义了一组媒体条件并且指明当某些媒体条件为真是，什么样的图片尺寸是最佳选择</p>
</li>
<li><p>picture 的使用</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">srcset</span>=<span class="string">&quot;elva-fairy-480w.jpg 480w, elva-fairy-800w.jpg 800w&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">sizes</span>=<span class="string">&quot;(max-width: 600px) 480px, 800px&quot;</span> <span class="attr">src</span>=<span class="string">&quot;elva-fairy-800w.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="字体优化"><a href="#字体优化" class="headerlink" title="字体优化"></a>字体优化</h2><p>网页上的大部分内容以文字的形式展示给用户，为了让文字展示更漂亮，很多时候会使用自定义字体，这些字体资源就会通过网络加载到客户端</p>
<p><strong>什么是 FOIT 和 FOUT</strong></p>
<p>字体未下载完成时，浏览器隐藏或自动降级，导致字体闪烁</p>
<ul>
<li><p>Flash Of Invisible Text</p>
<p>文字从看不到到看到的闪烁变化过程</p>
</li>
<li><p>Flash Of Unstyled Text</p>
<p>没有经过样式渲染，也就是文字开始看上去是一种样式，后来经过样式渲染又变成另外一种样式没这中间会有这个变化和闪动的过程</p>
</li>
</ul>
<p><strong>使用 font-display</strong></p>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/jslearn-img/202203071623864.png"></p>
<p>这个属性有 5 个值：</p>
<ul>
<li><p>auto</p>
</li>
<li><p>block</p>
<p>开始不让文字进行显示，3s 之后字体下载完再用你的字体，3s 之后字体还没下载完，先用默认字体显示，直到字体下载完再换成你的字体</p>
</li>
<li><p>swap</p>
<p>开始就使用默认字体进行显示，直到字体下载完成之后再换成你的字体，用户一开始就可以很快看到字体，不会看到白屏</p>
</li>
<li><p>fallback</p>
<p>对 block 的优化，开始不显示的等待时间缩短了，只有 100ms</p>
</li>
<li><p>optional</p>
<p>为手机端进行优化，浏览器可以判断用户网络情况，如果速度比较好，那 100ms 就用你下载的字体，如果下载不下来，就用默认字体进行显示</p>
</li>
</ul>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/jslearn-img/202203071626770.png"></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@import</span> url(<span class="attribute">https:</span>//fonts.googleapis.com/css?family=Long+Cang);</span><br><span class="line"></span><br><span class="line"><span class="keyword">@font-face</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&#x27;Amatic SC&#x27;</span>;</span><br><span class="line">  <span class="attribute">font-style</span>: normal;</span><br><span class="line">  <span class="attribute">font-weight</span>: <span class="number">400</span>;</span><br><span class="line">  <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">&#x27;../fonts/amatic-sc-v11-latin-regular.eot&#x27;</span>); <span class="comment">/* IE9 Compat Modes */</span></span><br><span class="line">  <span class="attribute">src</span>: <span class="built_in">local</span>(<span class="string">&#x27;Amatic SC Regular&#x27;</span>), <span class="built_in">local</span>(<span class="string">&#x27;AmaticSC-Regular&#x27;</span>);</span><br><span class="line">  <span class="attribute">font-display</span>: block;</span><br><span class="line">  <span class="attribute">unicode-range</span>: U+<span class="number">00</span>-FF;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>font-family</code>：字体名称</li>
<li><code>src</code>：字体从哪加载，可以通过本地加载字体也可以来自 url</li>
<li><code>unicode-range</code>：可以做个拆分，本来字符集非常大，比如中文汉字很多，如果把所有字体全放在一个文件里，字体文件就过大了。只有字体真正要用到的时候才会去下载这个字体，可以提高字体加载效率</li>
</ul>
<p><strong>使用 Ajax + Base64</strong></p>
<ul>
<li>使用 Base64 把字体进行转码或嵌到 CSS 里或 JS 里，再进行加载，转码之后通过异步请求的方式去获取这个字体</li>
<li>缺点：因为你把 Base64 嵌到其他资源里，导致文字就没有办法进行缓存，它的缓存实际就依赖于 CSS 的缓存</li>
</ul>
]]></content>
      <categories>
        <category>性能优化</category>
      </categories>
      <tags>
        <tag>性能优化</tag>
        <tag>资源的压缩与合并</tag>
        <tag>图片格式优化</tag>
        <tag>字体优化</tag>
      </tags>
  </entry>
  <entry>
    <title>优化3.代码优化</title>
    <url>/posts/32a9efe/</url>
    <content><![CDATA[<h2 id="JS开销"><a href="#JS开销" class="headerlink" title="JS开销"></a>JS开销</h2><h3 id="JS-开销在哪"><a href="#JS-开销在哪" class="headerlink" title="JS 开销在哪"></a>JS 开销在哪</h3><p>资源大小相同的情况下，JS 开销更高</p>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/jslearn-img/202203061424849.jpg"></p>
<p><code>Bottom-Up</code>：自下而上，可以看下里面具体做了哪些事情，耗时多久</p>
<ul>
<li><code>Evaluate Script</code>：解析耗时 101.6ms</li>
</ul>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/jslearn-img/202203061431980.png"></p>
<blockquote>
<p><a href="https://v8.dev/blog/cost-of-javascript-2019">The cost of JavaScript in 2019</a></p>
</blockquote>
<p>对于一个网站而言，总共的网络加载过程中，压缩后 1.4 M 的 JS 在整个网络加载耗时中占 1/3</p>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/jslearn-img/202203061440018.png"></p>
<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><ul>
<li><p><code>Code Splitting</code>：代码拆分，按需加载</p>
<p>当前路径需要哪些资源就加载哪些资源，不需要的延迟加载或访问需要它的页面再加载</p>
</li>
<li><p><code>Tree Shaking</code>：代码减重</p>
<p>摇一棵树，树上枯萎的叶子就会掉下来。如果有代码用不到，就不打包进来</p>
</li>
</ul>
<p><strong>减少主线程工作量：</strong></p>
<ul>
<li><p>避免长任务</p>
</li>
<li><p>避免超过 1KB 的行间脚本</p>
<p>行间脚本是一个优化策略，比如要加快首屏加载时间，可以把 JS 和 CSS 都行间化，其余通过 Web 文件加载</p>
</li>
<li><p>使用 rAF 和 rAC 进行调度</p>
</li>
</ul>
<p><strong>Progressive Bootstrapping（渐进式启动）：</strong></p>
<ol>
<li><strong>Navigation begins</strong>：第一个字节</li>
<li><strong>First Paint</strong>：白屏开始有内容绘制</li>
<li><strong>FCP: First Contentful Paint</strong> ：导航启动</li>
<li><strong>FMP: First Meaningful Paint</strong>：页面内容是可见的</li>
<li><strong>Visually ready</strong>：页面基本绘制完成</li>
<li><strong>Time to Interactive</strong>：页面完全能进行交互</li>
<li><strong>Fully Loaded</strong>：结束这轮生命周期</li>
</ol>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/jslearn-img/202203061452685.jpg"></p>
<h2 id="配合-V8-进行优化代码"><a href="#配合-V8-进行优化代码" class="headerlink" title="配合 V8 进行优化代码"></a>配合 V8 进行优化代码</h2><h3 id="V8-编译原理"><a href="#V8-编译原理" class="headerlink" title="V8 编译原理"></a>V8 编译原理</h3><blockquote>
<p><a href="https://www.sec4.fun/2020/06/19/v8TurboFan/">V8中Speculative Optimization简介</a></p>
</blockquote>
<p>当 Chrome 或 Node 要执行一段 JS 代码时，首先会进行解析（Parse it），并将其翻译成一个抽象语法数（AST），之后把文本识别成字符，然后把重要信息提取出来，变成一些节点存储在一定的数据结构里（Interpreter）。最后把代码编成机器码之前，编译器会进行优化工作（Optimize Compiler），但是有时它自动优化工作并不一定合适（逆优化），所以我们需要在代码层面做的优化尽量满足它的优化条件，之后按照它的期望代码去写即可</p>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/jslearn-img/202203061501154.png"></p>
<blockquote>
<p><a href="http://nodejs.cn/api/perf_hooks.html">perf_hooks 性能钩子</a></p>
</blockquote>
<p>注释掉和没注释掉 <code>add(num1, &#39;s&#39;)</code> 各执行一次观察 <code>duration</code> 持续时间。在执行函数时，发现参数类型发生变化，运行时不能用已经做过的优化逻辑了，就会把刚做的优化撤销，会造成一定的延时</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; performance, PerformanceObserver &#125; = <span class="built_in">require</span>(<span class="string">&#x27;perf_hooks&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> add = <span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b</span><br><span class="line"><span class="keyword">const</span> num1 = <span class="number">1</span></span><br><span class="line"><span class="keyword">const</span> num2 = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">performance.mark(<span class="string">&#x27;start&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10000000</span>; i++) &#123;</span><br><span class="line">  add(num1, num2)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// add(num1, &#x27;s&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10000000</span>; i++) &#123;</span><br><span class="line">  add(num1, num2)</span><br><span class="line">&#125;</span><br><span class="line">performance.mark(<span class="string">&#x27;end&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> observer = <span class="keyword">new</span> PerformanceObserver(<span class="function"><span class="params">list</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(list.getEntries()[<span class="number">0</span>])</span><br><span class="line">&#125;)</span><br><span class="line">observer.observe(&#123; <span class="attr">entryTypes</span>: [<span class="string">&#x27;measure&#x27;</span>] &#125;)</span><br><span class="line">performance.measure(<span class="string">&#x27;测量&#x27;</span>, <span class="string">&#x27;start&#x27;</span>, <span class="string">&#x27;end&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">// 没注释 add(num1, &#x27;s&#x27;)</span></span><br><span class="line"><span class="comment">PerformanceEntry &#123;</span></span><br><span class="line"><span class="comment">  name: &#x27;测量&#x27;,</span></span><br><span class="line"><span class="comment">  entryType: &#x27;measure&#x27;,</span></span><br><span class="line"><span class="comment">  startTime: 30.1886,</span></span><br><span class="line"><span class="comment">  duration: 50.1463</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">// 注释 add(num1, &#x27;s&#x27;)</span></span><br><span class="line"><span class="comment">PerformanceEntry &#123;</span></span><br><span class="line"><span class="comment">  name: &#x27;测量&#x27;,</span></span><br><span class="line"><span class="comment">  entryType: &#x27;measure&#x27;,</span></span><br><span class="line"><span class="comment">  startTime: 27.3498,</span></span><br><span class="line"><span class="comment">  duration: 19.102599</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p>如果想进一步了解 V8 做了什么优化，可以利用 Node 的两个参数（<code>trace-opt</code>、<code>trace-deopt</code>）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">node --trace-opt --trace-deopt de-opt.js </span><br></pre></td></tr></table></figure>

<p><strong>抽象语法数：</strong></p>
<ul>
<li>源码 -&gt; 抽象语法数 -&gt; 字节码 Bytecode -&gt; 机器码</li>
<li>编译过程进行优化</li>
<li>运行时可能发生反优化</li>
</ul>
<h3 id="优化机制"><a href="#优化机制" class="headerlink" title="优化机制"></a>优化机制</h3><ul>
<li><p>脚本流</p>
<p>脚本正常情况要先进行下载再进行解析最后执行的过程，Chrome 在这里做了优化，在下载过程中可以同时进行解析就可以加快这个过程。当下载一个超过 30 KB 的脚本时，可以先对这 30 KB 内容进行解析，会单独开一个线程去给这段代码进行解析，等整个都下载完在完成时再进行解析合并，最后就可以执行，效率就大大提高了。这是流式处理的一个特点</p>
</li>
<li><p>字节码缓存</p>
<p>有些东西使用频率比较高，可以把它进行缓存，再次进行访问时就可以加快访问。源码被翻译成字节码之后，发现有一些不仅在当前页面有使用，在其他页面也会有使用的片段，就可以把这些片段对应的字节码缓存起来，在其他页面再次进行访问相同逻辑时，直接从缓存去取即可，不需要再进行翻译过程，效率就大大提高了</p>
</li>
<li><p>懒解析</p>
<p>对于函数而言，虽然声明了这个函数，但是不一定会马上用它，默认情况下会进行懒解析（先不去解析函数内部的逻辑，当使用时再去解析函数内部逻辑），效率就大大提高了</p>
</li>
</ul>
<h2 id="函数优化"><a href="#函数优化" class="headerlink" title="函数优化"></a>函数优化</h2><ul>
<li><code>lazy parsing</code> 懒解析与 <code>eager parsing</code> 饥饿解析</li>
<li>利用 <code>Optimize.js</code> 优化初次加载时间</li>
</ul>
<p><strong>懒解析与饥饿解析</strong></p>
<ul>
<li><p>只是加一对括号 <code>()</code> 即可把懒解析变为饥饿解析</p>
<p>但是当我们使用 uglify 进行压缩代码时，这队括号会被去掉，这样就导致本来想做的事情，没办法通知到解析器，这时就可以使用 <code>Optimize.js</code> 工具</p>
<p>当然现在 uglify 已经把这个问题解决掉了</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* test.js */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> add = <span class="function">(<span class="params">a, b</span>) =&gt;</span> a*b      <span class="comment">// lazy parsing</span></span><br><span class="line">  <span class="comment">// const add = ((a, b) =&gt; a*b) // eager parsing</span></span><br><span class="line">  <span class="keyword">const</span> num1 = <span class="number">1</span></span><br><span class="line">  <span class="keyword">const</span> num2 = <span class="number">2</span></span><br><span class="line">  add(num1, num2)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* App.jsx */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(props)</span><br><span class="line">    test()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* webpack.config.js */</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    app: <span class="string">&#x27;./src/index.jsx&#x27;</span>,</span><br><span class="line">    test: <span class="string">&#x27;./src/test.js&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: <span class="string">`<span class="subst">$&#123;__dirname&#125;</span>/build`</span>,</span><br><span class="line">    filename: <span class="string">&#x27;[name].bundle.js&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="对象优化"><a href="#对象优化" class="headerlink" title="对象优化"></a>对象优化</h2><p>做这些优化的目的：迎合 V8 引擎进行解析，把你的代码进行优化。因为它也是用代码写的，所做的优化其实也是代码实现的规则，如果我们的代码迎合了这些规则，就可以帮你去做优化，代码效率可以得到提升</p>
<ul>
<li>以相同顺序初始化对象成员，避免隐藏类的调整</li>
<li>实例化后避免添加新属性</li>
<li>尽量使用 Array 代替 array-like 对象</li>
<li>避免读取超过数组的长度</li>
<li>避免元素类型转换</li>
</ul>
<p><strong>以相同顺序初始化对象成员，避免隐藏类的调整</strong></p>
<p>JS 是动态、弱类型语言，写的时候不会声明和强调它变量的类型，但是对于编辑器而言，实际上还是需要知道确定的类型，在解析时，它根据自己的推断，会给这些变量赋一个具体的类型，通常管这些类型叫隐藏类型（hidden class），之后所做的优化都是基于隐藏类型进行的</p>
<ul>
<li>隐藏类型底层会以描述的数组进行存储，数组里会去强调所有属性声明的顺序，或者说索引，索引的位置</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RectArea</span> </span>&#123; <span class="comment">// HC0</span></span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">l, w</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.l = l <span class="comment">// HC1</span></span><br><span class="line">    <span class="built_in">this</span>.w = w <span class="comment">// HC2</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当我们声明了矩形面积类之后，创建第一个HC0</span></span><br><span class="line"><span class="keyword">const</span> rect1 = <span class="keyword">new</span> RectArea(<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"><span class="comment">// 接下来再创建实例时，还能按照这个服用所有隐藏类</span></span><br><span class="line"><span class="keyword">const</span> rect2 = <span class="keyword">new</span> RectArea(<span class="number">5</span>, <span class="number">6</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// car1声明对象的时候会创建一个隐藏类 HC0</span></span><br><span class="line"><span class="keyword">const</span> car = &#123; <span class="attr">color</span>: <span class="string">&#x27;red&#x27;</span> &#125;</span><br><span class="line"><span class="comment">// 追加属性会再创建个隐藏类型 HC1</span></span><br><span class="line">car1.seats = <span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// car2声明时，HC0的属性是关于color的属性，car2声明的是关于seats的属性，所以没办法复用，只能再创建 HC2</span></span><br><span class="line"><span class="keyword">const</span> car2 = &#123; <span class="attr">seats</span>: <span class="number">2</span> &#125;</span><br><span class="line"><span class="comment">// HC1不是只包含seats的属性，是包含了color和seats两个属性，所以没有可复用的隐藏类，创建 HC3</span></span><br><span class="line">car2.color = <span class="string">&#x27;blue&#x27;</span></span><br></pre></td></tr></table></figure>

<p><strong>实例化后避免添加新属性</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// In-Object属性</span></span><br><span class="line"><span class="keyword">const</span> car = &#123; <span class="attr">color</span>: <span class="string">&#x27;red&#x27;</span> &#125;</span><br><span class="line"><span class="comment">// Normal/Fast属性，存储property store里，需要通过描述数组间接查找</span></span><br><span class="line">car1.seats = <span class="number">4</span></span><br></pre></td></tr></table></figure>

<p><strong>尽量使用 Array 代替 array-like 对象</strong></p>
<ul>
<li><code>array-like</code> 对象：JS 里都有一个 arguments 对象，包含了函数参数变量的信息，本身是一个对象，但是可以通过索引去访问里面的属性，它还有 length 属性，像是一个数组，但又不是数组，不具备数组上面的方法，比如：forEach</li>
<li>V8 引擎会对数组能极大性能优化，目前有 21 种不同的元素类型，最好是把类数组转成数组再进行遍历，这样会比不去转成数组直接遍历效率高</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 不如在真实数组上效率高</span></span><br><span class="line"><span class="built_in">Array</span>.prototype.forEach.call(arrObj, <span class="function">(<span class="params">val, index</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;index&#125;</span>：<span class="subst">$&#123;value&#125;</span>`</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr = <span class="built_in">Array</span>.prototype.slice.call(arrObj, <span class="number">0</span>)</span><br><span class="line">arr.forEach(<span class="function">(<span class="params">value, index</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;index&#125;</span>：<span class="subst">$&#123;value&#125;</span>`</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><strong>避免读取超过数组的长度</strong></p>
<ol>
<li><code>arr[3] -&gt; undefined</code> 会与数字进行比较（JS 里越界不一定会报错）</li>
<li>如果在数组对象里找不到，会沿着原型链向上找，所以会进行额外的开销</li>
<li>越界比较会造成原型链额外的查找，性能相差 6 倍</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 把超过边界的值也比较进来 &lt;=</span></span><br><span class="line">  <span class="built_in">Array</span>.prototype[<span class="string">&#x27;3&#x27;</span>] = <span class="number">10000</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt;= arr.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr[i] &gt; <span class="number">1000</span>) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(arr[i])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo([<span class="number">10</span>, <span class="number">100</span>, <span class="number">1000</span>])</span><br></pre></td></tr></table></figure>

<p><strong>避免元素类型转换</strong></p>
<blockquote>
<p><a href="https://segmentfault.com/a/1190000023193375">你可能不知道的V8数组优化</a></p>
<p><a href="https://segmentfault.com/a/1190000011303679">JavaScript 在 V8 中的元素种类及性能优化</a></p>
</blockquote>
<ul>
<li><p>对于编辑器而言，实际上是有类型的</p>
<p>JavaScript 是不区分整数、浮点数和双精度，它们都是数字，但是在编辑器里会对这个做出精确的区分，如果使数组里面类型发生变化，就会造成额外的开销，效率就不高了</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>] <span class="comment">// PACKED_SMI_ELEMENTS</span></span><br><span class="line">arr.push(<span class="number">4.4</span>) <span class="comment">// PACKED_DOUBLE_ELEMENTS</span></span><br><span class="line">arr.push(<span class="string">&#x27;x&#x27;</span>) <span class="comment">// PACKED_ELEMENTS</span></span><br><span class="line">arr[<span class="number">9</span>] = <span class="number">1</span> <span class="comment">// HOLEY_ELEMENTS</span></span><br></pre></td></tr></table></figure>

<p>类型越具体，编辑器能做的优化就越多，如果越通用，能做的优化余地就越少</p>
<ul>
<li>只能通过格子向下过度，一旦将单精度浮点数添加到 Smi 数组中，即使稍后用 Smi 覆盖浮点数，它也会被标记为 DOUBLE。类似地，一旦在数组中创建了一个洞，它将永久标记为有洞 HOLEY，即使稍微填充它也是如此</li>
</ul>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/jslearn-img/202203071001116.png"></p>
<h2 id="HTML-优化"><a href="#HTML-优化" class="headerlink" title="HTML 优化"></a>HTML 优化</h2><ul>
<li>减少 iframes 使用</li>
<li>压缩空白符</li>
<li>避免节点深层次嵌套</li>
<li>避免使用 table 布局</li>
<li>删除注释</li>
<li>CSS 和 JavaScript 尽量使用外联</li>
<li>删除元素默认属性</li>
</ul>
<p><strong>减少 iframes 使用：</strong></p>
<ul>
<li><p>额外添加了文档，需要加载的过程，也会阻碍父文档的加载过程，也就是说如果它加载不完成，父文档本身的 onload 事件就不会触发，一直等着它。在 iframe 里创建的元素，比在父文档创建同样的元素，开销要高出很多</p>
<p>如果非得用 iframe，可以做个延时加载</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">id</span>=<span class="string">&quot;iframe&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="built_in">document</span>.getElementById(<span class="string">&#x27;iframe&#x27;</span>).setAttribute(<span class="string">&#x27;src&#x27;</span>, url)</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><strong>压缩空白符：</strong></p>
<ul>
<li>编程时，为了方便阅读，会留空行和换行，最后打包要把空白符去掉</li>
</ul>
<p><strong>避免节点深层次嵌套：</strong></p>
<ul>
<li>嵌套越深消耗越高，节点越多最后生成 DOM 树占用内存会比较高</li>
</ul>
<p><strong>避免使用 table 布局：</strong></p>
<ul>
<li>table 布局本身有很多问题，使用起来没有那么灵活，造成的开销比较大</li>
</ul>
<p><strong>删除元素默认属性：</strong></p>
<ul>
<li>本身默认那些值，没必要写出来，写出来就添加了额外的字符，造成了不必要的浪费</li>
</ul>
<p><strong>借助工具</strong></p>
<ul>
<li>html-minifier</li>
</ul>
<h2 id="CSS-优化"><a href="#CSS-优化" class="headerlink" title="CSS 优化"></a>CSS 优化</h2><ul>
<li><p>利用 DevTools 测量样式计算开销</p>
<p>CSS 解析原则是自右向左去读，会先找出最具体的元素，把所有 a 全部找出来，再根据 #box 进行过滤…直至把所有有影响的元素全部过滤出来。不过随着浏览器解析不断进度，现在这种复杂度的计算依据不是主要的问题了</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.list</span><span class="selector-pseudo">:nth-last-child(1)</span> &gt; <span class="selector-id">#box</span> <span class="selector-tag">a</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><strong>CSS 优化：</strong></p>
<ul>
<li><p>降低 CSS 对渲染的阻塞</p>
</li>
<li><p>利用 GPU 完成动画，不进行回流重绘</p>
</li>
<li><p>使用 font-display 属性</p>
<p>可以帮助我们让文字更早显示在页面上，减轻文字闪动</p>
</li>
<li><p>使用 contain 属性</p>
<p>contain 是开发者和浏览器进行沟通的一个属性，通过 <code>contain: layout</code> 告诉浏览器，盒子里所有的子元素和盒子外面的元素之间没有任何布局上的关系。这样浏览器就可以对盒子里面的元素进行单独处理，不需要管理页面上其他的部分，这样就可以大大减少回流计算</p>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/jslearn-img/202203071140279.png"></p>
</li>
</ul>
]]></content>
      <categories>
        <category>性能优化</category>
      </categories>
      <tags>
        <tag>性能优化</tag>
        <tag>配合 V8 引擎优化</tag>
        <tag>函数对象优化</tag>
      </tags>
  </entry>
  <entry>
    <title>优化2.渲染优化</title>
    <url>/posts/9847b5b5/</url>
    <content><![CDATA[<h2 id="关键渲染路径"><a href="#关键渲染路径" class="headerlink" title="关键渲染路径"></a>关键渲染路径</h2><blockquote>
<p><a href="https://github.com/fi3ework/blog/issues/16">前端性能优化之关键路径渲染优化</a></p>
</blockquote>
<p>浏览器怎么把页面渲染出来，渲染过程分很多环节，就是 <strong>关键渲染路径（CRP）</strong></p>
<ul>
<li><code>CRP</code>：<code>Critical Rendering Path</code></li>
</ul>
<p><strong>浏览器渲染过程：</strong></p>
<p>JavaScript（触发视觉变化） -&gt; Style（浏览器对样式重新进行计算） -&gt; Layout（布局） -&gt; Paint（绘制） -&gt; Composite（合成）</p>
<ul>
<li>JavaScript：可以通过 JavaScript 实现一些页面上视觉上的变化，例如：添加 DOM 元素、jQuery实现动画、CSS 动画</li>
<li>Style：浏览器对样式重新计算，这个过程会根据选择器进行重新匹配，计算哪些元素 CSS 受到影响，新的规则是什么样的，应该绘制成什么样子</li>
<li>Layout：布局就是把元素按照样式绘制到页面上，实际上是几何问题，需要知道元素的大小、位置</li>
<li>Paint：真正把内容绘制到页面上：文字、图片、颜色、阴影等</li>
<li>Composite：合成，绘制会和这个合成联系，浏览器为了提高效率，并不是把所有东西都画在一个层里，会建多个图层，最后再把它们组合起来</li>
</ul>
<h3 id="DOM-树"><a href="#DOM-树" class="headerlink" title="DOM 树"></a>DOM 树</h3><ol>
<li>浏览器下载完 HTML 文档，就要把代码读进去，读进去的是文本，它先把这些文本转换成单个的字符</li>
<li>HTML 有很多标签，标签是通过一对尖括号标记出来的，这个尖括号就可以用作于识别，就可以把一些字符串理解成有含义的标记，这些标记最终被换成节点对象，放在链形数据结构里，如下图</li>
</ol>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/js-img/DOM%E6%A0%91.png"></p>
<h3 id="CSS-树"><a href="#CSS-树" class="headerlink" title="CSS 树"></a>CSS 树</h3><ul>
<li>当解释器遇到引用的 CSS，会先把资源下载下来，下载完成后对这个资源进行文本处理，把里面的标记全部识别出来，看样式是哪个节点的样式，然后用树形结构把这个关系存储起来，如下图</li>
</ul>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/js-img/CSSOM%E6%A0%91.png"></p>
<h3 id="浏览器构建渲染树"><a href="#浏览器构建渲染树" class="headerlink" title="浏览器构建渲染树"></a>浏览器构建渲染树</h3><p>DOM 和 CSSOM 合并成 Render Tree，把内容和样式合在一起，让浏览器理解最终要把什么画在页面上。合并的时候会把需要显示的留下，不需要显示的删除，比如：span 节点的样式是 <code>display: none</code>，不需要显示在页面上，构造成渲染树后，span 节点就会被去掉</p>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/js-img/Render-Tree%E6%B8%B2%E6%9F%93%E6%A0%91.png"></p>
<h2 id="回流与重绘"><a href="#回流与重绘" class="headerlink" title="回流与重绘"></a>回流与重绘</h2><p><strong>布局（layouts）与绘制（paint）</strong></p>
<ul>
<li>渲染树只包含网页需要的节点</li>
<li>布局计算节点精确的 <strong>位置和大小</strong>——“盒模型”</li>
<li>绘制是像素画每个节点的过程</li>
</ul>
<h3 id="影响回流的操作"><a href="#影响回流的操作" class="headerlink" title="影响回流的操作"></a>影响回流的操作</h3><p>布局也叫回流。布局：通常页面第一次加载完成之后，把东西放在页面上。回流：由于页面上发生了视觉上的变化又再次导致重新布局</p>
<ul>
<li>添加/删除元素</li>
<li><code>display: none</code></li>
<li>移动元素位置</li>
<li>操作 <code>styles</code></li>
<li><code>offsetLeft</code>、<code>scrollTop</code>、<code>clientWidth</code></li>
<li>修改浏览器大小、字体大小</li>
</ul>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/jslearn-img/202203011555931.png"></p>
<h3 id="避免布局抖动"><a href="#避免布局抖动" class="headerlink" title="避免布局抖动"></a>避免布局抖动</h3><ul>
<li><p>避免回流</p>
<p>比如想改变元素位置，千万不要修改 top、left 这样的值，可以使用 <code>transform</code> 或 <code>translate</code> 来进行位移</p>
</li>
<li><p>读写分离</p>
<p>批量的读操作再进行批量写操作</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> cards = <span class="built_in">document</span>.getElementsByClassName(<span class="string">&#x27;card&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> update = <span class="function"><span class="params">timestamp</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; cards.length; i++) &#123;</span><br><span class="line">    cards[i].style.width = <span class="built_in">Math</span>.sin(cards[i].offsetTop + timestamp / <span class="number">1000</span> + <span class="number">1</span>) * <span class="number">500</span> + <span class="string">&#x27;px&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">window</span>.requestAnimationFrame(update)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">&#x27;load&#x27;</span>, update)</span><br></pre></td></tr></table></figure>

<p><img data-src="https://gitee.com/lilyn/pic/raw/master/jslearn-img/202203011610224.png"></p>
<p>性能分析里右上角红色三角形表示长任务提示了强制回流（<code>Forced reflow</code>）</p>
<ul>
<li>浏览器为了提高布局性能，会尽量把修改布局相关属性推迟操作</li>
<li>但是当你获取布局属性（比如：<code>offsetTop</code>）时是无法推迟操作，不得不立即进行最新计算，以保证取到的是最新结果</li>
<li>如果有连续的读写，就会导致有连续不断的回流发生，导致页面抖动</li>
</ul>
<h3 id="使用-FastDom（防止布局抖动）"><a href="#使用-FastDom（防止布局抖动）" class="headerlink" title="使用 FastDom（防止布局抖动）"></a>使用 FastDom（防止布局抖动）</h3><blockquote>
<p><a href="https://github.com/wilsonpage/fastdom">FastDom</a></p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/fastdom/1.0.10/fastdom.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">let</span> cards = <span class="built_in">document</span>.getElementsByClassName(<span class="string">&#x27;card&#x27;</span>)</span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> update = <span class="function"><span class="params">timestamp</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; cards.length; i++) &#123;</span></span><br><span class="line"><span class="javascript">      fastdom.measure(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> top = cards[i].offsetTop</span></span><br><span class="line"><span class="javascript">        fastdom.mutate(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">          cards[i].style.width = <span class="built_in">Math</span>.sin(top + timestamp / <span class="number">1000</span> + <span class="number">1</span>) * <span class="number">500</span> + <span class="string">&#x27;px&#x27;</span></span></span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.requestAnimationFrame(update)</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="javascript">  <span class="built_in">window</span>.addEventListener(<span class="string">&#x27;load&#x27;</span>, update)</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>运行之后发现 load 之后没有再出现红色三角形的长任务警告了，也没有出现有问题的 layout</p>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/jslearn-img/202203011746343.png"></p>
<h2 id="复合线程与图层"><a href="#复合线程与图层" class="headerlink" title="复合线程与图层"></a>复合线程与图层</h2><h3 id="复合线程"><a href="#复合线程" class="headerlink" title="复合线程"></a>复合线程</h3><p><strong>复合线程</strong>（<code>compositor thread</code>）</p>
<ul>
<li>将页面拆分图层进行绘制再进行复合</li>
<li>利用 DevTools 了解网页的图层拆分情况</li>
</ul>
<p><strong>页面是怎么拆成不同图层的：</strong></p>
<ul>
<li>默认情况下它是由浏览器决定的，浏览器会根据一些规则来判断是否将页面拆分成多个图层，又把哪些元素拆分成一个单独的图层（依据元素与元素之间是否有相互影响）</li>
<li>主动的把一些元素提取成一个单独的图层（知道元素会影响其他部分，可以提取出去）</li>
</ul>
<p><strong>Position、Scale、Rotation、Opacity</strong></p>
<blockquote>
<p><a href="https://www.html5rocks.com/en/tutorials/speed/high-performance-animations/#:~:text=Modern%20browsers%20can%20animate%20four,%2C%20scale%2C%20rotation%20and%20opacity.">High Performance Animations</a></p>
</blockquote>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/jslearn-img/202203021123102.jpg"></p>
<h3 id="减少重绘"><a href="#减少重绘" class="headerlink" title="减少重绘"></a>减少重绘</h3><ul>
<li>利用 DevTools 识别 paint 的瓶颈</li>
<li>利用 will-change 创建新的图层</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> rotate &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  100% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">360deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.cardSpinning</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">animation</span>: <span class="number">3s</span> linear infinite running rotate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在 Performance 里录制动画并进行分析，放大后随便看一组，首先会重新计算样式（<code>Recalculate Style</code>）、更新图层数（<code>Update Layer Tree</code>），并没发生布局和重绘（<code>Paint</code>），直接触发复合（<code>Composite Layers</code>）</p>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/jslearn-img/202203021521334.png"></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> rotate &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  100% &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">600px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在 Network 里，键入 <code>Ctrl + Shift + P</code>，输入 <code>Show Rendering</code>，勾选 <code>Paint flashing</code>，所重绘的区域会用绿色标记出来</p>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/jslearn-img/202203021758673.png"></p>
<p>可以利用 <code>willChange</code> 属性，这样浏览器就知道这个元素应当被提取到一个单独的图层里</p>
<ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/will-change">will-change</a></li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">will-change</span>: <span class="selector-tag">transform</span>;</span><br></pre></td></tr></table></figure>

<h2 id="高频事件防抖"><a href="#高频事件防抖" class="headerlink" title="高频事件防抖"></a>高频事件防抖</h2><p>有一些事件触发频率非常高，甚至会超过帧的刷新速率，比如：<code>scroll</code>、<code>touchstart</code>、<code>touchmove</code>、<code>mousemove</code>。这些函数触发频率非常快，在 Main 函数里，可以看到事件处理函数消耗比较高，但实际上并没有必要在一帧里处理很多次，比如滚动，并不关心中心过程，只关心最后滚动到哪里，这样就可能会出现卡顿也就是抖动</p>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/jslearn-img/202203030921281.png"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 修改图片宽度</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">changeWidth</span>(<span class="params">rand</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> cards = <span class="built_in">document</span>.getElementsByClassName(<span class="string">&#x27;card&#x27;</span>)</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; cards.length; i++) &#123;</span><br><span class="line">    cards[i].style.width = (<span class="built_in">Math</span>.sin(rand / <span class="number">1000</span>) + <span class="number">1</span>) * <span class="number">500</span> + <span class="string">&#x27;px&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 利用DevTools打开时可以复现抖动的问题</span></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">&#x27;pointermove&#x27;</span>, <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> pos = e.clientX</span><br><span class="line">  changeWidth(pos)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>先看一下下一帧的生命周期</p>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/jslearn-img/202203030935502.png"></p>
<ul>
<li>事件（<code>touch</code>、<code>wheel</code>）开始触发，JS 触发视觉上的变化</li>
<li>一帧开始，rAF （<code>requestAnimationFrame</code>）调用，Layout （重新计算样式，更新图层）布局，Paint （合并图层）重绘</li>
<li>rAF 是在布局和重绘之前调用，这样可以利用 rAF 先把我们做的处理做完，之后再去进行布局和绘制，极大提高效率</li>
<li>rAF 本身是由 JavaScript 进行调度的，会尽量让你能够在每一次绘制之前去触发这个 rAF，尽量达到 60fps 的效果</li>
</ul>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/jslearn-img/202203031001205.png"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 修改图片宽度</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">changeWidth</span>(<span class="params">rand</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> cards = <span class="built_in">document</span>.getElementsByClassName(<span class="string">&#x27;card&#x27;</span>)</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; cards.length; i++) &#123;</span><br><span class="line">    cards[i].style.width = (<span class="built_in">Math</span>.sin(rand / <span class="number">1000</span>) + <span class="number">1</span>) * <span class="number">500</span> + <span class="string">&#x27;px&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> ticking = <span class="literal">false</span></span><br><span class="line"><span class="comment">// 利用DevTools打开时可以复现抖动的问题</span></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">&#x27;pointermove&#x27;</span>, <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> pos = e.clientX</span><br><span class="line">  <span class="keyword">if</span> (ticking) <span class="keyword">return</span></span><br><span class="line">  ticking = <span class="literal">true</span></span><br><span class="line">  <span class="built_in">window</span>.requestAnimationFrame(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    changeWidth(pos)</span><br><span class="line">    ticking = <span class="literal">false</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="React-时间调度实现"><a href="#React-时间调度实现" class="headerlink" title="React 时间调度实现"></a>React 时间调度实现</h2><blockquote>
<p><a href="https://juejin.cn/post/6844904196345430023">熟悉requestidlecallback到了解react ric polyfill实现</a></p>
</blockquote>
<p><strong>基本原理</strong></p>
<ul>
<li><p><code>requestIdleCallback</code> 的问题</p>
<p><code>requestIdleCallback</code> 官方给出的标准：它的执行希望在 16ms 时间内，如果还有空余时间，它可以让它做些事情，但是这个函数并没有被浏览器进行很好的支持，React 考虑到这点，是通过 rAF 模拟实现 rIC</p>
</li>
<li><p>通过 rAF 模拟 rIC</p>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/jslearn-img/202203031011358.jpg"></p>
</li>
</ul>
<p><code>requestIdleCallback </code> 在一帧关键渲染周期内，都做的事情：</p>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/jslearn-img/202203031022860.png"></p>
<ul>
<li><code>requestAnimationFrame</code> 是在 Layout 和 Paint 之前触发。在这一阵开始渲染之前执行</li>
<li><code>requestIdleCallback</code> 是在 Layout 和 Paint 之后触发。在一帧之内，如果所有事情都做完了还有剩余时间，就可以做一些其他的事情。但是这个事要有个度，因为要给主线程留更多的空余时间，因为一旦有交互过来，至少要留 50ms 给每一次交互去处理</li>
</ul>
<p><code>requestIdleCallback </code> React 里的实现：</p>
<ul>
<li>当用户不再看这个页面或页面不可见，<code>requestAnimationFrame</code> 是不会运行，React 需要借用这个函数即使在后台状态也要继续完成，所以需要找到替代方案能保证任务做完，用 setTimeout 来实现</li>
<li>作为调度函数，最关心的是所有任务，所以会给这些任务安排优先级，React 这边安排了 5个优先级，从立即可以执行到有空闲执行，另外这些任务都有过期时间，这些任务的存储肯定有一个队列，把这些队列排到队列里，然后等待 <code>requestIdleCallback</code> 有空闲时去执行，底层实现是双向环形链表</li>
</ul>
]]></content>
      <categories>
        <category>性能优化</category>
      </categories>
      <tags>
        <tag>性能优化</tag>
        <tag>关键渲染路径</tag>
        <tag>回流重绘</tag>
      </tags>
  </entry>
  <entry>
    <title>优化1.性能优化的指标和工具</title>
    <url>/posts/8f9af1b2/</url>
    <content><![CDATA[<h2 id="性能指标和优化目标"><a href="#性能指标和优化目标" class="headerlink" title="性能指标和优化目标"></a>性能指标和优化目标</h2><h3 id="Network"><a href="#Network" class="headerlink" title="Network"></a>Network</h3><p><img data-src="https://gitee.com/lilyn/pic/raw/master/jslearn-img/NetworkQueue.png"></p>
<ul>
<li><p><code>Queueing</code>：资源需要经过排队才能从浏览器发出去，浏览器会对资源请求进行优先级安排，高优先级的内容先安排进行请求</p>
</li>
<li><p><code>DNS Lookup</code>：每个资源实际上有个域名，域名最终要被翻译成 IP，然后找到这个服务器</p>
</li>
<li><p><code>initial connection</code>：找到资源之后，客户端与服务器建立链接的过程</p>
</li>
<li><p><code>SSL</code>：有的网站是 <code>https</code>，为了安全性，使用了 SSL 证书，需要进行安全性验证，过程称为 SSL 写上</p>
</li>
<li><p><code>Request sent</code>：请求发送出去</p>
</li>
<li><p><code>Waiting(TTFB)</code>：发送出去请求到资源真正回来中间的等待时间，请求发出去到请求回来经历多久的时间，如果 TTFB 高的话，相当于请求发出去了，资源一直没回来，浏览器就是白屏</p>
<p>主要影响因素：后台的处理能力，服务器响应有多快；其次是资源，发送出去请求，回来到底会不会有延时</p>
</li>
<li><p><code>Content Download</code>：下载，如果蓝条越长，资源就越大，等待的时间就越长。如果本身一直在下载，后面的资源都无法加载</p>
</li>
<li><p><code>DOMContentLoaded</code>：DOM 加载完成时间</p>
</li>
<li><p><code>Load</code>：页面上所有资源加载完成时间</p>
</li>
</ul>
<p>如果 Network 内容较多，可以先把结果保存下来，右键点击空白处，<code>Save all as HAR with content</code></p>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/jslearn-img/saveAllAsHAR.png"></p>
<h3 id="Lighthouse"><a href="#Lighthouse" class="headerlink" title="Lighthouse"></a>Lighthouse</h3><p><img data-src="https://gitee.com/lilyn/pic/raw/master/jslearn-img/lighthouse.png"></p>
<p><strong>指标</strong></p>
<ul>
<li><code>Performance</code>：性能</li>
<li><code>Accessibility</code>：可访问性</li>
<li><code>Best Practices</code>：最佳实践</li>
<li><code>SEO</code>：对搜索引擎有没有做优化</li>
<li><code>Progressive Web App(PWA)</code>：渐进式应用价值，包括离线也能给客户进行访问</li>
</ul>
<p><strong>度量（Metrics）</strong></p>
<ul>
<li><code>First Contentful Paint</code>：第一个有内容的绘制出现的时间</li>
<li><code>Speed Index</code>：速度指数，速度指数标准是 4s</li>
</ul>
<h3 id="交互体验"><a href="#交互体验" class="headerlink" title="交互体验"></a>交互体验</h3><p>在 Network 里按 <code>Ctrl + Shift + P</code>，输入 <code>frame</code>，选择下图红框</p>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/jslearn-img/showFramesPerSecond.png"></p>
<p>会在左上角出现监控</p>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/jslearn-img/FPSMeter.png"></p>
<h2 id="RAIL-测量模型"><a href="#RAIL-测量模型" class="headerlink" title="RAIL 测量模型"></a>RAIL 测量模型</h2><ul>
<li>Response 响应</li>
<li>Animation 动画</li>
<li>Idle 空闲</li>
<li>Load 加载</li>
</ul>
<p><strong>响应</strong></p>
<ul>
<li>处理事件应在 50ms 以内完成</li>
<li>用户能接受最高延时是 100ms，所以所用的用户操作，必须在 100ms 内反馈（当用户进入交互到进行输入之后一直给出反馈所经历的时间）</li>
</ul>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/jslearn-img/RAIL%E5%93%8D%E5%BA%94.png"></p>
<p><strong>动画</strong></p>
<ul>
<li>每 10ms 产生一帧</li>
<li>浏览器去获取每一帧实际上也要些时间，大概是 6ms 左右</li>
</ul>
<p><strong>空闲</strong></p>
<ul>
<li>尽可能增加空闲时间</li>
<li>如果前置时间 50ms，处理时间 50ms，那用户的交互栏根本没时间去处理，用户点击后就会感觉卡住了，后面要用到的内容利用空闲时间慢慢记载即可</li>
</ul>
<p><strong>加载</strong></p>
<ul>
<li>在 5s 内完成内容加载并可以交互</li>
<li>一个层面：要完成内容加载，这 5s 不光是加载这么简单，加载完了还要解析，解析完了还要进行渲染，所有这些时间都算在内；另一个层面：使用移动设备，网络环境可能比较差，比如使用 3G</li>
</ul>
<p><strong>性能测量工具</strong></p>
<ul>
<li><code>Chrome DevTools</code>：开发调试、性能评测</li>
<li><code>Lighthouse</code>：网站整体质量评估</li>
<li><code>WebPageTest</code>：多测试地点、全面性能报告</li>
</ul>
<h2 id="WebPageTest"><a href="#WebPageTest" class="headerlink" title="WebPageTest"></a>WebPageTest</h2><blockquote>
<p>网站：<a href="https://webpagetest.org/">WebPageTest</a></p>
</blockquote>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/jslearn-img/webpagetest.png"></p>
<ul>
<li><code>Test Loaction</code>：测试地址</li>
<li><code>Browser</code>：浏览器</li>
<li><code>Connection</code>：配置网络连接情况</li>
<li><code>Number of Tests to Run</code>：测试轮数</li>
<li><code>Repeat View</code>：结果视图，通常选择 <code>First View and Repeat View</code>，用户首次访问页面和第二次访问，通过这两个视图对比，可以看出缓存做的好不好</li>
<li><code>Capture Viedo</code>：捕捉视频，可以直观通过这个视频了解你的用户在这个指定设备访问的体验</li>
</ul>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/jslearn-img/FirstViewOrRepeatView.png"></p>
<ul>
<li><code>First Byte</code>：发出去的第一个请求，它得到响应的时间是多久，反应了后台的处理能力和网络回路的情况</li>
<li><code>Start Render</code>：首屏时间，指看到内容所需时间，而不是一直白屏</li>
<li><code>Speed Index</code>：速度指数（4s 以内）</li>
<li><code>Total Blocking Time(TBT)</code>：页面被阻塞住了，用户不能进行交互，这个时间累积有多长</li>
</ul>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/jslearn-img/waterfallView.png"></p>
<ul>
<li><code>Waterfall View</code>：点击瀑布图可以查看详细信息</li>
</ul>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/jslearn-img/waterfallViewDetail.png"></p>
<ul>
<li><code>Browser Main Thread</code>：主线程占用情况</li>
<li><code>CPU Utilization</code>：带宽、CPU 的占用情况</li>
<li>图片资源有并行同时家长，极大节约了时间</li>
<li>可能会有黄色背景的，后面标着（302），之前资源已经不再请求位置了，需要重定向才能找到真实位置，这就提示我们这个地方可以优化</li>
</ul>
<h3 id="部署-WebPageTest"><a href="#部署-WebPageTest" class="headerlink" title="部署 WebPageTest"></a>部署 WebPageTest</h3><p>Windows10 下打开 <code>Docker Desktop</code>，之后拉取镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull webpagetest/server</span><br><span class="line">docker pull webpagetest/agent</span><br></pre></td></tr></table></figure>

<p>拉取完镜像后，就可以来运行一下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d -p 4000:80 webpagetest/server</span><br><span class="line">docker run -d -p 4001:80 --network=“host” -e “SERVER_URL=http://localhost:4000/work/” -e “LOCATION=Test” webpagetest/agent</span><br></pre></td></tr></table></figure>

<p>Windows 电脑配置到这即可使用，MacOS 还需要做一些其他配置</p>
<ul>
<li>先是做 <code>Server</code> 配置</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir wpt-mac-server</span><br><span class="line"><span class="built_in">cd</span> wpt-mac-server</span><br></pre></td></tr></table></figure>

<p><code>vim Dockerfile</code> 创建文件并对其进行编辑添加如下内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">FROM webpagetest/server</span><br><span class="line">ADD locations.ini /var/www/html/settings/</span><br></pre></td></tr></table></figure>

<p><code>vim locations.ini</code> 创建文件并对其进行编辑添加如下内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[locations]</span><br><span class="line">1=Test_loc</span><br><span class="line">[Test_loc]</span><br><span class="line">1=Test</span><br><span class="line">label=Test Location</span><br><span class="line">group=Desktop</span><br><span class="line">[Test]</span><br><span class="line">browser=Chrome,Firefox</span><br><span class="line">label=<span class="string">&quot;Test Location&quot;</span></span><br><span class="line">connectivity=LAN</span><br></pre></td></tr></table></figure>

<p>本地 <code>build</code> 镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker build -t wpt-mac-server .</span><br></pre></td></tr></table></figure>

<ul>
<li>再是做 <code>Agent</code> 配置，<code>vim Dockerfile</code> 创建文件并对其进行编辑添加如下内容：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">FROM webpagetest/agent</span><br><span class="line">ADD script.sh /</span><br><span class="line">ENTRYPOINT /script.sh</span><br></pre></td></tr></table></figure>

<p><code>vim script.sh</code> 创建文件并对其进行编辑添加如下内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">set</span> -e</span><br><span class="line"><span class="keyword">if</span> [ -z <span class="string">&quot;<span class="variable">$SERVER_URL</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> &gt;&amp;2 <span class="string">&#x27;SERVER_URL not set&#x27;</span></span><br><span class="line"><span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ -z <span class="string">&quot;<span class="variable">$LOCATION</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> &gt;&amp;2 <span class="string">&#x27;LOCATION not set&#x27;</span></span><br><span class="line"><span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">EXTRA_ARGS=<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">if</span> [ -n <span class="string">&quot;<span class="variable">$NAME</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">EXTRA_ARGS=<span class="string">&quot;<span class="variable">$EXTRA_ARGS</span> --name <span class="variable">$NAME</span>&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">python /wptagent/wptagent.py --server <span class="variable">$SERVER_URL</span> --location <span class="variable">$LOCATION</span> <span class="variable">$EXTRA_ARGS</span> --xvfb --dockerized -vvvvv --shaper none</span><br></pre></td></tr></table></figure>

<p>之后给脚本添加执行权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chmod u+x script.sh</span><br></pre></td></tr></table></figure>

<p>之后本地 <code>build</code> 即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker build -t wpt-mac-agent .</span><br></pre></td></tr></table></figure>

<p>通过 <code>docker ps</code> 查看所有运行实例，<code>docker stop xxx</code> 即可停掉实例</p>
<h2 id="LightHouse"><a href="#LightHouse" class="headerlink" title="LightHouse"></a>LightHouse</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install lighthouse@6 -g</span><br><span class="line">lighthouse http://www.bilibili.com</span><br></pre></td></tr></table></figure>

<p>使用后会打开一个浏览器进行测试，测试完浏览器会自动关闭，生成 html 输出结果生成到 <code>Printer html output written: ...</code>，将地址拷贝到浏览器即可看到测试报告内容</p>
<p>下面看一下网站的性能</p>
<ul>
<li><code>First Contentful Paint</code>：第一个有内容的绘制时间</li>
<li><code>Speed Index</code>：速度指数，页面上所有可见内容多久让用户看到</li>
<li><code>Largest Contentful Paint</code>：所有可见资源里最大那个花了多久看到</li>
<li><code>Time to Interative</code>：什么时候用户可以和你的网站进行交互</li>
</ul>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/jslearn-img/202202271746741.png"></p>
<p><code>Opportunities</code> 会提供一些优化建议</p>
<ul>
<li><code>Remove unused Javascript</code>：移除没有用到的 JS</li>
<li><code>Eliminate render-blocking resources</code>：减少渲染阻塞资源，要看下这个 JS 是否可以延迟加载</li>
</ul>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/jslearn-img/202202271746098.png"></p>
<p>如何确认某一个 JS 是不是必须的，之后增加不让加载的规则比如：<code>log*.js</code>，再重新加载，发现 <code>log*.js</code> 无法加载，再去首屏内容看是否受到影响</p>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/jslearn-img/202202271807603.png"></p>
<h2 id="使用-Chrome-DevTools-分析性能"><a href="#使用-Chrome-DevTools-分析性能" class="headerlink" title="使用 Chrome DevTools 分析性能"></a>使用 Chrome DevTools 分析性能</h2><p>Network 里每个资源都有一些属性：资源名称、大小、总耗时</p>
<ul>
<li>当后台开启压缩（<code>express</code> 使用 <code>compression</code> 中间件）就可以死对网络传输资源进行压缩</li>
<li>实际大小虽然是 1.4M，单网络传输时只有 429K，大大减少了网络传输资源的大小</li>
</ul>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/jslearn-img/202202271822237.png"></p>
<p>Performance 点击实心圆开始记录，在这个过程中页面发生的一切包括你的交互，都会被记录下来，直到你点击停止之后，这段过程中发生的一切都会出一个详细的性能报告；还有一种方式是点击刷新按钮，就会刷新我们的页面，记录页面从开始刷新一直到整个所有资源加载完成这个过程所发生的一切，然后进行性能分析</p>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/jslearn-img/202202272007130.png"></p>
<ul>
<li>Main 主线程，可以看到随着时间推移，主线程都做了哪些任务。它是自上而下类似堆栈结构，每个调用关系都清晰表示出了，比如我们做个 Task，Task 里面会有一些相关的调用，一层层把我们的调用关系都列出来，一直到最后</li>
<li>Timings 关键事件节点，<code>DCL</code> 就是 DOM 加载完成时间，它发生之前都做了什么</li>
</ul>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/jslearn-img/202202272014235.png"></p>
<p>网络吞吐：可以调整我们现在的网络状态，模拟用户网络情况</p>
<ul>
<li><code>Download</code>：4G 下载速度大概在 5~12M</li>
<li><code>Upload</code>：4G 上行速度一般是 2~5M</li>
<li><code>Latency</code>：延迟需要考虑用户所在位置的信号</li>
</ul>
<h2 id="常用性能测量-APIs"><a href="#常用性能测量-APIs" class="headerlink" title="常用性能测量 APIs"></a>常用性能测量 APIs</h2><p>性能测量工具都有一些关键的时间节点，比如：TTFB、首屏，这些时间节点是通过浏览器</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// load事件后触发</span></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">&#x27;load&#x27;</span>, <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// Time to Interactive 可交互时间</span></span><br><span class="line">  <span class="keyword">let</span> timing = performance.getEntriesByType(<span class="string">&#x27;navigation&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">  <span class="comment">// 计算 tti = domInteractive - fetchStart</span></span><br><span class="line">  <span class="keyword">let</span> tti = timing.domInteractive - timing.fetchStart</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;TTI&#x27;</span>, tti)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><code>performance</code> API 一些常用时间计算规则：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// DNS 解析耗时:</span></span><br><span class="line">domainLookupEnd - domainLookupStart</span><br><span class="line"><span class="comment">// TCP 连接耗时:</span></span><br><span class="line">connectEnd - connectStart</span><br><span class="line"><span class="comment">// SSL 安全连接耗时:</span></span><br><span class="line">connectEnd - secureConnectionStart</span><br><span class="line"><span class="comment">// 网络请求耗时 (TTFB):</span></span><br><span class="line">responseStart - requestStart</span><br><span class="line"><span class="comment">// 数据传输耗时:</span></span><br><span class="line">responseEnd - responseStart</span><br><span class="line"><span class="comment">// DOM 解析耗时:</span></span><br><span class="line">domInteractive - responseEnd</span><br><span class="line"><span class="comment">// 资源加载耗时:</span></span><br><span class="line">loadEventStart - domContentLoadedEventEnd</span><br><span class="line"><span class="comment">// First Byte时间:</span></span><br><span class="line">responseStart - domainLookupStart</span><br><span class="line"><span class="comment">// 白屏时间:</span></span><br><span class="line">responseEnd - fetchStart</span><br><span class="line"><span class="comment">// 首次可交互时间:</span></span><br><span class="line">domInteractive - fetchStart</span><br><span class="line"><span class="comment">// DOM Ready 时间:</span></span><br><span class="line">domContentLoadEventEnd - fetchStart</span><br><span class="line"><span class="comment">// 页面完全加载时间:</span></span><br><span class="line">loadEventStart - fetchStart</span><br><span class="line"><span class="comment">// http 头部大小：</span></span><br><span class="line">transferSize - encodedBodySize</span><br><span class="line"><span class="comment">// 重定向次数：</span></span><br><span class="line">performance.navigation.redirectCount</span><br><span class="line"><span class="comment">// 重定向耗时:</span></span><br><span class="line">redirectEnd - redirectStart</span><br></pre></td></tr></table></figure>

<p>通过 <code>performance</code> 实时监测对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 通过PerformanceObserver得到所有long tasks对象</span></span><br><span class="line"><span class="keyword">let</span> observer = <span class="keyword">new</span> PerformanceObserver(<span class="function"><span class="params">list</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> entry <span class="keyword">of</span> list.getEntries()) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(entry)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">observer.observe(&#123; <span class="attr">entryTypes</span>: [<span class="string">&#x27;longtask&#x27;</span>] &#125;)</span><br></pre></td></tr></table></figure>

<p>加入你做的是视频网站，如果用户不再看你这个页面了，这时候需要考虑节流，不再进行视频内容的加载（可以在页面上进行 Tab 切换测试）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> vEvent = <span class="string">&#x27;visibilitychange&#x27;</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">document</span>.webkitHidden !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">  vEvent = <span class="string">&#x27;webkitvisibilitychange&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">visibilityChange</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">document</span>.hidden || <span class="built_in">document</span>.webkitHidden) &#123;</span><br><span class="line">    <span class="built_in">document</span>.title = <span class="string">&#x27;Web page is hidden&#x27;</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">document</span>.title = <span class="string">&#x27;Web page is visible&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">document</span>.addEventListener(vEvent, visibilityChange, <span class="literal">false</span>)</span><br></pre></td></tr></table></figure>

<p>如果知道用户当前网络状态，就可以有针对性资源加载。比如用户网络状态不好时使用稍微模糊的图片（去 Network 去控制网络吞吐进行测试）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> connection = navigator.connection || navigator.mozConnection</span><br><span class="line"><span class="keyword">let</span> type = connection.effectiveType</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateConnectionStatus</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;connection type changed from&#x27;</span> + type + <span class="string">&#x27;to &#x27;</span> + connection.effectiveType)</span><br><span class="line">&#125;</span><br><span class="line">connection.addEventListener(<span class="string">&#x27;change&#x27;</span>, updateConnectionStatus)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>性能优化</category>
      </categories>
      <tags>
        <tag>性能优化</tag>
        <tag>RAIL</tag>
        <tag>LightHouse</tag>
      </tags>
  </entry>
  <entry>
    <title>nvm 搭建 node 环境</title>
    <url>/posts/167dee54/</url>
    <content><![CDATA[<h2 id="使用-nvm"><a href="#使用-nvm" class="headerlink" title="使用 nvm"></a>使用 nvm</h2><blockquote>
<p>如果 GitHub 无法进入，可以参考这篇文章：<a href="https://juejin.cn/post/7024412822834511880">解决 Github 无法登录的问题</a></p>
<ul>
<li>Windows 修改 <code>C:\Windows\System32\drivers\etc</code></li>
<li>MAC 修改 <code>\etc\hosts</code></li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">140.82.113.4 github.com</span><br><span class="line">199.232.69.194 github.global.ssl.fastly.net</span><br></pre></td></tr></table></figure>
</blockquote>
<p>使用 nvm 好处：快速切换或更新 node 版本，并能保持系统干净</p>
<p><strong>安装 nvm</strong></p>
<ul>
<li><p>Mac 安装官网安装步骤操作即可：<a href="https://github.com/nvm-sh/nvm">nvm GitHub</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改 ~/.zshrc、~/.profile、~/.bashrc</span></span><br><span class="line"><span class="built_in">export</span> NVM_DIR=<span class="string">&quot;<span class="subst">$([ -z <span class="string">&quot;<span class="variable">$&#123;XDG_CONFIG_HOME-&#125;</span>&quot;</span> ] &amp;&amp; printf %s <span class="string">&quot;<span class="variable">$&#123;HOME&#125;</span>/.nvm&quot;</span> || printf %s <span class="string">&quot;<span class="variable">$&#123;XDG_CONFIG_HOME&#125;</span>/nvm&quot;</span>)</span>&quot;</span></span><br><span class="line">[ -s <span class="string">&quot;<span class="variable">$NVM_DIR</span>/nvm.sh&quot;</span> ] &amp;&amp; \. <span class="string">&quot;<span class="variable">$NVM_DIR</span>/nvm.sh&quot;</span></span><br></pre></td></tr></table></figure>

<p>或者直接在 GitHub 下载</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/creationix/nvm.git ~/.nvm</span><br><span class="line"><span class="comment"># 在 ~/.zshrc、~/.profile、~/.bashrc 添加以下命令</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;source ~/.nvm/nvm.sh&quot;</span> &gt;&gt; ~/.bashrc</span><br></pre></td></tr></table></figure>
</li>
<li><p>Windows 直接下载安装包：<a href="https://github.com/coreybutler/nvm-windows/releases">nvm-windows/releases</a></p>
</li>
</ul>
<p><strong>切换淘宝源</strong></p>
<ul>
<li><p>直接修改 nvm 安装路径中的 <code>settings.txt</code></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">node_mirror: https://npm.taobao.org/mirrors/node/</span><br><span class="line">npm_mirror: https://npm.taobao.org/mirrors/npm/</span><br></pre></td></tr></table></figure>
</li>
<li><p>或直接在命令行工具执行如下命令（查看 <code>setting.txt</code> 文件看是否修改成功）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nvm node_mirror https://npm.taobao.org/mirrors/node/</span><br><span class="line">nvm npm_mirror https://npm.taobao.org/mirrors/npm/</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><strong>nvm 常用命令</strong></p>
<ul>
<li><p><a href="https://nodejs.org/zh-cn/download/releases/">Node 以往的版本</a></p>
<p>安装前，可以去官网查一下都有哪些版本</p>
<p>虽然也可以通过 <code>nvm list available</code> 去查看，不过显示的是不完整（<code>partial </code>）的列表</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看安装 node 版本(nvm list)</span></span><br><span class="line">nvm ls</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装指定 node 版本</span></span><br><span class="line">nvm install ...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 卸载指定 node 版本</span></span><br><span class="line">nvm install ...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用对应的 node 版本（命令行工具需要是管理员）</span></span><br><span class="line">nvm use ...</span><br></pre></td></tr></table></figure>

<h2 id="更改-npm-配置"><a href="#更改-npm-配置" class="headerlink" title="更改 npm 配置"></a>更改 npm 配置</h2><ul>
<li><strong>切换淘宝源</strong></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br><span class="line"><span class="comment"># 查看下载镜像源</span></span><br><span class="line">npm config get registry</span><br></pre></td></tr></table></figure>

<ul>
<li><p><strong>修改 npm 全局安装路径</strong></p>
<p>注意：并将此目录添加到环境变量中</p>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm config set prefix &quot;D:\node\global&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看全局安装路径</span></span><br><span class="line">npm prefix -g</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>修改 npm 全局缓存路径</strong></li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm config set cache &quot;D:\node\cache&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看全局缓存路径</span></span><br><span class="line">npm config get cache</span><br></pre></td></tr></table></figure>

<ul>
<li><p><strong>修改 .npmrc 加速 c++ 库的 npm 镜像</strong></p>
<p><code>vim ~/.npmrc</code> 增加如下配置</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># init config</span></span><br><span class="line">init-author-name = lyn</span><br><span class="line">init-version = 0.1.0</span><br><span class="line">init-license = MIT</span><br><span class="line"></span><br><span class="line"><span class="comment"># mirror config</span></span><br><span class="line">sharp_dist_base_url = https://npm.taobao.org/mirrors/sharp-libvips/v8.9.1/</span><br><span class="line">profiler_binary_host_mirror = https://npm.taobao.org/mirrors/node-inspector/</span><br><span class="line">fse_binary_host_mirror = https://npm.taobao.org/mirrors/fsevents</span><br><span class="line">node_sqlite3_binary_host_mirror = https://npm.taobao.org/mirrors</span><br><span class="line">sqlite3_binary_host_mirror = https://npm.taobao.org/mirrors</span><br><span class="line">sqlite3_binary_site = https://npm.taobao.org/mirrors/sqlite3</span><br><span class="line">sass_binary_site = https://npm.taobao.org/mirrors/node-sass</span><br><span class="line">electron_mirror = https://npm.taobao.org/mirrors/electron/</span><br><span class="line">puppeteer_download_host = https://npm.taobao.org/mirrors</span><br><span class="line">chromedriver_cdnurl = https://npm.taobao.org/mirrors/chromedriver</span><br><span class="line">operadriver_cdnurl = https://npm.taobao.org/mirrors/operadriver</span><br><span class="line">phantomjs_cdnurl = https://npm.taobao.org/mirrors/phantomjs</span><br><span class="line">python_mirror = https://npm.taobao.org/mirrors/python</span><br><span class="line">registry = https://registry.npm.taobao.org/</span><br><span class="line">disturl = https://npm.taobao.org/dist</span><br></pre></td></tr></table></figure>

<h2 id="更改-yarn-配置"><a href="#更改-yarn-配置" class="headerlink" title="更改 yarn 配置"></a>更改 yarn 配置</h2><ul>
<li><p><strong>改变 yarn 全局 bin 位置(prefix)</strong></p>
<p>注意：将此目录添加到环境变量中，这样使用 <code>yarn link</code> 设置软连接就可以直接使用了</p>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yarn config set prefix &quot;C:\Users\AppData\Local\Yarn&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看 yarn 全局 bin 位置(prefix)</span></span><br><span class="line">yarn global bin</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>改变 yarn 全局安装位置(folder)</strong></li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yarn config set global-folder &quot;C:\Users\AppData\Local\Yarn&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看 yarn 全局安装位置(folder)</span></span><br><span class="line">yarn global dir</span><br></pre></td></tr></table></figure>

<ul>
<li><p><strong>改变 yarn 全局 cache 位置(cache)</strong></p>
<p>这里我只把缓存路径改了，要不然缓存的包占 C 盘太大了</p>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yarn config set cache-folder &quot;D:\node\cache&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看 yarn 全局 cache 位置(cache)</span></span><br><span class="line">yarn cache dir</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>改变 yarn 全局 link 目录</strong></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn config <span class="built_in">set</span> link-folder <span class="string">&quot;C:\Users\AppData\Local\Yarn\Data\link&quot;</span></span><br><span class="line"><span class="comment"># 查看 yarn 配置</span></span><br><span class="line">yarn config list</span><br></pre></td></tr></table></figure>

<h2 id="Mac-环境变量"><a href="#Mac-环境变量" class="headerlink" title="Mac 环境变量"></a>Mac 环境变量</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">## load nvm</span></span><br><span class="line"><span class="built_in">export</span> NVM_DIR=<span class="variable">$HOME</span>/.nvm</span><br><span class="line">[ -s $(brew --prefix nvm)/nvm.sh ] &amp;&amp; . $(brew --prefix nvm)/nvm.sh</span><br><span class="line">[ -s $(brew --prefix nvm)/bash_completion ] &amp;&amp; . $(brew --prefix nvm)/bash_completion</span><br><span class="line"></span><br><span class="line"><span class="comment">## yarn global path</span></span><br><span class="line"><span class="built_in">export</span> PATH=$(yarn global bin):<span class="variable">$PATH</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## define alias</span></span><br><span class="line"><span class="built_in">alias</span> subl=<span class="string">&quot;&#x27;/Applications/Sublime Text.app/Contents/SharedSupport/bin/subl&#x27;&quot;</span></span><br><span class="line"><span class="built_in">alias</span> code=<span class="string">&quot;&#x27;/Applications/Visual Studio Code.app/Contents/Resources/app/bin/code&#x27;&quot;</span></span><br><span class="line"><span class="built_in">alias</span> weapp=<span class="string">&quot;&#x27;/Applications/wechatwebdevtools.app/Contents/MacOS/cli&#x27;&quot;</span></span><br><span class="line"><span class="built_in">alias</span> typora=<span class="string">&quot;open -a typora&quot;</span></span><br><span class="line"><span class="built_in">alias</span> proxy=<span class="string">&quot;all_proxy=socks5://127.0.0.1:1086&quot;</span></span><br><span class="line"><span class="comment"># alias proxy=&quot;http_proxy=socks5://127.0.0.1:1086&quot;</span></span><br><span class="line"><span class="comment"># alias proxy=&quot;https_proxy=socks5://127.0.0.1:1086&quot;</span></span><br><span class="line"><span class="built_in">alias</span> reload=<span class="string">&quot;. ~/.bash_profile&quot;</span></span><br><span class="line"><span class="built_in">alias</span> reset-dock=<span class="string">&quot;defaults delete com.apple.dock; killall Dock&quot;</span></span><br><span class="line"><span class="built_in">alias</span> reset-launchpad=<span class="string">&quot;defaults write com.apple.dock ResetLaunchPad -bool true; killall Dock&quot;</span></span><br><span class="line"><span class="built_in">alias</span> show-hiddens=<span class="string">&quot;defaults write com.apple.finder AppleShowAllFiles -bool true; killall Finder&quot;</span></span><br><span class="line"><span class="built_in">alias</span> hide-hiddens=<span class="string">&quot;defaults write com.apple.finder AppleShowAllFiles -bool false; killall Finder&quot;</span></span><br><span class="line"><span class="built_in">alias</span> rm-ds=<span class="string">&quot;sudo rm -rf .DS_Store &amp;&amp; rm -rf **/.DS_Store&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## export mirrors</span></span><br><span class="line"><span class="built_in">export</span> NODEJS_ORG_MIRROR=http://npm.taobao.org/mirrors/node</span><br><span class="line"><span class="comment"># export IOJS_ORG_MIRROR=http://npm.taobao.org/mirrors/iojs</span></span><br><span class="line"><span class="built_in">export</span> NVM_NODEJS_ORG_MIRROR=<span class="variable">$NODEJS_ORG_MIRROR</span></span><br><span class="line"><span class="comment"># export NVM_IOJS_ORG_MIRROR=$IOJS_ORG_MIRROR</span></span><br></pre></td></tr></table></figure>

<h2 id="Mac-常用软件及源切换"><a href="#Mac-常用软件及源切换" class="headerlink" title="Mac 常用软件及源切换"></a>Mac 常用软件及源切换</h2><p>安装 typora 免费版本</p>
<ul>
<li><a href="https://typora.io/dev_release.html">typora</a></li>
<li><a href="https://typora.io/windows/dev_release.html">typora windows</a></li>
</ul>
<p>使用 iterm2 命令行</p>
<ul>
<li><a href="https://blog.csdn.net/u010766726/article/details/105339401/">iterm2 + oh my zsh </a></li>
</ul>
<p>下载 homebrew</p>
<ul>
<li><p>推荐使用 <a href="https://mirrors.tuna.tsinghua.edu.cn/help/homebrew/">homebrew 清华源</a> 下载</p>
</li>
<li><p><a href="https://blog.csdn.net/donaldsy/article/details/107482368">报错1：curl: (7) Failed to connect to raw.githubusercontent.com port 443: Connection refused</a></p>
</li>
<li><p>报错2:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Warning: Suspicious https://github.com/Homebrew/brew git origin remote found.</span><br><span class="line">The current git origin is:</span><br><span class="line">  https://github.com/Homebrew/homebrew-core</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/Homebrew/Library/Taps/homebrew/</span><br><span class="line">rm -rf homebrew-core</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/Homebrew/homebrew-core.git</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>修改 <code>/etc/hosts</code></p>
<ol>
<li><p>不输入密码方式 <a href="https://www.58jb.com/html/59.html">vim 强制修改root权限文件</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/hosts</span><br><span class="line">:w !sudo tee %</span><br><span class="line">L</span><br><span class="line">:q</span><br></pre></td></tr></table></figure>
</li>
<li><p>输入密码方式</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/hosts</span><br><span class="line"><span class="comment">## 输入管理员密码</span></span><br><span class="line">:wq!</span><br></pre></td></tr></table></figure>

</li>
</ol>
]]></content>
      <categories>
        <category>基础配置</category>
      </categories>
      <tags>
        <tag>AES</tag>
        <tag>nvm</tag>
        <tag>npm</tag>
        <tag>yarn</tag>
        <tag>环境变量</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue 原理（虚拟DOM、diff算法、模板编译）</title>
    <url>/posts/65e0f6f9/</url>
    <content><![CDATA[<h2 id="Vue-原理"><a href="#Vue-原理" class="headerlink" title="Vue 原理"></a>Vue 原理</h2><blockquote>
<p>其他扩展：<a href="https://blog.csdn.net/Govern66/article/details/104452545">vue面试中常见的面试题</a></p>
</blockquote>
<p><strong>原理的意义</strong></p>
<ul>
<li>知其然知其所以然——各行业通用的道理</li>
<li>了解原理，才能应用的更好</li>
<li>大厂造轮子（业务定制、技术 KPI）</li>
</ul>
<a id="more"></a>

<p><strong>如何考察</strong></p>
<ul>
<li>考察重点，而不是考察细节。掌握好 2/8 原则</li>
<li>和使用相关联的原理，例如：vdom、模板渲染</li>
<li>整体流程是否全面？热门技术是否有深度？</li>
</ul>
<p><strong>重要的原理</strong></p>
<ul>
<li>组件化</li>
<li>响应式</li>
<li>vdom 和 diff</li>
<li>模板编译</li>
<li>渲染过程</li>
<li>前端路由</li>
</ul>
<p><strong>原理题</strong></p>
<ul>
<li>为何 v-for 中要用 key</li>
<li>描述组件渲染和更新的过程</li>
<li>双向数据绑定 v-model 的实现原理</li>
</ul>
<h2 id="如何理解-MVVM"><a href="#如何理解-MVVM" class="headerlink" title="如何理解 MVVM"></a>如何理解 MVVM</h2><ul>
<li>“很久以前” 的组件化<ul>
<li>asp、jsp、php 已经有组件化了</li>
<li>nodejs 中也有类似的组件化</li>
</ul>
</li>
<li>数据驱动视图（MVVM、setState）<ul>
<li>传统组件，只是静态渲染，更新还要依赖于操作 DOM</li>
<li>数据驱动视图——Vue MVVM</li>
<li>数据驱动视图——React setState</li>
</ul>
</li>
</ul>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/jslearn-img/MVVM.png"></p>
<h2 id="Vue-响应式（数据拦截）"><a href="#Vue-响应式（数据拦截）" class="headerlink" title="Vue 响应式（数据拦截）"></a>Vue 响应式（数据拦截）</h2><blockquote>
<p>推荐文章：<a href="https://juejin.cn/post/6963079075938172936">简单手写实现Vue2.x</a></p>
</blockquote>
<ul>
<li>组件 data 数据一旦变化，立刻触发视图的更新</li>
<li>实现数据驱动视图的第一步</li>
</ul>
<h3 id="数据响应式原理"><a href="#数据响应式原理" class="headerlink" title="数据响应式原理"></a>数据响应式原理</h3><blockquote>
<p>源码级别可以参考： <a href="https://ustbhuangyi.github.io/vue-analysis/v2/reactive/reactive-object.html#object-defineproperty">Vue.js 技术揭秘——深入响应式原理</a></p>
</blockquote>
<p>在 JavaScript 的对象 Object 中有一个属性叫访问器属性，其中有 <code>[[Get]]</code> 和 <code>[[Set]]</code> 特性，它们分别是获取函数和设置函数</p>
<p><strong>核心 API</strong>：<code>Object.defineProperty</code></p>
<ul>
<li><p>存在一些问题，Vue 3.0 启动 <code>Proxy</code></p>
<p><code>Proxy</code> 可以原生支持监听数组变化</p>
<p>但是 <code>Proxy</code> 兼容性不好，且无法 <code>polyfill</code></p>
</li>
</ul>
<p><strong>问题</strong></p>
<ul>
<li>深度监听，需要递归到底，一次性计算量大</li>
<li>无法监听新增属性/删除属性（<code>Vue.set</code>、<code>Vue.delete</code>）</li>
<li>不能监听数组变化（重新定义原型，重写 <code>push</code>、<code>pop</code> 等方法）</li>
</ul>
<blockquote>
<p><code>Object.defineProperty</code> 实现响应式</p>
<ul>
<li><code>observe</code> 的功能：给非 VNode 的对象类型数据添加一个 <code>Observer</code> ，用来监听数据的变化</li>
<li><code>Observer</code> 的作用：给对象的属性添加 getter 和 setter，用来依赖收集和派发更新。对于数组会调用 <code>observeArray</code> 方法，对于对象会对对象的 key 调用 <code>defineReactive</code> 方法</li>
<li><code>defineReactive</code> 的功能：定义一个响应式对象，给对象动态添加 getter 和 setter。对子对象递归调用 <code>observe</code> 方法，这样就保证了无论 <code>obj</code> 的结构多复杂，它的所有子属性也能变成响应式的对象，这样我们访问或修改 <code>obj</code> 中一个嵌套较深的属性，也能触发 getter 和 setter</li>
<li>setter 的时候，会通知所有的订阅者</li>
<li><code>arrayMethods</code> 首先继承了 <code>Array</code>，然后对数组中的所有能改变数组自身的方法进行重写，重写后的方法会先执行它们本身原有的逻辑，然后把新添加的值</li>
</ul>
</blockquote>
<p><strong>简单实现 Vue 中的 defineReactive</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 触发更新视图</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateView</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;视图更新&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重新定义数组原型</span></span><br><span class="line"><span class="keyword">const</span> arrayProto = <span class="built_in">Array</span>.prototype</span><br><span class="line"><span class="comment">// 创建新对象，原型指向 arrayProto ，再扩展新的方法不会影响原型</span></span><br><span class="line"><span class="keyword">const</span> arrayMethods = <span class="built_in">Object</span>.create(arrayProto)</span><br><span class="line">;[<span class="string">&#x27;push&#x27;</span>, <span class="string">&#x27;pop&#x27;</span>, <span class="string">&#x27;shift&#x27;</span>, <span class="string">&#x27;unshift&#x27;</span>, <span class="string">&#x27;splice&#x27;</span>, <span class="string">&#x27;sort&#x27;</span>, <span class="string">&#x27;reverse&#x27;</span>].forEach(<span class="function"><span class="params">method</span> =&gt;</span> &#123;</span><br><span class="line">  arrayMethods[method] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    arrayProto[method].call(<span class="built_in">this</span>, ...arguments) <span class="comment">// 原始操作</span></span><br><span class="line">    updateView() <span class="comment">// 触发视图更新</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重新定义属性，监听起来</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">defineReactive</span>(<span class="params">target, key, value</span>) </span>&#123;</span><br><span class="line">  observer(value) <span class="comment">// 进行监听</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 不可枚举的不用监听</span></span><br><span class="line">  <span class="keyword">const</span> property = <span class="built_in">Object</span>.getOwnPropertyDescriptor(target, key)</span><br><span class="line">  <span class="keyword">if</span> (property &amp;&amp; property.configurable === <span class="literal">false</span>) <span class="keyword">return</span></span><br><span class="line">  <span class="built_in">Object</span>.defineProperty(target, key, &#123;</span><br><span class="line">    <span class="function"><span class="title">get</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> value</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">set</span>(<span class="params">newValue</span>)</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (newValue !== value) &#123;</span><br><span class="line">        observer(newValue) <span class="comment">// 值修改后进行监听</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// value 一直在闭包中，此处设置完之后，再 get 时也是会获取最新的值</span></span><br><span class="line">        value = newValue</span><br><span class="line">        updateView() <span class="comment">// 触发更新视图</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监测数据的变化</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">observer</span>(<span class="params">target</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 不是对象或数组（vue 是判断是否是数组、纯粹对象、可扩展对象）</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> target !== <span class="string">&#x27;object&#x27;</span> || target === <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> target</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 不要这样写，污染全局的 Array 原型</span></span><br><span class="line">  <span class="comment">/* Array.prototype.push = function () &#123;</span></span><br><span class="line"><span class="comment">      updateView()</span></span><br><span class="line"><span class="comment">  &#125; */</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(target)) &#123;</span><br><span class="line">    target.__proto__ = arrayMethods</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 重新定义各个属性（for in 也可以遍历数组）</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> target) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">Object</span>.hasOwnProperty.call(target, key)) <span class="keyword">return</span></span><br><span class="line">    defineReactive(target, key, target[key])</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> data = &#123;</span><br><span class="line">  name: <span class="string">&#x27;zhangsan&#x27;</span>,</span><br><span class="line">  age: <span class="number">20</span>,</span><br><span class="line">  info: &#123;</span><br><span class="line">    address: <span class="string">&#x27;北京&#x27;</span>, <span class="comment">// 需要深度监听</span></span><br><span class="line">  &#125;,</span><br><span class="line">  nums: [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>],</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">observer(data)</span><br><span class="line"></span><br><span class="line">data.name = <span class="string">&#x27;lisi&#x27;</span></span><br><span class="line">data.age = <span class="number">21</span></span><br><span class="line">data.info.address = <span class="string">&#x27;上海&#x27;</span> <span class="comment">// 深度监听</span></span><br><span class="line"><span class="comment">// data.x = &#x27;100&#x27; // 新增属性，监听不到 —— 所以有 Vue.set</span></span><br><span class="line"><span class="comment">// delete data.name // 删除属性，监听不到 —— 所有已 Vue.delete</span></span><br><span class="line">data.nums.push(<span class="number">4</span>) <span class="comment">// 监听数组</span></span><br></pre></td></tr></table></figure>

<h2 id="虚拟-DOM"><a href="#虚拟-DOM" class="headerlink" title="虚拟 DOM"></a>虚拟 DOM</h2><ul>
<li>DOM 操作非常耗费性能</li>
<li>以前用 jQuery，可以自行控制 DOM 操作的时机，手动调整</li>
<li>Vue 和 React 是数据驱动视图，如何有效控制 DOM 操作？</li>
</ul>
<h3 id="vdom"><a href="#vdom" class="headerlink" title="vdom"></a>vdom</h3><ul>
<li>有了一定复杂度，想减少计算次数比较难</li>
<li>能不能把计算，更多的转移为 JS 计算？因为 JS 执行速度很快</li>
<li>vdom——用 JS 模拟 DOM 结构，计算出最小的变更，操作 DOM</li>
</ul>
<p><strong>用 JS 模拟 DOM 结构</strong></p>
<ul>
<li>DOM 结构</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>vdom<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">style</span>=<span class="string">&quot;font-size: 20px;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>a<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>JS 模拟</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  tag: <span class="string">&#x27;div&#x27;</span>,</span><br><span class="line">  props: &#123;</span><br><span class="line">    className: <span class="string">&#x27;container&#x27;</span>,</span><br><span class="line">    id: <span class="string">&#x27;div1&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  children: [</span><br><span class="line">    &#123;</span><br><span class="line">      tag: <span class="string">&#x27;p&#x27;</span>,</span><br><span class="line">      children: <span class="string">&#x27;dom&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      tag: <span class="string">&#x27;ul&#x27;</span>,</span><br><span class="line">      props: &#123; <span class="attr">style</span>: <span class="string">&#x27;font-size: 20px&#x27;</span> &#125;,</span><br><span class="line">      children: [&#123; <span class="attr">tag</span>: <span class="string">&#x27;li&#x27;</span>, <span class="attr">children</span>: <span class="string">&#x27;a&#x27;</span> &#125;],</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>Vue 中的真实 DOM</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;text&quot;</span>&gt;</span>HelloWorld<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>Vue 中的虚拟 DOM</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;tag&quot;</span>: <span class="string">&quot;div&quot;</span>,                     <span class="comment">// 标签名</span></span><br><span class="line">  <span class="string">&quot;key&quot;</span>: <span class="literal">undefined</span>,                 <span class="comment">// key值</span></span><br><span class="line">  <span class="string">&quot;elm&quot;</span>: div#app,                   <span class="comment">// 真实DOM节点</span></span><br><span class="line">  <span class="string">&quot;text&quot;</span>: <span class="literal">undefined</span>,                <span class="comment">// 文本信息</span></span><br><span class="line">  <span class="string">&quot;data&quot;</span>: &#123;<span class="attr">attrs</span>: &#123;<span class="attr">id</span>:<span class="string">&quot;app&quot;</span>&#125;&#125;,      <span class="comment">// 节点属性</span></span><br><span class="line">  <span class="string">&quot;children&quot;</span>: [&#123;    	            <span class="comment">// 子节点属性</span></span><br><span class="line">    <span class="string">&quot;tag&quot;</span>: <span class="string">&quot;p&quot;</span>,</span><br><span class="line">    <span class="string">&quot;key&quot;</span>: <span class="literal">undefined</span>,</span><br><span class="line">    <span class="string">&quot;elm&quot;</span>: p.text,</span><br><span class="line">    <span class="string">&quot;text&quot;</span>: <span class="literal">undefined</span>,</span><br><span class="line">    <span class="string">&quot;data&quot;</span>: &#123;<span class="attr">attrs</span>: &#123;<span class="attr">class</span>: <span class="string">&quot;text&quot;</span>&#125;&#125;,</span><br><span class="line">    <span class="string">&quot;children&quot;</span>: [&#123;</span><br><span class="line">      <span class="string">&quot;tag&quot;</span>: <span class="literal">undefined</span>,</span><br><span class="line">      <span class="string">&quot;key&quot;</span>: <span class="literal">undefined</span>,</span><br><span class="line">      <span class="string">&quot;elm&quot;</span>: text,</span><br><span class="line">      <span class="string">&quot;text&quot;</span>: <span class="string">&quot;helloWorld&quot;</span>,</span><br><span class="line">      <span class="string">&quot;data&quot;</span>: <span class="literal">undefined</span>,</span><br><span class="line">      <span class="string">&quot;children&quot;</span>: []</span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="snabbdom-使用"><a href="#snabbdom-使用" class="headerlink" title="snabbdom 使用"></a>snabbdom 使用</h3><ul>
<li><p>通过 <strong><a href="https://github.com/snabbdom/snabbdom">snabbdom</a></strong> 学习 vdom</p>
</li>
<li><p>核心概念：h、vnode、patch、diff、key 等</p>
</li>
<li><p>vdom 价值：数据驱动视图，控制 DOM 操作</p>
<p><code>patch(elem, vnode)</code> 和 <code>patch(vnode, newVnode)</code></p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;container&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn-change&quot;</span>&gt;</span>change<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcss.com/snabbdom/0.7.3/snabbdom.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcss.com/snabbdom/0.7.3/snabbdom-class.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcss.com/snabbdom/0.7.3/snabbdom-props.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcss.com/snabbdom/0.7.3/snabbdom-style.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcss.com/snabbdom/0.7.3/snabbdom-eventlisteners.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcss.com/snabbdom/0.7.3/h.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> snabbdom = <span class="built_in">window</span>.snabbdom</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="comment">// 定义 patch</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> patch = snabbdom.init([</span></span><br><span class="line">    snabbdom_class,</span><br><span class="line">    snabbdom_props,</span><br><span class="line">    snabbdom_style,</span><br><span class="line">    snabbdom_eventlisteners,</span><br><span class="line">  ])</span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="comment">// 定义 h</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> h = snabbdom.h</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> container = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;container&#x27;</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="comment">// 生成 vnode</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> vnode = h(<span class="string">&#x27;ul#list&#x27;</span>, &#123;&#125;, [h(<span class="string">&#x27;li.item&#x27;</span>, &#123;&#125;, <span class="string">&#x27;Item 1&#x27;</span>), h(<span class="string">&#x27;li.item&#x27;</span>, &#123;&#125;, <span class="string">&#x27;Item 2&#x27;</span>)])</span></span><br><span class="line">  patch(container, vnode)</span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="built_in">document</span>.getElementById(<span class="string">&#x27;btn-change&#x27;</span>).addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 生成 newVnode</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> newVnode = h(<span class="string">&#x27;ul#list&#x27;</span>, &#123;&#125;, [</span></span><br><span class="line"><span class="javascript">      h(<span class="string">&#x27;li.item&#x27;</span>, &#123;&#125;, <span class="string">&#x27;Item 1&#x27;</span>),</span></span><br><span class="line"><span class="javascript">      h(<span class="string">&#x27;li.item&#x27;</span>, &#123;&#125;, <span class="string">&#x27;Item B&#x27;</span>),</span></span><br><span class="line"><span class="javascript">      h(<span class="string">&#x27;li.item&#x27;</span>, &#123;&#125;, <span class="string">&#x27;Item 3&#x27;</span>),</span></span><br><span class="line">    ])</span><br><span class="line">    patch(vnode, newVnode)</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>jQuery 版本</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;container&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn-change&quot;</span>&gt;</span>change<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcss.com/jquery/3.2.0/jquery.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> data = [</span></span><br><span class="line">    &#123;</span><br><span class="line"><span class="javascript">      name: <span class="string">&#x27;张三&#x27;</span>,</span></span><br><span class="line"><span class="javascript">      age: <span class="string">&#x27;20&#x27;</span>,</span></span><br><span class="line"><span class="javascript">      address: <span class="string">&#x27;北京&#x27;</span>,</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line"><span class="javascript">      name: <span class="string">&#x27;李四&#x27;</span>,</span></span><br><span class="line"><span class="javascript">      age: <span class="string">&#x27;21&#x27;</span>,</span></span><br><span class="line"><span class="javascript">      address: <span class="string">&#x27;上海&#x27;</span>,</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line"><span class="javascript">      name: <span class="string">&#x27;王五&#x27;</span>,</span></span><br><span class="line"><span class="javascript">      age: <span class="string">&#x27;22&#x27;</span>,</span></span><br><span class="line"><span class="javascript">      address: <span class="string">&#x27;广州&#x27;</span>,</span></span><br><span class="line">    &#125;,</span><br><span class="line">  ]</span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="comment">// 渲染函数</span></span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params">data</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> $container = $(<span class="string">&#x27;#container&#x27;</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">// 清空容器，重要！！！</span></span></span><br><span class="line"><span class="javascript">    $container.html(<span class="string">&#x27;&#x27;</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">// 拼接 table</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> $table = $(<span class="string">&#x27;&lt;table&gt;&#x27;</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="handlebars"><span class="xml">    $table.append($(&#x27;<span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>name<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>age<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>address<span class="tag">&lt;/<span class="name">td</span>&gt;</span>/tr&gt;&#x27;))</span></span></span><br><span class="line"><span class="javascript">    data.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span></span><br><span class="line">      $table.append(</span><br><span class="line"><span class="javascript">        $(</span></span><br><span class="line"><span class="handlebars"><span class="xml">          &#x27;<span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>&#x27; + item.name + &#x27;<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>&#x27; + item.age + &#x27;<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>&#x27; + item.address + &#x27;<span class="tag">&lt;/<span class="name">td</span>&gt;</span>/tr&gt;&#x27;</span></span></span><br><span class="line">        )</span><br><span class="line">      )</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">// 渲染到页面</span></span></span><br><span class="line">    $container.append($table)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">  $(<span class="string">&#x27;#btn-change&#x27;</span>).click(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line">    data[1].age = 30</span><br><span class="line"><span class="javascript">    data[<span class="number">2</span>].address = <span class="string">&#x27;深圳&#x27;</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// re-render  再次渲染</span></span></span><br><span class="line">    render(data)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="comment">// 页面加载完立刻执行（初次渲染）</span></span></span><br><span class="line">  render(data)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>vdom 版本</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;container&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn-change&quot;</span>&gt;</span>change<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcss.com/snabbdom/0.7.3/snabbdom.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcss.com/snabbdom/0.7.3/snabbdom-class.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcss.com/snabbdom/0.7.3/snabbdom-props.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcss.com/snabbdom/0.7.3/snabbdom-style.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcss.com/snabbdom/0.7.3/snabbdom-eventlisteners.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcss.com/snabbdom/0.7.3/h.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> snabbdom = <span class="built_in">window</span>.snabbdom</span></span><br><span class="line"><span class="javascript">  <span class="comment">// 定义关键函数 patch</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> patch = snabbdom.init([</span></span><br><span class="line">    snabbdom_class,</span><br><span class="line">    snabbdom_props,</span><br><span class="line">    snabbdom_style,</span><br><span class="line">    snabbdom_eventlisteners,</span><br><span class="line">  ])</span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="comment">// 定义关键函数 h</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> h = snabbdom.h</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="comment">// 原始数据</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> data = [</span></span><br><span class="line">    &#123;</span><br><span class="line"><span class="javascript">      name: <span class="string">&#x27;张三&#x27;</span>,</span></span><br><span class="line"><span class="javascript">      age: <span class="string">&#x27;20&#x27;</span>,</span></span><br><span class="line"><span class="javascript">      address: <span class="string">&#x27;北京&#x27;</span>,</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line"><span class="javascript">      name: <span class="string">&#x27;李四&#x27;</span>,</span></span><br><span class="line"><span class="javascript">      age: <span class="string">&#x27;21&#x27;</span>,</span></span><br><span class="line"><span class="javascript">      address: <span class="string">&#x27;上海&#x27;</span>,</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line"><span class="javascript">      name: <span class="string">&#x27;王五&#x27;</span>,</span></span><br><span class="line"><span class="javascript">      age: <span class="string">&#x27;22&#x27;</span>,</span></span><br><span class="line"><span class="javascript">      address: <span class="string">&#x27;广州&#x27;</span>,</span></span><br><span class="line">    &#125;,</span><br><span class="line">  ]</span><br><span class="line"><span class="javascript">  <span class="comment">// 把表头也放在 data 中</span></span></span><br><span class="line">  data.unshift(&#123;</span><br><span class="line"><span class="javascript">    name: <span class="string">&#x27;姓名&#x27;</span>,</span></span><br><span class="line"><span class="javascript">    age: <span class="string">&#x27;年龄&#x27;</span>,</span></span><br><span class="line"><span class="javascript">    address: <span class="string">&#x27;地址&#x27;</span>,</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> container = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;container&#x27;</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="comment">// 渲染函数</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">let</span> vnode</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params">data</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> newVnode = h(</span></span><br><span class="line"><span class="javascript">      <span class="string">&#x27;table&#x27;</span>,</span></span><br><span class="line">      &#123;&#125;,</span><br><span class="line"><span class="javascript">      data.map(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> tds = []</span></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> item) &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">if</span> (item.hasOwnProperty(i)) &#123;</span></span><br><span class="line"><span class="javascript">            tds.push(h(<span class="string">&#x27;td&#x27;</span>, &#123;&#125;, item[i] + <span class="string">&#x27;&#x27;</span>))</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> h(<span class="string">&#x27;tr&#x27;</span>, &#123;&#125;, tds)</span></span><br><span class="line">      &#125;)</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">if</span> (vnode) &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// re-render</span></span></span><br><span class="line">      patch(vnode, newVnode)</span><br><span class="line"><span class="javascript">    &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 初次渲染</span></span></span><br><span class="line">      patch(container, newVnode)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">// 存储当前的 vnode 结果</span></span></span><br><span class="line">    vnode = newVnode</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="comment">// 初次渲染</span></span></span><br><span class="line">  render(data)</span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> btnChange = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;btn-change&#x27;</span>)</span></span><br><span class="line"><span class="javascript">  btnChange.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line">    data[1].age = 30</span><br><span class="line"><span class="javascript">    data[<span class="number">2</span>].address = <span class="string">&#x27;深圳&#x27;</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// re-render</span></span></span><br><span class="line">    render(data)</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="diff-算法"><a href="#diff-算法" class="headerlink" title="diff 算法"></a>diff 算法</h2><blockquote>
<p>推荐文章：<a href="https://juejin.cn/post/6971622260490797069#refetch">图文并茂地来详细讲讲Vue Diff算法</a></p>
</blockquote>
<ul>
<li>diff 算法是 vdom 中最核心、最关键的部分</li>
<li>diff 算法能在日常使用 Vue、React 中体现出来（如：key）</li>
</ul>
<p><strong>diff 算法概述：</strong></p>
<ul>
<li>diff 即对比。是一个广泛的概念，如 linux diff 命令、git diff 等</li>
<li>两个 js 对象也可以做 diff，**<a href="https://github.com/cujojs/jiff">jiff</a>**</li>
<li>两棵树做 diff，如这里的 vdom diff</li>
</ul>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/jslearn-img/diff%E7%AE%97%E6%B3%95%E6%A6%82%E8%BF%B0.png"></p>
<p><strong>树 diff 的时间复杂度 O(n^3)</strong></p>
<ul>
<li><p>对于旧树上的点 E 来说，它要和新树上的所有点比较，复杂度为 O(n)</p>
</li>
<li><p>点 E 在新树上没有找到，点 E 会被删除，然后遍历新树上的所有点找到对应点（X）去填空，复杂度增加到 O(n^2)</p>
</li>
<li><p>这样的操作会在旧树的每个点进行，最终复杂度为 O(n^3)</p>
<p>1000 个节点，要计算 1 亿次，算法不可用</p>
</li>
</ul>
<p><strong>优化时间复杂度到 O(n)</strong></p>
<ul>
<li>只比较同一层级，不跨级比较</li>
<li>tag 不相同，则直接删掉重建，不再深度比较</li>
<li>tag 和 key，两者都相同，则认为是相同节点，不再深度比较</li>
</ul>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/jslearn-img/diff%E7%AE%97%E6%B3%95%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6.png"></p>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/jslearn-img/diff%E7%AE%97%E6%B3%95%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A62.png"></p>
<h3 id="snabbdom-源码"><a href="#snabbdom-源码" class="headerlink" title="snabbdom 源码"></a>snabbdom 源码</h3><blockquote>
<p><a href="https://github.com/snabbdom/snabbdom">snabbdom</a></p>
</blockquote>
<ul>
<li><p><code>src\h.ts</code></p>
<p>最后返回 vnode</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">h</span>(<span class="params">sel: string</span>): <span class="title">VNode</span></span>;</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">h</span>(<span class="params">sel: string, data: VNodeData | <span class="literal">null</span></span>): <span class="title">VNode</span></span>;</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">h</span>(<span class="params">sel: string, children: VNodeChildren</span>): <span class="title">VNode</span></span>;</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">h</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  sel: string,</span></span></span><br><span class="line"><span class="function"><span class="params">  data: VNodeData | <span class="literal">null</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">  children: VNodeChildren</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">VNode</span></span>;</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">h</span>(<span class="params">sel: any, b?: any, c?: any</span>): <span class="title">VNode</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="keyword">return</span> vnode(sel, data, children, text, <span class="literal">undefined</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p><code>src\vnode.ts</code></p>
<p>最后返回一个 JS 对象</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">vnode</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  sel: string | <span class="literal">undefined</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">  data: any | <span class="literal">undefined</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">  children: <span class="built_in">Array</span>&lt;VNode | string&gt; | <span class="literal">undefined</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">  text: string | <span class="literal">undefined</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">  elm: Element | DocumentFragment | Text | <span class="literal">undefined</span></span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">VNode</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> key = data === <span class="literal">undefined</span> ? <span class="literal">undefined</span> : data.key;</span><br><span class="line">  <span class="keyword">return</span> &#123; sel, data, children, text, elm, key &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p><code>src\init.ts</code></p>
<p>触发页面更新就会调用 <code>patch</code> 方法，之后我们看一下 <code>patch</code> 的源码</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">patch</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  oldVnode: VNode | Element | DocumentFragment,</span></span></span><br><span class="line"><span class="function"><span class="params">  vnode: VNode</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">VNode</span> </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> i: number, <span class="attr">elm</span>: Node, <span class="attr">parent</span>: Node;</span><br><span class="line">  <span class="keyword">const</span> insertedVnodeQueue: VNodeQueue = [];</span><br><span class="line">  <span class="comment">// 执行 pre hooks</span></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; cbs.pre.length; ++i) cbs.pre[i]();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 第一个参数不是 vnode</span></span><br><span class="line">  <span class="keyword">if</span> (isElement(api, oldVnode)) &#123;</span><br><span class="line">    <span class="comment">// 创建一个空的 vnode，关联到这个 DOM 元素</span></span><br><span class="line">    oldVnode = emptyNodeAt(oldVnode);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isDocumentFragment(api, oldVnode)) &#123;</span><br><span class="line">    oldVnode = emptyDocumentFragmentAt(oldVnode);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 相同的 vnode（key 和 sel 都相同）</span></span><br><span class="line">  <span class="keyword">if</span> (sameVnode(oldVnode, vnode)) &#123;</span><br><span class="line">    <span class="comment">// vnode 对比</span></span><br><span class="line">    patchVnode(oldVnode, vnode, insertedVnodeQueue);</span><br><span class="line">  <span class="comment">// 不同的 vnode，直接删掉重建</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    elm = oldVnode.elm!;</span><br><span class="line">    parent = api.parentNode(elm) <span class="keyword">as</span> Node;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重建</span></span><br><span class="line">    createElm(vnode, insertedVnodeQueue);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (parent !== <span class="literal">null</span>) &#123;</span><br><span class="line">      api.insertBefore(parent, vnode.elm!, api.nextSibling(elm));</span><br><span class="line">      removeVnodes(parent, [oldVnode], <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; insertedVnodeQueue.length; ++i) &#123;</span><br><span class="line">    insertedVnodeQueue[i].data!.hook!.insert!(insertedVnodeQueue[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; cbs.post.length; ++i) cbs.post[i]();</span><br><span class="line">  <span class="keyword">return</span> vnode;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>如果 <code>patch</code> 第一个参数不是 vnode，创建一个空的 vnode</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">emptyNodeAt</span>(<span class="params">elm: Element</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> id = elm.id ? <span class="string">&quot;#&quot;</span> + elm.id : <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="keyword">const</span> classes = elm.getAttribute(<span class="string">&quot;class&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> c = classes ? <span class="string">&quot;.&quot;</span> + classes.split(<span class="string">&quot; &quot;</span>).join(<span class="string">&quot;.&quot;</span>) : <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="keyword">return</span> vnode(</span><br><span class="line">    api.tagName(elm).toLowerCase() + id + c,</span><br><span class="line">    &#123;&#125;,</span><br><span class="line">    [],</span><br><span class="line">    <span class="literal">undefined</span>,</span><br><span class="line">    elm</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>比较 vnode 是否相同（比较 key 和 selector）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sameVnode</span>(<span class="params">vnode1: VNode, vnode2: VNode</span>): <span class="title">boolean</span> </span>&#123;</span><br><span class="line">  <span class="comment">// key 和 sel 或 data 都相等就是相等</span></span><br><span class="line">  <span class="keyword">const</span> isSameKey = vnode1.key === vnode2.key;</span><br><span class="line">  <span class="keyword">const</span> isSameIs = vnode1.data?.is === vnode2.data?.is;</span><br><span class="line">  <span class="keyword">const</span> isSameSel = vnode1.sel === vnode2.sel;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> isSameSel &amp;&amp; isSameKey &amp;&amp; isSameIs;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="patchVnode"><a href="#patchVnode" class="headerlink" title="patchVnode"></a>patchVnode</h3><p>vnode 相同的话执行 <code>patchVnode</code></p>
<ul>
<li>两者都有 children -&gt; 进行 children 对比，之后更新 children（updateChildren）</li>
<li>新 children 有，旧 children 无 -&gt; 清空旧 text，添加 children（addVnodes）</li>
<li>新 children 无，旧 children 有 -&gt; 移除旧 children（removeVnodes）</li>
<li>新 children 无，旧 children 无，旧 text 有  -&gt; 清空旧 text</li>
<li>新旧 text 不一样 -&gt; 移除旧 children(removeVnodes)，设置 text</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">patchVnode</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  oldVnode: VNode,</span></span></span><br><span class="line"><span class="function"><span class="params">  vnode: VNode,</span></span></span><br><span class="line"><span class="function"><span class="params">  insertedVnodeQueue: VNodeQueue</span></span></span><br><span class="line"><span class="function"><span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 执行 prepatch hook，生命周期钩子</span></span><br><span class="line">  <span class="keyword">const</span> hook = vnode.data?.hook;</span><br><span class="line">  hook?.prepatch?.(oldVnode, vnode);</span><br><span class="line">  <span class="comment">// 设置 vnode.elm</span></span><br><span class="line">  <span class="keyword">const</span> elm = (vnode.elm = oldVnode.elm)!;</span><br><span class="line">  <span class="comment">// 旧的 children</span></span><br><span class="line">  <span class="keyword">const</span> oldCh = oldVnode.children <span class="keyword">as</span> VNode[];</span><br><span class="line">  <span class="comment">// 新的 children</span></span><br><span class="line">  <span class="keyword">const</span> ch = vnode.children <span class="keyword">as</span> VNode[];</span><br><span class="line">  <span class="keyword">if</span> (oldVnode === vnode) <span class="keyword">return</span>;</span><br><span class="line">  <span class="comment">// hook 相关</span></span><br><span class="line">  <span class="keyword">if</span> (vnode.data !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; cbs.update.length; ++i)</span><br><span class="line">      cbs.update[i](oldVnode, vnode);</span><br><span class="line">    vnode.data.hook?.update?.(oldVnode, vnode);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 新的 vnode.text===undefined (vnode.children 一般有值)</span></span><br><span class="line">  <span class="keyword">if</span> (isUndef(vnode.text)) &#123;</span><br><span class="line">    <span class="comment">// 新旧都有 children</span></span><br><span class="line">    <span class="keyword">if</span> (isDef(oldCh) &amp;&amp; isDef(ch)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (oldCh !== ch) updateChildren(elm, oldCh, ch, insertedVnodeQueue);</span><br><span class="line">    <span class="comment">// 新 children 有，旧 children 无（旧 text 有）</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isDef(ch)) &#123;</span><br><span class="line">      <span class="comment">// 清空 text</span></span><br><span class="line">      <span class="keyword">if</span> (isDef(oldVnode.text)) api.setTextContent(elm, <span class="string">&quot;&quot;</span>);</span><br><span class="line">      <span class="comment">// 添加 children</span></span><br><span class="line">      addVnodes(elm, <span class="literal">null</span>, ch, <span class="number">0</span>, ch.length - <span class="number">1</span>, insertedVnodeQueue);</span><br><span class="line">    <span class="comment">// 旧 children 有，新 children 无</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isDef(oldCh)) &#123;</span><br><span class="line">      <span class="comment">// 移除 children</span></span><br><span class="line">      removeVnodes(elm, oldCh, <span class="number">0</span>, oldCh.length - <span class="number">1</span>);</span><br><span class="line">    <span class="comment">// 旧 text 有</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isDef(oldVnode.text)) &#123;</span><br><span class="line">      api.setTextContent(elm, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">// vnode.text!==undefined（vnode.children 无值）</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (oldVnode.text !== vnode.text) &#123;</span><br><span class="line">    <span class="comment">// 移除旧 children</span></span><br><span class="line">    <span class="keyword">if</span> (isDef(oldCh)) &#123;</span><br><span class="line">      removeVnodes(elm, oldCh, <span class="number">0</span>, oldCh.length - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    api.setTextContent(elm, vnode.text!);</span><br><span class="line">  &#125;</span><br><span class="line">  hook?.postpatch?.(oldVnode, vnode);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="addVnodes-removeVnodes"><a href="#addVnodes-removeVnodes" class="headerlink" title="addVnodes removeVnodes"></a>addVnodes removeVnodes</h3><ul>
<li>新增 vnode</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addVnodes</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  parentElm: Node,</span></span></span><br><span class="line"><span class="function"><span class="params">  before: Node | <span class="literal">null</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">  vnodes: VNode[],</span></span></span><br><span class="line"><span class="function"><span class="params">  startIdx: number,</span></span></span><br><span class="line"><span class="function"><span class="params">  endIdx: number,</span></span></span><br><span class="line"><span class="function"><span class="params">  insertedVnodeQueue: VNodeQueue</span></span></span><br><span class="line"><span class="function"><span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (; startIdx &lt;= endIdx; ++startIdx) &#123;</span><br><span class="line">    <span class="keyword">const</span> ch = vnodes[startIdx];</span><br><span class="line">    <span class="keyword">if</span> (ch != <span class="literal">null</span>) &#123;</span><br><span class="line">      api.insertBefore(parentElm, createElm(ch, insertedVnodeQueue), before);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>删除 vnode</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeVnodes</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  parentElm: Node,</span></span></span><br><span class="line"><span class="function"><span class="params">  vnodes: VNode[],</span></span></span><br><span class="line"><span class="function"><span class="params">  startIdx: number,</span></span></span><br><span class="line"><span class="function"><span class="params">  endIdx: number</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (; startIdx &lt;= endIdx; ++startIdx) &#123;</span><br><span class="line">    <span class="keyword">let</span> listeners: number;</span><br><span class="line">    <span class="keyword">let</span> rm: <span class="function">() =&gt;</span> <span class="keyword">void</span>;</span><br><span class="line">    <span class="keyword">const</span> ch = vnodes[startIdx];</span><br><span class="line">    <span class="keyword">if</span> (ch != <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (isDef(ch.sel)) &#123;</span><br><span class="line">        invokeDestroyHook(ch); <span class="comment">// hook操作</span></span><br><span class="line">        <span class="comment">// 移除DOM元素</span></span><br><span class="line">        listeners = cbs.remove.length + <span class="number">1</span>;</span><br><span class="line">        rm = createRmCb(ch.elm!, listeners);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; cbs.remove.length; ++i) cbs.remove[i](ch, rm);</span><br><span class="line">        <span class="keyword">const</span> removeHook = ch?.data?.hook?.remove;</span><br><span class="line">        <span class="keyword">if</span> (isDef(removeHook)) &#123;</span><br><span class="line">          removeHook(ch, rm);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          rm();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Text node</span></span><br><span class="line">        api.removeChild(parentElm, ch.elm!);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="updateChildren"><a href="#updateChildren" class="headerlink" title="updateChildren"></a>updateChildren</h3><p>新旧都有 children，会对 children 进行 updateChildren</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateChildren</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  parentElm: Node,</span></span></span><br><span class="line"><span class="function"><span class="params">  oldCh: VNode[],</span></span></span><br><span class="line"><span class="function"><span class="params">  newCh: VNode[],</span></span></span><br><span class="line"><span class="function"><span class="params">  insertedVnodeQueue: VNodeQueue</span></span></span><br><span class="line"><span class="function"><span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">while</span> (oldStartIdx &lt;= oldEndIdx &amp;&amp; newStartIdx &lt;= newEndIdx) &#123;</span><br><span class="line">    <span class="keyword">if</span> (oldStartVnode == <span class="literal">null</span>) &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line">    <span class="comment">// 开始和开始对比</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sameVnode(oldStartVnode, newStartVnode)) &#123;</span><br><span class="line">    <span class="comment">// 结束和结束对比</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sameVnode(oldEndVnode, newEndVnode)) &#123;</span><br><span class="line">    <span class="comment">// 开始和结束对比</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sameVnode(oldStartVnode, newEndVnode)) &#123;</span><br><span class="line">    <span class="comment">// 结束和开始对比</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sameVnode(oldEndVnode, newStartVnode)) &#123;</span><br><span class="line">    <span class="comment">// 以上4个都未命中</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 拿新节点的 key，能否对应上 oldCh 中的某个节点的 key</span></span><br><span class="line">      idxInOld = oldKeyToIdx[newStartVnode.key <span class="keyword">as</span> string];</span><br><span class="line">      <span class="comment">// 没对应上</span></span><br><span class="line">      <span class="keyword">if</span> (isUndef(idxInOld)) &#123;</span><br><span class="line">        <span class="comment">// New element</span></span><br><span class="line">        api.insertBefore(</span><br><span class="line">          parentElm,</span><br><span class="line">          createElm(newStartVnode, insertedVnodeQueue),</span><br><span class="line">          oldStartVnode.elm!</span><br><span class="line">        );</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 对应上 key 的节点</span></span><br><span class="line">        elmToMove = oldCh[idxInOld];</span><br><span class="line">        <span class="comment">// sel 是否相同（sameVnode 的条件）</span></span><br><span class="line">        <span class="keyword">if</span> (elmToMove.sel !== newStartVnode.sel) &#123;</span><br><span class="line">          <span class="comment">// New element</span></span><br><span class="line">          api.insertBefore(</span><br><span class="line">            parentElm,</span><br><span class="line">            createElm(newStartVnode, insertedVnodeQueue),</span><br><span class="line">            oldStartVnode.elm!</span><br><span class="line">          );</span><br><span class="line">        <span class="comment">// sel 相等，key 相等</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          patchVnode(elmToMove, newStartVnode, insertedVnodeQueue);</span><br><span class="line">          oldCh[idxInOld] = <span class="literal">undefined</span> <span class="keyword">as</span> any;</span><br><span class="line">          api.insertBefore(parentElm, elmToMove.elm!, oldStartVnode.elm!);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      newStartVnode = newCh[++newStartIdx];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img data-src="https://gitee.com/lilyn/pic/raw/master/jslearn-img/updateChildren2.png"></p>
<p>不使用 key 就会全部删掉然后插入；使用 key ，key 相同会直接移动过来，不用做销毁然后重新渲染的过程</p>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/jslearn-img/updateChildren3.png"></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>在 Vue 中，主要是 <code>patch()</code>、<code>patchVnode()</code> 和 <code>updateChildren</code> 这三个方法来实现 <code>Diff</code> 的</p>
<ul>
<li><p>当 Vue 中的响应式数据发生变化时，就会触发 <code>updateCompoent()</code></p>
</li>
<li><p><code>updateComponent()</code> 会调用 <code>patch()</code> 方法，在该方法中进行比较，调用 <code>sameVnode</code> 判断是否为相同节点（判断 <code>key</code>、<code>tag</code> 等静态属性），如果是相同节点的话执行 <code>patchVnode</code> 方法，开始比较节点差异，如果不是相同节点的话，则进行替换操作</p>
<p><code>patch()</code> 接收新旧虚拟 DOM，即 <code>oldVnode</code>、<code>vnode</code></p>
<ul>
<li>首先判断 <code>vnode</code> 是否存在，如果不存在，删除旧节点</li>
<li>如果 <code>vnode</code> 存在，再判断 <code>oldVnode</code>，如果不存在，只需新增整个 <code>vnode</code> 即可</li>
<li>如果 <code>vnode</code> 和 <code>oldVnode</code> 都存在，判断两者是不是相同节点，如果是，调用 <code>patchVnode()</code> ，对两个节点进行详细比较</li>
<li>如果两者不是相同节点，只需将 <code>vnode</code> 转换为真实 DOM 替换 <code>oldVnode</code></li>
</ul>
</li>
<li><p><code>patchVnode</code> 同样接收新旧虚拟 DOM，即 <code>oldVnode</code>、<code>vnode</code></p>
<ul>
<li>首先判断两个虚拟 DOM 是不是全等，即没有任何变动，是的话直接结束函数，否者继续执行</li>
<li>其次更新节点的属性，接着判断 <code>vnode.text</code> 是否存在，存在的话只需更新节点文本即可，否则继续执行</li>
<li>判断 <code>vnode</code> 和 <code>oldVnode</code> 是否有孩子节点<ul>
<li>如果两者都有孩子节点，执行 <code>updateChildren()</code> ，进行比较更新</li>
<li>如果 <code>vnode</code> 有孩子，<code>oldVnode</code> 没有，则直接删除所有孩子节点，并将该文本属性设为空</li>
<li>如果 <code>oldVnode</code> 有孩子，<code>vnode</code> 没有，则直接删除所有孩子节点</li>
<li>如果两者都没有孩子节点，就判断 <code>oldVnode.text</code> 是否有内容，有的话情况内容即可</li>
</ul>
</li>
</ul>
</li>
<li><p><code>updateChildren</code> 接收三个参数：<code>parentElm</code> 父级真实节点、<code>oldCh</code> 为 <code>oldVnode</code> 的孩子节点、<code>newCh</code> 为 <code>Vnode</code> 的孩子节点</p>
<p><code>oldCh</code> 和 <code>newCh</code> 都是一个数组。正常我们想到的方法就是对这两个数组一一比较，时间复杂度为 <code>O(NM)</code>。Vue 中是通过四个指针实现的</p>
<ul>
<li>首先是 <code>oldStartVnode</code> 和 <code>newStartVnode</code> 进行比较（两头比较），如果比较相同的话，就可以执行 <code>patchVnode</code></li>
<li>如果 <code>oldStartVnode</code> 和 <code>newStartVnode</code> 匹配不上的话，接下来就是 <code>oldEndVnode</code> 和 <code>newEndVnode</code> 做比较了（两尾比较）</li>
<li>如果两头和两尾比较都不是相同节点的话，就开始交叉比较，首先是 <code>oldStartVnode</code> 和 <code>newEndVnode</code> 做比较（头尾比较）</li>
<li>如果 <code>oldStartVnode</code> 和 <code>newEndVnode</code> 匹配不上的话，就 <code>oldEndVnode</code> 和 <code>newStartVnode</code> 进行比较（尾头比较）</li>
</ul>
<p>如果这四种比较方法都匹配不到相同节点，才是用暴力解法，针对 <code>newStartVnode</code> 去遍历 <code>oldCh</code> 中剩余的节点，一一匹配</p>
</li>
</ul>
<p>在 <code>sameVnode</code> 中，比较两个节点是否相同时，第一个判断条件就是 <code>vnode.key</code> ，并且在后面是用暴力解法时，第一选择也是通过 <code>key</code> 去匹配</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--  old  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>A<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>B<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>C<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--  new  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>B<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>C<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>A<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>如果没有设置 <code>key</code> 值，通过 <code>diff</code> 需要操作 DOM 次数会很多，因为 <code>key</code> 为 <code>undefined</code>，即使每个标签都是相同节点，也会一一进行替换，需要操作 3 次 DOM</p>
<p>如果分别给对应添加了 <code>key</code> 值，通过 <code>diff</code> 只需操作 1 次 DOM</p>
<blockquote>
<p>图片来源：<a href="https://juejin.cn/post/6971622260490797069#heading-2">图文并茂地来详细讲讲Vue Diff算法</a></p>
</blockquote>
<p><img data-src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d84848aa035b4472b4d3f8e4b0d708c5~tplv-k3u1fbpfcp-watermark.awebp" alt="diff.jpg"></p>
<h2 id="模板编译"><a href="#模板编译" class="headerlink" title="模板编译"></a>模板编译</h2><ul>
<li>with 语法</li>
<li>模板到 render 函数，再到 vnode，再到渲染和更新</li>
<li>vue 组件可以用 render 代替 template</li>
</ul>
<p><strong>with 语法</strong></p>
<ul>
<li>使用 <code>with</code>，能改变 <code>&#123;&#125;</code> 内自由变量的查找规则</li>
<li>如果找不到匹配的 <code>obj</code> 属性，就会报错</li>
<li>with 要慎用，它打破了作用域规则，易读性变差</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">a</span>: <span class="number">100</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(obj.a)</span><br><span class="line"><span class="built_in">console</span>.log(obj.b) <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> (obj) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a)</span><br><span class="line">  <span class="built_in">console</span>.log(b) <span class="comment">// 报错</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="vue-模板被编译成什么"><a href="#vue-模板被编译成什么" class="headerlink" title="vue 模板被编译成什么"></a>vue 模板被编译成什么</h3><ul>
<li>html 是标签语言，只有 JS 才能实现判断、循环，因此模板一定是转换为某种 JS 代码，即编译模板</li>
<li>使用 webpack <code>vue-loader</code> ，会在开发环境下编译模板</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> compiler = <span class="built_in">require</span>(<span class="string">&#x27;vue-template-compiler&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// *插值</span></span><br><span class="line"><span class="keyword">const</span> template = <span class="string">`&lt;p&gt;&#123;&#123;message&#125;&#125;&lt;/p&gt;`</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* with (this) &#123;</span></span><br><span class="line"><span class="comment">  return createElement(&#x27;p&#x27;, [createTextVNode(toString(message))])</span></span><br><span class="line"><span class="comment">&#125; */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 编译</span></span><br><span class="line"><span class="keyword">const</span> res = compiler.compile(template)</span><br><span class="line"><span class="built_in">console</span>.log(res.render)</span><br></pre></td></tr></table></figure>

<ul>
<li>三元运算符</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// *三元运算符</span></span><br><span class="line"><span class="keyword">const</span> template = <span class="string">`&lt;p&gt;&#123;&#123;flag ? message : &#x27;no message found&#x27;&#125;&#125;&lt;/p&gt;`</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> createElement(<span class="string">&#x27;p&#x27;</span>, [createTextVNode(toString(flag ? message : <span class="string">&#x27;no message found&#x27;</span>))])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>有 <code>class、id</code> 属性和动态属性</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// *属性和动态属性</span></span><br><span class="line"><span class="keyword">const</span> template = <span class="string">`</span></span><br><span class="line"><span class="string">  &lt;div id=&quot;div1&quot; class=&quot;container&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;img :src=&quot;imgUrl&quot;/&gt;</span></span><br><span class="line"><span class="string">  &lt;/div&gt;`</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> createElement(<span class="string">&#x27;div&#x27;</span>, &#123; <span class="attr">staticClass</span>: <span class="string">&#x27;container&#x27;</span>, <span class="attr">attrs</span>: &#123; <span class="attr">id</span>: <span class="string">&#x27;div1&#x27;</span> &#125; &#125;, [</span><br><span class="line">    createElement(<span class="string">&#x27;img&#x27;</span>, &#123; <span class="attr">attrs</span>: &#123; <span class="attr">src</span>: imgUrl &#125; &#125;),</span><br><span class="line">  ])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>v-if</code> 条件</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// *条件</span></span><br><span class="line"><span class="keyword">const</span> template = <span class="string">`</span></span><br><span class="line"><span class="string">  &lt;div&gt;</span></span><br><span class="line"><span class="string">    &lt;p v-if=&quot;flag === &#x27;a&#x27;&quot;&gt;A&lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;p v-else&gt;B&lt;/p&gt;</span></span><br><span class="line"><span class="string">  &lt;/div&gt;`</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> createElement(<span class="string">&#x27;div&#x27;</span>, [</span><br><span class="line">    flag === <span class="string">&#x27;a&#x27;</span></span><br><span class="line">      ? createElement(<span class="string">&#x27;p&#x27;</span>, [createTextVNode(<span class="string">&#x27;A&#x27;</span>)])</span><br><span class="line">      : createElement(<span class="string">&#x27;p&#x27;</span>, [createTextVNode(<span class="string">&#x27;B&#x27;</span>)]),</span><br><span class="line">  ])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>v-show</code> </li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// *v-show</span></span><br><span class="line"><span class="keyword">const</span> template = <span class="string">`&lt;p v-show=&quot;flag === &#x27;a&#x27;&quot;&gt;A&lt;/p&gt;`</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> createElement(</span><br><span class="line">    <span class="string">&#x27;p&#x27;</span>,</span><br><span class="line">    &#123;</span><br><span class="line">      directives: [</span><br><span class="line">        &#123; <span class="attr">name</span>: <span class="string">&#x27;show&#x27;</span>, <span class="attr">rawName</span>: <span class="string">&#x27;v-show&#x27;</span>, <span class="attr">value</span>: flag === <span class="string">&#x27;a&#x27;</span>, <span class="attr">expression</span>: <span class="string">&quot;flag === &#x27;a&#x27;&quot;</span> &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;,</span><br><span class="line">    [createTextVNode(<span class="string">&#x27;A&#x27;</span>)]</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// v-show 操作的是样式 https://github.com/vuejs/vue/blob/dev/src/platforms/web/runtime/directives/show.js</span></span><br><span class="line">bind (el: any, &#123; value &#125;: VNodeDirective, <span class="attr">vnode</span>: VNodeWithData) &#123;</span><br><span class="line">  vnode = locateNode(vnode)</span><br><span class="line">  <span class="keyword">const</span> transition = vnode.data &amp;&amp; vnode.data.transition</span><br><span class="line">  <span class="keyword">const</span> originalDisplay = el.__vOriginalDisplay =</span><br><span class="line">    el.style.display === <span class="string">&#x27;none&#x27;</span> ? <span class="string">&#x27;&#x27;</span> : el.style.display</span><br><span class="line">  <span class="keyword">if</span> (value &amp;&amp; transition) &#123;</span><br><span class="line">    vnode.data.show = <span class="literal">true</span></span><br><span class="line">    enter(vnode, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      el.style.display = originalDisplay</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    el.style.display = value ? originalDisplay : <span class="string">&#x27;none&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>v-for</code> 循环</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// *循环</span></span><br><span class="line"><span class="keyword">const</span> template = <span class="string">`</span></span><br><span class="line"><span class="string">  &lt;ul&gt;</span></span><br><span class="line"><span class="string">    &lt;li v-for=&quot;item in list&quot; :key=&quot;item.id&quot;&gt;&#123;&#123;item.title&#125;&#125;&lt;/li&gt;</span></span><br><span class="line"><span class="string">  &lt;/ul&gt;`</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> createElement(</span><br><span class="line">    <span class="string">&#x27;ul&#x27;</span>,</span><br><span class="line">    renderList(list, <span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> createElement(<span class="string">&#x27;li&#x27;</span>, &#123; <span class="attr">key</span>: item.id &#125;, [createTextVNode(toString(item.title))])</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="number">0</span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>event</code> 事件</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// *事件</span></span><br><span class="line"><span class="keyword">const</span> template = <span class="string">`&lt;button @click=&quot;clickHandler&quot;&gt;submit&lt;/button&gt;`</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> createElement(<span class="string">&#x27;button&#x27;</span>, &#123; <span class="attr">on</span>: &#123; <span class="attr">click</span>: clickHandler &#125; &#125;, [createTextVNode(<span class="string">&#x27;submit&#x27;</span>)])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>v-model</code></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// *v-model</span></span><br><span class="line"><span class="keyword">const</span> template = <span class="string">`&lt;input type=&quot;text&quot; v-model=&quot;name&quot;&gt;`</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> createElement(<span class="string">&#x27;input&#x27;</span>, &#123;</span><br><span class="line">    directives: [&#123; <span class="attr">name</span>: <span class="string">&#x27;model&#x27;</span>, <span class="attr">rawName</span>: <span class="string">&#x27;v-model&#x27;</span>, <span class="attr">value</span>: name, <span class="attr">expression</span>: <span class="string">&#x27;name&#x27;</span> &#125;],</span><br><span class="line">    attrs: &#123; <span class="attr">type</span>: <span class="string">&#x27;text&#x27;</span> &#125;,</span><br><span class="line">    domProps: &#123; <span class="attr">value</span>: name &#125;,</span><br><span class="line">    on: &#123;</span><br><span class="line">      input: <span class="function"><span class="keyword">function</span>(<span class="params">$event</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ($event.target.composing) <span class="keyword">return</span></span><br><span class="line">        name = $event.target.value</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="vue-组件使用-render-函数"><a href="#vue-组件使用-render-函数" class="headerlink" title="vue 组件使用 render 函数"></a>vue 组件使用 render 函数</h3><ul>
<li>有些复杂情况中，不能用 template，可以考虑用 render</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Vue.component(<span class="string">&#x27;heading&#x27;</span>, &#123;</span><br><span class="line">  render: <span class="function"><span class="keyword">function</span>(<span class="params">createElement</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> createElement(<span class="string">&#x27;h&#x27;</span> + <span class="built_in">this</span>.level, [</span><br><span class="line">      createElement(</span><br><span class="line">        <span class="string">&#x27;a&#x27;</span>,</span><br><span class="line">        &#123;</span><br><span class="line">          attrs: &#123;</span><br><span class="line">            name: <span class="string">&#x27;headerId&#x27;</span>,</span><br><span class="line">            href: <span class="string">&#x27;#&#x27;</span> + <span class="string">&#x27;headerId&#x27;</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&#x27;this is a tag&#x27;</span></span><br><span class="line">      ),</span><br><span class="line">    ])</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="Vue-组件渲染和更新"><a href="#Vue-组件渲染和更新" class="headerlink" title="Vue 组件渲染和更新"></a>Vue 组件渲染和更新</h2><p><strong>初次渲染过程：</strong></p>
<ul>
<li>解析模板为 <code>render</code> 函数（或在开发环境已完成，vue-loader）</li>
<li>触发响应式，监听 <code>data</code> 属性 <code>getter</code> 和 <code>setter</code></li>
<li>执行 <code>render</code> 函数，生成 <code>vnode</code>，<code>patch(elem, vnode)</code></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      message: <span class="string">&#x27;hello&#x27;</span>, <span class="comment">// 会触发get</span></span></span><br><span class="line"><span class="javascript">      city: <span class="string">&#x27;北京&#x27;</span>,     <span class="comment">// 不会触发get，因为模板没有用到，即和视图没关系</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>更新过程：</strong></p>
<ul>
<li>修改 <code>data</code>，触发 <code>setter</code>（此前在 <code>getter</code> 中已被监听）</li>
<li>重新执行 <code>render</code> 函数，生成 <code>newVnode</code></li>
<li><code>patch(vnode, newVnode)</code></li>
</ul>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/jslearn-img/vue%E6%B8%B2%E6%9F%93%E6%9B%B4%E6%96%B0%E6%B5%81%E7%A8%8B%E5%9B%BE.png"></p>
<ul>
<li>生成 <code>render</code> 函数，其生成一个 <code>vnode</code>，它会 <code>touch</code> 触发 <code>getter</code> 进行收集依赖</li>
<li>在模板中哪个被引用了就会将其用 <code>Watcher</code> 观察起来，发生了 <code>setter</code> 也会将其 <code>Watcher</code> 起来</li>
<li>如果之前已经被 <code>Watcher</code> 观察起来，发生更新进行重新渲染</li>
</ul>
<p><strong>异步渲染</strong></p>
<blockquote>
<p>源码级别可以参考：<a href="https://ustbhuangyi.github.io/vue-analysis/v2/reactive/next-tick.html">Vue.js 技术揭秘——nextTick</a></p>
</blockquote>
<ul>
<li><code>$nextTick</code></li>
<li>汇总 <code>data</code> 的修改，一次性更新视图</li>
<li>减少 DOM 操作次数，提高性能</li>
</ul>
<h2 id="前端路由原理"><a href="#前端路由原理" class="headerlink" title="前端路由原理"></a>前端路由原理</h2><h3 id="hash-路由"><a href="#hash-路由" class="headerlink" title="hash 路由"></a>hash 路由</h3><p><strong>hash 的特点：</strong></p>
<ul>
<li><code>hash</code> 变化会触发网页跳转，即浏览器的前进、后退</li>
<li><code>hash</code> 变化不会刷新页面，<code>SPA</code> 必需的特点</li>
<li><code>hash</code> 永远不会提交到 <code>server</code> 端（前端自生自灭）</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">http:<span class="comment">//127.0.0.1:5500/src/1.html?a=100&amp;b=20#/aaa/bbb/</span></span><br><span class="line">location.protocol <span class="comment">// &#x27;http:&#x27;</span></span><br><span class="line">location.hostname <span class="comment">// &#x27;127.0.0.1&#x27;</span></span><br><span class="line">location.host <span class="comment">// &#x27;127.0.0.1:5500&#x27;</span></span><br><span class="line">location.port <span class="comment">// &#x27;5500&#x27;</span></span><br><span class="line">location.pathname <span class="comment">// &#x27;/src/1.html&#x27;</span></span><br><span class="line">location.search <span class="comment">// &#x27;?a=100&amp;b=20&#x27;</span></span><br><span class="line">location.hash <span class="comment">// &#x27;#/aaa/bbb/&#x27;</span></span><br></pre></td></tr></table></figure>

<p><strong>hash 变化：</strong></p>
<ol>
<li>JS 修改 <code>url</code></li>
<li>手动修改 <code>url</code> 的 <code>hash</code></li>
<li>浏览器前进、后退</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>hash test<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn1&quot;</span>&gt;</span>修改 hash<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="built_in">window</span>.onhashchange = <span class="function"><span class="params">event</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">&#x27;old url&#x27;</span>, event.oldURL)</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">&#x27;new url&#x27;</span>, event.newURL)</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">&#x27;hash:&#x27;</span>, location.hash)</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="comment">// 页面初次加载，获取 hash</span></span></span><br><span class="line"><span class="javascript">  <span class="built_in">document</span>.addEventListener(<span class="string">&#x27;DOMContentLoaded&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">&#x27;hash:&#x27;</span>, location.hash)</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="comment">// JS 修改 url</span></span></span><br><span class="line"><span class="javascript">  <span class="built_in">document</span>.getElementById(<span class="string">&#x27;btn1&#x27;</span>).addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">    location.href = <span class="string">&#x27;#/user&#x27;</span></span></span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="history-路由"><a href="#history-路由" class="headerlink" title="history 路由"></a>history 路由</h3><ul>
<li>用 <code>url</code> 规范的路由，但跳转时不刷新页面</li>
<li>需要 <code>server</code> 端配合，可参考：<a href="https://router.vuejs.org/zh/guide/essentials/history-mode.html#%E5%90%8E%E7%AB%AF%E9%85%8D%E7%BD%AE%E4%BE%8B%E5%AD%90">后端配置例子</a></li>
<li><code>pushState</code> 不会触发 <code>hashchange</code> 事件，<code>popstate</code> 事件只会在浏览器某些行为下触发，比如点击后退、前进按钮</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>history API test<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn1&quot;</span>&gt;</span>修改 url<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="comment">// 页面初次加载，获取 path</span></span></span><br><span class="line"><span class="javascript">  <span class="built_in">document</span>.addEventListener(<span class="string">&#x27;DOMContentLoaded&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">&#x27;load&#x27;</span>, location.pathname)</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="comment">// 打开一个新的路由 【注意】用 pushState 方式，浏览器不会刷新页面</span></span></span><br><span class="line"><span class="javascript">  <span class="built_in">document</span>.getElementById(<span class="string">&#x27;btn1&#x27;</span>).addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> state = &#123; <span class="attr">name</span>: <span class="string">&#x27;page1&#x27;</span> &#125;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">&#x27;切换路由到&#x27;</span>, <span class="string">&#x27;page1&#x27;</span>)</span></span><br><span class="line"><span class="javascript">    history.pushState(state, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;page1&#x27;</span>)</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="comment">// 监听浏览器前进、后退</span></span></span><br><span class="line"><span class="javascript">  <span class="built_in">window</span>.onpopstate = <span class="function"><span class="params">event</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">&#x27;onpopstate&#x27;</span>, event.state, location.pathname)</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>两者选择</strong></p>
<ul>
<li><code>to B</code> 的系统推荐用 <code>hash</code>，简单易用，对 <code>url</code> 规范不敏感</li>
<li><code>to C</code> 的系统，可以考虑选择 <code>H5 history</code> ，但需要服务端支持</li>
<li>能选择简单的，就别用复杂的，要考虑成本和收益</li>
</ul>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>diff算法</tag>
        <tag>虚拟DOM</tag>
        <tag>模板编译</tag>
        <tag>前端路由原理</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue3 面试题</title>
    <url>/posts/5381f975/</url>
    <content><![CDATA[<h2 id="Vue3"><a href="#Vue3" class="headerlink" title="Vue3"></a>Vue3</h2><p><strong>新功能</strong></p>
<ul>
<li><p><code>createApp</code></p>
</li>
<li><p><code>emits</code> 属性</p>
</li>
<li><p>多事件处理</p>
</li>
<li><p><code>Fragment</code></p>
<p>不再限于模板中的单个根节点</p>
</li>
<li><p>移除 <code>.sync</code> 改为 <code>v-model</code> 参数</p>
</li>
<li><p>异步组件的引用方式</p>
</li>
<li><p>移除 <code>filter</code></p>
</li>
<li><p><code>Teleport</code></p>
<p>以前称为 <code>&lt;Portal&gt;</code>，译作传送门（之前都是放在 APP 里，用这个可随意放置）</p>
</li>
<li><p><code>Suspense</code></p>
<p>可以嵌套层级中等待嵌套的异步依赖项</p>
</li>
<li><p><strong>Composition API</strong></p>
<ul>
<li><p><code>reactive</code></p>
</li>
<li><p><code>ref</code>、<code>toRef</code>、<code>toRefs</code></p>
</li>
<li><p><code>readonly</code></p>
</li>
<li><p><code>computed</code></p>
</li>
<li><p><code>watch</code>、<code>watchEffect</code></p>
</li>
<li><p>钩子函数生命周期</p>
</li>
</ul>
</li>
</ul>
<a id="more"></a>

<p><strong>原理</strong></p>
<ul>
<li><p><code>Proxy</code> 实现响应式</p>
</li>
<li><p>编译优化</p>
<ul>
<li><p><code>PatchFlag</code> 静态标记</p>
</li>
<li><p><code>hoistStatic</code> 静态提升</p>
</li>
<li><p><code>cacheHandler</code> 缓存事件</p>
</li>
<li><p><code>SSR</code> 优化</p>
</li>
<li><p><code>Tree-shaking</code> 优化</p>
<p>可以将无用模块”剪辑”，仅打包需要</p>
</li>
</ul>
</li>
</ul>
<p><strong>Vite</strong></p>
<ul>
<li><code>ES6 module</code></li>
</ul>
<p><strong>面试题</strong></p>
<ul>
<li>Vue3 比 Vue2 有什么优势</li>
<li>描述 Vue3 生命周期</li>
<li>如何看待 <code>Composition API</code> 和 <code>Options API</code></li>
<li>如何理解 <code>ref</code>、<code>toRef</code> 和 <code>toRefs</code></li>
<li>Vue3 升级了哪些重要的功能</li>
<li><code>Composition API</code> 如何实现代码逻辑复用</li>
<li>Vue 如何实现响应式</li>
<li><code>watch</code> 和 <code>watchEffect</code> 的区别是什么</li>
<li><code>setup</code> 中如何获取组件实例</li>
<li>Vue3 为何比 Vue2 快</li>
<li>Vite 是什么</li>
<li><code>Composition API</code> 和 <code>React Hooks</code> 的对比</li>
</ul>
<h2 id="Vue3-比-Vue2-有什么优势"><a href="#Vue3-比-Vue2-有什么优势" class="headerlink" title="Vue3 比 Vue2 有什么优势"></a>Vue3 比 Vue2 有什么优势</h2><ul>
<li>性能更好</li>
<li>体积更小</li>
<li>更好的 TS 支持</li>
<li>更好的代码组织</li>
<li>更好的逻辑抽离</li>
<li>更多新功能</li>
</ul>
<h2 id="Vue3-生命周期"><a href="#Vue3-生命周期" class="headerlink" title="Vue3 生命周期"></a>Vue3 生命周期</h2><table>
<thead>
<tr>
<th>选项式 API</th>
<th>组合式 API</th>
</tr>
</thead>
<tbody><tr>
<td><code>beforeCreate</code></td>
<td>不需要（直接写到 <code>setup</code> 函数中）</td>
</tr>
<tr>
<td><code>created</code></td>
<td>不需要（直接写到 <code>setup</code> 函数中）</td>
</tr>
<tr>
<td><code>beforeMount</code></td>
<td><code>onBeforeMount</code></td>
</tr>
<tr>
<td><code>mounted</code></td>
<td><code>onMounted</code></td>
</tr>
<tr>
<td><code>beforeUpdate</code></td>
<td><code>onBeforeUpdate</code></td>
</tr>
<tr>
<td><code>updated</code></td>
<td><code>onUpdated</code></td>
</tr>
<tr>
<td><code>beforeDestroy</code> Vue 3：<code>beforeUnmount</code></td>
<td><code>onBeforeUnmount</code></td>
</tr>
<tr>
<td><code>destroyed</code> Vue 3： <code>unmounted</code></td>
<td><code>onUnmounted</code></td>
</tr>
<tr>
<td><code>errorCaptured</code></td>
<td><code>onErrorCaptured</code></td>
</tr>
<tr>
<td><code>activated</code></td>
<td><code>onActivated</code></td>
</tr>
<tr>
<td><code>deactivated</code></td>
<td><code>onDeactivated</code></td>
</tr>
</tbody></table>
<h2 id="composition-VS-options"><a href="#composition-VS-options" class="headerlink" title="composition VS options"></a>composition VS options</h2><p><code>composition API</code> 优点：</p>
<ul>
<li>更好的代码组织</li>
<li>更好的逻辑复用</li>
<li>更好的类型推导</li>
</ul>
<p>如何选择：</p>
<ul>
<li>不建议共用，会引起混乱</li>
<li>小型项目，业务逻辑简单，用 <code>Options API</code></li>
<li>中大型项目，逻辑复杂，用 <code>Composition API</code></li>
</ul>
<p><strong>选项式 API</strong>（<code>Options API</code>）</p>
<ul>
<li>所有方法都写在 <code>methods</code> 中，如果 <code>data</code> 中数据越来越多，找数据会非常困难</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span> @<span class="attr">click</span>=<span class="string">&quot;changeCount&quot;</span>&gt;</span>&#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  name: <span class="string">&#x27;App&#x27;</span>,</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line">      count: 0,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">changeCount</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.count++</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>组合式 API</strong>（<code>Composition API</code>）</p>
<ul>
<li>逻辑会清晰，可以让功能的代码集中抽取到一个函数中进行逻辑复用</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span> @<span class="attr">click</span>=<span class="string">&quot;changeNum&quot;</span>&gt;</span>&#123;&#123; num &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">useNum</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> num = ref(<span class="number">0</span>)</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="keyword">function</span> <span class="title">changeNum</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line">    num.value++</span><br><span class="line">  &#125;</span><br><span class="line"><span class="javascript">  <span class="keyword">return</span> &#123; changeNum, num &#125;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  name: <span class="string">&#x27;App&#x27;</span>,</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> &#123; changeNum, num &#125; = useNum()</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line">      changeNum,</span><br><span class="line">      num,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="如何理解-ref-toRef-和-toRefs"><a href="#如何理解-ref-toRef-和-toRefs" class="headerlink" title="如何理解 ref toRef 和 toRefs"></a>如何理解 ref toRef 和 toRefs</h2><h3 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h3><ul>
<li>生成值类型的响应式数据</li>
<li>可用于模板和 <code>reactive</code></li>
<li>通过 <code>.value</code> 修改值</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>值类型响应式：&#123;&#123; ageRef &#125;&#125; &#123;&#123; state.name &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">ref</span>=<span class="string">&quot;elemRef&quot;</span>&gt;</span>templateRef<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123; ref, reactive, onMounted &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  name: <span class="string">&#x27;Ref&#x27;</span>,</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> ageRef = ref(<span class="number">20</span>)</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> nameRef = ref(<span class="string">&#x27;cat&#x27;</span>)</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> elemRef = ref(<span class="string">&#x27;elemRef&#x27;</span>)</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> state = reactive(&#123;</span></span><br><span class="line">      name: nameRef,</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">      ageRef.value = <span class="number">30</span> <span class="comment">// .value 修改值</span></span></span><br><span class="line"><span class="javascript">      nameRef.value = <span class="string">&#x27;dog&#x27;</span></span></span><br><span class="line">    &#125;, 1500)</span><br><span class="line"></span><br><span class="line"><span class="javascript">    onMounted(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(elemRef.value)</span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line">      ageRef,</span><br><span class="line">      state,</span><br><span class="line">      elemRef,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="toRef"><a href="#toRef" class="headerlink" title="toRef"></a>toRef</h3><ul>
<li>针对一个响应式对象（<code>reactive</code> 封装）的 <code>prop</code></li>
<li>创建一个 <code>ref</code>，具有响应式</li>
<li>两者保持引用关系</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; ageRef &#125;&#125; &#123;&#123; state.age &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123; toRef, reactive &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  name: <span class="string">&#x27;ToRef&#x27;</span>,</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> state = reactive(&#123;</span></span><br><span class="line">      age: 20,</span><br><span class="line"><span class="javascript">      name: <span class="string">&#x27;cat&#x27;</span>,</span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> ageRef = toRef(state, <span class="string">&#x27;age&#x27;</span>)</span></span><br><span class="line"><span class="javascript">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line">      state.age = 25</span><br><span class="line">    &#125;, 1000)</span><br><span class="line"><span class="javascript">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line">      ageRef.value = 30</span><br><span class="line">    &#125;, 3000)</span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123; state, ageRef &#125;</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>toRef</code> 如果用于普通对象（非响应式对象），产出的结果不具备响应式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">  age: <span class="number">20</span>,</span><br><span class="line">  name: <span class="string">&#x27;cat&#x27;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="toRefs"><a href="#toRefs" class="headerlink" title="toRefs"></a>toRefs</h3><ul>
<li>将响应式对象（<code>reactive</code> 封装）转换为普通对象</li>
<li>对象的每个 <code>prop</code> 都是对应的 <code>ref</code></li>
<li>两者保持引用关系</li>
</ul>
<p>注意：直接解构 <code>state</code> ，页面能显示到但结果不是响应式的</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; age &#125;&#125; &#123;&#123; name &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123; toRefs, reactive &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  name: <span class="string">&#x27;ToRef&#x27;</span>,</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> state = reactive(&#123;</span></span><br><span class="line">      age: 20,</span><br><span class="line"><span class="javascript">      name: <span class="string">&#x27;cat&#x27;</span>,</span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    <span class="comment">// 将响应式对象，变为普通对象</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> stateAsRefs = toRefs(state)</span></span><br><span class="line"><span class="javascript">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line">      state.age = 25</span><br><span class="line">    &#125;, 1000)</span><br><span class="line"><span class="javascript">    <span class="comment">// const &#123; age: ageRef, name: nameRef &#125; = stateAsRefs</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123; ...stateAsRefs &#125;</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="ref-toRef-和-toRefs的最佳使用方式"><a href="#ref-toRef-和-toRefs的最佳使用方式" class="headerlink" title="ref toRef 和 toRefs的最佳使用方式"></a>ref toRef 和 toRefs的最佳使用方式</h3><ol>
<li><p>用 <code>reactive</code> 做对象的响应式，用 <code>ref</code> 做值类型响应式</p>
<p><code>setup</code> 中返回 <code>toRefs(state)</code> 或者 <code>toRef(state, &#39;xxx&#39;)</code></p>
<p><code>ref</code> 的变量命名都用 <code>xxxRef</code></p>
</li>
<li><p>合成函数返回响应式对象，使用 <code>toRefs</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">useFeatureX</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> state = reactive(&#123;</span><br><span class="line">    x: <span class="number">1</span>,</span><br><span class="line">    y: <span class="number">2</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> toRefs(state)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  name: <span class="string">&#x27;WhyRef&#x27;</span>,</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; x, y &#125; = useFeatureX()</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      x,</span><br><span class="line">      y</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="为何需要-ref"><a href="#为何需要-ref" class="headerlink" title="为何需要 ref"></a>为何需要 ref</h3><ul>
<li><p>返回值类型，会丢失响应式</p>
<p>在 <code>setup</code>、<code>computed</code>、合成函数，都有可能返回值类型</p>
<p>Vue 如不定义 <code>ref</code>，用户将自造 <code>ref</code>，反而混乱</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; age &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; age1 &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123; reactive, computed &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  name: <span class="string">&#x27;WhyRef&#x27;</span>,</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> state = reactive(&#123;</span></span><br><span class="line">      age: 20,</span><br><span class="line"><span class="javascript">      name: <span class="string">&#x27;dog&#x27;</span>,</span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    <span class="comment">// computed返回的是一个类似于ref的对象，也有.value</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> age1 = computed(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> state.age + <span class="number">1</span></span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line">      state.age = 25</span><br><span class="line">    &#125;, 1000)</span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      ...state, <span class="comment">// 这样不是响应式的</span></span></span><br><span class="line">      age1,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="为何需要-value"><a href="#为何需要-value" class="headerlink" title="为何需要 .value"></a>为何需要 .value</h3><ul>
<li><code>ref</code> 是一个对象（不丢失响应式），<code>value</code> 存储值</li>
<li>通过 <code>.value</code> 属性的 <code>get</code> 和 <code>set</code> 实现响应式</li>
<li>用于模板、<code>reactive</code> 时，不需要 <code>.value</code>，其他情况都需要</li>
</ul>
<p>简单理解 <code>computed</code> 运算逻辑</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 错误</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">computed</span>(<span class="params">getter</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> value</span><br><span class="line">  watchEffect(<span class="function">() =&gt;</span> &#123; <span class="comment">// 可以改为setTimeout进行模拟测试</span></span><br><span class="line">    value = getter()</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> value</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">computed</span>(<span class="params">getter</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> ref = &#123;</span><br><span class="line">    value: <span class="literal">null</span>,</span><br><span class="line">  &#125;</span><br><span class="line">  watchEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    ref.value = getter()</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> ref</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="为何需要-toRef-和-toRefs"><a href="#为何需要-toRef-和-toRefs" class="headerlink" title="为何需要 toRef 和 toRefs"></a>为何需要 toRef 和 toRefs</h3><ul>
<li>初衷：不丢失响应式的情况下，把对象数据 <strong>分解/扩展</strong></li>
<li>前提：针对的是响应式对象（<code>reactive</code> 封装）非普通对象</li>
<li>注意：<strong>不创造</strong> 响应式，而是 <strong>延续</strong> 响应式</li>
</ul>
<h2 id="Vue3-升级了哪些重要功能"><a href="#Vue3-升级了哪些重要功能" class="headerlink" title="Vue3 升级了哪些重要功能"></a>Vue3 升级了哪些重要功能</h2><blockquote>
<p><a href="https://v3.cn.vuejs.org/">Vue3 官网</a></p>
</blockquote>
<ul>
<li><code>createApp</code></li>
<li><code>emits</code> 属性</li>
<li>生命周期</li>
<li>多事件</li>
<li><code>Fragment</code></li>
<li>移除 <code>.sync</code></li>
<li>异步组件的写法</li>
<li>移除 <code>filter</code></li>
<li><code>Teleport</code></li>
<li><code>Suspense</code></li>
<li><code>Composition API</code></li>
</ul>
<h3 id="createApp"><a href="#createApp" class="headerlink" title="createApp"></a>createApp</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// vue2.x</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123; <span class="comment">/* ... */</span> &#125;)</span><br><span class="line">Vue.use(<span class="comment">/* ... */</span>)</span><br><span class="line">Vue.mixin(<span class="comment">/* ... */</span>)</span><br><span class="line">Vue.component(<span class="comment">/* ... */</span>)</span><br><span class="line">Vue.directive(<span class="comment">/* ... */</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// vue3</span></span><br><span class="line"><span class="keyword">const</span> app = Vue.createApp(&#123; <span class="comment">/* ... */</span> &#125;)</span><br><span class="line">app.use(<span class="comment">/* ... */</span>)</span><br><span class="line">app.mixin(<span class="comment">/* ... */</span>)</span><br><span class="line">app.component(<span class="comment">/* ... */</span>)</span><br><span class="line">app.directive(<span class="comment">/* ... */</span>)</span><br></pre></td></tr></table></figure>

<h3 id="emits-属性"><a href="#emits-属性" class="headerlink" title="emits 属性"></a>emits 属性</h3><ul>
<li>父组件</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">son</span> <span class="attr">:msg</span>=<span class="string">&quot;msg&quot;</span> @<span class="attr">onSayHello</span>=<span class="string">&quot;sayHello&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> Son <span class="keyword">from</span> <span class="string">&#x27;./views/Son.vue&#x27;</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">  components: &#123; Son &#125;,</span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      msg: <span class="string">&#x27;hello vue3&#x27;</span>,</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">sayHello</span>(<span class="params">info</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">&#x27;hello&#x27;</span>, info)</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>子组件</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">  props: &#123;</span><br><span class="line"><span class="javascript">    msg: <span class="built_in">String</span>,</span></span><br><span class="line">  &#125;,</span><br><span class="line"><span class="javascript">  emits: [<span class="string">&#x27;onSayHello&#x27;</span>],</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">setup</span>(<span class="params">props, &#123; emit &#125;</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">    emit(<span class="string">&#x27;onSayHello&#x27;</span>, <span class="string">&#x27;vue3&#x27;</span>)</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="多事件处理"><a href="#多事件处理" class="headerlink" title="多事件处理"></a>多事件处理</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;one($event), two($event)&quot;</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="Fragment"><a href="#Fragment" class="headerlink" title="Fragment"></a>Fragment</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- vue2.x组件模板 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; content &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- vue3组件模板 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; content &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="移除-sync"><a href="#移除-sync" class="headerlink" title="移除 .sync"></a>移除 .sync</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- vue2.x --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">MyComponent</span> <span class="attr">:title.sync</span>=<span class="string">&quot;title&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- vue3.x --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">MyComponent</span> <span class="attr">v-model:title</span>=<span class="string">&quot;title&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="异步组件"><a href="#异步组件" class="headerlink" title="异步组件"></a>异步组件</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// vue2.x</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    <span class="string">&#x27;my-component&#x27;</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;./async-com.vue&#x27;</span>),</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// vue3.x</span></span><br><span class="line"><span class="keyword">import</span> &#123; createApp, defineAsyncComponent &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line">createApp(&#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    AsyncComponent: defineAsyncComponent(<span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;./async-com.vue&#x27;</span>)),</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="移除-filter"><a href="#移除-filter" class="headerlink" title="移除 filter"></a>移除 filter</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- vue2.x --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; message | capitalize &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- vue3.x --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:id</span>=<span class="string">&quot;rawId | formatId&quot;</span>&gt;</span>/div&gt;</span><br></pre></td></tr></table></figure>

<h3 id="Teleport"><a href="#Teleport" class="headerlink" title="Teleport"></a>Teleport</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;modalOpen = true&quot;</span>&gt;</span>Open full screen modal!<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">teleport</span> <span class="attr">to</span>=<span class="string">&quot;body&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;modalOpen&quot;</span> <span class="attr">class</span>=<span class="string">&quot;modal&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      telePort 弹窗（父元素是 body）</span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;modalOpen = false&quot;</span>&gt;</span>Close<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">teleport</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="Suspense"><a href="#Suspense" class="headerlink" title="Suspense"></a>Suspense</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Suspense</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 是一个异步组件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Test1</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- #fallback 就是一个具名插槽。即Suspense组件内部，有两个slot，其中一个具名为fallback --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> #<span class="attr">fallback</span>&gt;</span> Loading.. <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Suspense</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="Composition-API"><a href="#Composition-API" class="headerlink" title="Composition API"></a>Composition API</h3><ul>
<li><code>reactive</code></li>
<li><code>ref</code> 相关</li>
<li><code>readonly</code></li>
<li><code>watch</code> 和 <code>watchEffect</code></li>
<li><code>setup</code></li>
<li>生命周期钩子函数</li>
</ul>
<h2 id="Composition-API-实现逻辑复用"><a href="#Composition-API-实现逻辑复用" class="headerlink" title="Composition API 实现逻辑复用"></a>Composition API 实现逻辑复用</h2><ul>
<li>抽离逻辑代码到一个函数</li>
<li>函数命名约定为 <code>useXxx</code> 格式（React Hooks 也是）</li>
<li>在 <code>setup</code> 中引用 <code>useXxx</code> 函数</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>mouse position &#123;&#123; x &#125;&#125; &#123;&#123; y &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> useMousePosition <span class="keyword">from</span> <span class="string">&#x27;./useMousePosition&#x27;</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  name: <span class="string">&#x27;MousePosition&#x27;</span>,</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> &#123; x, y &#125; = useMousePosition()</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line">      x,</span><br><span class="line">      y,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>useMousePosition.js</code></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref, onMounted, onUnmounted &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">useMousePosition</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> x = ref(<span class="number">0</span>)</span><br><span class="line">  <span class="keyword">const</span> y = ref(<span class="number">0</span>)</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">update</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    x.value = e.pageX</span><br><span class="line">    y.value = e.pageY</span><br><span class="line">  &#125;</span><br><span class="line">  onMounted(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">&#x27;mousemove&#x27;</span>, update)</span><br><span class="line">  &#125;)</span><br><span class="line">  onUnmounted(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">window</span>.removeEventListener(<span class="string">&#x27;mousemove&#x27;</span>, update)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> &#123; x, y &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> useMousePosition</span><br></pre></td></tr></table></figure>

<p>如果不使用 <code>ref</code> 使用 <code>reactive</code>，需要将整个 <code>reactive</code> 暴露出去。在父组件接收的时候不能直接解构，否则会失去响应式</p>
<h2 id="Vue3-如何实现响应式"><a href="#Vue3-如何实现响应式" class="headerlink" title="Vue3 如何实现响应式"></a>Vue3 如何实现响应式</h2><p><code>Object.defineProperty</code> 的缺点：</p>
<ul>
<li>深度监听需要一次性递归</li>
<li>无法监听新增属性/删除属性（<code>Vue.set</code>、<code>Vue.delete</code>）</li>
<li>无法原生监听数组，需要特殊处理</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Object</span>.defineProperty(target, key, &#123;</span><br><span class="line">  <span class="function"><span class="title">get</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> value</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">set</span>(<span class="params">newValue</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (newValue !== value) &#123;</span><br><span class="line">      observer(newValue) <span class="comment">// 值修改后进行监听</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// value 一直在闭包中，此处设置完之后，再 get 时也是会获取最新的值</span></span><br><span class="line">      value = newValue</span><br><span class="line">      updateView() <span class="comment">// 触发更新视图</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><code>Proxy</code> 实现响应式优点</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 测试数据</span></span><br><span class="line"><span class="keyword">const</span> data = &#123;</span><br><span class="line">  name: <span class="string">&#x27;bird&#x27;</span>,</span><br><span class="line">  age: <span class="number">20</span>,</span><br><span class="line">  info: &#123;</span><br><span class="line">    city: <span class="string">&#x27;beijing&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reactive</span>(<span class="params">target = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> target !== <span class="string">&#x27;object&#x27;</span> || target == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="comment">// 不是对象或数组，则返回</span></span><br><span class="line">    <span class="keyword">return</span> target</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 代理配置</span></span><br><span class="line">  <span class="keyword">const</span> proxyConf = &#123;</span><br><span class="line">    <span class="function"><span class="title">get</span>(<span class="params">target, key, receiver</span>)</span> &#123;</span><br><span class="line">      <span class="comment">// 只处本身（非原型）属性</span></span><br><span class="line">      <span class="keyword">const</span> ownKeys = <span class="built_in">Reflect</span>.ownKeys(target)</span><br><span class="line">      <span class="keyword">if</span> (ownKeys.includes(key)) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;get&#x27;</span>, key) <span class="comment">// 监听</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">const</span> result = <span class="built_in">Reflect</span>.get(target, key, receiver)</span><br><span class="line">      <span class="comment">// 惰性深度监听。什么时候用什么时候监听</span></span><br><span class="line">      <span class="keyword">return</span> reactive(result) <span class="comment">// 返回结果</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">set</span>(<span class="params">target, key, val, receiver</span>)</span> &#123;</span><br><span class="line">      <span class="comment">// 重复的数据，不处理</span></span><br><span class="line">      <span class="keyword">if</span> (val === target[key]) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">const</span> ownKeys = <span class="built_in">Reflect</span>.ownKeys(target)</span><br><span class="line">      <span class="keyword">if</span> (ownKeys.includes(key)) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;已有的key&#x27;</span>, key)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;新增的key&#x27;</span>, key)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">const</span> result = <span class="built_in">Reflect</span>.set(target, key, val, receiver)</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;set&#x27;</span>, key, val)</span><br><span class="line">      <span class="keyword">return</span> result <span class="comment">// 是否设置成功</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">deleteProperty</span>(<span class="params">target, key</span>)</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> result = <span class="built_in">Reflect</span>.deleteProperty(target, key)</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;delete property&#x27;</span>, key)</span><br><span class="line">      <span class="keyword">return</span> result <span class="comment">// 是否删除成功</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 生成代理对象</span></span><br><span class="line">  <span class="keyword">const</span> observed = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, proxyConf)</span><br><span class="line">  <span class="keyword">return</span> observed</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> proxyData = reactive(data)</span><br></pre></td></tr></table></figure>

<p><code>Reflect</code> 的作用：</p>
<ul>
<li><p>和 <code>Proxy</code> 能力一一对应</p>
</li>
<li><p>规范化、标准化、函数式</p>
<p><code>&#39;a&#39; in obj</code> -&gt; <code>Reflect.has(obj, &#39;a&#39;)</code></p>
<p><code>delete obj.b</code> -&gt; <code>Reflect.deleteProperty(obj, &#39;b&#39;)</code></p>
</li>
<li><p>替代 <code>Object</code> 上的工具函数</p>
<p><code>Object.getOwnPropertyNames(obj)</code> -&gt; <code>Reflect.ownKeys(obj)</code></p>
</li>
</ul>
<p><strong>总结</strong></p>
<ul>
<li><code>Proxy</code> 能规避 <code>Object.defineProperty</code> 的问题</li>
<li><code>Proxy</code> 无法兼容所有浏览器，无法 <code>polyfill</code></li>
</ul>
<h2 id="v-model-参数用法"><a href="#v-model-参数用法" class="headerlink" title="v-model 参数用法"></a>v-model 参数用法</h2><p>Vue2 的 <code>.sync</code> 修饰符</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">text-document</span> <span class="attr">v-bind:title.sync</span>=<span class="string">&quot;doc.title&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 语法糖 --&gt;</span></span><br><span class="line">&lt;text-document</span><br><span class="line">  v-bind:title=&quot;doc.title&quot;</span><br><span class="line">  v-on:update:title=&quot;doc.title = $event&quot;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure>

<p>Vue3 的 <code>v-model</code> </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ChildComponent</span> <span class="attr">:title.sync</span>=<span class="string">&quot;pageTitle&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 替换为 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ChildComponent</span> <span class="attr">v-model:title</span>=<span class="string">&quot;pageTitle&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>v-model</code> 相当于传递了 <code>modelValue</code> prop 并接受抛出的 <code>update:modelValue</code> 事件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; name &#125;&#125; &#123;&#123; age &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">user-info</span> <span class="attr">v-model:name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">v-model:age</span>=<span class="string">&quot;age&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123; reactive, toRefs &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> UserInfo <span class="keyword">from</span> <span class="string">&#x27;./UserInfo.vue&#x27;</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">  components: &#123; UserInfo &#125;,</span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> state = reactive(&#123;</span></span><br><span class="line"><span class="javascript">      name: <span class="string">&#x27;bird&#x27;</span>,</span></span><br><span class="line"><span class="javascript">      age: <span class="string">&#x27;20&#x27;</span>,</span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> toRefs(state)</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>UserInfo.vue</code></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">:value</span>=<span class="string">&quot;name&quot;</span> @<span class="attr">input</span>=<span class="string">&quot;$emit(&#x27;update:name&#x27;, $event.target.value)&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">:value</span>=<span class="string">&quot;age&quot;</span> @<span class="attr">input</span>=<span class="string">&quot;$emit(&#x27;update:age&#x27;, $event.target.value)&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">  props: &#123;</span><br><span class="line"><span class="javascript">    name: <span class="built_in">String</span>,</span></span><br><span class="line"><span class="javascript">    age: <span class="built_in">String</span>,</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="watch-和-watchEffect-的区别"><a href="#watch-和-watchEffect-的区别" class="headerlink" title="watch 和 watchEffect 的区别"></a>watch 和 watchEffect 的区别</h2><ul>
<li><p>两者都可监听 <code>data</code> 属性变化</p>
</li>
<li><p><code>watch</code> 需要明确监听哪个属性</p>
<p>默认是惰性执行，监听源可以是一个具有返回值的 <code>getter</code> 函数，也可以直接是一个 <code>ref</code></p>
</li>
<li><p><code>watchEffect</code> 会根据其中的属性，自动监听其变化</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; numberRef &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; name &#125;&#125; &#123;&#123; age &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123; reactive, toRefs, ref, watch, watchEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> numberRef = ref(<span class="number">10</span>)</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> state = reactive(&#123;</span></span><br><span class="line"><span class="javascript">      name: <span class="string">&#x27;bird&#x27;</span>,</span></span><br><span class="line">      age: 20,</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    watchEffect(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 初始化时，一定会执行一次（收集需要监听的数据）</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">&#x27;watchEffect&#x27;</span>, state.age)</span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    watchEffect(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">&#x27;watchEffect&#x27;</span>, numberRef)</span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    <span class="comment">// watch监听ref属性</span></span></span><br><span class="line"><span class="javascript">    watch(numberRef, <span class="function">(<span class="params">newNum, oldNum</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">&#x27;ref watch&#x27;</span>, newNum, oldNum)</span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    <span class="comment">// watch监听state属性</span></span></span><br><span class="line">    watch(</span><br><span class="line"><span class="javascript">      <span class="comment">// 1.确定监听哪个属性</span></span></span><br><span class="line">      () =&gt; state.age,</span><br><span class="line"><span class="javascript">      <span class="comment">// 2.回调函数</span></span></span><br><span class="line">      (newState, oldState) =&gt; &#123;</span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&#x27;state watch&#x27;</span>, newState, oldState)</span></span><br><span class="line">      &#125;,</span><br><span class="line"><span class="javascript">      <span class="comment">// 3.配置项</span></span></span><br><span class="line">      &#123;</span><br><span class="line"><span class="javascript">        immediate: <span class="literal">true</span>, <span class="comment">// 初始化之前就监听</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// deep: true // 深度监听</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line"><span class="javascript">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line">      numberRef.value = 100</span><br><span class="line">    &#125;, 1000)</span><br><span class="line"><span class="javascript">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line">      state.age = 25</span><br><span class="line">    &#125;, 1500)</span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123; numberRef, ...toRefs(state) &#125;</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="setup-中如何获取组件实例"><a href="#setup-中如何获取组件实例" class="headerlink" title="setup 中如何获取组件实例"></a>setup 中如何获取组件实例</h2><ul>
<li>在 <code>setup</code> 和其他 <code>Composition API</code> 中没有 <code>this</code></li>
<li>可通过 <code>getCurrentInstance</code> 获取当前实例</li>
<li>若用 <code>Options API</code> 可照常使用 <code>this</code></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>getInstance<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123; getCurrentInstance, onMounted &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line">      x: 1,</span><br><span class="line">      y: 2,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">&#x27;setup this&#x27;</span>, <span class="built_in">this</span>) <span class="comment">// undefined</span></span></span><br><span class="line"><span class="javascript">    onMounted(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">&#x27;onMounted this&#x27;</span>, <span class="built_in">this</span>) <span class="comment">// undefined</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">&#x27;x&#x27;</span>, instance.data.x) <span class="comment">// 1</span></span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> instance = getCurrentInstance()</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">&#x27;instance&#x27;</span>, instance) <span class="comment">// 组件实例</span></span></span><br><span class="line">  &#125;,</span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">&#x27;mounted this&#x27;</span>, <span class="built_in">this</span>) <span class="comment">// Proxy 实例</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">&#x27;y&#x27;</span>, <span class="built_in">this</span>.y) <span class="comment">// 2</span></span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="Vue3-为何比-Vue2-块"><a href="#Vue3-为何比-Vue2-块" class="headerlink" title="Vue3 为何比 Vue2 块"></a>Vue3 为何比 Vue2 块</h2><ul>
<li><code>proxy</code> 响应式</li>
<li><code>PatchFlag</code></li>
<li><code>hoistStatic</code></li>
<li><code>cacheHandler</code></li>
<li><code>SSR</code> 优化</li>
<li><code>tree-shaking</code></li>
</ul>
<h3 id="PatchFlag（标记）"><a href="#PatchFlag（标记）" class="headerlink" title="PatchFlag（标记）"></a>PatchFlag（标记）</h3><ul>
<li>编译模板时，动态节点做标记</li>
<li>标记，分为不同的类型，如：<code>TEXT</code>、<code>PROPS</code></li>
<li><code>diff</code> 算法时，可以区分静态节点，以及不同类型的动态节点</li>
</ul>
<blockquote>
<p><a href="https://vue-next-template-explorer.netlify.app/">Vu3 在线编译</a></p>
<p><a href="https://vue-template-explorer.netlify.app/">Vue2 在线编译</a></p>
</blockquote>
<p>Vue2 和 Vu3 diff 算法比较</p>
<ul>
<li>Vue2 没有区分静态节点和动态节点</li>
</ul>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/jslearn-img/vue2vue3diff.png"></p>
<ul>
<li>Vue3 新增静态标记 <code>patchFlag</code> 与上次虚拟节点比较时，只比较有  <code>patchFlag</code>  的节点</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; name &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">return</span> (</span></span><br><span class="line">    _openBlock(),</span><br><span class="line"><span class="javascript">    _createBlock(<span class="string">&#x27;div&#x27;</span>, <span class="literal">null</span>, [</span></span><br><span class="line"><span class="javascript">      _createVNode(<span class="string">&#x27;div&#x27;</span>, <span class="literal">null</span>, <span class="string">&#x27;1&#x27;</span>),</span></span><br><span class="line"><span class="javascript">      _createVNode(<span class="string">&#x27;div&#x27;</span>, <span class="literal">null</span>, <span class="string">&#x27;2&#x27;</span>),</span></span><br><span class="line"><span class="javascript">      _createVNode(<span class="string">&#x27;div&#x27;</span>, <span class="literal">null</span>, _toDisplayString(_ctx.name), <span class="number">1</span> <span class="comment">/* TEXT */</span>),</span></span><br><span class="line">    ])</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="hoistStatic（静态提升）"><a href="#hoistStatic（静态提升）" class="headerlink" title="hoistStatic（静态提升）"></a>hoistStatic（静态提升）</h3><ul>
<li>将静态节点的定义，提升到父作用域，缓存起来</li>
<li>多个相邻静态节点，会被合并起来</li>
<li>典型的拿空间换时间的优化策略</li>
</ul>
<p>Vue2 无论元素是否参与更新，每次都会重新创建然后再渲染。Vue3 对于不参与更新的元素，做静态提升，只会被创建一次，在渲染时直接复用即可</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; name &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> _hoisted_1 = <span class="comment">/*#__PURE__*/</span> _createVNode(<span class="string">&#x27;div&#x27;</span>, <span class="literal">null</span>, <span class="string">&#x27;1&#x27;</span>, -<span class="number">1</span> <span class="comment">/* HOISTED */</span>)</span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> _hoisted_2 = <span class="comment">/*#__PURE__*/</span> _createVNode(<span class="string">&#x27;div&#x27;</span>, <span class="literal">null</span>, <span class="string">&#x27;2&#x27;</span>, -<span class="number">1</span> <span class="comment">/* HOISTED */</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">return</span> (</span></span><br><span class="line">    _openBlock(),</span><br><span class="line"><span class="javascript">    _createBlock(<span class="string">&#x27;div&#x27;</span>, <span class="literal">null</span>, [</span></span><br><span class="line">      _hoisted_1,</span><br><span class="line">      _hoisted_2,</span><br><span class="line"><span class="javascript">      _createVNode(<span class="string">&#x27;div&#x27;</span>, <span class="literal">null</span>, _toDisplayString(_ctx.name), <span class="number">1</span> <span class="comment">/* TEXT */</span>),</span></span><br><span class="line">    ])</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="cacheHandler（缓存事件）"><a href="#cacheHandler（缓存事件）" class="headerlink" title="cacheHandler（缓存事件）"></a>cacheHandler（缓存事件）</h3><ul>
<li>缓存事件</li>
</ul>
<p>Vue2 绑定事件每次触发都要重新生成全新 Function 去更新。Vue3 提供事件缓存对象，当开启 <code>cacheHandler</code> 会自动生成一个内联函数，同时生成一个静态节点，当事件再次触发时，只需从缓存中调用即可</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> @<span class="attr">click</span>=<span class="string">&quot;todo&quot;</span>&gt;</span>something<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">return</span> (</span></span><br><span class="line">    _openBlock(),</span><br><span class="line"><span class="javascript">    _createBlock(<span class="string">&#x27;div&#x27;</span>, <span class="literal">null</span>, [</span></span><br><span class="line">      _createVNode(</span><br><span class="line"><span class="javascript">        <span class="string">&#x27;div&#x27;</span>,</span></span><br><span class="line">        &#123;</span><br><span class="line"><span class="javascript">          onClick: _cache[<span class="number">1</span>] || (_cache[<span class="number">1</span>] = <span class="function">(<span class="params">...args</span>) =&gt;</span> _ctx.todo(...args)),</span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        <span class="string">&#x27;something&#x27;</span></span></span><br><span class="line">      ),</span><br><span class="line">    ])</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="SSR-渲染"><a href="#SSR-渲染" class="headerlink" title="SSR 渲染"></a>SSR 渲染</h3><ul>
<li>静态节点直接输出，直接绕过 <code>vdom</code>，当做字符串推进 <code>buffer</code> 里</li>
<li>动态节点，还是需要动态渲染</li>
</ul>
<h3 id="tree-shaking（按需编译）"><a href="#tree-shaking（按需编译）" class="headerlink" title="tree shaking（按需编译）"></a>tree shaking（按需编译）</h3><ul>
<li><p>编译时，根据不同的情况，引入不同的 API</p>
<p>可以静态分析模块依赖并删除未使用的导出相关的代码</p>
</li>
</ul>
<h2 id="Vite"><a href="#Vite" class="headerlink" title="Vite"></a>Vite</h2><ul>
<li>一个前端打包工具，Vue 作者发起的项目</li>
<li>借助 Vue 的影响力，发展较快，和 webpack 竞争</li>
<li>优势：开发环境下无需打包，启动快</li>
</ul>
<p><strong>Vite 为何启动快</strong></p>
<ul>
<li>开发环境使用 ES6 Module，无需打包——非常快</li>
<li>生成环境使用 rollup，并不会快很多</li>
</ul>
<h3 id="CommonJs"><a href="#CommonJs" class="headerlink" title="CommonJs"></a>CommonJs</h3><blockquote>
<p><a href="https://juejin.cn/post/6994224541312483336#heading-18">「万字进阶」深入浅出 Commonjs 和 Es Module</a></p>
</blockquote>
<p><strong>CommonJs 实现原理</strong></p>
<ul>
<li>在编译的过程中，实际 CommonJs 对 JS 的代码进行了首尾包装，被包装之后的样子如下：</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">;(<span class="function"><span class="keyword">function</span> (<span class="params"><span class="built_in">exports</span>, <span class="built_in">require</span>, <span class="built_in">module</span>, __filename, __dirname</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> sayName = <span class="built_in">require</span>(<span class="string">&#x27;./hello.js&#x27;</span>)</span><br><span class="line">  <span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> <span class="title">say</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      name: sayName(),</span><br><span class="line">      author: <span class="string">&#x27;我不是外星人&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li><p>在 CommonJs 规范下模块中，会形成一个包装函数，包装函数本质如下：</p>
<p>最后将包装函数执行</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">wrapper</span>(<span class="params">script</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;(function (exports, require, module, __filename, __dirname) &#123;&#x27;</span> + script + <span class="string">&#x27;\n&#125;)&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>require 加载原理</strong></p>
<ul>
<li><code>module</code>：在 Node 中每一个 JS 文件都是一个 <code>module</code>，<code>module</code> 上保存了 <code>exports</code> 等信息之外，还有一个 <code>loaded</code> 表示该模块是否被加载</li>
<li><code>Module</code>：以 Node 为例，整个系统运行之后，会用 <code>Module</code> 缓存每一个模块加载的信息</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// id 为路径标识符</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">require</span>(<span class="params">id</span>) </span>&#123;</span><br><span class="line">  <span class="comment">/* 查找  Module 上有没有已经加载的 js  对象*/</span></span><br><span class="line">  <span class="keyword">const</span> cachedModule = Module._cache[id]</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 如果已经加载了那么直接取走缓存的 exports 对象  */</span></span><br><span class="line">  <span class="keyword">if</span> (cachedModule) &#123;</span><br><span class="line">    <span class="keyword">return</span> cachedModule.exports</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 创建当前模块的 module  */</span></span><br><span class="line">  <span class="keyword">const</span> <span class="built_in">module</span> = &#123; <span class="attr">exports</span>: &#123;&#125;, <span class="attr">loaded</span>: <span class="literal">false</span> &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 将 module 缓存到  Module 的缓存属性中，路径标识符作为 id */</span></span><br><span class="line">  Module._cache[id] = <span class="built_in">module</span></span><br><span class="line">  <span class="comment">/* 加载文件 */</span></span><br><span class="line">  runInThisContext(wrapper(<span class="string">&#x27;module.exports = &quot;123&quot;&#x27;</span>))(</span><br><span class="line">    <span class="built_in">module</span>.exports,</span><br><span class="line">    <span class="built_in">require</span>,</span><br><span class="line">    <span class="built_in">module</span>,</span><br><span class="line">    __filename,</span><br><span class="line">    __dirname</span><br><span class="line">  )</span><br><span class="line">  <span class="comment">/* 加载完成 */</span></span><br><span class="line">  <span class="built_in">module</span>.loaded = <span class="literal">true</span></span><br><span class="line">  <span class="comment">/* 返回值 */</span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">module</span>.exports</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>require</code> 大致流程如下：</p>
<ol>
<li><code>require</code> 会接收一个参数——文件标识符，然后分析定位文件，接下来会从 <code>Module</code> 上查找有没有缓存，如果有缓存，那么直接返回缓存的内容</li>
<li>如果没有缓存，会创建一个 <code>module</code> 对象，缓存到 <code>Module</code> 上，然后执行文件，加载完文件后，将 <code>loaded</code> 设置为 <code>true</code></li>
<li><code>exports</code> 和 <code>module.exports</code> 持有相同的引用，所以对 <code>exports</code> 赋值会导致 <code>exports</code> 操作的不再是 <code>module.exports</code> 的引用</li>
</ol>
<h3 id="ES-Module"><a href="#ES-Module" class="headerlink" title="ES Module"></a>ES Module</h3><p>ES6 之后，JS 才有了真正意义上的模块化规范。ES Module 的优势：</p>
<ul>
<li>借助 ES Module 的静态导入导出的优势，实现了 <code>tree shaking</code></li>
<li>ES Module 还可以 <code>import()</code> 懒加载方式实现代码分割</li>
</ul>
<p><strong>基本使用</strong></p>
<ul>
<li>使用 <code>export default</code> 导出</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> add <span class="keyword">from</span> <span class="string">&#x27;./add.js&#x27;</span></span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(add(<span class="number">10</span>, <span class="number">20</span>)) <span class="comment">// 30</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="comment">// add.js</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a, b</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">return</span> a + b</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>使用 <code>export</code> 导出，需要解构</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> &#123; add &#125; <span class="keyword">from</span> <span class="string">&#x27;./math.js&#x27;</span></span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(add(<span class="number">10</span>, <span class="number">20</span>)) <span class="comment">// 30</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="comment">// math.js</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a, b</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">return</span> a + b</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>外链使用</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">&#x27;https://unpkg.com/redux@latest/es/redux.mjs&#x27;</span></span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(createStore) <span class="comment">// Function</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>动态引入</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn1&quot;</span>&gt;</span>load1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="built_in">document</span>.getElementById(<span class="string">&#x27;btn1&#x27;</span>).addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">async</span> () =&gt; &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="keyword">import</span>(<span class="string">&#x27;./math.js&#x27;</span>)</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(res.add(<span class="number">10</span>, <span class="number">20</span>)) <span class="comment">// 30</span></span></span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="comment">// math.js</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a, b</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">return</span> a + b</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="Composition-API-和-React-Hooks-对比"><a href="#Composition-API-和-React-Hooks-对比" class="headerlink" title="Composition API 和 React Hooks 对比"></a>Composition API 和 React Hooks 对比</h2><ul>
<li>Composition API 只会被调用一次，React Hooks 函数会被多次调用</li>
<li>Composition API 无需 <code>useMemo</code>、<code>useCallback</code>，因为 <code>setup</code> 只调用一次</li>
<li>Composition API 无需顾虑调用顺序，React Hooks 需要保证 <code>hooks</code> 的顺序一致</li>
<li>Composition API <code>reactive + ref</code> 比 React Hooks  要难理解</li>
</ul>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>响应式原理</tag>
        <tag>生命周期</tag>
        <tag>Composition API</tag>
        <tag>Vite</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue2 面试题</title>
    <url>/posts/920f26b5/</url>
    <content><![CDATA[<h2 id="v-show-和-v-if-区别"><a href="#v-show-和-v-if-区别" class="headerlink" title="v-show 和 v-if 区别"></a>v-show 和 v-if 区别</h2><ul>
<li><code>v-show</code> 通过 CSS display 控制显示和隐藏</li>
<li><code>v-if</code> 通过判断组件真实渲染和销毁，而不是显示和隐藏</li>
<li>频繁切换显示状态用 <code>v-show</code>，否则用 <code>v-if</code></li>
</ul>
<p><code>v-if</code> </p>
<ul>
<li>当 <code>v-if</code> 与 <code>v-for</code> 一起使用时，<code>v-for</code> 具有比 <code>v-if</code> 更高的优先级，意味着：<code>v-if</code> 将分别重复运行于每个 <code>v-for</code> 循环中，会造成性能问题。所以，不推荐 <code>v-if</code> 和 <code>v-for</code> 同时使用</li>
</ul>
<a id="more"></a>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> compiler = <span class="built_in">require</span>(<span class="string">&#x27;vue-template-compiler&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> res = compiler.compile(<span class="string">`&lt;div v-if=&quot;true&quot; v-for=&quot;i in 3&quot;&gt;&#123;&#123;message&#125;&#125;&lt;/div&gt;`</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> renderList(<span class="number">3</span>, <span class="function"><span class="keyword">function</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span> ? createElement(<span class="string">&#x27;div&#x27;</span>, [createTextVNode(toString(message))]) : createEmptyVNode()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>v-show</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> compiler = <span class="built_in">require</span>(<span class="string">&#x27;vue-template-compiler&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> res = compiler.compile(<span class="string">`&lt;p v-show=&quot;flag === &#x27;a&#x27;&quot;&gt;A&lt;/p&gt;`</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> createElement(</span><br><span class="line">    <span class="string">&#x27;p&#x27;</span>,</span><br><span class="line">    &#123;</span><br><span class="line">      directives: [</span><br><span class="line">        &#123; <span class="attr">name</span>: <span class="string">&#x27;show&#x27;</span>, <span class="attr">rawName</span>: <span class="string">&#x27;v-show&#x27;</span>, <span class="attr">value</span>: flag === <span class="string">&#x27;a&#x27;</span>, <span class="attr">expression</span>: <span class="string">&quot;flag === &#x27;a&#x27;&quot;</span> &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;,</span><br><span class="line">    [createTextVNode(<span class="string">&#x27;A&#x27;</span>)]</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// v-show 操作的是样式 https://github.com/vuejs/vue/blob/dev/src/platforms/web/runtime/directives/show.js</span></span><br><span class="line">bind (el: any, &#123; value &#125;: VNodeDirective, <span class="attr">vnode</span>: VNodeWithData) &#123;</span><br><span class="line">  vnode = locateNode(vnode)</span><br><span class="line">  <span class="keyword">const</span> transition = vnode.data &amp;&amp; vnode.data.transition</span><br><span class="line">  <span class="keyword">const</span> originalDisplay = el.__vOriginalDisplay =</span><br><span class="line">    el.style.display === <span class="string">&#x27;none&#x27;</span> ? <span class="string">&#x27;&#x27;</span> : el.style.display</span><br><span class="line">  <span class="keyword">if</span> (value &amp;&amp; transition) &#123;</span><br><span class="line">    vnode.data.show = <span class="literal">true</span></span><br><span class="line">    enter(vnode, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      el.style.display = originalDisplay</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    el.style.display = value ? originalDisplay : <span class="string">&#x27;none&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="为何在-v-for-中用-key"><a href="#为何在-v-for-中用-key" class="headerlink" title="为何在 v-for 中用 key"></a>为何在 v-for 中用 key</h2><ul>
<li>必须用 <code>key</code>，且不能是 <code>index</code> 和 <code>random</code></li>
<li><code>diff</code> 算法中通过 <code>tag</code> 和 <code>key</code> 来判断，是否是 <code>sameNode</code></li>
<li>减少渲染次数，提升渲染性能</li>
</ul>
<h2 id="描述-Vue-组件生命周期（父子组件）"><a href="#描述-Vue-组件生命周期（父子组件）" class="headerlink" title="描述 Vue 组件生命周期（父子组件）"></a>描述 Vue 组件生命周期（父子组件）</h2><ul>
<li><p><code>beforeCreate</code> 在初始化事件生命周期之后，数据被观测（observer）之前调用</p>
</li>
<li><p><code>created</code> 实例已经创建完成之后被调用</p>
<p>可以进行一些数据、资源请求。在这个阶段无法与 DOM 进行交互，如果非想要，可以通过 <code>$nextTick</code> 访问</p>
</li>
<li><p><code>beforeMount</code> 在 DOM 挂载之前被调用，相关的 <code>render</code> 函数首次被调用（如果有 <code>template</code> 会转换成 <code>render</code> 函数）</p>
<p>在此时也可以对数据进行更改，不会触发 <code>updated</code></p>
</li>
<li><p><code>mounted</code> 创建 <code>vm.$el</code> 并替换 <code>el</code>，并在挂载之后调用该钩子</p>
<p>可以访问到 DOM 节点，使用 <code>$refs</code> 属性对 DOM 进行操作，也可以像后台发送请求，拿到返回数据</p>
</li>
<li><p><code>beforeUpdate</code> 数据更新时调用，发生在虚拟 DOM 重新渲染和和打补丁之前</p>
<p>可以在这个钩子中进一步地更改状态，这不会触发附加的重新渲染</p>
</li>
<li><p><code>updated</code> 由于数据更改导致虚拟 DOM 重新渲染和打补丁，在这之后会调用该钩子</p>
<p>避免在此期间更改状态，可能会导致更新无限循环</p>
</li>
<li><p><code>beforeDestroy</code> 实例销毁之前调用</p>
</li>
<li><p><code>destroyed </code> Vue 实例销毁后调用，调用后，Vue 实例所有东西都会解绑定，所有事件监听会被移除，所有子实例也会被销毁</p>
<p>可以执行一些优化操作，清除定时器，解除绑定事件</p>
</li>
</ul>
<p>注意：除了 <code>beforeCreate</code> 和 <code>created</code> 钩子之外，其他钩子均在服务器端渲染期间不调用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Vue.prototype._init = <span class="function"><span class="keyword">function</span> (<span class="params">options?: <span class="built_in">Object</span></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  initLifecycle(vm)</span><br><span class="line">  initEvents(vm) <span class="comment">// 初始化事件相关的属性</span></span><br><span class="line">  initRender(vm) <span class="comment">// vm 添加了一些虚拟 dom、slot 等相关的属性和方法</span></span><br><span class="line">  callHook(vm, <span class="string">&#x27;beforeCreate&#x27;</span>)</span><br><span class="line">  initInjections(vm)</span><br><span class="line">  initState(vm) <span class="comment">// props、methods、data、watch、computed等数据初始化</span></span><br><span class="line">  initProvide(vm)</span><br><span class="line">  callHook(vm, <span class="string">&#x27;created&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>mounted</code> （渲染完成）执行顺序是先子后父</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">patch</span>(<span class="params">oldVnode, vnode, hydrating, removeOnly</span>) </span>&#123;</span><br><span class="line">   <span class="comment">// 定义收集所有组件的insert hook方法的数组</span></span><br><span class="line">  <span class="keyword">const</span> insertedVnodeQueue = []</span><br><span class="line">  <span class="keyword">if</span> (isUndef(oldVnode)) &#123;</span><br><span class="line">    createElm(vnode, insertedVnodeQueue)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createElm</span>(<span class="params">vnode, insertedVnodeQueue, ...</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// createChildren会递归创建子组件（递归createElm）</span></span><br><span class="line">  createChildren(vnode, children, insertedVnodeQueue)</span><br><span class="line">  <span class="keyword">if</span> (isDef(data)) &#123;</span><br><span class="line">    <span class="comment">// 执行所有的create钩子</span></span><br><span class="line">    invokeCreateHooks(vnode, insertedVnodeQueue)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">invokeCreateHooks</span> (<span class="params">vnode, insertedVnodeQueue</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 把vnode push到insertedVnodeQueue</span></span><br><span class="line">  <span class="keyword">if</span> (isDef(i.insert)) insertedVnodeQueue.push(vnode)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用insert方法把DOM插入到父节点，因为是递归调用，子元素会优先调用insert</span></span><br><span class="line">insert(parentElm, vnode.elm, refElm)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">invokeInsertHook</span>(<span class="params">vnode, queue, initial</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 依次调用insert方法</span></span><br><span class="line">  queue[i].data.hook.insert(queue[i])</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> componentVNodeHooks = &#123;</span><br><span class="line">  <span class="comment">// 依次执行 mounted 方法</span></span><br><span class="line">  <span class="function"><span class="title">insert</span>(<span class="params">vnode: MountedComponentVNode</span>)</span> &#123;</span><br><span class="line">    callHook(componentInstance, <span class="string">&#x27;mounted&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>$destroy</code> （销毁完成）执行顺序是先子后父</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Vue.prototype.$destroy = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  callHook(vm, <span class="string">&#x27;beforeDestroy&#x27;</span>)</span><br><span class="line">   <span class="comment">// 递归触发子组件销毁钩子函数</span></span><br><span class="line">  vm.__patch__(vm._vnode, <span class="literal">null</span>)</span><br><span class="line">  callHook(vm, <span class="string">&#x27;destroyed&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Vue-组件如何通讯"><a href="#Vue-组件如何通讯" class="headerlink" title="Vue 组件如何通讯"></a>Vue 组件如何通讯</h2><ul>
<li>父 -&gt; 子通过 <code>props</code>，子 -&gt; 父通过 <code>$on $emit</code></li>
<li>在父组件中提供数据子组件进行消费 <code>provide</code>、<code>inject</code></li>
<li><code>ref</code> 获取实例的方式调用组件的属性或方法</li>
<li>自定义事件 <code>event.$on</code>、<code>event.$off</code>、<code>event.$emit</code></li>
<li><code>vuex</code> 状态管理实现通信</li>
</ul>
<h2 id="描述组件渲染和更新过程"><a href="#描述组件渲染和更新过程" class="headerlink" title="描述组件渲染和更新过程"></a>描述组件渲染和更新过程</h2><ul>
<li>生成 <code>render</code> 函数，其生成一个 <code>vnode</code>，它会 <code>touch</code> 触发 <code>getter</code> 进行收集依赖</li>
<li>在模板中哪个被引用了就会将其用 <code>Watcher</code> 观察起来，发生了 <code>setter</code> 也会将其 <code>Watcher</code> 起来</li>
<li>如果之前已经被 <code>Watcher</code> 观察起来，发生更新进行重新渲染</li>
</ul>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/jslearn-img/vue%E6%B8%B2%E6%9F%93%E6%9B%B4%E6%96%B0%E6%B5%81%E7%A8%8B%E5%9B%BE.png"></p>
<h2 id="双向数据绑定-v-model-的实现原理"><a href="#双向数据绑定-v-model-的实现原理" class="headerlink" title="双向数据绑定 v-model 的实现原理"></a>双向数据绑定 v-model 的实现原理</h2><p><code>v-model</code>本质上是语法糖，<code>v-model</code> 在内部为不同的输入元素使用不同的属性并抛出不同的事件</p>
<ul>
<li><code>text</code> 和 <code>textarea</code> 元素使用 value 属性和 input 事件</li>
<li><code>checkbox</code> 和 <code>radio</code> 使用 checked 属性和 change 事件</li>
<li><code>select</code> 字段将 value 作为 prop 并将 change 作为事件</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> compiler = <span class="built_in">require</span>(<span class="string">&#x27;vue-template-compiler&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> res = compiler.compile(<span class="string">`&lt;input v-model=&quot;name&quot; type=&quot;text&quot; /&gt;`</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> createElement(<span class="string">&#x27;input&#x27;</span>, &#123;</span><br><span class="line">    directives: [&#123; <span class="attr">name</span>: <span class="string">&#x27;model&#x27;</span>, <span class="attr">rawName</span>: <span class="string">&#x27;v-model&#x27;</span>, <span class="attr">value</span>: name, <span class="attr">expression</span>: <span class="string">&#x27;name&#x27;</span> &#125;],</span><br><span class="line">    attrs: &#123; <span class="attr">type</span>: <span class="string">&#x27;text&#x27;</span> &#125;,</span><br><span class="line">    domProps: &#123; <span class="attr">value</span>: name &#125;,</span><br><span class="line">    on: &#123;</span><br><span class="line">      input: <span class="function"><span class="keyword">function</span>(<span class="params">$event</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ($event.target.composing) <span class="keyword">return</span></span><br><span class="line">        name = $event.target.value</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="对-MVVM-的理解"><a href="#对-MVVM-的理解" class="headerlink" title="对 MVVM 的理解"></a>对 MVVM 的理解</h2><ul>
<li><code>Model</code>：代表数据模型，也可以在 <code>Model</code> 中定义数据修改和操作的业务逻辑。我们可以把 <code>Model</code> 称为数据层，因为它仅仅关注数据本身，不关心任何行为</li>
<li><code>View</code>：用户操作界面。当 <code>ViewModel</code> 对 <code>Model</code> 进行更新的时候，会通过数据绑定更新到 <code>View</code></li>
<li><code>ViewModel</code>：业务逻辑层，<code>View</code> 需要什么数据，<code>ViewModel</code> 要提供这个数据；<code>View</code> 有某些操作，<code>ViewModel</code> 就要响应这些操作</li>
</ul>
<p><strong>总结</strong>： <code>MVVM</code>模式简化了界面与业务的依赖，解决了数据频繁更新。<code>MVVM</code> 在使用当中，利用双向绑定技术，使得 <code>Model</code> 变化时，<code>ViewModel</code> 会自动更新，而 <code>ViewModel</code> 变化时，<code>View</code> 也会自动变化</p>
<h2 id="computed-和-watch-的区别"><a href="#computed-和-watch-的区别" class="headerlink" title="computed 和 watch 的区别"></a>computed 和 watch 的区别</h2><p><code>computed</code>：</p>
<ul>
<li><code>computed</code> 具有缓存性，<code>computed</code> 的值在 <code>getter</code> 执行后是会缓存的，只有它依赖的属性值改变之后，下一次获取 <code>computed</code> 的值时才会重新调用对应的 <code>getter</code> 来计算</li>
<li><code>computed</code> 适用于比较消耗性能的计算场景，可以提高性能</li>
</ul>
<p><code>watch</code>：</p>
<ul>
<li>更多的是观察作用，类似于数据监听的回调函数，用于观察 <code>props</code>、<code>$emit</code> 或本组件的值，当数据变化时来执行回调进行后续操作</li>
<li>无缓存性，页面重新渲染时值不变化也会执行</li>
</ul>
<p><code>computed</code> 和 <code>watch</code> 都支持对象的写法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">vm.$watch(<span class="string">&#x27;obj&#x27;</span>, &#123;</span><br><span class="line">  deep: <span class="literal">true</span>, <span class="comment">// 深度遍历</span></span><br><span class="line">  immediate: <span class="literal">true</span>, <span class="comment">// 立即触发</span></span><br><span class="line">  handler: <span class="function"><span class="keyword">function</span>(<span class="params">val, oldVal</span>) </span>&#123;&#125;, <span class="comment">// 执行的函数</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  data: &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    aPlus: &#123;</span><br><span class="line">      <span class="comment">// this.aPlus 时触发</span></span><br><span class="line">      get: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.a + <span class="number">1</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// this.aPlus = 1 时触发</span></span><br><span class="line">      set: <span class="function"><span class="keyword">function</span>(<span class="params">v</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.a = v - <span class="number">1</span></span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="为何组件-data-必须是一个函数"><a href="#为何组件-data-必须是一个函数" class="headerlink" title="为何组件 data 必须是一个函数"></a>为何组件 data 必须是一个函数</h2><ul>
<li>一个组件被复用多次的话，也就是创建多个实例。本质上，这些实例用的都是同一个构造函数，如果 <code>data</code> 是对象的话（引用数据类型），会影响到所有实例</li>
<li>为了组件不同实例 <code>data</code> 不冲突，<code>data</code> 必须是一个函数</li>
</ul>
<h2 id="自定义-v-model"><a href="#自定义-v-model" class="headerlink" title="自定义 v-model"></a>自定义 v-model</h2><p><code>v-model</code> 可以看成是 <code>value + input</code> 方法的语法糖</p>
<ul>
<li>自定义：自己写 <code>model</code> 属性，里面放上 <code>prop</code> 和 <code>event</code></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">:value</span>=<span class="string">&quot;text&quot;</span> @<span class="attr">input</span>=<span class="string">&quot;$emit(&#x27;change&#x27;, $event.target.value)&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">  model: &#123;</span><br><span class="line"><span class="javascript">    prop: <span class="string">&#x27;text&#x27;</span>,</span></span><br><span class="line"><span class="javascript">    event: <span class="string">&#x27;change&#x27;</span>,</span></span><br><span class="line">  &#125;,</span><br><span class="line">  props: &#123;</span><br><span class="line"><span class="javascript">    text: <span class="built_in">String</span>,</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="相同逻辑如何抽离"><a href="#相同逻辑如何抽离" class="headerlink" title="相同逻辑如何抽离"></a>相同逻辑如何抽离</h2><ul>
<li><code>Vue.mixin</code> ，给组件每个生命周期、函数都混入一些公共逻辑</li>
<li><code>mixin</code> 混入的钩子函数会先于组件内的钩子函数执行，并且在遇到同名选项时也会有选择性进行合并</li>
</ul>
<h2 id="何时使用异步组件"><a href="#何时使用异步组件" class="headerlink" title="何时使用异步组件"></a>何时使用异步组件</h2><p>核心就是把组件变成一个函数，依赖 <code>import()</code> 语法，可以实现文件的分割加载</p>
<ul>
<li>加载大组件</li>
<li>路由异步加载</li>
</ul>
<h2 id="何时使用-keep-alive"><a href="#何时使用-keep-alive" class="headerlink" title="何时使用 keep-alive"></a>何时使用 keep-alive</h2><p>常用的两个属性：<code>include</code>、<code>exclude</code>，允许组件有条件的进行缓存</p>
<p>两个生命周期：<code>activated</code>、<code>deactivated</code>，用来得知当前组件是否处于活跃状态</p>
<ul>
<li>缓存组件实例，用于保留组件状态或避免重复渲染</li>
<li>多个静态 Tab 页的切换时，来优化性能</li>
</ul>
<h2 id="何时需要使用-beforeDestory"><a href="#何时需要使用-beforeDestory" class="headerlink" title="何时需要使用 beforeDestory"></a>何时需要使用 beforeDestory</h2><ul>
<li>解绑自定义事件 <code>event.$off</code></li>
<li>清除定时器</li>
<li>解绑自定义的 DOM 事件，如：<code>window</code>、<code>scroll</code> 等</li>
</ul>
<h2 id="action-和-mutation-有何区别"><a href="#action-和-mutation-有何区别" class="headerlink" title="action 和 mutation 有何区别"></a>action 和 mutation 有何区别</h2><ul>
<li><code>action</code> 中可以处理异步，<code>mutation</code> 中不可以</li>
<li><code>mutation</code> 做的是原子操作，<code>action</code> 可以整合多个 <code>mutation</code></li>
</ul>
<h2 id="vue-router-常用的路由模式"><a href="#vue-router-常用的路由模式" class="headerlink" title="vue-router 常用的路由模式"></a>vue-router 常用的路由模式</h2><p><strong>hash 路由</strong></p>
<ul>
<li><code>hash</code> 变化会触发网页跳转，即浏览器的前进、后退</li>
<li><code>hash</code> 变化不会刷新页面，<code>SPA</code> 必需的特点</li>
<li><code>hash</code> 永远不会提交到 <code>server</code> 端（前端自生自灭）</li>
</ul>
<p><strong>history 路由</strong></p>
<ul>
<li>用 <code>url</code> 规范的路由，但跳转时不刷新页面</li>
<li>需要 <code>server</code> 端配合，可参考：<a href="https://router.vuejs.org/zh/guide/essentials/history-mode.html#%E5%90%8E%E7%AB%AF%E9%85%8D%E7%BD%AE%E4%BE%8B%E5%AD%90">后端配置例子</a></li>
<li><code>pushState</code> 不会触发 <code>hashchange</code> 事件，<code>popstate</code> 事件只会在浏览器某些行为下触发，比如点击后退、前进按钮</li>
</ul>
<h2 id="vnode-描述一个-DOM-结构"><a href="#vnode-描述一个-DOM-结构" class="headerlink" title="vnode 描述一个 DOM 结构"></a>vnode 描述一个 DOM 结构</h2><ul>
<li>Vue 中的真实 DOM</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>vdom<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">style</span>=<span class="string">&quot;font-size: 20px;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>a<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>Vue 中的虚拟 DOM</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  tag: <span class="string">&#x27;div&#x27;</span>,</span><br><span class="line">  props: &#123;</span><br><span class="line">    className: <span class="string">&#x27;container&#x27;</span>,</span><br><span class="line">    id: <span class="string">&#x27;div1&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  children: [</span><br><span class="line">    &#123;</span><br><span class="line">      tag: <span class="string">&#x27;p&#x27;</span>,</span><br><span class="line">      children: <span class="string">&#x27;dom&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      tag: <span class="string">&#x27;ul&#x27;</span>,</span><br><span class="line">      props: &#123; <span class="attr">style</span>: <span class="string">&#x27;font-size: 20px&#x27;</span> &#125;,</span><br><span class="line">      children: [&#123; <span class="attr">tag</span>: <span class="string">&#x27;li&#x27;</span>, <span class="attr">children</span>: <span class="string">&#x27;a&#x27;</span> &#125;],</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="数据响应式原理"><a href="#数据响应式原理" class="headerlink" title="数据响应式原理"></a>数据响应式原理</h2><p><strong>核心 API</strong>：<code>Object.defineProperty</code></p>
<ul>
<li><p>存在一些问题，Vue 3.0 启动 <code>Proxy</code></p>
<p><code>Proxy</code> 可以原生支持监听数组变化</p>
<p>但是 <code>Proxy</code> 兼容性不好，且无法 <code>polyfill</code></p>
</li>
</ul>
<p><strong>问题</strong></p>
<ul>
<li>深度监听，需要递归到底，一次性计算量大</li>
<li>无法监听新增属性/删除属性（<code>Vue.set</code>、<code>Vue.delete</code>）</li>
<li>不能监听数组变化（重新定义原型，重写 <code>push</code>、<code>pop</code> 等方法）</li>
</ul>
<p><strong>简单实现 Vue 中的 defineReactive</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 触发更新视图</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateView</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;视图更新&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重新定义数组原型</span></span><br><span class="line"><span class="keyword">const</span> arrayProto = <span class="built_in">Array</span>.prototype</span><br><span class="line"><span class="comment">// 创建新对象，原型指向 arrayProto ，再扩展新的方法不会影响原型</span></span><br><span class="line"><span class="keyword">const</span> arrayMethods = <span class="built_in">Object</span>.create(arrayProto)</span><br><span class="line">;[<span class="string">&#x27;push&#x27;</span>, <span class="string">&#x27;pop&#x27;</span>, <span class="string">&#x27;shift&#x27;</span>, <span class="string">&#x27;unshift&#x27;</span>, <span class="string">&#x27;splice&#x27;</span>, <span class="string">&#x27;sort&#x27;</span>, <span class="string">&#x27;reverse&#x27;</span>].forEach(<span class="function"><span class="params">method</span> =&gt;</span> &#123;</span><br><span class="line">  arrayMethods[method] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    arrayProto[method].call(<span class="built_in">this</span>, ...arguments) <span class="comment">// 原始操作</span></span><br><span class="line">    updateView() <span class="comment">// 触发视图更新</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重新定义属性，监听起来</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">defineReactive</span>(<span class="params">target, key, value</span>) </span>&#123;</span><br><span class="line">  observer(value) <span class="comment">// 进行监听</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 不可枚举的不用监听</span></span><br><span class="line">  <span class="keyword">const</span> property = <span class="built_in">Object</span>.getOwnPropertyDescriptor(target, key)</span><br><span class="line">  <span class="keyword">if</span> (property &amp;&amp; property.configurable === <span class="literal">false</span>) <span class="keyword">return</span></span><br><span class="line">  <span class="built_in">Object</span>.defineProperty(target, key, &#123;</span><br><span class="line">    <span class="function"><span class="title">get</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> value</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">set</span>(<span class="params">newValue</span>)</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (newValue !== value) &#123;</span><br><span class="line">        observer(newValue) <span class="comment">// 值修改后进行监听</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// value 一直在闭包中，此处设置完之后，再 get 时也是会获取最新的值</span></span><br><span class="line">        value = newValue</span><br><span class="line">        updateView() <span class="comment">// 触发更新视图</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监测数据的变化</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">observer</span>(<span class="params">target</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 不是对象或数组（vue 是判断是否是数组、纯粹对象、可扩展对象）</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> target !== <span class="string">&#x27;object&#x27;</span> || target === <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> target</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 不要这样写，污染全局的 Array 原型</span></span><br><span class="line">  <span class="comment">/* Array.prototype.push = function () &#123;</span></span><br><span class="line"><span class="comment">      updateView()</span></span><br><span class="line"><span class="comment">  &#125; */</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(target)) &#123;</span><br><span class="line">    target.__proto__ = arrayMethods</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 重新定义各个属性（for in 也可以遍历数组）</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> target) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">Object</span>.hasOwnProperty.call(target, key)) <span class="keyword">return</span></span><br><span class="line">    defineReactive(target, key, target[key])</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> data = &#123;</span><br><span class="line">  name: <span class="string">&#x27;zhangsan&#x27;</span>,</span><br><span class="line">  age: <span class="number">20</span>,</span><br><span class="line">  info: &#123;</span><br><span class="line">    address: <span class="string">&#x27;北京&#x27;</span>, <span class="comment">// 需要深度监听</span></span><br><span class="line">  &#125;,</span><br><span class="line">  nums: [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>],</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">observer(data)</span><br><span class="line"></span><br><span class="line">data.name = <span class="string">&#x27;lisi&#x27;</span></span><br><span class="line">data.age = <span class="number">21</span></span><br><span class="line">data.info.address = <span class="string">&#x27;上海&#x27;</span> <span class="comment">// 深度监听</span></span><br><span class="line"><span class="comment">// data.x = &#x27;100&#x27; // 新增属性，监听不到 —— 所以有 Vue.set</span></span><br><span class="line"><span class="comment">// delete data.name // 删除属性，监听不到 —— 所有已 Vue.delete</span></span><br><span class="line">data.nums.push(<span class="number">4</span>) <span class="comment">// 监听数组</span></span><br></pre></td></tr></table></figure>

<h2 id="diff-算法"><a href="#diff-算法" class="headerlink" title="diff 算法"></a>diff 算法</h2><p>diff 算法过程：</p>
<ul>
<li>同级元素进行比较，再比较子节点</li>
<li>先判断一方有子节点，一方没有子节点情况（如果新的 <code>children</code> 没有子节点，将旧的子节点移除）</li>
<li>之后比较都有子节点的情况（核心 <code>diff</code>），递归比较子节点</li>
</ul>
<p>正常 <code>diff</code> 两个树的时间复杂度是 <code>O(n^3)</code>，但实际情况我们很少会跨级移动 DOM。所以，只有当新旧 <code>children</code> 都为多个子节点时才需要核心的 <code>diff</code> 算法进行同层级比较</p>
<ul>
<li>Vue2 核心 <code>diff</code> 算法采用了双端比较的算法，同时从新旧 <code>children</code> 的两端开始比较，借助 <code>key</code> 值找到可复用的节点，再进行相关操作。相比 React 的 <code>diff</code> 算法，同样情况可以减少移动节点次数，减少不必要的性能损耗</li>
<li>Vue3 核心 <code>diff</code> 算法采用了最长递增子序列</li>
</ul>
<p><img data-src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/847306f303ab4177891b56cccff1ebd3~tplv-k3u1fbpfcp-watermark.image" alt="img"></p>
<p>双端比较算法</p>
<ul>
<li>使用 <strong>旧列表</strong> 的头一个节点 <code>oldStartNode</code> 与 <strong>新列表</strong> 的头一个节点 <code>newStartNode</code> 对比</li>
<li>使用 <strong>旧列表</strong> 的最后一个节点 <code>oldEndNode</code> 与 <strong>新列表</strong> 的最后一个节点 <code>newEndNode</code> 对比</li>
<li>使用 <strong>旧列表</strong> 的头一个节点 <code>oldStartNode</code> 与 <strong>新列表</strong> 的最后一个节点 <code>newEndNode</code> 对比</li>
<li>使用 <strong>旧列表</strong> 的最后一个节点 <code>oldEndNode</code> 与 <strong>新列表</strong> 的头一个节点 <code>newStartNode</code> 对比</li>
</ul>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/jslearn-img/diff%E7%AE%97%E6%B3%95%E6%A6%82%E8%BF%B0.png"></p>
<p><strong>树 diff 的时间复杂度 O(n^3)</strong></p>
<ul>
<li><p>对于旧树上的点 E 来说，它要和新树上的所有点比较，复杂度为 <code>O(n)</code></p>
</li>
<li><p>点 E 在新树上没有找到，点 E 会被删除，然后遍历新树上的所有点找到对应点（X）去填空，复杂度增加到 <code>O(n^2)</code></p>
</li>
<li><p>这样的操作会在旧树的每个点进行，最终复杂度为 <code>O(n^3)</code></p>
<p>1000 个节点，要计算 1 亿次，算法不可用</p>
</li>
</ul>
<p><strong>优化时间复杂度到 O(n)</strong></p>
<ul>
<li>只比较同一层级，不跨级比较</li>
<li><code>tag</code> 不相同，则直接删掉重建，不再深度比较</li>
<li><code>tag</code> 和 <code>key</code>，两者都相同，则认为是相同节点，不再深度比较</li>
</ul>
<h2 id="简述-diff-算法过程"><a href="#简述-diff-算法过程" class="headerlink" title="简述 diff 算法过程"></a>简述 diff 算法过程</h2><p>在 Vue 中，主要是 <code>patch()</code>、<code>patchVnode()</code> 和 <code>updateChildren</code> 这三个方法来实现 <code>Diff</code> 的</p>
<ul>
<li><p>当 Vue 中的响应式数据发生变化时，就会触发 <code>updateCompoent()</code></p>
</li>
<li><p><code>updateComponent()</code> 会调用 <code>patch()</code> 方法，在该方法中进行比较，调用 <code>sameVnode</code> 判断是否为相同节点（判断 <code>key</code>、<code>tag</code> 等静态属性），如果是相同节点的话执行 <code>patchVnode</code> 方法，开始比较节点差异，如果不是相同节点的话，则进行替换操作</p>
<p><code>patch()</code> 接收新旧虚拟 DOM，即 <code>oldVnode</code>、<code>vnode</code></p>
<ul>
<li>首先判断 <code>vnode</code> 是否存在，如果不存在，删除旧节点</li>
<li>如果 <code>vnode</code> 存在，再判断 <code>oldVnode</code>，如果不存在，只需新增整个 <code>vnode</code> 即可</li>
<li>如果 <code>vnode</code> 和 <code>oldVnode</code> 都存在，判断两者是不是相同节点，如果是，调用 <code>patchVnode()</code> ，对两个节点进行详细比较</li>
<li>如果两者不是相同节点，只需将 <code>vnode</code> 转换为真实 DOM 替换 <code>oldVnode</code></li>
</ul>
</li>
<li><p><code>patchVnode</code> 同样接收新旧虚拟 DOM，即 <code>oldVnode</code>、<code>vnode</code></p>
<ul>
<li>首先判断两个虚拟 DOM 是不是全等，即没有任何变动，是的话直接结束函数，否者继续执行</li>
<li>其次更新节点的属性，接着判断 <code>vnode.text</code> 是否存在，存在的话只需更新节点文本即可，否则继续执行</li>
<li>判断 <code>vnode</code> 和 <code>oldVnode</code> 是否有孩子节点<ul>
<li>如果两者都有孩子节点，执行 <code>updateChildren()</code> ，进行比较更新</li>
<li>如果 <code>vnode</code> 有孩子，<code>oldVnode</code> 没有，则直接删除所有孩子节点，并将该文本属性设为空</li>
<li>如果 <code>oldVnode</code> 有孩子，<code>vnode</code> 没有，则直接删除所有孩子节点</li>
<li>如果两者都没有孩子节点，就判断 <code>oldVnode.text</code> 是否有内容，有的话情况内容即可</li>
</ul>
</li>
</ul>
</li>
<li><p><code>updateChildren</code> 接收三个参数：<code>parentElm</code> 父级真实节点、<code>oldCh</code> 为 <code>oldVnode</code> 的孩子节点、<code>newCh</code> 为 <code>Vnode</code> 的孩子节点</p>
<p><code>oldCh</code> 和 <code>newCh</code> 都是一个数组。正常我们想到的方法就是对这两个数组一一比较，时间复杂度为 <code>O(NM)</code>。Vue 中是通过四个指针实现的</p>
<ul>
<li>首先是 <code>oldStartVnode</code> 和 <code>newStartVnode</code> 进行比较（两头比较），如果比较相同的话，就可以执行 <code>patchVnode</code></li>
<li>如果 <code>oldStartVnode</code> 和 <code>newStartVnode</code> 匹配不上的话，接下来就是 <code>oldEndVnode</code> 和 <code>newEndVnode</code> 做比较了（两尾比较）</li>
<li>如果两头和两尾比较都不是相同节点的话，就开始交叉比较，首先是 <code>oldStartVnode</code> 和 <code>newEndVnode</code> 做比较（头尾比较）</li>
<li>如果 <code>oldStartVnode</code> 和 <code>newEndVnode</code> 匹配不上的话，就 <code>oldEndVnode</code> 和 <code>newStartVnode</code> 进行比较（尾头比较）</li>
</ul>
<p>如果这四种比较方法都匹配不到相同节点，才是用暴力解法，针对 <code>newStartVnode</code> 去遍历 <code>oldCh</code> 中剩余的节点，一一匹配</p>
</li>
</ul>
<blockquote>
<p>图片来源：<a href="https://juejin.cn/post/6971622260490797069#heading-2">图文并茂地来详细讲讲Vue Diff算法</a></p>
</blockquote>
<p><img data-src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d84848aa035b4472b4d3f8e4b0d708c5~tplv-k3u1fbpfcp-watermark.awebp" alt="diff.jpg"></p>
<h2 id="Vue-为何是异步渲染，-nextTick-何用"><a href="#Vue-为何是异步渲染，-nextTick-何用" class="headerlink" title="Vue 为何是异步渲染，$nextTick 何用"></a>Vue 为何是异步渲染，$nextTick 何用</h2><ul>
<li>因为如果不采用异步更新，那么每次更新数据都会对当前组件进行重新渲染。异步渲染（合并 data 修改），再更新视图，可以提高渲染性能</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Watcher</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">update</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.computed) &#123;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span>.sync) &#123;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 当数据发生变化时会将watcher放到一个队列中批量更新</span></span><br><span class="line">      queueWatcher(<span class="built_in">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> queue: <span class="built_in">Array</span>&lt;Watcher&gt; = []</span><br><span class="line"><span class="keyword">let</span> has: &#123; [key: number]: ?<span class="literal">true</span> &#125; = &#123;&#125;</span><br><span class="line"><span class="keyword">let</span> waiting = <span class="literal">false</span></span><br><span class="line"><span class="keyword">let</span> flushing = <span class="literal">false</span></span><br><span class="line"><span class="comment">// 在派发更新时并不会每次修改都触发watcher的回调</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">queueWatcher</span>(<span class="params">watcher: Watcher</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> id = watcher.id</span><br><span class="line">  <span class="comment">// has对象保证同一个watcher只添加一次</span></span><br><span class="line">  <span class="keyword">if</span> (has[id] == <span class="literal">null</span>) &#123;</span><br><span class="line">    has[id] = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">if</span> (!flushing) &#123;</span><br><span class="line">      queue.push(watcher)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> i = queue.length - <span class="number">1</span></span><br><span class="line">      <span class="keyword">while</span> (i &gt; index &amp;&amp; queue[i].id &gt; watcher.id) &#123;</span><br><span class="line">        i--</span><br><span class="line">      &#125;</span><br><span class="line">      queue.splice(i + <span class="number">1</span>, <span class="number">0</span>, watcher)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 通过waiting保证nextTick的调用逻辑只有一次</span></span><br><span class="line">    <span class="keyword">if</span> (!waiting) &#123;</span><br><span class="line">      waiting = <span class="literal">true</span></span><br><span class="line">      <span class="comment">// 调用nextTick方法 批量的进行更新</span></span><br><span class="line">      nextTick(flushSchedulerQueue)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">flushSchedulerQueue</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 1.因为父组件的创建过程是先于子的，所以watcher的创建也是先父后子，执行顺序也是先父后子</span></span><br><span class="line">  <span class="comment">// 2.用户自定义watcher要优先于渲染watcher执行</span></span><br><span class="line">  <span class="comment">// 3.如果一个组件在父组件watcher执行期间被销毁，那么它对应的watcher执行都可以被跳过</span></span><br><span class="line">  queue.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a.id - b.id) <span class="comment">// 由小到大</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p><code>$nextTick</code> 在 DOM 更新完之后，触发回调，用于获得更新后的 DOM</p>
</li>
<li><p><code>$nextTick</code> 方法主要是使用了 <strong>宏任务</strong> 和 <strong>微任务</strong>，定义一个异步方法，多次调用 <code>nextTick</code> 会将方法存入队列中，通过这个异步方法清空当前队列</p>
<p>Vue 2.4 之前都是使用微任务，但是微任务的优先级过高，有些情况下可能会出现比事件冒泡更快的情况，但如果都是用宏任务，有可能会出现渲染的性能问题</p>
<p>新版，默认使用微任务，但在特殊情况下会使用宏任务，比如：<code>v-on</code></p>
</li>
<li><p>对于实现宏任务，会先判断是否能用 <code>setImmediate</code>，不能的话降级为 <code>MessageChannel</code> ，以上都不行的话就是用 <code>setTimeout</code></p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> setImmediate !== <span class="string">&#x27;undefined&#x27;</span> &amp;&amp; isNative(setImmediate)) &#123;</span><br><span class="line">  macroTimerFunc = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    setImmediate(flushCallbacks)</span><br><span class="line">  &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (</span><br><span class="line">  <span class="keyword">typeof</span> MessageChannel !== <span class="string">&#x27;undefined&#x27;</span> &amp;&amp;</span><br><span class="line">  (isNative(MessageChannel) ||</span><br><span class="line">    <span class="comment">// PhantomJS</span></span><br><span class="line">    MessageChannel.toString() === <span class="string">&#x27;[object MessageChannelConstructor]&#x27;</span>)</span><br><span class="line">) &#123;</span><br><span class="line">  <span class="keyword">const</span> channel = <span class="keyword">new</span> MessageChannel()</span><br><span class="line">  <span class="keyword">const</span> port = channel.port2</span><br><span class="line">  channel.port1.onmessage = flushCallbacks</span><br><span class="line">  macroTimerFunc = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    port.postMessage(<span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  macroTimerFunc = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(flushCallbacks, <span class="number">0</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Vue-常见性能优化方式"><a href="#Vue-常见性能优化方式" class="headerlink" title="Vue 常见性能优化方式"></a>Vue 常见性能优化方式</h2><ul>
<li>合理使用 <code>v-show</code> 和 <code>v-if</code></li>
<li>合理使用 <code>computed</code></li>
<li><code>v-for</code> 时加 <code>key</code>（Vue 会进行复用），以及避免和 <code>v-if</code> 同时使用</li>
<li>自定义事件、DOM 事件及时销毁</li>
<li>合理使用异步组件、路由懒加载</li>
<li>合理使用 <code>keep-alive</code>（SPA 页面）</li>
<li><code>data</code> 层级不要太深，不要讲所有数据都放在 <code>data</code> 中（会增加 <code>getter</code> 和 <code>setter</code>，收集对应 <code>watcher</code>）</li>
<li>使用 <code>vue-loader</code> 在开发环境做模板编译（预编译）</li>
<li>webpack 层面的优化</li>
<li>前端通用的性能优化，如图片懒加载、防抖、节流</li>
<li>使用 SSR</li>
</ul>
<h2 id="释义参数-vue-template-compiler"><a href="#释义参数-vue-template-compiler" class="headerlink" title="释义参数 vue-template-compiler"></a>释义参数 vue-template-compiler</h2><ul>
<li><code>render</code> 中的参数释义</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">_c = createElement</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">installRenderHelpers</span>(<span class="params">target</span>) </span>&#123;</span><br><span class="line">  target._o = markOnce</span><br><span class="line">  target._n = toNumber</span><br><span class="line">  target._s = toString</span><br><span class="line">  target._l = renderList</span><br><span class="line">  target._t = renderSlot</span><br><span class="line">  target._q = looseEqual</span><br><span class="line">  target._i = looseIndexOf</span><br><span class="line">  target._m = renderStatic</span><br><span class="line">  target._f = resolveFilter</span><br><span class="line">  target._k = checkKeyCodes</span><br><span class="line">  target._b = bindObjectProps</span><br><span class="line">  target._v = createTextVNode</span><br><span class="line">  target._e = createEmptyVNode</span><br><span class="line">  target._u = resolveScopedSlots</span><br><span class="line">  target._g = bindObjectListeners</span><br><span class="line">  target._d = bindDynamicKeys</span><br><span class="line">  target._p = prependModifier</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>diff算法</tag>
        <tag>响应式原理</tag>
        <tag>nextTick</tag>
      </tags>
  </entry>
  <entry>
    <title>VScode 前端常用配置/设置/问题</title>
    <url>/posts/735a614e/</url>
    <content><![CDATA[<h2 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h2><h3 id="Snazzy-Operator"><a href="#Snazzy-Operator" class="headerlink" title="Snazzy Operator"></a>Snazzy Operator</h3><p><img data-src="https://img-blog.csdnimg.cn/img_convert/44b0beb30e83fe54f1f1948ecb00d613.png"></p>
<h3 id="Oceanic-Next"><a href="#Oceanic-Next" class="headerlink" title="Oceanic Next"></a>Oceanic Next</h3><p><img data-src="https://img-blog.csdnimg.cn/img_convert/92d5103fc2c57d04b198741d635eb776.png"></p>
<h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><h3 id="JetBrains-Mono"><a href="#JetBrains-Mono" class="headerlink" title="JetBrains Mono"></a><a href="https://www.jetbrains.com/lp/mono/">JetBrains Mono</a></h3><ul>
<li>字体效果</li>
</ul>
<p><img data-src="https://img-blog.csdnimg.cn/img_convert/b10162b4e1145d08d9685ac6ebfdeaa4.gif"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//控制字体体系</span></span><br><span class="line"><span class="string">&quot;editor.fontFamily&quot;</span>: <span class="string">&quot;&#x27;JetBrains Mono&#x27;, Consolas, &#x27;Courier New&#x27;, monospace&quot;</span>,</span><br></pre></td></tr></table></figure>

<h3 id="SourceCodePro"><a href="#SourceCodePro" class="headerlink" title="SourceCodePro"></a><a href="https://github.com/adobe-fonts/source-code-pro">SourceCodePro</a></h3><h2 id="图标"><a href="#图标" class="headerlink" title="图标"></a>图标</h2><h3 id="Material-Icon-Theme"><a href="#Material-Icon-Theme" class="headerlink" title="Material Icon Theme"></a>Material Icon Theme</h3><p><img data-src="https://img-blog.csdnimg.cn/img_convert/59234ecb0e2943a88377ea26165825c7.png"></p>
<h2 id="扩展插件"><a href="#扩展插件" class="headerlink" title="扩展插件"></a>扩展插件</h2><h3 id="Auto-Close-Tag-——代码闭合"><a href="#Auto-Close-Tag-——代码闭合" class="headerlink" title="Auto Close Tag ——代码闭合"></a>Auto Close Tag ——代码闭合</h3><p><img data-src="https://img-blog.csdnimg.cn/img_convert/075e43fb700f26a1240de4be016c8d37.png"></p>
<h3 id="Auto-Rename-Tag-——重命名匹配标签"><a href="#Auto-Rename-Tag-——重命名匹配标签" class="headerlink" title="Auto Rename Tag ——重命名匹配标签"></a>Auto Rename Tag ——重命名匹配标签</h3><ul>
<li>自动重命名配对的 HTML / XML 标签，也可以在 JSX 中使用</li>
</ul>
<p><img data-src="https://img-blog.csdnimg.cn/img_convert/d6e428b65dd8131b492659d4f3004107.png"></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&quot;auto-rename-tag.activationOnLanguage&quot;: [&quot;html&quot;, &quot;xml&quot;, &quot;php&quot;, &quot;javascript&quot;]</span><br></pre></td></tr></table></figure>

<h3 id="Better-Comments——-代码注释"><a href="#Better-Comments——-代码注释" class="headerlink" title="Better Comments—— 代码注释"></a>Better Comments—— 代码注释</h3><p><img data-src="https://img-blog.csdnimg.cn/img_convert/9ad8792e7e802de910dd0070cd7eacbb.png"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* MyMethod</span></span><br><span class="line"><span class="comment">  * 绿色的高亮注释</span></span><br><span class="line"><span class="comment">  ! 红色的高亮注释</span></span><br><span class="line"><span class="comment">  ? 蓝色的高亮注释</span></span><br><span class="line"><span class="comment">  todo 橙色的高亮注释</span></span><br><span class="line"><span class="comment">  // 灰色带删除线的注释</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p><img data-src="https://img-blog.csdnimg.cn/img_convert/1eb567481b1aea535769d85a4e9f07d4.png"></p>
<h3 id="Bracket-Pair-Colorizer-2-——括号颜色"><a href="#Bracket-Pair-Colorizer-2-——括号颜色" class="headerlink" title="Bracket Pair Colorizer 2 ——括号颜色"></a>Bracket Pair Colorizer 2 ——括号颜色</h3><ul>
<li>此扩展名允许用颜色标识匹配的括号</li>
</ul>
<p><img data-src="https://img-blog.csdnimg.cn/img_convert/612dc7c99c0304caae1c183dfdc71d62.png"></p>
<h3 id="Change-case-——切换命名规则"><a href="#Change-case-——切换命名规则" class="headerlink" title="Change-case ——切换命名规则"></a>Change-case ——切换命名规则</h3><p><img data-src="https://img-blog.csdnimg.cn/img_convert/eb96264dcbd7b4e87d0aee3c1e4d59dc.png"></p>
<p>Ctrl + Shift + P 执行命令的输入框，选择 <code>Change Case Commands</code>，选择其规范格式即可</p>
<p><img data-src="https://img-blog.csdnimg.cn/img_convert/ea0f9eb2f34906f683d24a7b01cb3b87.png"></p>
<h3 id="Code-Runner——-代码运行"><a href="#Code-Runner——-代码运行" class="headerlink" title="Code Runner—— 代码运行"></a>Code Runner—— 代码运行</h3><ul>
<li>代码一键运行，万能语言运行环境</li>
</ul>
<p><img data-src="https://img-blog.csdnimg.cn/img_convert/3f96b4d903074054eda29cb333cfef7f.png"></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&quot;code-runner.executorMap&quot;: &#123;</span><br><span class="line">	&quot;python&quot;: &quot;set PYTHONIOENCODING=utf8 &amp;&amp; python&quot;,</span><br><span class="line">	&quot;java&quot;: &quot;cd $dir &amp;&amp; javac -encoding utf-8 $fileName &amp;&amp; java $fileNameWithoutExt&quot;,</span><br><span class="line">&#125;,</span><br><span class="line">&quot;code-runner.runInTerminal&quot;: true,</span><br></pre></td></tr></table></figure>
<h3 id="Color-Highlight-——-高亮显示颜色"><a href="#Color-Highlight-——-高亮显示颜色" class="headerlink" title="Color Highlight —— 高亮显示颜色"></a>Color Highlight —— 高亮显示颜色</h3><p><img data-src="https://img-blog.csdnimg.cn/5b19c5fc4dcc4779a6ec93c2584994a2.png"></p>
<h3 id="Chinese-Simplified-Language-Pack-——汉化包"><a href="#Chinese-Simplified-Language-Pack-——汉化包" class="headerlink" title="Chinese (Simplified) Language Pack ——汉化包"></a>Chinese (Simplified) Language Pack ——汉化包</h3><p><img data-src="https://img-blog.csdnimg.cn/img_convert/8523c757447f0bb63150699bbdb9a120.png"></p>
<h3 id="CSS-Peek-——快速编辑查看css"><a href="#CSS-Peek-——快速编辑查看css" class="headerlink" title="CSS Peek ——快速编辑查看css"></a>CSS Peek ——快速编辑查看css</h3><p>比较常用的快捷键</p>
<ul>
<li>Go to：直接跳转到 CSS 文件或在新的编辑器（F12）中打开</li>
<li>Hover：在符号上悬停显示定义（Ctrl + hover）</li>
</ul>
<p><img data-src="https://img-blog.csdnimg.cn/img_convert/40252b907528a66d3431bb27604f5d74.png"></p>
<h3 id="Code-Spell-Checker-——代码检查"><a href="#Code-Spell-Checker-——代码检查" class="headerlink" title="Code Spell Checker ——代码检查"></a>Code Spell Checker ——代码检查</h3><ul>
<li>检查单词拼写是否有错</li>
</ul>
<p><img data-src="https://img-blog.csdnimg.cn/img_convert/a2137bc49325c18fd8ae8bbbfe19c623.png"></p>
<h3 id="Document-This-——增加代码注释"><a href="#Document-This-——增加代码注释" class="headerlink" title="Document This ——增加代码注释"></a>Document This ——增加代码注释</h3><p>选中代码，键入 <code>Ctrl + Alt + D</code> 即可生成注释模板<br><img data-src="https://img-blog.csdnimg.cn/c083b8bc1ac24d068ea8a758175295b4.png"></p>
<h3 id="DotENV-——env-高亮"><a href="#DotENV-——env-高亮" class="headerlink" title="DotENV ——env 高亮"></a>DotENV ——env 高亮</h3><p>env 可能大致分为如下几种情况</p>
<ul>
<li><code>.env.development</code> 开发环境</li>
<li><code>.env.production</code> 生产环境</li>
<li><code>.env.stage</code> 预发布环境 <code>.env.grayscale</code> 灰度测试环境</li>
<li><code>.env.sit</code> 系统集成测试环境 <code>.env.test</code> 测试环境</li>
</ul>
<p><img data-src="https://img-blog.csdnimg.cn/img_convert/9f4397e73ceb9d2ac0446d7bf2b63151.png"></p>
<h3 id="ESLint-——代码风格"><a href="#ESLint-——代码风格" class="headerlink" title="ESLint ——代码风格"></a>ESLint ——代码风格</h3><ul>
<li>语法规则和代码风格的检查工具</li>
</ul>
<p><img data-src="https://img-blog.csdnimg.cn/img_convert/f0d36b33675af3ab96846851b2ca8cba.png"></p>
<p><a href="https://docs.shanyuhai.top/tools/vscode/format-with-eslint.html">ESLint</a></p>
<h3 id="filesize——文件大小"><a href="#filesize——文件大小" class="headerlink" title="filesize——文件大小"></a>filesize——文件大小</h3><p><img data-src="https://img-blog.csdnimg.cn/img_convert/c13c3954830cf70f8cbd26707f385e63.png"></p>
<p>在 Vscode 左下角显示文件大小</p>
<p><img data-src="https://img-blog.csdnimg.cn/img_convert/9ad77a5030fb2942a20764c71ba3e90b.png"></p>
<h3 id="Image-preview——图片预览"><a href="#Image-preview——图片预览" class="headerlink" title="Image preview——图片预览"></a>Image preview——图片预览</h3><ul>
<li>悬停时显示图像预览或装订线左侧可以预览大小图片</li>
</ul>
<p><img data-src="https://img-blog.csdnimg.cn/img_convert/4b2a642aa6c9e54f5d6a64cecde17eaa.png"></p>
<h3 id="Indenticator-——-强调缩进深度"><a href="#Indenticator-——-强调缩进深度" class="headerlink" title="Indenticator —— 强调缩进深度"></a>Indenticator —— 强调缩进深度</h3><p><img data-src="https://img-blog.csdnimg.cn/11f8580c2ea74100a9252b9c66fb6cbe.png"></p>
<h3 id="Indent-Rainbow——文本缩进颜色"><a href="#Indent-Rainbow——文本缩进颜色" class="headerlink" title="Indent Rainbow——文本缩进颜色"></a>Indent Rainbow——文本缩进颜色</h3><p><img data-src="https://img-blog.csdnimg.cn/img_convert/421edebf8a64c9c16e96b93416afe03f.png"></p>
<p>缩进效果如下：</p>
<p><img data-src="https://img-blog.csdnimg.cn/img_convert/770b16dd075a82ccacf03961569fe96b.png"></p>
<h3 id="koroFileHeader-——-函数注释"><a href="#koroFileHeader-——-函数注释" class="headerlink" title="koroFileHeader —— 函数注释"></a>koroFileHeader —— 函数注释</h3><p>详细配置可参考：<a href="https://blog.csdn.net/D_claus/article/details/85243454">vscode添加新建文件头部注释和函数注释</a><br><img data-src="https://img-blog.csdnimg.cn/400f341f7947476680cd3388ddffec4d.png"></p>
<h3 id="Live-Server——热更新"><a href="#Live-Server——热更新" class="headerlink" title="Live Server——热更新"></a>Live Server——热更新</h3><p><img data-src="https://img-blog.csdnimg.cn/img_convert/4646c18eaa5bdf9d1381b18997b5313d.png"></p>
<h3 id="open-in-browser——打开默认浏览器"><a href="#open-in-browser——打开默认浏览器" class="headerlink" title="open in browser——打开默认浏览器"></a>open in browser——打开默认浏览器</h3><p><img data-src="https://img-blog.csdnimg.cn/img_convert/a2a03e1007b443545624f583db933b79.png"></p>
<h3 id="Prettier——代码格式化"><a href="#Prettier——代码格式化" class="headerlink" title="Prettier——代码格式化"></a>Prettier——代码格式化</h3><p><img data-src="https://img-blog.csdnimg.cn/img_convert/128f90e8aa946c031c3f6e752e0d208f.png"></p>
<p>常用配置表如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 多少行时开始折行</span></span><br><span class="line">    <span class="attr">&quot;prettier.printWidth&quot;</span>: <span class="number">140</span>,</span><br><span class="line">    <span class="comment">// flase 不要分号</span></span><br><span class="line">    <span class="attr">&quot;prettier.semi&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="comment">// true 使用单引号</span></span><br><span class="line">    <span class="attr">&quot;prettier.singleQuote&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// 箭头函数参数只有一个时是否要有小括号。avoid：省略括号</span></span><br><span class="line">    <span class="attr">&quot;prettier.arrowParens&quot;</span>: <span class="string">&quot;avoid&quot;</span>,</span><br><span class="line">    <span class="comment">// 自动格式化</span></span><br><span class="line">    <span class="attr">&quot;editor.formatOnSave&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Path-Intellisense——自动显示文件名-路径"><a href="#Path-Intellisense——自动显示文件名-路径" class="headerlink" title="Path Intellisense——自动显示文件名/路径"></a>Path Intellisense——自动显示文件名/路径</h3><p><img data-src="https://img-blog.csdnimg.cn/img_convert/416f5adc4c14224ad9bc77855a1c27df.png"></p>
<h3 id="ES7-React-Redux-GraphQL-React-Native-snippets——高亮jsx"><a href="#ES7-React-Redux-GraphQL-React-Native-snippets——高亮jsx" class="headerlink" title="ES7 React/Redux/GraphQL/React-Native snippets——高亮jsx"></a>ES7 React/Redux/GraphQL/React-Native snippets——高亮jsx</h3><p><img data-src="https://img-blog.csdnimg.cn/img_convert/9bbac98df915d7f543a333ce869da317.png"></p>
<h3 id="Settings-Sync——Vscode配置同步"><a href="#Settings-Sync——Vscode配置同步" class="headerlink" title="Settings Sync——Vscode配置同步"></a>Settings Sync——Vscode配置同步</h3><ul>
<li>使用 GitHub Gist 在多台机器上同步设置，代码片段，主题，文件图标，启动，键绑定，工作区和扩展</li>
</ul>
<p><img data-src="https://img-blog.csdnimg.cn/img_convert/a8fc4b6ac8688f3e10e2b1b1c2287f07.png"></p>
<ul>
<li><p>上传快捷键 : Shift + Alt + U</p>
</li>
<li><p>下载快捷键 : Shift + Alt + D</p>
</li>
</ul>
<h3 id="Vetur——Vue工具"><a href="#Vetur——Vue工具" class="headerlink" title="Vetur——Vue工具"></a>Vetur——Vue工具</h3><ul>
<li>支持多种功能，比如语法高亮、错误检测、Emmet 和 Snippet 等等</li>
</ul>
<p><img data-src="https://img-blog.csdnimg.cn/img_convert/79d6d89a327cb3f407004a26dc155dc6.png"></p>
<h3 id="Vue-CSS-Peek——Vue-查看-CSS-定义"><a href="#Vue-CSS-Peek——Vue-查看-CSS-定义" class="headerlink" title="Vue CSS Peek——Vue 查看 CSS 定义"></a>Vue CSS Peek——Vue 查看 CSS 定义</h3><ul>
<li>允许在 Vue 中跳转到 CSS 定义，补足 CSS Peek 无法定义的部分</li>
</ul>
<p><img data-src="https://img-blog.csdnimg.cn/img_convert/224c68fa7e8b2711d96db0d7031bfb09.png"></p>
<h3 id="Vue-helper——Vue"><a href="#Vue-helper——Vue" class="headerlink" title="Vue-helper——Vue"></a>Vue-helper——Vue</h3><ul>
<li>Element、iView 代码提示和属性解读</li>
<li>允许查看方法、组件的定义</li>
</ul>
<p><img data-src="https://img-blog.csdnimg.cn/img_convert/5e3d38f8d10495270f313177a4f6207f.png"></p>
<p><strong>注意：</strong> 下载的不是下面那个，下面那个是语法提示、简化的插件</p>
<p><img data-src="https://img-blog.csdnimg.cn/img_convert/b3b8d8deabe36111a8ce1d2b7dbfd674.png"></p>
<h3 id="Vue-Peek——Vue-查看组件定义"><a href="#Vue-Peek——Vue-查看组件定义" class="headerlink" title="Vue Peek——Vue 查看组件定义"></a>Vue Peek——Vue 查看组件定义</h3><ul>
<li>允许在 Vue 中跳转相对/绝对文件路径</li>
<li>允许查看组件的定义</li>
</ul>
<p><img data-src="https://img-blog.csdnimg.cn/img_convert/5d2ebfc340f21579bfcb217a2cb8046a.png"></p>
<h2 id="Emmet"><a href="#Emmet" class="headerlink" title="Emmet"></a>Emmet</h2><p>目前所有的前端编辑器都支持 Emmet</p>
<p><a href="https://docs.emmet.io/cheat-sheet/">Emmet 作弊表</a></p>
<h2 id="settings-json"><a href="#settings-json" class="headerlink" title="settings.json"></a>settings.json</h2><p>在 VS Code 中，按 <strong>Ctrl + P</strong>，输入 <strong>settings.json</strong> 并打开该文件</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* 配置 terminal 为 Git */</span></span><br><span class="line">  <span class="attr">&quot;terminal.integrated.profiles.windows&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;Git-Bash&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;path&quot;</span>: <span class="string">&quot;D:\\Develop\\Git\\bin\\bash.exe&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;args&quot;</span>: []</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;terminal.integrated.defaultProfile.windows&quot;</span>: <span class="string">&quot;Git-Bash&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;code-runner.runInTerminal&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">/* 配置编辑器字体、贯标 */</span></span><br><span class="line">  <span class="attr">&quot;editor.fontSize&quot;</span>: <span class="number">16</span>,</span><br><span class="line">  <span class="attr">&quot;editor.lineHeight&quot;</span>: <span class="number">20</span>,</span><br><span class="line">  <span class="attr">&quot;editor.letterSpacing&quot;</span>: <span class="number">0.5</span>,</span><br><span class="line">  <span class="attr">&quot;editor.fontWeight&quot;</span>: <span class="string">&quot;400&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;editor.fontFamily&quot;</span>: <span class="string">&quot;&#x27;JetBrains Mono&#x27;, Consolas, &#x27;Courier New&#x27;, monospace&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;editor.fontLigatures&quot;</span>: <span class="literal">true</span>, <span class="comment">// 连体字</span></span><br><span class="line">  <span class="attr">&quot;editor.tabSize&quot;</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">&quot;editor.cursorStyle&quot;</span>: <span class="string">&quot;line&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;editor.cursorWidth&quot;</span>: <span class="number">5</span>,</span><br><span class="line">  <span class="attr">&quot;editor.cursorBlinking&quot;</span>: <span class="string">&quot;solid&quot;</span>, <span class="comment">// 光标动画样式</span></span><br><span class="line">  <span class="attr">&quot;editor.suggestSelection&quot;</span>: <span class="string">&quot;first&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;editor.wordWrap&quot;</span>: <span class="string">&quot;on&quot;</span>, <span class="comment">// 视区自动折行</span></span><br><span class="line">  <span class="attr">&quot;editor.defaultFormatter&quot;</span>: <span class="string">&quot;esbenp.prettier-vscode&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;editor.detectIndentation&quot;</span>: <span class="literal">false</span>, <span class="comment">// 打开文件时不自动检查tabSize</span></span><br><span class="line">  <span class="comment">// &quot;editor.formatOnSave&quot;: true, // 自动格式化</span></span><br><span class="line">  <span class="attr">&quot;terminal.integrated.fontSize&quot;</span>: <span class="number">15</span>,</span><br><span class="line">  <span class="attr">&quot;files.autoSave&quot;</span>: <span class="string">&quot;onFocusChange&quot;</span>, <span class="comment">// 文件焦点变化自动保存</span></span><br><span class="line">  <span class="comment">/* 配置编辑器样式 */</span></span><br><span class="line">  <span class="attr">&quot;window.zoomLevel&quot;</span>: <span class="number">0</span>, <span class="comment">// 窗口缩放级别</span></span><br><span class="line">  <span class="attr">&quot;explorer.compactFolders&quot;</span>: <span class="literal">false</span>, <span class="comment">// 紧凑显示名称</span></span><br><span class="line">  <span class="attr">&quot;workbench.iconTheme&quot;</span>: <span class="string">&quot;material-icon-theme&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;workbench.colorTheme&quot;</span>: <span class="string">&quot;Snazzy Operator&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;workbench.sideBar.location&quot;</span>: <span class="string">&quot;right&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;indentRainbow.colors&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;rgba(255,255,64,0.07)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;rgba(127,255,127,0.07)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;rgba(255,127,255,0.07)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;rgba(79,236,236,0.07)&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="comment">/* 配置格式化 */</span></span><br><span class="line">  <span class="attr">&quot;prettier.singleQuote&quot;</span>: <span class="literal">true</span>, <span class="comment">// 使用单引号</span></span><br><span class="line">  <span class="attr">&quot;prettier.semi&quot;</span>: <span class="literal">false</span>, <span class="comment">// 使用分号</span></span><br><span class="line">  <span class="attr">&quot;prettier.arrowParens&quot;</span>: <span class="string">&quot;avoid&quot;</span>, <span class="comment">// (x) =&gt; &#123;&#125; 只有一个参数省略括号</span></span><br><span class="line">  <span class="attr">&quot;prettier.tabWidth&quot;</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">&quot;prettier.printWidth&quot;</span>: <span class="number">100</span>,</span><br><span class="line">  <span class="comment">/* 配置编辑器确认方式 */</span></span><br><span class="line">  <span class="attr">&quot;open-in-browser.default&quot;</span>: <span class="string">&quot;chrome&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;liveServer.settings.CustomBrowser&quot;</span>: <span class="string">&quot;chrome&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;git.confirmSync&quot;</span>: <span class="literal">false</span>, <span class="comment">// 同步 Git 是否确认</span></span><br><span class="line">  <span class="attr">&quot;explorer.confirmDelete&quot;</span>: <span class="literal">false</span>, <span class="comment">// 删除文件是否确认</span></span><br><span class="line">  <span class="attr">&quot;security.workspace.trust.untrustedFiles&quot;</span>: <span class="string">&quot;open&quot;</span>, <span class="comment">// 允许打开不信任文件</span></span><br><span class="line">  <span class="attr">&quot;javascript.updateImportsOnFileMove.enabled&quot;</span>: <span class="string">&quot;always&quot;</span>, <span class="comment">// 移动文件更新导入路径</span></span><br><span class="line">  <span class="comment">/* 文件不会显示在工作空间中 */</span></span><br><span class="line">  <span class="attr">&quot;files.exclude&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;**/.git&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;**/.svn&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;**/.DS_Store&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;**/.vscode&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;node_modules&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;target&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;logs&quot;</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">/* 搜索功能时，文件夹/文件排除在外 */</span></span><br><span class="line">  <span class="attr">&quot;search.exclude&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;**/node_modules&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;**/target&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;**/logs&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;**/dist&quot;</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;emmet.syntaxProfiles&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;vue-html&quot;</span>: <span class="string">&quot;html&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;vue&quot;</span>: <span class="string">&quot;html&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;eslint.validate&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;javascript&quot;</span>,</span><br><span class="line">    <span class="string">&quot;javascriptreact&quot;</span>,</span><br><span class="line">    <span class="string">&quot;typescript&quot;</span>,</span><br><span class="line">    <span class="string">&quot;typescriptreact&quot;</span>,</span><br><span class="line">    <span class="string">&quot;vue&quot;</span>,</span><br><span class="line">    <span class="string">&quot;html&quot;</span>,</span><br><span class="line">    <span class="string">&quot;jsx&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;typescript.locale&quot;</span>: <span class="string">&quot;en&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="jsconfig-json"><a href="#jsconfig-json" class="headerlink" title="jsconfig.json"></a>jsconfig.json</h2><p>绝对路径、相对路径跳转需要在根目录增加 <code>jsconfig.json</code> 文件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;baseUrl&quot;</span>: <span class="string">&quot;.&quot;</span>,</span><br><span class="line">    <span class="string">&quot;paths&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;@/*&quot;</span>: [<span class="string">&quot;./src/*&quot;</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;target&quot;</span>: <span class="string">&quot;ES6&quot;</span>,</span><br><span class="line">    <span class="string">&quot;module&quot;</span>: <span class="string">&quot;commonjs&quot;</span>,</span><br><span class="line">    <span class="string">&quot;allowSyntheticDefaultImports&quot;</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;include&quot;</span>: [<span class="string">&quot;src/**/*&quot;</span>],</span><br><span class="line">  <span class="string">&quot;exclude&quot;</span>: [<span class="string">&quot;node_modules&quot;</span>, <span class="string">&quot;dist&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><p><a href="https://code.visualstudio.com/shortcuts/keyboard-shortcuts-windows.pdf">vscode 快捷键</a></p>
<ul>
<li><strong>Ctrl + P</strong> ：转到文件，您可以在 Visual Studio Code 中移动到打开的文件/文件夹的任何文件。</li>
<li><strong>Ctrl + `</strong> ：在 VS Code 中打开 terminal</li>
<li><strong>Alt + Down</strong>：下移一行</li>
<li><strong>Alt + Up</strong>：上移一行</li>
<li><strong>Ctrl + D</strong>：将选定的字符移动到下一个匹配字符串上</li>
<li><strong>Ctrl + Space</strong>：触发建议</li>
<li><strong>Shift + Alt + Down</strong>：向下复制行</li>
<li><strong>Shift + Alt + Up</strong>：向上复制行</li>
<li><strong>Ctrl + Shift + T</strong>：重新打开最新关闭的窗口</li>
</ul>
<h2 id="VSCODE-问题"><a href="#VSCODE-问题" class="headerlink" title="VSCODE 问题"></a>VSCODE 问题</h2><ol>
<li>vscode 保存文件时自动删除行尾空格：搜索 <code>files.trimTrailingWhitespace</code> ，然后将选项勾选即可</li>
<li>Code-runner 在终端运行：搜索 <code>code-runner.runInTerminal</code> ，然后将选项勾选即可</li>
<li>VSCode 中调用 cv2，代码一直显示红色波浪线（pylint 只支持自己的标准库）：搜索 <code>Pylint Args</code> 点击 add item 添加 <code>--generate-members</code> 即可</li>
<li>代码补全失效：搜索 <code>auto Complete</code> 添加第三方库的路径</li>
<li>如果打开终端的时候弹出了系统的 cmd 窗口。解决方法：打开系统 cmd，然后左上角右键属性，取消使用旧版控制台<br><img data-src="https://img-blog.csdnimg.cn/20200811234121722.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4Njg5Mzk1,size_16,color_FFFFFF,t_70#pic_center" alt="弹出cmd窗口"></li>
</ol>
<h2 id="扩展工具其他篇——Jypyter"><a href="#扩展工具其他篇——Jypyter" class="headerlink" title="扩展工具其他篇——Jypyter"></a>扩展工具其他篇——Jypyter</h2><p><a href="https://zhuanlan.zhihu.com/p/73452541">工具篇-vscode 效率提升插件</a></p>
<p><a href="http://news.eeworld.com.cn/mp/QbitAI/a58625.jspx">你真的会用 Jupyter 吗？这里有 7 个进阶功能助你效率翻倍</a></p>
<p>如果出错：以管理员方式运行</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 更新pip到最新版本</span></span><br><span class="line">pip install --upgrade pip</span><br><span class="line"><span class="comment"># 如果没有pip</span></span><br><span class="line">python -m ensurepip</span><br><span class="line">easy_install pip</span><br><span class="line"><span class="comment"># 安装Jupyter</span></span><br><span class="line">pip install jupyter</span><br><span class="line"><span class="comment"># 安装nbextensions</span></span><br><span class="line">python -m pip install jupyter_contrib_nbextensions</span><br><span class="line">jupyter contrib nbextension install --user --skip-running-check</span><br><span class="line">或</span><br><span class="line">conda install -c conda-forge jupyter_nbextensions_configurator</span><br><span class="line"><span class="comment"># 安装完成后，勾选 “Table of Contents” 以及 “Hinterland”</span></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">jupyter notebook</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>基础配置</category>
      </categories>
      <tags>
        <tag>主题</tag>
        <tag>字体</tag>
        <tag>图标</tag>
        <tag>插件</tag>
        <tag>配置</tag>
      </tags>
  </entry>
  <entry>
    <title>Node 事件循环及多线程</title>
    <url>/posts/126e4b0f/</url>
    <content><![CDATA[<h2 id="浏览器事件循环"><a href="#浏览器事件循环" class="headerlink" title="浏览器事件循环"></a>浏览器事件循环</h2><blockquote>
<p><a href="https://www.bilibili.com/video/BV1nK4y1M73T?spm_id_from=333.999.0.0">前端必会的异步编程 微任务 宏任务 Node.js 事件循环与多进程</a></p>
<p>推荐结合：<a href="https://nodejs.org/zh-cn/docs/guides/event-loop-timers-and-nexttick/">Node 官方文档</a> 查漏补缺或解决疑问</p>
</blockquote>
<p><strong>JS 为什么是单线程的</strong></p>
<p>浏览器 JS 的作用是操作 DOM，这决定了它只能是单线程的，否则会带来很多复杂的问题</p>
<ul>
<li>比如：假定 JavaScript 同时又两个线程，一个线程在某个 DOM 节点上添加内容，另一个线程删除了这个节点，这时浏览器应该以哪个线程为准？</li>
</ul>
<p><strong>浏览器是多线程</strong></p>
<p>浏览器基于 EventQueue 事件队列、EventLoop 事件循环两大机制，构建出 “异步编程的效果” -&gt; 单线程异步操作</p>
<ul>
<li>GUI 渲染线程</li>
<li>JS 引擎线程【渲染解析 JS 的】</li>
<li>DOM/定时器监听等线程</li>
<li>HTTP 网络线程</li>
</ul>
<p><strong>浏览器中的 Event Loop</strong></p>
<ul>
<li>主线程从任务队列中读取事件，这个过程是循环不断的，这种整个运行机制又称为 <code>Event Loop</code> （事件循环）</li>
<li>执行栈在执行完 <strong>同步任务</strong> 后，查看 <strong>执行栈</strong> 是否为空，如果 <strong>执行栈</strong> 为空，就回去检查 <strong>微任务</strong> 队列是否为空，如果为空的话，就会执行 <strong>宏任务</strong>，否则就一次性执行完所有 <strong>微任务</strong></li>
</ul>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/js-img/%E6%B5%8F%E8%A7%88%E5%99%A8EventLoop.gif"></p>
<p><strong>事件队列分为同步任务（synchronous）和异步任务（asynchronous）</strong></p>
<ol>
<li>所有同步任务都在主线程上执行，形成了一个执行栈（execution content stack）</li>
<li>主线程之外，还存在一个 “任务队列” （task queue），只要异步任务有了运行结果，就在 “任务队列” 之中放置一个事件</li>
<li>一旦 “执行栈” 中的所有同步任务执行完毕，系统就会读取 “任务队列”，看看里面有哪些事件，哪些对应的异步任务，于是等任务结束状态，进入执行栈，开始执行</li>
<li>主线程不断重复上面的第三步</li>
</ol>
<p><strong>除了广义的同步任务和异步任务，异步任务可以细分为宏任务（macrotask）和微任务（microtask）</strong></p>
<ul>
<li><p>宏任务</p>
<p>UI rendering 是浏览器的宏任务</p>
</li>
</ul>
<table>
<thead>
<tr>
<th></th>
<th>浏览器</th>
<th>Node</th>
</tr>
</thead>
<tbody><tr>
<td><code>I/O</code></td>
<td>✔️</td>
<td>✔️</td>
</tr>
<tr>
<td><code>setTimeout</code></td>
<td>✔️</td>
<td>✔️</td>
</tr>
<tr>
<td><code>setInterval</code></td>
<td>✔️</td>
<td>✔️</td>
</tr>
<tr>
<td><code>setImmediate</code></td>
<td>❌</td>
<td>✔️</td>
</tr>
<tr>
<td><code>requestAnimationFrame</code></td>
<td>✔️</td>
<td>❌</td>
</tr>
</tbody></table>
<ul>
<li>微任务</li>
</ul>
<table>
<thead>
<tr>
<th></th>
<th>浏览器</th>
<th>Node</th>
</tr>
</thead>
<tbody><tr>
<td><code>process.nextTick</code></td>
<td>❌</td>
<td>✔️</td>
</tr>
<tr>
<td><a href="http://javascript.ruanyifeng.com/dom/mutationobserver.html"><code>MutationObserver</code></a></td>
<td>✔️</td>
<td>❌</td>
</tr>
<tr>
<td><code>Promise.then catch finally</code></td>
<td>✔️</td>
<td>✔️</td>
</tr>
</tbody></table>
<ul>
<li>练习：</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;setTimeout&#x27;</span>)</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.resolve().then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;promise1&#x27;</span>)</span><br><span class="line">  <span class="built_in">Promise</span>.resolve().then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;promise2&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// promise1 promise2 setTimeout</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* ---------- */</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">Promise</span>.resolve().then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;promise&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.resolve().then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;setTimeout&#x27;</span>)</span><br><span class="line">  &#125;, <span class="number">0</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;main&#x27;</span>)</span><br><span class="line"><span class="comment">// main promise setTimeout</span></span><br></pre></td></tr></table></figure>

<h2 id="Node-js-事件循环"><a href="#Node-js-事件循环" class="headerlink" title="Node.js 事件循环"></a>Node.js 事件循环</h2><p>Node 的 Event Loop 是基于 <code>libuv</code> 实现的，<code>libuv</code> 使用异步、事件驱动的编程方法，核心是提供 <code>I/O</code> 的事件循环和异步回调</p>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/js-img/NodeEventLoop.png"></p>
<h3 id="事件循环六个阶段"><a href="#事件循环六个阶段" class="headerlink" title="事件循环六个阶段"></a>事件循环六个阶段</h3><blockquote>
<p><a href="https://juejin.cn/post/6844903764202094606#heading-28">一次弄懂Event Loop（彻底解决此类面试问题）</a></p>
<p><a href="https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/">The Node.js Event Loop</a></p>
</blockquote>
<p>Node 的 Event Loop 是基于 <code>libuv</code> 实现的，<code>libuv</code> 使用异步、事件驱动的编程方法，核心是提供 <code>I/O</code> 的事件循环和异步回调</p>
<p>当 Node.js 启动时会初始化 Event Loop，每一个 Event Loop 都会包含如下六个循环阶段：</p>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/js-img/NodeEvent6.png"></p>
<p><strong>阶段概览</strong></p>
<ol>
<li><p><strong>timers（定时器）</strong>：此阶段执行那些由 <code>setTimeout()</code> 和 <code>setInterval()</code> 调度的回调函数</p>
</li>
<li><p><strong>pending callbacks</strong>：执行 I/O 回调，此阶段执行几乎所有的回调函数，除了 <strong>close callbacks（关闭回调）</strong> 和那些由 <strong>timers</strong> 与 <code>setImmediate()</code> 调度的回调</p>
<p><code>setImmediate() ≈ setTimeout(cb, 0)</code></p>
</li>
<li><p>idle（空转），prepare：此阶段只在内部使用</p>
</li>
<li><p><strong>poll（轮询）</strong>：检索新的 I/O 事件，在恰当的时候 Node 会阻塞这个阶段</p>
</li>
<li><p>check（检查）：<code>setImmediate()</code> 设置的回调会在这个阶段被调用</p>
</li>
<li><p>close callbacks（关闭事件的回调）：诸如：<code>http.server.on(&#39;close&#39;, [fn])</code>、<code>socket,on(&#39;close&#39;, [fn])</code>，此类的回调会在此阶段被调用</p>
</li>
</ol>
<p><strong>poll 阶段</strong></p>
<p>如果 Event Loop 进入了 <strong>poll</strong> 阶段，且代码未设定 <code>timer</code>，将会发生下面情况：</p>
<ul>
<li>如果 <code>poll</code> 队列不为空，则 Event Loop 将 <strong>同步执行</strong> <code>callback</code> 队列，直至队列为空或者达到系统上限</li>
<li>如果 <code>poll</code> 队列为空，将会发生下面情况：<ul>
<li>如果有 <code>setImmediate()</code> 回调需要执行， Event Loop 会立即停止执行 <strong>poll</strong> 阶段并执行 <strong>check</strong> 阶段，然后执行回调</li>
<li>如果没有 <code>setImmediate()</code> 回调需要执行，Event Loop 将阻塞在 <strong>poll</strong> 阶段，等待 <code>callback</code> 被添加到任务队列中，然后执行</li>
</ul>
</li>
</ul>
<p>如果 Event Loop 进入了 <strong>poll</strong> 阶段，且代码设定了 <code>timer</code>：</p>
<ul>
<li>如果 <code>poll</code> 队列为空，则 Event Loop 将检查 <code>timer</code> 是否超时，如果有的话会回到 <strong>timers</strong> 阶段执行回调</li>
</ul>
<p><strong>不同版本 Node</strong></p>
<ul>
<li>浏览器只要执行了一个宏任务就会执行微任务队列</li>
<li>Node 10(11以下) 中只有全部执行了 <strong>timers</strong> 阶段队列的全部任务才执行微任务队列</li>
<li>Node 11 在 <strong>timers</strong> 阶段的 <code>setTimeout()</code>、<code>setInterval()</code> 和在 <strong>check</strong> 阶段的 <code>setImmediate()</code> 修改为一旦执行一个阶段里的一个任务就会执行微任务队列</li>
</ul>
<h3 id="fs-和-setTimeout-的关系"><a href="#fs-和-setTimeout-的关系" class="headerlink" title="fs 和 setTimeout 的关系"></a>fs 和 setTimeout 的关系</h3><ol>
<li>执行 <code>setTimeout(fn, 10)</code>，会立即执行 Node 六个阶段，当前时间为 0ms， <strong>timers</strong> 阶段没有任何 <code>callback</code> 加入，跳过</li>
<li>执行 <strong>pending callbacks</strong> 阶段，执行定时器或 <code>setImmediate</code> 以外的回调，没有跳过</li>
<li>执行 <strong>poll</strong> 阶段，<code>poll</code> 队列为空且没有 <code>setImmediate()</code> ，会阻塞等待 2ms，等待 <code>fs.readfile</code> 读取文件完毕执行其回调，会调阻塞代码 20ms</li>
<li>此时时间为 22ms，<code>poll</code> 队列为空且有设定的 <code>timer</code>，因为 <code>setTimeout</code> 的回调执行 10ms，此时时间已经达到，事件循环会进入 <strong>timers</strong> 阶段，执行 <code>setTimeout(fn, 10)</code></li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">someAsyncOperation</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 花费2ms</span></span><br><span class="line">  fs.readFile(path.resolve(__dirname, <span class="string">&#x27;/read.txt&#x27;</span>), callback)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> timeoutScheduled = <span class="built_in">Date</span>.now()</span><br><span class="line"><span class="keyword">let</span> fileReadTime = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> delay = <span class="built_in">Date</span>.now() - timeoutScheduled</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`setTimeout: <span class="subst">$&#123;delay&#125;</span> ms have passed since I was scheduled`</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`fileReaderTime <span class="subst">$&#123;fileReadTime - timeoutScheduled&#125;</span>`</span>)</span><br><span class="line">&#125;, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">someAsyncOperation(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  fileReadTime = <span class="built_in">Date</span>.now()</span><br><span class="line">  <span class="keyword">while</span> (<span class="built_in">Date</span>.now() - fileReadTime &lt; <span class="number">20</span>) &#123;&#125; <span class="comment">// 卡住20ms</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">setTimeout: 22 ms have passed since I was scheduled</span></span><br><span class="line"><span class="comment">fileReaderTime 2</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p>稍微做下改变，假设文件读取花费了 9ms，定时器只花了 5ms</p>
<ol>
<li>执行 <code>setTimeout(fn, 5)</code>，当前时间为 0ms， <strong>timers</strong> 阶段没有任何 <code>callback</code> 加入，跳过</li>
<li>执行 <strong>pending callbacks</strong> 阶段，执行定时器或 <code>setImmediate</code> 以外的回调，没有跳过</li>
<li>执行 <strong>poll</strong> 阶段，<code>poll</code> 队列为空且没有 <code>setImmediate()</code> ，会阻塞等待 5ms，当前时间为 5ms，此时 <code>poll</code> 队列为空且设定了 <code>timer</code>，事件循环会进入 <strong>timers</strong> 阶段，执行<code>setTimeout(fn, 5)</code> </li>
<li>重新执行阶段，走到 <strong>poll</strong> 阶段，继续阻塞，当前时间等待到 9ms，执行 <code>fs.readFile</code></li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">someAsyncOperation</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 花费9ms</span></span><br><span class="line">  fs.readFile(path.resolve(__dirname, <span class="string">&#x27;/read.txt&#x27;</span>), callback)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> timeoutScheduled = <span class="built_in">Date</span>.now()</span><br><span class="line"><span class="keyword">let</span> fileReadTime = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> delay = <span class="built_in">Date</span>.now() - timeoutScheduled</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`setTimeout: <span class="subst">$&#123;delay&#125;</span> ms have passed since I was scheduled`</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`fileReaderTime <span class="subst">$&#123;fileReadTime - timeoutScheduled&#125;</span>`</span>)</span><br><span class="line">&#125;, <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">someAsyncOperation(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  fileReadTime = <span class="built_in">Date</span>.now()</span><br><span class="line">  <span class="keyword">while</span> (<span class="built_in">Date</span>.now() - fileReadTime &lt; <span class="number">20</span>) &#123;&#125; <span class="comment">// 卡住20ms</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">setTimeout: 5 ms have passed since I was scheduled</span></span><br><span class="line"><span class="comment">fileReaderTime 9</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h3 id="setTimeout-和-setImmediate"><a href="#setTimeout-和-setImmediate" class="headerlink" title="setTimeout 和 setImmediate"></a>setTimeout 和 setImmediate</h3><blockquote>
<p>在 Node.js 中，<code>setTimeout(fn, 0) === setTimeout(fn, 1)</code></p>
<p>在浏览器里，<code>setTimeout(fn, 0) === setTimeout(fn, 4)</code></p>
</blockquote>
<p>setTimeout  和 setImmediate 执行顺序不确定</p>
<ul>
<li>因为事件循环启动也是需要时间的，可能执行 <strong>poll</strong> 阶段已经超过了 1ms，此时 <code>setTimeout</code> 会先执行，反之 <code>setImmediate</code>  先执行</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">setImmediate(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;setImmediate&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;setTimeout&#x27;</span>)</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line"><span class="comment">// 一次 setImmediate setTimeout</span></span><br><span class="line"><span class="comment">// 一次 setTimeout setImmediate</span></span><br></pre></td></tr></table></figure>

<p>setTimeout  和 setImmediate 执行顺序是确定的</p>
<ul>
<li><p>一开始 <code>poll</code> 队列为空，没有设定 <code>setImmediate </code>，代码会进行阻塞，执行 <code>fs.readFile</code>，2ms 后读取文件完毕，执行其回调</p>
</li>
<li><p><code>poll</code> 队列为空，且设定了 <code>setImmediate </code> ，结束 <strong>poll</strong> 阶段进入 <strong>check</strong> 阶段，<strong>check</strong> 阶段会执行 <code>setImmediate </code>，此时会执行 <code>setImmediate</code></p>
<p>即使 <code>setTimeout</code> 和 <code>setImmediate</code> 替换位置也是 <code>setImmediate</code> 先执行</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"></span><br><span class="line">fs.readFile(path.resolve(__dirname, <span class="string">&#x27;/read.txt&#x27;</span>), <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  setImmediate(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;setImmediate&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;setTimeout&#x27;</span>)</span><br><span class="line">  &#125;, <span class="number">0</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// setImmediate setTimeout</span></span><br></pre></td></tr></table></figure>

<h3 id="process-nextTick"><a href="#process-nextTick" class="headerlink" title="process.nextTick"></a>process.nextTick</h3><p><strong>process.nextTick() 不在 Event Loop 的任何阶段执行，而是在各个阶段切换的中间执行</strong>，即从一个阶段切换到下个阶段前执行</p>
<ol>
<li>执行 <code>fs.readFile</code>，首先 <code>setTimeout</code>、<code>setImmediate</code> 放进 I/O 里，此时有 <code>setImmediate()</code> 回调需要执行，事件循环立即结束 <strong>poll</strong> 阶段并执行 <strong>check</strong> 阶段，执行 <code>nextTick()</code> ，然后执行回调</li>
<li><strong>check</strong> 阶段之后会到第二个事件循环的 <strong>timer</strong> 阶段，执行 <code>nextTick()</code> ，再执行 <code>setTimeout</code> 回调</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"></span><br><span class="line">fs.readFile(path.resolve(__dirname, <span class="string">&#x27;/read.txt&#x27;</span>), <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;setTimeout&#x27;</span>)</span><br><span class="line">  &#125;, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">  setImmediate(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;setImmediate&#x27;</span>)</span><br><span class="line">    process.nextTick(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;nextTick3&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  process.nextTick(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;nextTick1&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  process.nextTick(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;nextTick2&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="nextTick-应用场景"><a href="#nextTick-应用场景" class="headerlink" title="nextTick 应用场景"></a>nextTick 应用场景</h3><ol>
<li><p>在多个事件里交叉执行 CPU 运算密集型的任务：</p>
<p>在这种模式下，我们不需要递归的调用 <code>compute()</code>，我们只需要在事件循环中使用 <code>process.nextTick()</code> 定义 <code>compute()</code> 在下一个时间点执行即可。在这个过程中，如果有新的 http 请求进来，事件循环机制会先处理新的请求，然后再调用 <code>computed()</code>。反之，如果你把 <code>compute()</code> 放在一个递归调用里，那系统就会一直阻塞在 <code>computed()</code> 里，无法处理新的 http 请求了</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compute</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  process.nextTick(compute)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http</span><br><span class="line">  .createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.writeHead(<span class="number">200</span>, &#123; <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;text/plain&#x27;</span> &#125;)</span><br><span class="line">    res.end(<span class="string">&#x27;hello world&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  .listen(<span class="number">5000</span>, <span class="string">&#x27;127.0.0.1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">compute()</span><br></pre></td></tr></table></figure>
</li>
<li><p>保持回调函数异步执行的原则</p>
<p>当你给一个函数定义一个回调函数时，你要确保这个回调是被异步执行的。下面这个例子中的回调函数违反了这个原则：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">asyncFake</span>(<span class="params">data, callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (data === <span class="string">&#x27;foo&#x27;</span>) callback(<span class="literal">true</span>)</span><br><span class="line">  <span class="keyword">else</span> callback(<span class="literal">false</span>)</span><br><span class="line">&#125;</span><br><span class="line">asyncFake(<span class="string">&#x27;bar&#x27;</span>, <span class="function"><span class="params">result</span> =&gt;</span> &#123;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> client = net.connect(<span class="number">8124</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;client connected&#x27;</span>)</span><br><span class="line">  client.write(<span class="string">&#x27;hello world\r\n&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>如果是因为某种原因，<code>net.connect()</code> 变成同步执行的了，回调函数就会被立即执行，因此回调函数写到客户端的变量就永远不会被初始化了</p>
<p>这种情况下我们就可以使用 <code>process.nextTick()</code> 把上面 <code>asyncFake()</code> 改成异步执行的：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">asyncReal</span>(<span class="params">data, callback</span>) </span>&#123;</span><br><span class="line">  process.nextTick(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    callback(data === <span class="string">&#x27;foo&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>用在事件触发过程中</p>
<p>EventEmitter 有 2 个比较核心的方法，on 和 emit。node 自带发布/订阅模式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> EventEmitter = <span class="built_in">require</span>(<span class="string">&#x27;events&#x27;</span>).EventEmitter</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">EventEmitter</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> App()</span><br><span class="line">app.on(<span class="string">&#x27;start&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;start&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">app.emit(<span class="string">&#x27;start&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;111&#x27;</span>) <span class="comment">// emit是同步的方法</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">start</span></span><br><span class="line"><span class="comment">111</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> EventEmitter = <span class="built_in">require</span>(<span class="string">&#x27;events&#x27;</span>).EventEmitter</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">StreamLibrary</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> self = <span class="built_in">this</span></span><br><span class="line"></span><br><span class="line">  process.nextTick(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    self.emit(<span class="string">&#x27;start&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">StreamLibrary.prototype.__proto__ = EventEmitter.prototype</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> stream = <span class="keyword">new</span> StreamLibrary()</span><br><span class="line"><span class="comment">// 保证订阅在发布之前</span></span><br><span class="line">stream.on(<span class="string">&#x27;start&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;Reading has started&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="Node-多线程"><a href="#Node-多线程" class="headerlink" title="Node 多线程"></a>Node 多线程</h2><h3 id="多进程和多线程"><a href="#多进程和多线程" class="headerlink" title="多进程和多线程"></a>多进程和多线程</h3><p><strong>为什么需要多进程</strong></p>
<ul>
<li>Node.js 单线程，在处理 http 请求的时候一个错误都会导致整个进程的退出，这是灾难级的</li>
</ul>
<p><strong>线程和进程</strong></p>
<ul>
<li>进程是资源分配的最小单位，线程是 CPU 调度的最小单位</li>
<li>“进程” —— 资源分配的最小单位</li>
<li>“线程” —— 程序执行的最小单位</li>
</ul>
<p><strong>线程是进程的一个执行流</strong>，是 CPU 调度和分派的基本单位，它是比进程更小的能独立运行的基本单位。<strong>一个进程由几个线程组成</strong>，线程与同属一个进程的其它线程共享进程拥有的全部资源（一个进程下的线程可以去通信的、共享资源）</p>
<p><strong>进程有独立的地址空间</strong>，一个进程崩溃后，在保护模式下不会对其它进程产生影响，而线程只是一个进程中的不同执行路径，线程有自己的堆栈和局部变量，但是线程没有单独的地址空间，<strong>一个线程死掉就等于整个进程死掉</strong></p>
<p>举例：谷歌浏览器</p>
<ul>
<li>进程：一个 Tab 页就是一个进程</li>
<li>线程：一个 Tab 页又有多个线程组成、渲染线程、JS 执行线程、垃圾回收、service worker 等等</li>
</ul>
<p>举例：Node 服务</p>
<ul>
<li>ab 是 apache 自带的压力测试工具 <code>ab -n1000 -c20 &#39;192.168.31.25:8000/&#39;</code></li>
<li>进程：监听某一个端口的 http 服务</li>
<li>线程：http 服务由多个线程组成，比如：<ul>
<li>主线程：获取代码、编译执行</li>
<li>编译进程：主线程执行的时候，可以优化代码</li>
<li>Profiler 线程：记录哪些方法耗时，为优化提供支持</li>
<li>其他线程：用于垃圾回收清理工作，因为是多个线程，所以可以并行清除</li>
</ul>
</li>
</ul>
<h3 id="如何选选择多进程还是多线程"><a href="#如何选选择多进程还是多线程" class="headerlink" title="如何选选择多进程还是多线程"></a>如何选选择多进程还是多线程</h3><ul>
<li>多进程还是多线程一般是结合起来使用，千万不要陷入非此即彼的误区</li>
</ul>
<table>
<thead>
<tr>
<th>对比维度</th>
<th>多进程</th>
<th>多线程</th>
<th>总结</th>
</tr>
</thead>
<tbody><tr>
<td>数据共享、同步</td>
<td>数据共享复杂，需要用IPC：数据是分开的，同步简单</td>
<td>因为共享进程数据，数据共享简单，但也是因为这个原因导致同步复杂</td>
<td>各有优势</td>
</tr>
<tr>
<td>内存、CPU</td>
<td>占用内存多，切换复杂，CPU利用率低</td>
<td>占用内存少，切换简单，CPU利用率高</td>
<td>线程占优</td>
</tr>
<tr>
<td>创建销毁、切换</td>
<td>创建销毁、切换复杂，速度慢</td>
<td>创建销毁、切换简单，速度很快</td>
<td>线程占优</td>
</tr>
<tr>
<td>编程、调试</td>
<td>编程简单、调试简单</td>
<td>编程复杂、调试复杂</td>
<td>进程占优</td>
</tr>
<tr>
<td>可靠性</td>
<td>进程间不会互相影响</td>
<td>一个线程挂掉会导致整个进程挂掉</td>
<td>进程占优</td>
</tr>
<tr>
<td>分布式</td>
<td>适应于多核、多机分布式：如果一台机器不够，扩展到多台机器比较简单</td>
<td>适应于多核分布式</td>
<td>进程占优</td>
</tr>
</tbody></table>
<ol>
<li><p><strong>需要频繁创建销毁的优先使用线程</strong></p>
<p>这种原则最常见的应用就是 Web 服务器了，来一个连接建立一个线程，断了就销毁线程，要是用进程，创建和销毁的代价是很难承受的</p>
</li>
<li><p><strong>需要进行大量计算的优先使用线程</strong></p>
<p>所谓大量计算，当然就是耗费很多 CPU，切换频繁了，这种情况下线程是最合适的</p>
<p>这种原则最常见的是图像处理、算法处理</p>
</li>
<li><p><strong>强相关的处理使用线程，弱相关的处理使用进程</strong></p>
<p>JS 和 DOM 强相关</p>
<p>浏览器两个窗口弱相关</p>
<p>一般的 Server 需要完成如下任务：消息收发、消息处理。”消息收发” 和 “消息处理” 就是弱相关任务，而 “消息处理” 里面可能又分为 “消息解码”、”业务处理”，这两个任务相对于来说相关性就要强多了，因此 “消息收发” 和 “消息处理” 可以分进程设计，”消息解码”、”业务处理” 可以分线程设计</p>
</li>
<li><p><strong>可能要扩展到多机分布的用进程，多核分布用线程</strong></p>
</li>
<li><p><strong>都满足需求的情况下，用你最熟悉、最拿手的方式</strong></p>
</li>
</ol>
<p>总结：线程快而进程可靠性高</p>
<h2 id="cluster"><a href="#cluster" class="headerlink" title="cluster"></a>cluster</h2><blockquote>
<p><a href="https://www.cnblogs.com/ShuiNian/p/15423317.html">理解Node.js中的”多线程”</a></p>
<p><a href="https://juejin.cn/post/6844903740768518152">Node.js 真·多线程 Worker Threads 初探</a></p>
<p><a href="http://nodejs.cn/api/cluster.html">Node API cluster 集群</a></p>
</blockquote>
<p><code>Worker Threads</code> 特性是在2018年6月20日的 v10.5.0 版本引入的</p>
<p>cluster 是 Node 进行多线程的模块</p>
<p><strong>CPU 数量查询</strong></p>
<ul>
<li>我的电脑 —— 管理 —— 设备管理器 —— 处理器</li>
</ul>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/js-img/cpu1.png"></p>
<ul>
<li><p>任务管理器 —— CPU —— 逻辑处理器</p>
<p>这里可以看到我的电脑有 4 个内核 8 个逻辑处理器，有多少个逻辑处理器，就可以开多少个线程</p>
</li>
</ul>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/js-img/cpu3.png"></p>
<h3 id="cluster-基本使用"><a href="#cluster-基本使用" class="headerlink" title="cluster 基本使用"></a>cluster 基本使用</h3><p>cluster 基本原理：主线程去 fork 子线程，然后管理它们</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> cluster = <span class="built_in">require</span>(<span class="string">&#x27;cluster&#x27;</span>) <span class="comment">// nodejs内置模块</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> cpuNum = <span class="built_in">require</span>(<span class="string">&#x27;os&#x27;</span>).cpus().length</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> port = <span class="number">8000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (cluster.isMaster) &#123;</span><br><span class="line">  <span class="comment">// 如果是主线程</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; cpuNum; i++) &#123;</span><br><span class="line">    cluster.fork() <span class="comment">// 开启子进程</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// 子线程走这个</span></span><br><span class="line">  http</span><br><span class="line">    .createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">      res.writeHead(<span class="number">200</span>)</span><br><span class="line">      res.end(<span class="string">&#x27;hello world\r\n&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    .listen(port, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`running at: http://localhost:<span class="subst">$&#123;port&#125;</span>/`</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>多进程和单进程性能对比</strong></p>
<ul>
<li>多进程的性能要明显好于单进程</li>
</ul>
<p><strong>安装 Apache</strong></p>
<ul>
<li>安装 Apache 可以参考这篇文章：<a href="https://www.skyfinder.cc/2020/08/14/windows10installapacheserver/">Windows 10 安装Apache</a></li>
<li>安装问题可能出现的问题：<a href="https://www.cnblogs.com/hahayixiao/p/11366148.html">通常每个套接字地址(协议/网络地址/端口)只允许使用一次::443</a></li>
<li>CMD 中使用 <code>netstat -a -o </code> 查看哪些端口被占用</li>
</ul>
<p>ab 是 apache 自带的压力测试工具，Mac 原生自带，无需安装</p>
<p><code>ab -n1000 -c50 127.0.0.1:8000/</code> </p>
<ul>
<li><code>-n</code> 请求数</li>
<li><code>-c</code> 并发数</li>
</ul>
<p><strong>Node 调试方法</strong></p>
<ul>
<li>可以手动选择运行和调试中的 <code>Launch Program</code></li>
<li>也可以在 <code>.vscode</code> 文件下面配置 <code>launch.json</code></li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 使用 IntelliSense 了解相关属性。 </span></span><br><span class="line">    <span class="comment">// 悬停以查看现有属性的描述。</span></span><br><span class="line">    <span class="comment">// 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;0.2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;configurations&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;node&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;request&quot;</span>: <span class="string">&quot;launch&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Launch Program&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;program&quot;</span>: <span class="string">&quot;$&#123;workspaceFolder&#125;\\你运行的JS文件&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="process-进程"><a href="#process-进程" class="headerlink" title="process 进程"></a>process 进程</h3><ul>
<li>process 对象是 Node 的一个全局对象，提供当前 Node 进程的信息，它可以在脚本的任意位置使用，不必通过 require 命令加载</li>
</ul>
<p><strong>属性</strong></p>
<ol>
<li><strong>process.argv</strong> ：返回一个数组，包含了启动 node 进程的命令行参数</li>
<li><strong>process.env</strong> ：返回包含用户环境信息的对象，可以在脚本中对这个对象进行增删改查的操作</li>
<li><strong>process.pid</strong> ：返回当前进程的进程号</li>
<li><strong>process.platform</strong> ：返回当前的操作系统</li>
<li><strong>process.version</strong> ：返回当前 node 版本</li>
</ol>
<p><strong>方法</strong></p>
<ol>
<li><strong>process.cwd()</strong> ：返回 node.js 进程当前工作目录</li>
<li>process.chdir() ：变更 node.js 进程的工作目录</li>
<li><strong>process.nextTick(fn)</strong> ：将任务放到当前事件循环的尾部，添加到 “next tick” 队列，一旦当前事件轮询队列的任务全部完成，在 “next tick” 队列中的所有 callback 会被依次调用</li>
<li><strong>process.exit(）</strong> ：退出当前进程，很多时候是不需要的</li>
<li>process.kill(pid, [signal]) ：给指定进程发送信号，包括但不限于结束进程</li>
</ol>
<p><strong>事件</strong></p>
<ol>
<li><p>beforeExit 事件，在 Node 情况了 Event Loop 之后，再没有任何处理任务时触发，可以在这里部署一些任务，使得 Node 进程不退出，显示的终止程序时（<code>process.ext()</code>），不会触发</p>
</li>
<li><p>exit 事件，当前进程退出时触发，回调函数中只允许同步操作，因为执行完回调后，进程会退出</p>
</li>
<li><p><strong>uncaughtException</strong> 事件，当前进程抛出一个没有捕获的错误时触发，可以用它在进程结束前进行一些已分配资源的同步清理操作，尝试用它来恢复应用的正常运行的操作是不安全的</p>
<p>专门捕捉异步代码错误，比如在 http 请求中发生错误，就可以用 <code>process.on(&#39;uncaughtException&#39;, err =&gt; console.log(&#39;发生错误&#39;, err))</code> 进行兜底</p>
</li>
<li><p>warning 事件，任何 node.js 发出的进程警告，都会触发此事件</p>
</li>
</ol>
<h3 id="child-process"><a href="#child-process" class="headerlink" title="child_process"></a>child_process</h3><p>child_process 是 node.js 中用于创建子进程的模块，node 中大名鼎鼎的 cluster 是基于它来封装的</p>
<ol>
<li><p><strong>exec()</strong></p>
<p>异步衍生出一个 shell，然后在 shell 中执行命令，且缓冲任何产生的输出，运行结束后调用回调函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> exec = <span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>).exec</span><br><span class="line"></span><br><span class="line"><span class="comment">// 回调方式</span></span><br><span class="line">exec(<span class="string">&#x27;ls&#x27;</span>, <span class="function">(<span class="params">err, stdout, stderr</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;stderr&#x27;</span>, stderr)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;stdout&#x27;</span>, stdout)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>由于标准输出和标准错误都是流对象（stream），可以监听 data 事件，因此上面的代码也可以写成下面这样</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; exec &#125; = <span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过流的方式接受结果，类似文件读取</span></span><br><span class="line"><span class="keyword">const</span> child = exec(<span class="string">&#x27;ls&#x27;</span>)</span><br><span class="line">child.stdout.on(<span class="string">&#x27;data&#x27;</span>, <span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;stdout:&#x27;</span>, data)</span><br><span class="line">&#125;)</span><br><span class="line">child.stderr.on(<span class="string">&#x27;data&#x27;</span>, <span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;stderr:&#x27;</span>, data)</span><br><span class="line">&#125;)</span><br><span class="line">child.on(<span class="string">&#x27;close&#x27;</span>, <span class="function"><span class="params">code</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;closing code:&#x27;</span>, code)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>上面的代码还有一个好处。监听 data 事件以后，可以实时输出结果，否则只有等到子进程结束，才会输出结果。所以，如果子进程进行时间较长，或是持续运行，第二种写法更好</p>
</li>
<li><p><strong>execSync()</strong></p>
<p>exec() 的同步版本</p>
</li>
<li><p><strong>execFile()</strong></p>
<p>execFile 方法直接执行特定的程序 shell，参数作为数组传入， 不会被 bash 解释，因此具有较高的安全性</p>
<p>execFile 会自动过滤一些敏感字符串比如：<code>\</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; execFile &#125; = <span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>)</span><br><span class="line"></span><br><span class="line">execFile(<span class="string">&#x27;ls&#x27;</span>, [<span class="string">&#x27;-c&#x27;</span>], <span class="function">(<span class="params">error, stdout, stderr</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (error) <span class="built_in">console</span>.error(<span class="string">&#x27;error&#x27;</span>, error)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;stdout&#x27;</span>, stdout)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>spawn()</strong></p>
<p>spawn 方法创建一个子进程来执行特定命令 shell，用法与 execFile 方法类似，但是没有回调函数，只能通过监听事件，来获取运行结果。它属于异步执行，适用于子进程长时间运行的情况</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; spawn &#125; = <span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> child = spawn(<span class="string">&#x27;ls&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// data是Buffer</span></span><br><span class="line">child.stdout.on(<span class="string">&#x27;data&#x27;</span>, <span class="function"><span class="params">data</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;data&#x27;</span>, data.toString()))</span><br><span class="line">child.on(<span class="string">&#x27;close&#x27;</span>, <span class="function"><span class="params">code</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;code:&#x27;</span>, code))</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>fork()</strong></p>
<p>fork 方法直接创建一个子进程，执行 Node 脚本，<code>fork(&#39;./child.js&#39;)</code> 相当于 <code>spawn(&#39;node&#39;, [&#39;./child.js&#39;])</code>，与 spawn 方法不同的是，fork 会在父进程与子进程之间，建立一个通信管道 pipe，用于进程之间的通信，也是 IPC 通信的基础</p>
<p><code>main.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> child_process = <span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> child = child_process.fork(path.resolve(__dirname, <span class="string">&#x27;./son.js&#x27;</span>))</span><br><span class="line">child.on(<span class="string">&#x27;message&#x27;</span>, <span class="function"><span class="params">data</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;father received:&#x27;</span>, data))</span><br><span class="line">child.send(<span class="string">&#x27;father send&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p><code>son.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">process.on(<span class="string">&#x27;message&#x27;</span>, <span class="function"><span class="params">data</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;son received:&#x27;</span>, data))</span><br><span class="line">process.send(<span class="string">&#x27;hello father&#x27;</span>)</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="cluster-属性和方法"><a href="#cluster-属性和方法" class="headerlink" title="cluster 属性和方法"></a>cluster 属性和方法</h3><ol>
<li><p><strong>isMaster</strong> 属性，返回该进程是不是主进程。v16.0.0 废弃改为 <strong>isPrimary</strong></p>
</li>
<li><p><strong>isWorker</strong> 属性，返回该进程是不是工作进程</p>
</li>
<li><p><strong>fork</strong> 方法，只能通过主进程调用，衍生出一个新的 worker 进程，返回一个 worker 对象</p>
<p>在 <code>cluster.fork()</code> 调用的时候，相当于执行了 <code>node main.js</code></p>
<p>和 <code>child_process</code> 的区别，不用创建一个新的 <code>child.js</code></p>
</li>
<li><p>setupMaster([settings]) 方法，用于修改 fork() 默认行为，一旦调用，将会按照 cluster.settings 进行设置。v16.0.0 废弃改为 setupPrimary</p>
</li>
<li><p>settings 属性，用于配置</p>
<p>exex: worker 文件路径</p>
<p>args: 传递给 worker 的参数</p>
<p>execArgv: 传递给 node.js 可执行文件的参数列表</p>
</li>
</ol>
<h3 id="cluster-事件"><a href="#cluster-事件" class="headerlink" title="cluster 事件"></a>cluster 事件</h3><ol>
<li><strong>fork</strong> 事件，当心的工作被 fork 时触发，可以用来记录工作进程活动，回调参数 worker 对象</li>
<li><strong>listening</strong> 事件，当一个工作进程调用 <code>listen()</code> 后触发，回调参数 worker 对象</li>
<li><strong>message</strong> 事件，比较特殊，需要去在单独 worker 上监听</li>
<li>online 事件，复制好一个工作进程后，工作进程主动发送一条 online 消息给主进程，主进程收到消息后触发，回调参数 worker 对象</li>
<li><strong>disconnect</strong> 事件，主进程和工作进程之间 IPC 通道断开后触发</li>
<li><strong>exit</strong> 事件，有工作进程退出时触发，回调参数：worker 对象、code 退出码、signal 进程被 kill 时的信号</li>
<li>setup 事件，<code>cluster.setupMaster()</code> 执行后触发</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> cluster = <span class="built_in">require</span>(<span class="string">&#x27;cluster&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> cpuNum = <span class="built_in">require</span>(<span class="string">&#x27;os&#x27;</span>).cpus().length</span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> port = <span class="number">8001</span></span><br><span class="line"><span class="keyword">if</span> (cluster.isMaster) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; cpuNum; i++) &#123;</span><br><span class="line">    cluster.fork()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  cluster.on(<span class="string">&#x27;fork&#x27;</span>, <span class="function"><span class="params">worker</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;主进程 fork 了一个 worker pid 为：&#x27;</span>, worker.process.pid)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  cluster.on(<span class="string">&#x27;listening&#x27;</span>, <span class="function"><span class="params">worker</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;worker &#x27;</span> + worker.process.pid + <span class="string">&#x27; died&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="built_in">Object</span>.keys(cluster.workers).forEach(<span class="function"><span class="params">id</span> =&gt;</span> &#123;</span><br><span class="line">    cluster.workers[id].on(<span class="string">&#x27;message&#x27;</span>, <span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;接收data&#x27;</span>, data)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 需要结合任务管理器把对应pid的任务结束</span></span><br><span class="line">  cluster.on(<span class="string">&#x27;disconnect&#x27;</span>, <span class="function"><span class="params">worker</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;有工作进程退出了&#x27;</span>, worker.process.pid)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// 对应cluster.on(&#x27;listening&#x27;)</span></span><br><span class="line">  http</span><br><span class="line">    .createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">      res.writeHead(<span class="number">200</span>)</span><br><span class="line">      res.end(<span class="string">&#x27;hello world\r\n&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    .listen(port, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`running at: http://localhost:<span class="subst">$&#123;port&#125;</span>/`</span>)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 对应cluster.on(&#x27;message&#x27;)</span></span><br><span class="line">  process.send(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="cluster-多线程模型"><a href="#cluster-多线程模型" class="headerlink" title="cluster 多线程模型"></a>cluster 多线程模型</h3><blockquote>
<p><a href="https://www.cnblogs.com/qingmingsang/articles/8278128.html">cluster 惊群</a></p>
</blockquote>
<p>每个 worker 进程通过使用 <code>child_process.fork()</code> 函数，基于 IPC（Inter-Process Communication，进程间通信），实现与 master 进程间通信</p>
<p>那我们直接用 <code>child_process.fork()</code> 实现不就行了，为什么还要用 cluster？</p>
<ul>
<li><code>child_process.fork()</code> 这样方式仅仅实现了多进程。多进程运行还涉及父子进程通信，子进程管理，以及负载均衡等问题，这些特性 cluster 帮你实现了</li>
</ul>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/js-img/clusterWorker.png"></p>
<p><strong>最初的多进程模型</strong></p>
<p>最初的 node.js 多进程模型是这样实现的，master 进程创建 socket，绑定到某个地址以及端口后，自身不调用 listen 来监听连接以及 accept 连接，而是将该 socket 的 fd 传递到 fork 出来的 worker 进程，worker 接收到 fd 后再调用 listen，accept 新的连接。但实际一个新到来的连接最终只能被某一个 worker 进程 accept 再做处理，至于是哪个 worker 能够 accept 到，开发者完全无法预知以及干预。这势必就导致了当一个新连接到来时，多个 worker 进程会产生竞争，最终由胜出的 worker 获取连接</p>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/js-img/%E6%83%8A%E7%BE%A4%E7%8E%B0%E8%B1%A1.png"></p>
<ul>
<li>多个进程之间会竞争 accept 一个连接，产生惊群现象，效率比较低（4 个 worker 去抢请求）</li>
<li>由于无法控制一个新的连接由哪个进程来处理，必然导致各 worker 进程之间的负载非常不均衡</li>
</ul>
<p>简单说来，多线程/多进程等待同一个 socket 事件，当这个事件发生时，这些线程/进程被同时唤醒，就是惊群</p>
<p>惊群通常发生在 server 上，当父进程绑定一个端口监听 socket，然后 fork 出多个子进程，子进程们开始循环处理（比如 accept）这个 socket。每当用户发起一个 TCP 连接时，多个子进程同时被唤醒，然后其中一个子进程 accept 新连接成功，余者皆失败，重新休眠</p>
<p><code>main.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> net = <span class="built_in">require</span>(<span class="string">&#x27;net&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; fork &#125; = <span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>) <span class="comment">// 惊群</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> handle = net._createServerHandle(<span class="string">&#x27;0.0.0.0&#x27;</span>, <span class="number">3005</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;fork&#x27;</span>, i)</span><br><span class="line">  fork(<span class="string">&#x27;./worker.js&#x27;</span>).send(&#123;&#125;, handle)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>worker.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> net = <span class="built_in">require</span>(<span class="string">&#x27;net&#x27;</span>)</span><br><span class="line"></span><br><span class="line">process.on(<span class="string">&#x27;message&#x27;</span>, <span class="function">(<span class="params">m, handle</span>) =&gt;</span> &#123;</span><br><span class="line">  start(handle)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> buf = <span class="string">&#x27;hello nodejs&#x27;</span></span><br><span class="line"><span class="keyword">const</span> res = [<span class="string">&#x27;HTTP/1.1 200 OK&#x27;</span>, <span class="string">&#x27;content-length:&#x27;</span> + buf.length].join(<span class="string">&#x27;\r\n&#x27;</span>) + <span class="string">&#x27;\r\n\r\n&#x27;</span> + buf</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> data = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">start</span>(<span class="params">server</span>) </span>&#123;</span><br><span class="line">  server.listen()</span><br><span class="line">  server.onconnection = <span class="function">(<span class="params">err, handle</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> pid = process.pid</span><br><span class="line">    <span class="keyword">if</span> (!data[pid]) data[pid] = <span class="number">0</span></span><br><span class="line">    data[pid]++ <span class="comment">// 每次服务+1</span></span><br><span class="line">    <span class="comment">// 最后出现抢请求现象，导致data[pid]，每个处理次数不一样</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;got a connection on worker, pid = %d&#x27;</span>, process.pid, data[pid])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> socket = <span class="keyword">new</span> net.Socket(&#123;</span><br><span class="line">      handle: handle,</span><br><span class="line">    &#125;)</span><br><span class="line">    socket.readable = socket.writable = <span class="literal">true</span></span><br><span class="line">    socket.end(res)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Nginx-多线程模型"><a href="#Nginx-多线程模型" class="headerlink" title="Nginx 多线程模型"></a>Nginx 多线程模型</h3><p>Nginx 是俄罗斯人编写的十分轻量级的 HTTP 服务器，Nginx，它的发音为 “engine X”，是一个高性能 HTTP 和反向代理服务器。异步非阻塞 I/O，而且能够高并发</p>
<ul>
<li>正向代理：客户端为代理，服务器不知道客户端是谁</li>
<li>反向代理：服务器为代理。客户端不知道服务器是谁</li>
</ul>
<p>Nginx 配置 demo：</p>
<ul>
<li>一个端口挂掉整个都挂掉，且没有重启机制</li>
</ul>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="attribute">upstream</span> cluster &#123;</span><br><span class="line">        server: 127.0.0.1:3000;</span><br><span class="line">        server: 127.0.0.1:3001;</span><br><span class="line">        server: 127.0.0.1:3002;</span><br><span class="line">        server: 127.0.0.1:3003;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        listen: 80</span><br><span class="line">        <span class="attribute">server_name</span> www.domain.com</span><br><span class="line">        location / &#123;</span><br><span class="line">            <span class="attribute">proxy_pass</span> http://cluster</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Nginx 的实际应用场景：比较适合稳定的服务</p>
<ul>
<li>静态资源服务器 html、css、js</li>
<li>企业级集群</li>
</ul>
<blockquote>
<p>守护进程：退出命令行窗口之后，服务一直处于运行状态</p>
</blockquote>
<h3 id="cluster-多线程调度模型"><a href="#cluster-多线程调度模型" class="headerlink" title="cluster 多线程调度模型"></a>cluster 多线程调度模型</h3><blockquote>
<p><a href="https://www.cnblogs.com/qingmingsang/articles/8278128.html">cluster 负载均衡</a></p>
</blockquote>
<p>cluster 是由 master 监听请求，再通过 <code>round-robin</code> 算法分发给各个 worker，避免惊群现象发生</p>
<ul>
<li><code>round-robin</code> <strong>轮询调度算法</strong> 原理是每一次把来自用户的请求轮流给内部的服务器</li>
</ul>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/js-img/cluster%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1.png"></p>
<p><code>main.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> net = <span class="built_in">require</span>(<span class="string">&#x27;net&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; fork &#125; = <span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// cluster简易版本，cluster就是基于child_process进行封装的</span></span><br><span class="line"><span class="keyword">let</span> workers = []</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">  workers.push(fork(<span class="string">&#x27;./worker.js&#x27;</span>)) <span class="comment">// cluster workers</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> handle = net._createServerHandle(<span class="string">&#x27;0.0.0.0&#x27;</span>, <span class="number">3005</span>)</span><br><span class="line">handle.listen()</span><br><span class="line">handle.onconnection = <span class="function">(<span class="params">err, handle</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> worker = workers.pop()</span><br><span class="line">  worker.send(&#123;&#125;, handle)</span><br><span class="line">  <span class="comment">// 通过pop和unshift实现一个简易版的轮询</span></span><br><span class="line">  workers.unshift(worker)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>worker.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> net = <span class="built_in">require</span>(<span class="string">&#x27;net&#x27;</span>)</span><br><span class="line"></span><br><span class="line">process.on(<span class="string">&#x27;message&#x27;</span>, <span class="function">(<span class="params">m, handle</span>) =&gt;</span> &#123;</span><br><span class="line">  start(handle)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> buf = <span class="string">&#x27;hello nodejs&#x27;</span></span><br><span class="line"><span class="keyword">const</span> res = [<span class="string">&#x27;HTTP/1.1 200 OK&#x27;</span>, <span class="string">&#x27;content-length:&#x27;</span> + buf.length].join(<span class="string">&#x27;\r\n&#x27;</span>) + <span class="string">&#x27;\r\n\r\n&#x27;</span> + buf</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">start</span>(<span class="params">server</span>) </span>&#123;</span><br><span class="line">  server.listen()</span><br><span class="line">  server.onconnection = <span class="function">(<span class="params">err, handle</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;got a connection on worker, pid = %d&#x27;</span>, data[pid])</span><br><span class="line">    <span class="keyword">const</span> socket = <span class="keyword">new</span> net.Socket(&#123;</span><br><span class="line">      handle: handle,</span><br><span class="line">    &#125;)</span><br><span class="line">    socket.readable = socket.writable = <span class="literal">true</span></span><br><span class="line">    socket.end(res)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="cluster-优雅退出和进程守护"><a href="#cluster-优雅退出和进程守护" class="headerlink" title="cluster 优雅退出和进程守护"></a>cluster 优雅退出和进程守护</h3><p><strong>cluster 中的优雅退出</strong></p>
<ol>
<li>关闭异常 Worker 进程所有的 TCP Server（将已有的连接快速断开，且不再接收新的连接），断开和 Master 的 IPC 通道，不再接受新的用户请求</li>
<li>Master 立刻 fork 一个新的 Worker 进程，保证在线 【工人】总数不变</li>
<li>异常 Worker 等待一段时间，处理完已经接受的请求后退出</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (cluster.isMaster) &#123;</span><br><span class="line">  cluster.fork()</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">  &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">    process.disconnect()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>进程守护</strong></p>
<p>Master 进程除了负责接收新的连接，分发给各 worker 进程处理之外，还得像天使一样默默地守护者这些 worker 进程，保障整个应用的稳定性。一旦某个 worker 进程异常退出就 fork 一个新的子进程顶替上去</p>
<p>这一切 cluster 模块都已经处理好了，当某个 worker 进程发生异常退出或者与 Master 进程失去联系（disconnected）时，Master 进程都会收到相应的事件通知</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">cluster.on(<span class="string">&#x27;exit&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cluster.fork()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">cluster.on(<span class="string">&#x27;disconnect&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cluster.fork()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="IPC-通信"><a href="#IPC-通信" class="headerlink" title="IPC 通信"></a>IPC 通信</h3><p>IPC（Inter-Process Communication，进程间的通信）</p>
<p>虽然每个 Worker 进程是相互对立的，但是它们之间始终还是需要通讯的，叫进程间通讯（IPC）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> cluster = <span class="built_in">require</span>(<span class="string">&#x27;cluster&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (cluster.isMaster) &#123;</span><br><span class="line">  <span class="keyword">const</span> worker = cluster.fork()</span><br><span class="line">  worker.send(<span class="string">&#x27;hi there&#x27;</span>)</span><br><span class="line">  worker.on(<span class="string">&#x27;message&#x27;</span>, <span class="function"><span class="params">msg</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`msg: <span class="subst">$&#123;msg&#125;</span> from worker#<span class="subst">$&#123;worker.id&#125;</span>`</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (cluster.isWorker) &#123;</span><br><span class="line">  process.on(<span class="string">&#x27;message&#x27;</span>, <span class="function"><span class="params">msg</span> =&gt;</span> &#123;</span><br><span class="line">    process.send(msg)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>cluster 的 IPC 通道只存在于 Master 和 Worker 之间，Worker 与 Worker 进程互相间是没有的。Worker 之间通讯该怎么办？通过 Master 来转发</p>
<p>核心：worker 直接的通信，靠 master 转发，利用 worker 的 pid</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>Node</tag>
        <tag>浏览器</tag>
        <tag>事件循环</tag>
        <tag>多线程</tag>
      </tags>
  </entry>
  <entry>
    <title>实现JS一些重要的API</title>
    <url>/posts/e8c036a5/</url>
    <content><![CDATA[<h2 id="实现-new"><a href="#实现-new" class="headerlink" title="实现 new"></a>实现 new</h2><p>new 原理：</p>
<ol>
<li><p>创建Ctor的一个实例对象</p>
<p><code>实例.__proto__ = Ctor.prototype</code></p>
</li>
<li><p>把构造函数当做普通函数执行（让方法中的 this -&gt; 实例对象）</p>
</li>
<li><p>确认方法的返回值（如果没有返回值或者返回的是原始值，我们让其默认返回实例对象即可）</p>
</li>
</ol>
<p>需要考虑的点：</p>
<ul>
<li><p>Symbol、BigInt 不能被 new</p>
<p>我们知道 instanceof 是不能检测基本数据类型的 <code>Symbol() instanceof Symbol</code> 是 false。不过可以利用 call 方法来强迫装箱：当然这个也是 Function 和 Object 的实例</p>
<p>注意：使用 <code>Object.prototype.toString.call(f)</code> 也是 symbol，因为会先去找 <code>Symbol.toStringTag</code> 这个属性（返回的是 <code>&#39;[object Symbol]&#39;</code>），所以需要结合 typeof 来区分（进行了装箱操作把基本数据类型转换为对应的引用数据类型）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> f = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="built_in">this</span> &#125;.call(<span class="built_in">Symbol</span>(<span class="string">&#x27;&#x27;</span>))</span><br><span class="line">f <span class="keyword">instanceof</span> <span class="built_in">Symbol</span> <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(f) <span class="comment">// &#x27;[object Symbol]&#x27;</span></span><br><span class="line"><span class="keyword">typeof</span> f <span class="comment">// &#x27;object&#x27;</span></span><br></pre></td></tr></table></figure>

<p>生成器函数不需要基于 new 执行，就可以创造函数实例。其实相当于内部做了 <code>f.__proto__ = fn.prototype</code> 的处理</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">fn</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="keyword">let</span> f = fn()</span><br><span class="line">f <span class="keyword">instanceof</span> fn <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>箭头函数不能被 new</p>
<p>箭头函数没有 this，this 继承的是外层代码块的 this（也不能用 call 方法改变 this）</p>
<p>箭头函数不能使用 arguments，不过可以使用 rest 运算符</p>
<p>箭头函数不能使用 yield，箭头函数不能用作 Generator 函数</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Ctor -&gt; constructor缩写（构造函数）</span></span><br><span class="line"><span class="comment">params -&gt; 后期给Ctor传递的所有实参信息</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_new</span>(<span class="params">Ctor, ...params</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> obj,</span><br><span class="line">    result,</span><br><span class="line">    proto = Ctor.prototype</span><br><span class="line">  <span class="comment">// 校验规则</span></span><br><span class="line">  <span class="keyword">if</span> (Ctor === <span class="built_in">Symbol</span> || Ctor === BigInt || <span class="keyword">typeof</span> Ctor !== <span class="string">&#x27;function&#x27;</span> || !proto)</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">`<span class="subst">$&#123;Ctor&#125;</span> is not a constructor`</span>)</span><br><span class="line">  obj = <span class="built_in">Object</span>.create(Ctor.prototype)</span><br><span class="line">  result = Ctor.call(obj, ...params)</span><br><span class="line">  <span class="keyword">if</span> (<span class="regexp">/^(object|function)$/</span>.test(<span class="keyword">typeof</span> result)) <span class="keyword">return</span> result</span><br><span class="line">  <span class="keyword">return</span> obj</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dog</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = name</span><br><span class="line">&#125;</span><br><span class="line">Dog.prototype.bark = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;wangwang&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> bear = _new(Dog, <span class="string">&#x27;比尔&#x27;</span>)</span><br><span class="line">bear.bark() <span class="comment">// wangwang</span></span><br><span class="line"><span class="built_in">console</span>.log(bear <span class="keyword">instanceof</span> Dog) <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h2 id="实现-Object-create"><a href="#实现-Object-create" class="headerlink" title="实现 Object.create"></a>实现 Object.create</h2><p><code>Object.create([obj])</code>：创建一个空对象，并让 <code>空对象.__proto__</code> 指向 <code>[obj]</code></p>
<p>需要考虑的点：</p>
<ul>
<li><code>[obj]</code> 可以是一个对象或者是 null，但不能是其他的值</li>
<li><code>Object.create(null)</code> 创建一个不具备 <code>__proto__</code> 属性的对象（不是任何类的实例）</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Object</span>.create = <span class="function"><span class="keyword">function</span> <span class="title">create</span>(<span class="params">prototype</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (prototype !== <span class="literal">null</span> || <span class="keyword">typeof</span> prototype !== <span class="string">&#x27;object&#x27;</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">&#x27;Object prototype may only be&#x27;</span>)</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Proxy</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">  <span class="built_in">Proxy</span>.prototype = prototype</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Proxy</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果传null是无法删除 obj.__proto__ 的</span></span><br></pre></td></tr></table></figure>

<h2 id="实现-instanceof"><a href="#实现-instanceof" class="headerlink" title="实现 instanceof"></a>实现 instanceof</h2><p>原理：查找 <code>[构造函数][Symbol.hasInstance](实例)</code> </p>
<ul>
<li>如果存在这个属性方法，则方法执行返回的值就是最后检测的结果</li>
<li>如果不存在这个属性方法，则会查找当前实例的原型链（一直找到 Object.prototype 为止），如果查找中，找到某个原型等于构造函数的原型，则返回true，反之false</li>
</ul>
<p><strong>注意：</strong> 基于 ES6 设置静态私有属性 <code>static [Symbol.hasInstance](value) &#123; return true &#125;</code> 是有效的</p>
<p>获取原型链需要考虑的点：</p>
<ul>
<li><code>Object.getPrototypeOf()</code> 不能获取 <code>null/undefined</code> 的原型</li>
</ul>
<p>instanceof 需要考虑的点：</p>
<ul>
<li>检测的所属类型（instanceof 右侧的所属类型）不能是箭头函数及非函数（基本数据类型的值、<code>&#123;&#125;</code> …）</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">instance_of</span>(<span class="params">obj, Ctor</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 数据格式准确性校验</span></span><br><span class="line">  <span class="keyword">if</span> (Ctor == <span class="literal">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">&quot;Right-hand side of &#x27;instanceof&#x27; is not callable&quot;</span>)</span><br><span class="line">  <span class="keyword">if</span> (!Ctor.prototype) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">&quot;Function has non-object prototype &#x27;undefined&#x27; in instanceof check&quot;</span>)</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> Ctor !== <span class="string">&#x27;function&#x27;</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">&quot;Right-hand side of &#x27;instanceof&#x27; is not callable&quot;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 原始值类型直接忽略</span></span><br><span class="line">  <span class="keyword">if</span> (obj === <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  <span class="keyword">if</span> (!<span class="regexp">/^(object|function)$/</span>.test(<span class="keyword">typeof</span> obj)) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 先检测是否有Symbol.hasInstance这个属性</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> Ctor[<span class="built_in">Symbol</span>.hasInstance] === <span class="string">&#x27;function&#x27;</span>) <span class="keyword">return</span> Ctor[<span class="built_in">Symbol</span>.hasInstance](obj)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 最后才会按照原型链进行处理</span></span><br><span class="line">  <span class="keyword">let</span> prototype = <span class="built_in">Object</span>.getPrototypeOf(obj)</span><br><span class="line">  <span class="keyword">while</span> (prototype) &#123;</span><br><span class="line">    <span class="keyword">if</span> (prototype === Ctor.prototype) <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    prototype = <span class="built_in">Object</span>.getPrototypeOf(prototype)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(instance_of([<span class="number">12</span>, <span class="number">23</span>], <span class="built_in">Array</span>)) <span class="comment">// true</span></span><br><span class="line"><span class="comment">// console.log(instance_of(null, null))</span></span><br><span class="line"><span class="comment">// console.log(instance_of(null, () =&gt; &#123;&#125;))</span></span><br><span class="line"><span class="comment">// console.log(instance_of(null, &#123;&#125;))</span></span><br></pre></td></tr></table></figure>

<h2 id="实现-forEach-方法（支持对象遍历）"><a href="#实现-forEach-方法（支持对象遍历）" class="headerlink" title="实现 forEach 方法（支持对象遍历）"></a>实现 forEach 方法（支持对象遍历）</h2><p>需要考虑的点：</p>
<ul>
<li>Symbol 无法用 <code>for...in...</code> 遍历的，可以使用 <code>Object.getOwnPropertySymbols()</code> 获取，之后结合 for 循环或 <code>Object.keys()</code> 使用即可</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">each</span>(<span class="params">obj, callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> keys = <span class="built_in">Object</span>.keys(obj),</span><br><span class="line">    key = <span class="literal">null</span>,</span><br><span class="line">    value = <span class="literal">null</span>,</span><br><span class="line">    i = <span class="number">0</span>,</span><br><span class="line">    len = <span class="number">0</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">Symbol</span> !== <span class="string">&#x27;undefined&#x27;</span>) &#123;</span><br><span class="line">    <span class="comment">// 支持Symbol</span></span><br><span class="line">    keys = keys.concat(<span class="built_in">Object</span>.getOwnPropertySymbols(obj))</span><br><span class="line">  &#125;</span><br><span class="line">  len = keys.length</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> callback !== <span class="string">&#x27;function&#x27;</span>) callback = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">  <span class="keyword">for</span> (; i &lt; len; i++) &#123;</span><br><span class="line">    key = keys[i]</span><br><span class="line">    value = obj[key]</span><br><span class="line">    callback(value, key)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其它常用数组方法的封装可以看我这篇文章：<a href="https://editor.csdn.net/md/?articleId=111084399">JS 常用数组方法封装（包含splice）</a></p>
<h2 id="实现-call-bind"><a href="#实现-call-bind" class="headerlink" title="实现 call bind"></a>实现 call bind</h2><p>需要考虑的点：</p>
<ul>
<li><p>临时设置的属性，不能和原始对象冲突，所以属性采用唯一值处理</p>
<p>使用 <code>Symbol</code> 或 生成随机字符串 <code>Math.random() * new Date()</code></p>
</li>
<li><p>如果 context 不是对象（基本数据类型的值），需要将其处理成对象。如果 context 是 null 则需要单独处理</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">call</span>(<span class="params">context, ...params</span>) </span>&#123;</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">  this -&gt; 要执行的函数</span></span><br><span class="line"><span class="comment">  context -&gt; 要改变函数中this的指向</span></span><br><span class="line"><span class="comment">  params -&gt; 未来要传递给函数func的实参信息</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  context == <span class="literal">null</span> ? (context = <span class="built_in">window</span>) : <span class="literal">null</span></span><br><span class="line">  <span class="keyword">if</span> (!<span class="regexp">/^(object|function)$/</span>.test(<span class="keyword">typeof</span> context)) context = <span class="built_in">Object</span>(context)</span><br><span class="line">  <span class="keyword">let</span> self = <span class="built_in">this</span>,</span><br><span class="line">    key = <span class="built_in">Symbol</span>(<span class="string">&#x27;KEY&#x27;</span>),</span><br><span class="line">    result</span><br><span class="line">  context[key] = self</span><br><span class="line">  result = context[key](...params)</span><br><span class="line">  <span class="keyword">delete</span> context[key]</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Function</span>.prototype._call = call</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">name</span>: <span class="string">&#x27;Bird&#x27;</span> &#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.total = x + y</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> res = func._call(obj, <span class="number">1</span>, <span class="number">2</span>) <span class="comment">// &#123;name:&#x27;Bird&#x27;, total:3&#125;</span></span><br></pre></td></tr></table></figure>

<p>bind 不是立即把函数执行，只是预先把 this 和后期需要传递的参数存储起来（柯理化函数）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bind</span>(<span class="params">context, ...params</span>) </span>&#123;</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">  this -&gt; func</span></span><br><span class="line"><span class="comment">  context -&gt; obj</span></span><br><span class="line"><span class="comment">  params -&gt; [100,200]</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  context == <span class="literal">null</span> ? (context = <span class="built_in">window</span>) : <span class="literal">null</span></span><br><span class="line">  <span class="keyword">if</span> (!<span class="regexp">/^(object|function)$/</span>.test(<span class="keyword">typeof</span> context)) context = <span class="built_in">Object</span>(context)</span><br><span class="line">  <span class="keyword">let</span> self = <span class="built_in">this</span>,</span><br><span class="line">    key = <span class="built_in">Symbol</span>(<span class="string">&#x27;KEY&#x27;</span>),</span><br><span class="line">    result</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">proxy</span>(<span class="params">...args</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// args -&gt; 事件触发传递的信息，例如：ev</span></span><br><span class="line">    params = params.concat(args)</span><br><span class="line">    context[key] = self</span><br><span class="line">    result = context[key](...params)</span><br><span class="line">    <span class="keyword">delete</span> context[key]</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Function</span>.prototype._bind = bind</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">name</span>: <span class="string">&#x27;Jhon&#x27;</span> &#125;</span><br><span class="line"><span class="built_in">document</span>.body.onclick = func._bind(obj, <span class="number">1</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<h2 id="实现-Promise"><a href="#实现-Promise" class="headerlink" title="实现 Promise"></a>实现 Promise</h2><p>先看一下 Promise 具有的方法：</p>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/js-img/20210910105320.png"></p>
<p>Promise 原理：</p>
<ol>
<li><p>首先会给当前实例增加状态（默认是 pending 等待态）和两个事件池 成功的事件池和失败的事件池（用来存放 then 中还不知道实例状态的事件）</p>
</li>
<li><p>其次最重要的就是 Promise 内部传递的 executor 函数，此函数会立即执行并会传递两个回调函数 resolve 和 reject，当执行任何一个回调函数时，都会做两件事情：<strong>更改状态、发布对应事件池的状态方法</strong> </p>
<p>注意：更改完状态就不能再更改了（是 pending 才会改状态）；执行回调函数时如果基于 then 存储过方法，依次通知对应状态的事件池方法执行，且执行是异步的微任务</p>
</li>
<li><p>new Promise 会创造实例，实例可以调用其所属类原型的方法，之后重构了一下 Promise 构造函数原型上的方法</p>
</li>
<li><p>then 方法返回一个全新的 Promise 实例，有两种情况：</p>
<ul>
<li>如果已经知道对应实例的状态，则创建一个异步的微任务，后期执行对应的 onFulfilled/onRejected</li>
<li>如果此时还不知道实例状态，就先把 onFulfilled/onRejected 存储起来，后期更改其状态之后，再通知方法执行即可，也是异步微任务</li>
</ul>
<p>注意：返回新的 Promise 实例不能和执行结果是同一个 <code>let p2 = p1.then(() =&gt; p2)</code> </p>
<p>如何验证返回的是否是一个新的 Promise 实例：类型是 object 或 function 且它得具有 then 方法（是一个函数）。如果返回的不是 Promise 实例，且执行没有报错，则返回一个成功的 Promise 实例</p>
</li>
<li><p>如果 then 中的某个回调函数（resolve、reject）不设置，其默认具备穿透性，顺延到下一个 then 中的同状态的方法上</p>
<p>如果没有传 onFulfilled 或 onRejected，就给对应的默认传递 resolve 或 reject 即可</p>
</li>
<li><p>catch 相当于调用 then，第一个参数不写，第二个参数传递错误原因</p>
</li>
<li><p>all 传入的必须是一个数组，如果数组中某一项不是 Promise 实例，需要把它转换为成功的 Promise 实例。之后把每一项依次执行，只要有一项失败返回就是失败的，必须全部成功才是成功</p>
<p>注意：返回结果的顺序跟传入的顺序一致（不能使用 push，因为不能确定谁先到，需要使用索引）</p>
</li>
</ol>
<p>需要注意的点：</p>
<ul>
<li>Promise 是一个构造函数，需要 new 执行</li>
<li>Promise 参数必须是一个函数</li>
<li>Promise then 里的方法实际上是异步的微任务，可以基于 queueMicrotask 去创造异步的微任务（兼容性差）；这里采用基于定时器创造一个异步的宏任务，来模拟微任务 </li>
</ul>
<p>ES6 方法实现 Promise，可以参考我另外一篇文章 <a href="https://blog.csdn.net/qq_38689395/article/details/114014869">手撕 Promise（内附then链实现）</a></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">;(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Promise</span>(<span class="params">executor</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> self = <span class="built_in">this</span>,</span><br><span class="line">      change</span><br><span class="line">    <span class="comment">// 必须new执行</span></span><br><span class="line">    <span class="keyword">if</span> (!(self <span class="keyword">instanceof</span> <span class="built_in">Promise</span>)) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">&#x27;undefined is not a promise&#x27;</span>)</span><br><span class="line">    <span class="comment">// executor必须是一个函数</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> executor !== <span class="string">&#x27;function&#x27;</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">&#x27;Promise resolver &#x27;</span> + executor + <span class="string">&#x27; is not a function&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 实例具备的属性，状态和结果</span></span><br><span class="line">    self.state = <span class="string">&#x27;pending&#x27;</span></span><br><span class="line">    self.result = <span class="literal">undefined</span></span><br><span class="line">    self.onFulfilledCallbacks = []</span><br><span class="line">    self.onRejectedCallbacks = []</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 修改实例的状态</span></span><br><span class="line">    change = <span class="function"><span class="keyword">function</span> <span class="title">change</span>(<span class="params">state, result</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (self.state !== <span class="string">&#x27;pending&#x27;</span>) <span class="keyword">return</span></span><br><span class="line">      self.state = state</span><br><span class="line">      self.result = result</span><br><span class="line">      <span class="comment">// 创建异步微任务，通知集合中存储的方法执行（前提：集合中有东西才执行）</span></span><br><span class="line">      <span class="keyword">var</span> callbacks = state === <span class="string">&#x27;fulfilled&#x27;</span> ? self.onFulfilledCallbacks : self.onRejectedCallbacks,</span><br><span class="line">        i = <span class="number">0</span>,</span><br><span class="line">        len = callbacks.length,</span><br><span class="line">        callback</span><br><span class="line">      <span class="keyword">if</span> (callbacks.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="keyword">for</span> (; i &lt; len; i++) &#123;</span><br><span class="line">            callback = callbacks[i]</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">typeof</span> callback === <span class="string">&#x27;function&#x27;</span>) callback(result)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;, <span class="number">0</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// new Promise的时候会立即执行executor函数</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      executor(</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params">result</span>) </span>&#123;</span><br><span class="line">          change(<span class="string">&#x27;fulfilled&#x27;</span>, result)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">reject</span>(<span class="params">reason</span>) </span>&#123;</span><br><span class="line">          change(<span class="string">&#x27;rejected&#x27;</span>, reason)</span><br><span class="line">        &#125;</span><br><span class="line">      )</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      <span class="comment">// 执行executor报错，实例也是失败的状态</span></span><br><span class="line">      change(<span class="string">&#x27;rejected&#x27;</span>, error)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 验证是否为Promise</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">isPromise</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="regexp">/^(object|function)$/i</span>.test(<span class="keyword">typeof</span> x)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> x.then === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 处理onFulfilled/onRejected方法执行返回结果的处理</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">handle</span>(<span class="params">promiseNew, x, resolve, reject</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x === promiseNew) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">&#x27;TypeError: Chaining cycle detected for promise #&lt;Promise&gt;&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> (isPromise(x)) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        x.then(resolve, reject)</span><br><span class="line">      &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        reject(err)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 返回不是promise实例，而且执行没有报错，则promiseNew一定是成功的，x是它的结果</span></span><br><span class="line">    resolve(x)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">Promise</span>.prototype = &#123;</span><br><span class="line">    <span class="title">constructor</span>: <span class="title">Promise</span>,</span><br><span class="line">    <span class="title">self</span>: <span class="title">true</span>,</span><br><span class="line">    <span class="title">then</span>: <span class="title">function</span> (<span class="params">onFulfilled, onRejected</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> self = <span class="built_in">this</span>,</span><br><span class="line">        promiseNew,</span><br><span class="line">        x</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> onFulfilled !== <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">        onFulfilled = <span class="function"><span class="keyword">function</span> <span class="title">onFulfilled</span>(<span class="params">result</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> result</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> onRejected !== <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">        onRejected = <span class="function"><span class="keyword">function</span> <span class="title">onRejected</span>(<span class="params">reason</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">throw</span> reason</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      promiseNew = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// resolve reject可以设置返回的@TP（新promise实例是成功还是失败以及结果等）</span></span><br><span class="line">        <span class="comment">// 但是执行哪个方法，由监听onFulfilled/onRejected方法报错以及返回值来决定</span></span><br><span class="line">        <span class="keyword">switch</span> (self.state) &#123;</span><br><span class="line">          <span class="keyword">case</span> <span class="string">&#x27;fulfilled&#x27;</span>:</span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">              <span class="keyword">try</span> &#123;</span><br><span class="line">                x = onFulfilled(self.result)</span><br><span class="line">                handle(promiseNew, x, resolve, reject)</span><br><span class="line">              &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">                reject(err)</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;, <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">          <span class="keyword">case</span> <span class="string">&#x27;rejected&#x27;</span>:</span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">              <span class="keyword">try</span> &#123;</span><br><span class="line">                x = onRejected(self.result)</span><br><span class="line">                handle(promiseNew, x, resolve, reject)</span><br><span class="line">              &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">                reject(err)</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;, <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">          <span class="keyword">default</span>:</span><br><span class="line">            self.onFulfilledCallbacks.push(<span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;</span><br><span class="line">              <span class="keyword">try</span> &#123;</span><br><span class="line">                x = onFulfilled(result)</span><br><span class="line">                handle(promiseNew, x, resolve, reject)</span><br><span class="line">              &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">                reject(err)</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">            self.onRejectedCallbacks.push(<span class="function"><span class="keyword">function</span> (<span class="params">reason</span>) </span>&#123;</span><br><span class="line">              <span class="keyword">try</span> &#123;</span><br><span class="line">                x = onRejected(reason)</span><br><span class="line">                handle(promiseNew, x, resolve, reject)</span><br><span class="line">              &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">                reject(err)</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="keyword">return</span> promiseNew</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">catch</span>: <span class="function"><span class="keyword">function</span> (<span class="params">onRejected</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.then(<span class="literal">null</span>, onRejected)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">Symbol</span> !== <span class="string">&#x27;undefined&#x27;</span>) <span class="built_in">Promise</span>.prototype[<span class="built_in">Symbol</span>.toStringTag] = <span class="string">&#x27;Promise&#x27;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 普通对象：私有静态方法</span></span><br><span class="line">  <span class="built_in">Promise</span>.all = <span class="function"><span class="keyword">function</span> <span class="title">all</span>(<span class="params">promises</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> promiseNew,</span><br><span class="line">      results = [],</span><br><span class="line">      n = <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">Array</span>.isArray(promises)) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(promises + <span class="string">&#x27; is not iterable&#x27;</span>)</span><br><span class="line">    <span class="comment">// 控制集合中的每一项都是Promise实例</span></span><br><span class="line">    promises = promises.map(<span class="function"><span class="keyword">function</span> (<span class="params">promise</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (!isPromise(promise)) <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(promise)</span><br><span class="line">      <span class="keyword">return</span> promise</span><br><span class="line">    &#125;)</span><br><span class="line">    promiseNew = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">      promises.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">promise, index</span>) </span>&#123;</span><br><span class="line">        promise</span><br><span class="line">          .then(<span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;</span><br><span class="line">            <span class="comment">// result存储的是当前迭代这一项的成功结果</span></span><br><span class="line">            n++</span><br><span class="line">            results[index] = result</span><br><span class="line">            <span class="comment">// 都处理成功</span></span><br><span class="line">            <span class="keyword">if</span> (n &gt;= promises.length) resolve(results)</span><br><span class="line">          &#125;)</span><br><span class="line">          .catch(<span class="function"><span class="keyword">function</span> (<span class="params">reason</span>) </span>&#123;</span><br><span class="line">            <span class="comment">// 只要有一项失败，整体就是失败</span></span><br><span class="line">            reject(reason)</span><br><span class="line">          &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> promiseNew</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">Promise</span>.resolve = <span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params">result</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">      resolve(result)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">Promise</span>.reject = <span class="function"><span class="keyword">function</span> <span class="title">reject</span>(<span class="params">reason</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">_, reject</span>) </span>&#123;</span><br><span class="line">      reject(reason)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 暴露API */</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">window</span> !== <span class="string">&#x27;undefined&#x27;</span>) <span class="built_in">window</span>.Promise = <span class="built_in">Promise</span></span><br><span class="line">  <span class="comment">// if (typeof module === &#x27;object&#x27; &amp;&amp; typeof module.exports === &#x27;object&#x27;) module.exports = Promise</span></span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">Math</span>.random() &lt; <span class="number">0.6</span> ? resolve(<span class="string">&#x27;OK&#x27;</span>) : reject(<span class="string">&#x27;NO&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// try catch 一般情况下是无法捕捉到异步任务执行报错信息</span></span><br><span class="line"><span class="keyword">let</span> p2 = p1.then(<span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;成功&#x27;</span>, result)</span><br><span class="line">  <span class="keyword">return</span> <span class="number">200</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p3 = p2.then(</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;成功&#x27;</span>, result)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params">reason</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;失败&#x27;</span>, reason)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p4 = <span class="built_in">Promise</span>.resolve(<span class="number">10</span>)</span><br><span class="line"><span class="keyword">let</span> p5 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    resolve(<span class="number">20</span>)</span><br><span class="line">  &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">let</span> p6 = <span class="number">30</span></span><br><span class="line"><span class="built_in">Promise</span>.all([p4, p5, p6])</span><br><span class="line">  .then(<span class="function"><span class="params">results</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;成功&#x27;</span>, results)</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;失败&#x27;</span>, reason)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>

<h2 id="接下来参考"><a href="#接下来参考" class="headerlink" title="接下来参考"></a>接下来参考</h2><p><a href="https://juejin.cn/post/6844903924520992782">关于JS中一些重要的api实现, 巩固你的原生JS功底</a></p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>instanceof</tag>
        <tag>方法实现</tag>
        <tag>new</tag>
      </tags>
  </entry>
  <entry>
    <title>Webpack（优化和问题）</title>
    <url>/posts/4317de95/</url>
    <content><![CDATA[<p>观看视频：<a href="https://www.bilibili.com/video/BV1e7411j7T5?p=24&spm_id_from=pageDriver">尚硅谷最新版Webpack5实战教程(从入门到精通)</a></p>
<a id="more"></a>

<h2 id="Webpack-简介"><a href="#Webpack-简介" class="headerlink" title="Webpack 简介"></a>Webpack 简介</h2><h3 id="webpack-是什么"><a href="#webpack-是什么" class="headerlink" title="webpack 是什么"></a>webpack 是什么</h3><p>webpack 是一种 <strong>前端资源构建工具</strong> ，一个静态模块打包器（module bundler）</p>
<p>在 webpack 看来，前端的所有资源文件（js/json/css/img/less…）都会作为模块处理。它将根据模块的依赖关系进行静态分析，打包生成对应的静态资源（bundle）。</p>
<h3 id="webpack-五个核心概念"><a href="#webpack-五个核心概念" class="headerlink" title="webpack 五个核心概念"></a>webpack 五个核心概念</h3><ol>
<li><p>Entry</p>
<p>入口，指示 webpack 以哪个文件作为入口起点开始打包，分析构建内部依赖图</p>
</li>
<li><p>Output</p>
<p>输出，指示 webpack 打包后的资源 bundles 输出到哪里去，以及如何命名</p>
</li>
<li><p>Loader</p>
<p>让 webpack 能够去处理那些非 JavaScript 文件（webpack 自身只理解 JavaScript）</p>
</li>
<li><p>Plugins</p>
<p>可以用于执行范围更广的任务。插件的范围包括，从打包优化和压缩，一直到重新定义环境中的变量等</p>
</li>
<li><p>Mode</p>
<table>
<thead>
<tr>
<th>选项</th>
<th>描述</th>
<th>特点</th>
</tr>
</thead>
<tbody><tr>
<td>development</td>
<td>会将 DefinePlugin 中的 process.env.NODE_ENV 的值设为 development</td>
<td>能让代码本地调试运行的环境</td>
</tr>
<tr>
<td>production</td>
<td>会将 DefinePlugin 中的 process.env.NODE_ENV 的值设为 production</td>
<td>能将代码优化上线运行的环境</td>
</tr>
</tbody></table>
</li>
</ol>
<h2 id="Webpack-初体验"><a href="#Webpack-初体验" class="headerlink" title="Webpack 初体验"></a>Webpack 初体验</h2><h3 id="初始化配置"><a href="#初始化配置" class="headerlink" title="初始化配置"></a>初始化配置</h3><ol>
<li><p>初始化 package.json：npm init</p>
</li>
<li><p>下载安装 webpack：（webpack4 以上的版本需要全局/本地都安装 webpack-cli）</p>
<p>全局安装：<code>npm i webpack@4 webpack-cli@3 -g</code></p>
<p>本地安装：<code>npm i webpack@4 webpack-cli@3 -D</code></p>
</li>
</ol>
<h3 id="编译打包应用"><a href="#编译打包应用" class="headerlink" title="编译打包应用"></a>编译打包应用</h3><p>运行指令：</p>
<ul>
<li>开发环境：<code>webpack ./src/index.js -o ./build/built.js --mode=development</code>，webpack 会以 <code>./src/index.js</code> 为入口文件开始打包，打包后输出到 <code>./build/built.js</code> 整体打包环境，是开发环境</li>
<li>生产环境：<code>webpack ./src/index.js -o ./build/built.js --mode=production</code>，webpack 会以 <code>./src/index.js</code> 为入口文件开始打包，打包后输出到 <code>./build/built.js</code> 整体打包环境，是生产环境</li>
</ul>
<p>结论：</p>
<ol>
<li>webpack 能处理 js、json，不能处理 css、img等其他资源</li>
<li>生产环境和开发环境将 ES6 模块化编译成浏览器能识别的模块化</li>
<li>生产环境比开发环境多一个压缩 JS 代码</li>
</ol>
<h2 id="Webpack-环境的基本配置"><a href="#Webpack-环境的基本配置" class="headerlink" title="Webpack 环境的基本配置"></a>Webpack 环境的基本配置</h2><p><code>webpack.config.js</code> 是 webpack 的配置文件</p>
<ul>
<li>作用：指示 webpack 干哪些活（当你运行 webpack 指令时，会加载里面的配置）</li>
<li>所有构建工具都是基于 nodejs 平台运行的，模块化采用 commonjs</li>
</ul>
<p>path 模块的 resolve <code>__dirname</code> nodejs 的变量，代表当前文件的目录的绝对路径</p>
<p>loader，rules 下的 use 数组中 loader 执行顺序：从右到左、从下到上依次执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i less-loader@6 style-loader css-loader@ -D</span><br><span class="line">npm i html-webpack-plugin@4 -D</span><br><span class="line">npm i url-loader file-loader -D</span><br><span class="line">npm i html-loader@0.5 -D</span><br><span class="line">npm i webpack-dev-server -D</span><br></pre></td></tr></table></figure>

<p><code>url-loader</code> 只能处理样式中的图片资源，这个 loader 对图片资源进行 ES6Module 引入 ，为了跟 <code>html-loader</code> 一致，需关闭 ES6Module（<code>esModule :false</code>）</p>
<ul>
<li><p>可以做图片 base64 处理</p>
<p>优点：减少请求数量（减轻服务器压力）</p>
<p>缺点：图片体积会更大（文件请求速度更慢）</p>
</li>
</ul>
<p><code>html-loader</code> 处理html中的图片资源，这个 loader 对图片资源进行 commonJS 引入 </p>
<p>devServer：<code>npx webpack-dev-server</code></p>
<p>开发服务器devServer：用来自动化（自动编译，自动打开浏览器，自动刷新浏览器）。特点：只会在内存中编译打包，不会有任何输出</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; resolve &#125; = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// 入口起点</span></span><br><span class="line">  entry: <span class="string">&#x27;./src/index.js&#x27;</span>,</span><br><span class="line">  <span class="comment">// 输出</span></span><br><span class="line">  output: &#123;</span><br><span class="line">    <span class="comment">// 输出文件名</span></span><br><span class="line">    filename: <span class="string">&#x27;built.js&#x27;</span>,</span><br><span class="line">    <span class="comment">// 输出路径</span></span><br><span class="line">    path: resolve(__dirname, <span class="string">&#x27;build&#x27;</span>),</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// loader配置</span></span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      <span class="comment">// 详细loader配置，不同文件必须配置不同loader处理</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// 匹配哪些文件</span></span><br><span class="line">        test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        <span class="comment">// 使用哪些loader进行处理</span></span><br><span class="line">        use: [</span><br><span class="line">          <span class="comment">// 创建style标签，将js中的样式资源插入，添加到head中生效</span></span><br><span class="line">          <span class="string">&#x27;style-loader&#x27;</span>,</span><br><span class="line">          <span class="comment">// 将css文件变成commonjs模块加载js中，里面内容是样式字符串</span></span><br><span class="line">          <span class="string">&#x27;css-loader&#x27;</span>,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.less$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          <span class="string">&#x27;style-loader&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;css-loader&#x27;</span>,</span><br><span class="line">          <span class="comment">// 将less文件编译成css文件</span></span><br><span class="line">          <span class="string">&#x27;less-loader&#x27;</span>,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// 问题：默认处理不了html中img图片</span></span><br><span class="line">        <span class="comment">// 处理图片资源</span></span><br><span class="line">        test: <span class="regexp">/\.(jpg|png|gif)$/</span>,</span><br><span class="line">        loader: <span class="string">&#x27;url-loader&#x27;</span>,</span><br><span class="line">        options: &#123;</span><br><span class="line">          <span class="comment">// 图片大小小于8kb，就会被base64处理</span></span><br><span class="line">          limit: <span class="number">8</span> * <span class="number">1024</span>,</span><br><span class="line">          esModule: <span class="literal">false</span>,</span><br><span class="line">          <span class="comment">// 给图片进行重命名</span></span><br><span class="line">          name: <span class="string">&#x27;[hash:10].[ext]&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.html$/</span>,</span><br><span class="line">        <span class="comment">// 处理html文件的img图片（负责引入img，从而能被url-loader处理）</span></span><br><span class="line">        loader: <span class="string">&#x27;html-loader&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// 排除css/js/html资源</span></span><br><span class="line">        exclude: <span class="regexp">/\.(css|js|less|jpg|png|gif|html)$/</span>,</span><br><span class="line">        loader: <span class="string">&#x27;file-loader&#x27;</span>,</span><br><span class="line">        options: &#123;</span><br><span class="line">          name: <span class="string">&#x27;[hash:10].[ext]&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// plugins配置</span></span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="comment">// 详细plugins配置</span></span><br><span class="line">    <span class="comment">// 默认会创建一个空的html，引入打包输出的所有资源（JS/CSS）</span></span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      <span class="comment">// 复制 &#x27;./src/index.html&#x27; 文件，并自动引入打包输出的所有资源（JS/CSS）</span></span><br><span class="line">      template: <span class="string">&#x27;./src/index.html&#x27;</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">  <span class="comment">// 模式</span></span><br><span class="line">  mode: <span class="string">&#x27;development&#x27;</span>, <span class="comment">// 开发模式</span></span><br><span class="line">  <span class="comment">// mode: &#x27;production&#x27;, // 生产模式</span></span><br><span class="line">  devServer: &#123;</span><br><span class="line">    <span class="comment">// 项目构建后路径</span></span><br><span class="line">    contentBase: resolve(__dirname, <span class="string">&#x27;build&#x27;</span>),</span><br><span class="line">    <span class="comment">// 启动gzip压缩</span></span><br><span class="line">    compress: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// 端口号</span></span><br><span class="line">    port: <span class="number">3000</span>,</span><br><span class="line">    <span class="comment">// 自动打开浏览器</span></span><br><span class="line">    open: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="Webpack-生产环境的基本配置"><a href="#Webpack-生产环境的基本配置" class="headerlink" title="Webpack 生产环境的基本配置"></a>Webpack 生产环境的基本配置</h2><p><a href="https://github.com/topics/javascript">https://github.com/topics/javascript</a></p>
<ul>
<li>安装</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i mini-css-extract-plugin -D</span><br><span class="line">npm i postcss-loader@3 postcss-preset-env -D</span><br><span class="line">npm i optimize-css-assets-webpack-plugin -D</span><br><span class="line">npm i eslint eslint-loader eslint-plugin-import eslint-config-airbnb-base -D</span><br><span class="line">npm i babel-loader @babel/core @babel/preset-env -D</span><br><span class="line">npm i @babel/polyfill -D</span><br><span class="line">npm i core-js -D</span><br><span class="line">npm i rimraf -D</span><br></pre></td></tr></table></figure>

<ul>
<li><p>压缩一般使用 plugin 完成</p>
<p>兼容一般使用 loader 完成</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; resolve &#125; = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> MiniCssExtractPlugin = <span class="built_in">require</span>(<span class="string">&#x27;mini-css-extract-plugin&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> OptimizeCssAssetsWebpackPlugin = <span class="built_in">require</span>(<span class="string">&#x27;optimize-css-assets-webpack-plugin&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义nodejs环境变量，决定使用browserslist的哪个环境</span></span><br><span class="line">process.env.NODE_ENV = <span class="string">&#x27;production&#x27;</span></span><br><span class="line"><span class="keyword">const</span> commonCssLoader = [</span><br><span class="line">  <span class="comment">// 这个loader取代style-loader。作用：提取js中的css成单独文件</span></span><br><span class="line">  MiniCssExtractPlugin.loader,</span><br><span class="line">  <span class="comment">// 将css文件整合到js文件中</span></span><br><span class="line">  <span class="string">&#x27;css-loader&#x27;</span>,</span><br><span class="line">  <span class="comment">// 帮助postcss找到package.json中browserslist里面的配置，通过配置价值指定的css兼容性样式</span></span><br><span class="line">  &#123;</span><br><span class="line">    loader: <span class="string">&#x27;postcss-loader&#x27;</span>,</span><br><span class="line">    options: &#123;</span><br><span class="line">      ident: <span class="string">&#x27;postcss&#x27;</span>,</span><br><span class="line">      plugins: <span class="function">() =&gt;</span> [<span class="built_in">require</span>(<span class="string">&#x27;postcss-preset-env&#x27;</span>)()],</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">&#x27;./src/js/index.js&#x27;</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">&#x27;js/built.js&#x27;</span>,</span><br><span class="line">    path: resolve(__dirname, <span class="string">&#x27;build&#x27;</span>),</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        use: [...commonCssLoader],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.less$/</span>,</span><br><span class="line">        use: [...commonCssLoader, <span class="string">&#x27;less-loader&#x27;</span>],</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// 语法检查。注意：只检查自己写的源代码</span></span><br><span class="line">      <span class="comment">/* &#123;</span></span><br><span class="line"><span class="comment">        test: /\.js$/,</span></span><br><span class="line"><span class="comment">        exclude: /node_modules/,</span></span><br><span class="line"><span class="comment">        loader: &#x27;eslint-loader&#x27;,</span></span><br><span class="line"><span class="comment">        options: &#123;</span></span><br><span class="line"><span class="comment">          // 优先执行</span></span><br><span class="line"><span class="comment">          enforce: &#x27;pre&#x27;,</span></span><br><span class="line"><span class="comment">          // 自动修复eslint错误</span></span><br><span class="line"><span class="comment">          fix: true,</span></span><br><span class="line"><span class="comment">        &#125;,</span></span><br><span class="line"><span class="comment">      &#125;, */</span></span><br><span class="line">      <span class="comment">// 基本js兼容性处理 -&gt; @babel/preset-env</span></span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">        loader: <span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line">        options: &#123;</span><br><span class="line">          <span class="comment">// 预设：指示babel做怎么样的兼容性处理</span></span><br><span class="line">          presets: [</span><br><span class="line">            [</span><br><span class="line">              <span class="string">&#x27;@babel/preset-env&#x27;</span>,</span><br><span class="line">              &#123;</span><br><span class="line">                <span class="comment">// 按需加载</span></span><br><span class="line">                useBuiltIns: <span class="string">&#x27;usage&#x27;</span>,</span><br><span class="line">                <span class="comment">// 指定core-js版本</span></span><br><span class="line">                corejs: &#123;</span><br><span class="line">                  version: <span class="number">3</span>,</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="comment">// 指定兼容性做到哪个版本浏览器</span></span><br><span class="line">                targets: &#123;</span><br><span class="line">                  chrome: <span class="string">&#x27;60&#x27;</span>,</span><br><span class="line">                  ie: <span class="string">&#x27;9&#x27;</span>,</span><br><span class="line">                  safari: <span class="string">&#x27;10&#x27;</span>,</span><br><span class="line">                &#125;,</span><br><span class="line">              &#125;,</span><br><span class="line">            ],</span><br><span class="line">          ],</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      template: <span class="string">&#x27;./src/index.html&#x27;</span>,</span><br><span class="line">      minify: &#123;</span><br><span class="line">        <span class="comment">// 移除空格</span></span><br><span class="line">        collapseWhitespace: <span class="literal">true</span>,</span><br><span class="line">        <span class="comment">// 移除注释</span></span><br><span class="line">        removeComments: <span class="literal">true</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> MiniCssExtractPlugin(&#123;</span><br><span class="line">      <span class="comment">// 对输出的css文件进行重命名</span></span><br><span class="line">      filename: <span class="string">&#x27;css/built.css&#x27;</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="comment">// 压缩css</span></span><br><span class="line">    <span class="keyword">new</span> OptimizeCssAssetsWebpackPlugin(),</span><br><span class="line">  ],</span><br><span class="line">  <span class="comment">// 生产模式js自动压缩</span></span><br><span class="line">  mode: <span class="string">&#x27;production&#x27;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="css-兼容性处理"><a href="#css-兼容性处理" class="headerlink" title="css 兼容性处理"></a>css 兼容性处理</h3><p><code>package.json</code> 中的 <code>browserslist</code> 配置</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&quot;browserslist&quot;: &#123;</span><br><span class="line">  &quot;development&quot;: [</span><br><span class="line">    &quot;last 1 chrome version&quot;,</span><br><span class="line">    &quot;last 1 firefox version&quot;,</span><br><span class="line">    <span class="string">&quot;last 1 safari version&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  &quot;production&quot;: [</span><br><span class="line">    &quot;&gt;0.2%&quot;,</span><br><span class="line">    &quot;not dead&quot;,</span><br><span class="line">    <span class="string">&quot;not op_mini all&quot;</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>MiniCssExtractPlugin</code> 提取js中的css成单独文件</p>
<p><code>OptimizeCssAssetsWebpackPlugin</code> 对 css 代码进行压缩</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">  use: [</span><br><span class="line">    MiniCssExtractPlugin.loader,</span><br><span class="line">    <span class="comment">// 帮助postcss找到package.json中browserslist里面的配置，通过配置价值指定的css兼容性样式</span></span><br><span class="line">    &#123;</span><br><span class="line">      loader: <span class="string">&#x27;postcss-loader&#x27;</span>,</span><br><span class="line">      options: &#123;</span><br><span class="line">        ident: <span class="string">&#x27;postcss&#x27;</span>,</span><br><span class="line">        plugins: <span class="function">() =&gt;</span> [</span><br><span class="line">          <span class="built_in">require</span>(<span class="string">&#x27;postcss-preset-env&#x27;</span>)(),</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;,</span><br><span class="line">plugins: [</span><br><span class="line">  <span class="keyword">new</span> MiniCssExtractPlugin(&#123;</span><br><span class="line">    <span class="comment">// 对输出的css文件进行重命名</span></span><br><span class="line">    filename: <span class="string">&#x27;css/built.css&#x27;</span>,</span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="comment">// 压缩css</span></span><br><span class="line">  <span class="keyword">new</span> OptimizeCssAssetsWebpackPlugin(),</span><br><span class="line">],</span><br></pre></td></tr></table></figure>

<h3 id="eslint-语法检查"><a href="#eslint-语法检查" class="headerlink" title="eslint 语法检查"></a>eslint 语法检查</h3><p><code>package.json</code> 中的 <code>eslintConfig</code> 配置</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&quot;eslintConfig&quot;: &#123;</span><br><span class="line">  &quot;extends&quot;: &quot;airbnb-base&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用 <code>eslint-loader</code> 自动修复</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">  exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">  loader: <span class="string">&#x27;eslint-loader&#x27;</span>,</span><br><span class="line">  options: &#123;</span><br><span class="line">    <span class="comment">// 自动修复eslint错误</span></span><br><span class="line">    fix: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h3 id="js-兼容性处理"><a href="#js-兼容性处理" class="headerlink" title="js 兼容性处理"></a>js 兼容性处理</h3><p>首先需要安装 <code>babel-loader</code> 、 <code>@babel/core</code></p>
<ol>
<li><p>基本 js 兼容处理 -&gt; <code>@babel/preset-env</code></p>
<p>问题：只能转换基本语法，比如：promise 不能转换</p>
</li>
<li><p>全部 js 兼容性处理 -&gt; <code>@babel/polyfill</code></p>
<p>在 js 中引入<code>import &#39;@babel/polyfill&#39;</code></p>
<p>问题：只要解决部分兼容性问题，但是所有兼容性代码全部引入，体积太大</p>
</li>
<li><p>按需加载 js 兼容性处理</p>
<p>使用 <code>core-js</code></p>
<p>或使用 link 引入<code>https://polyfill.io/v3/url-builder/</code></p>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">  exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">  loader: <span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line">  options: &#123;</span><br><span class="line">    <span class="comment">// 预设：指示babel做怎么样的兼容性处理</span></span><br><span class="line">    presets: [</span><br><span class="line">      [</span><br><span class="line">        <span class="string">&#x27;@babel/preset-env&#x27;</span>,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="comment">// 按需加载</span></span><br><span class="line">          useBuiltIns: <span class="string">&#x27;usage&#x27;</span>,</span><br><span class="line">          <span class="comment">// 指定core-js版本</span></span><br><span class="line">          corejs: &#123;</span><br><span class="line">            version: <span class="number">3</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="comment">// 指定兼容性做到哪个版本浏览器</span></span><br><span class="line">          targets: &#123;</span><br><span class="line">            chrome: <span class="string">&#x27;60&#x27;</span>,</span><br><span class="line">            firefox: <span class="string">&#x27;60&#x27;</span>,</span><br><span class="line">            ie: <span class="string">&#x27;9&#x27;</span>,</span><br><span class="line">            safari: <span class="string">&#x27;10&#x27;</span>,</span><br><span class="line">            edge: <span class="string">&#x27;17&#x27;</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h3 id="html-压缩"><a href="#html-压缩" class="headerlink" title="html 压缩"></a>html 压缩</h3><p>生产环境会自动压缩 js 代码（默认加载 <code>UglifyJsPlugin</code>）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">plugins: [</span><br><span class="line">  <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">    template: <span class="string">&#x27;./src/index.html&#x27;</span>,</span><br><span class="line">    minify: &#123;</span><br><span class="line">      <span class="comment">// 移除空格</span></span><br><span class="line">      collapseWhitespace: <span class="literal">true</span>,</span><br><span class="line">      <span class="comment">// 移除注释</span></span><br><span class="line">      removeComments: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="keyword">new</span> MiniCssExtractPlugin(&#123;</span><br><span class="line">    filename: <span class="string">&#x27;css/built.css&#x27;</span>,</span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="keyword">new</span> OptimizeCssAssetsWebpackPlugin(),</span><br><span class="line">],</span><br></pre></td></tr></table></figure>

<h2 id="Webpack-优化配置"><a href="#Webpack-优化配置" class="headerlink" title="Webpack 优化配置"></a>Webpack 优化配置</h2><h3 id="开发环境性能优化"><a href="#开发环境性能优化" class="headerlink" title="开发环境性能优化"></a>开发环境性能优化</h3><h4 id="HMR：（优化打包构建速度）"><a href="#HMR：（优化打包构建速度）" class="headerlink" title="HMR：（优化打包构建速度）"></a>HMR：（优化打包构建速度）</h4><p>HMR（hot module replacement）热模块替换 / 模块热替换</p>
<p>作用：一个模块发生变化，只会重新打包这一个模块（而不是所有模块）。极大提高构建速度</p>
<ol>
<li><p>样式文件，可以使用 HMR 功能，因为 <code>style-loader</code> 内部实现了（比如引入 <code>style-loader</code>）</p>
</li>
<li><p>js 文件，默认不能使用 HMR 功能 -&gt;  需要修改 js 代码，添加支持 HMR 功能代码</p>
<p>注意：HMR 功能对 js 处理，只能处理非入口 js 文件的其他文件</p>
</li>
<li><p>html 文件，默认不能使用 HMR 功能，同时导致问题：html 文件不能热更新（不用做 HMR 功能）</p>
<p>解决方法：修改 entry 入口，将 html 文件引入</p>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">devServer: &#123;</span><br><span class="line">  <span class="comment">// 开启HMR功能</span></span><br><span class="line">  hot: <span class="literal">true</span>,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h4 id="source-map：（优化代码调试）"><a href="#source-map：（优化代码调试）" class="headerlink" title="source-map：（优化代码调试）"></a>source-map：（优化代码调试）</h4><p>一种提供 <strong>源代码到构建后代码的映射</strong> 的技术（如果构建后代码出错了，通过映射可以追溯源代码错误）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// [inline-|hidden-|eval-][nosources-][cheap-[module-]]source-map</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 外部。提示的是错误代码准确信息和源代码的错误位置</span></span><br><span class="line">devtool: <span class="string">&#x27;source-map&#x27;</span></span><br><span class="line"><span class="comment">// 内联：只生成一个内联source-map。提示的是错误代码准确信息和源代码的错误位置</span></span><br><span class="line">devtool: <span class="string">&#x27;inline-source-map&#x27;</span></span><br><span class="line"><span class="comment">// 外部。提示的是错误代码准确信息但是没有错误位置（不能追踪源代码错误，只能提示到构建后代码的错误位置）</span></span><br><span class="line">devtool: <span class="string">&#x27;hidden-source-map&#x27;</span></span><br><span class="line"><span class="comment">// 内联：每一个文件都生成对应的source-map，都在eval。提示的是错误代码准确信息和源代码的错误位置</span></span><br><span class="line">devtool: <span class="string">&#x27;eval-source-map&#x27;</span></span><br><span class="line"><span class="comment">// 外部。提示的是错误代码准确信息但是没有任何源代码信息</span></span><br><span class="line">devtool: <span class="string">&#x27;nosources-source-map&#x27;</span></span><br><span class="line"><span class="comment">// 外部。提示的是错误代码准确信息和源代码的错误位置（只能精确到行，其余能精确到准确位置）</span></span><br><span class="line">devtool: <span class="string">&#x27;cheap-source-map&#x27;</span></span><br><span class="line"><span class="comment">// 外部。提示的是错误代码准确信息和源代码的错误位置。module会将loader的source-map加入</span></span><br><span class="line">devtool: <span class="string">&#x27;cheap-module-source-map&#x27;</span></span><br></pre></td></tr></table></figure>

<p>内联和外部的区别：</p>
<ol>
<li>外部生成了文件，内联没有</li>
<li>内联构建速度更快</li>
</ol>
<p>开发环境：速度快，调试更友好</p>
<ul>
<li><p>速度快（eval&gt;inline&gt;cheap&gt;…）</p>
<p>eval-cheap-source-map</p>
<p>eval-source-map</p>
</li>
<li><p>调试更友好</p>
<p>source-map</p>
<p>cheap-module-source-map</p>
<p>cheap-source-map</p>
</li>
<li><p><strong>推荐：eval-source-map（脚手架默认使用这个；完整度高，内联速度快）、eval-cheap-module-source-map（错误提示忽略列但是包含其他信息，内联速度快）</strong></p>
</li>
</ul>
<p>生产环境：源代码要不要隐藏？调试要不要更友好</p>
<ul>
<li><p>内联会让代码体积大，所以生产环境不用内联</p>
<p>nosources-source-map 全部隐藏</p>
<p>hidden-source-map 只隐藏源代码</p>
<p>source-map</p>
</li>
<li><p><strong>推荐：source-map（最完整）、cheap-module-source-map（错误提示一整行忽略列）</strong></p>
</li>
</ul>
<h3 id="生产环境性能优化"><a href="#生产环境性能优化" class="headerlink" title="生产环境性能优化"></a>生产环境性能优化</h3><h4 id="oneOf：惰性匹配（优化打包构建速度）"><a href="#oneOf：惰性匹配（优化打包构建速度）" class="headerlink" title="oneOf：惰性匹配（优化打包构建速度）"></a>oneOf：惰性匹配（优化打包构建速度）</h4><p>匹配到 loader 后就不会再向后进行匹配，提升性能</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">rules: [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">// 注意：不能有两个配置处理同一个文件</span></span><br><span class="line">    oneOf: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.less$/</span>,</span><br><span class="line">        use: [<span class="string">&#x27;style-loader&#x27;</span>, <span class="string">&#x27;css-loader&#x27;</span>, <span class="string">&#x27;less-loader&#x27;</span>],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        use: [<span class="string">&#x27;style-loader&#x27;</span>, <span class="string">&#x27;css-loader&#x27;</span>],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">],</span><br></pre></td></tr></table></figure>

<h4 id="多线程打包：（优化打包构建速度）"><a href="#多线程打包：（优化打包构建速度）" class="headerlink" title="多线程打包：（优化打包构建速度）"></a>多线程打包：（优化打包构建速度）</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i thread-loader -D</span><br></pre></td></tr></table></figure>

<p>某个任务消耗时间较长会卡顿，多线程可以同一时间干多件事，效率更高。</p>
<ul>
<li>优点：提升打包速度</li>
<li>缺点：每个进程的开启和交流都会有开销</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">  exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">  use: [</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">   	进程启动大概为600ms，进程通信也有开销</span></span><br><span class="line"><span class="comment">   	只有工作消耗时间比较长，才需要多线程打包</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    &#123;</span><br><span class="line">      loader: <span class="string">&#x27;thread-loader&#x27;</span>,</span><br><span class="line">      options: &#123;</span><br><span class="line">        worker: <span class="number">2</span>, <span class="comment">// 2个进程</span></span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      loader: <span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line">      options: &#123;</span><br><span class="line">        presets: [</span><br><span class="line">          [</span><br><span class="line">            <span class="string">&#x27;@babel/preset-env&#x27;</span>,</span><br><span class="line">            &#123;</span><br><span class="line">              useBuiltIns: <span class="string">&#x27;usage&#x27;</span>,</span><br><span class="line">              corejs: &#123; <span class="attr">version</span>: <span class="number">3</span> &#125;,</span><br><span class="line">              targets: &#123;</span><br><span class="line">                chrome: <span class="string">&#x27;60&#x27;</span>,</span><br><span class="line">                ie: <span class="string">&#x27;9&#x27;</span>,</span><br><span class="line">              &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">          ],</span><br><span class="line">        ],</span><br><span class="line">        <span class="comment">// 开启babel缓存；第二次构建，会读取之前的缓存</span></span><br><span class="line">        cacheDirectory: <span class="literal">true</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h4 id="externals：排除打包（优化打包构建速度）"><a href="#externals：排除打包（优化打包构建速度）" class="headerlink" title="externals：排除打包（优化打包构建速度）"></a>externals：排除打包（优化打包构建速度）</h4><p>externals：让某些库不打包（通过 cdn 引入）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">externals: &#123;</span><br><span class="line">  <span class="comment">// 拒绝jQuery被打包进来</span></span><br><span class="line">  jquery: <span class="string">&#x27;jQuery&#x27;</span>,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h4 id="dll：单独打包（优化打包构建速度）"><a href="#dll：单独打包（优化打包构建速度）" class="headerlink" title="dll：单独打包（优化打包构建速度）"></a>dll：单独打包（优化打包构建速度）</h4><ul>
<li>如果使用 cdn 引入，建议使用 externals</li>
<li>如果不使用 cdn 引入，推荐使用 dll</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i add-asset-html-webpack-plugin -D</span><br></pre></td></tr></table></figure>

<p>dll：让某些库单独打包，后直接引入到 build 中</p>
<ul>
<li>可以在 code split 分割出 node_modules 后再用 dll 更细的分割，优化代码运行的性能</li>
<li>使用 dll 技术，对某些库（第三方库：jquery、react、vue…）进行单独打包</li>
</ul>
<p>webpack.dll.js 配置：（将 jquery 单独打包）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; resolve &#125; = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">&#x27;webpack&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    <span class="comment">// 最终打包生成的[name]-&gt;jquery</span></span><br><span class="line">    jquery: [<span class="string">&#x27;jquery&#x27;</span>],</span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">&#x27;[name].js&#x27;</span>,</span><br><span class="line">    path: resolve(__dirname, <span class="string">&#x27;dll&#x27;</span>),</span><br><span class="line">    <span class="comment">// 打包的库里面向外暴露出去的内容叫什么名字 jquery_c37977f51e5c1fd27a84</span></span><br><span class="line">    library: <span class="string">&#x27;[name]_[hash]&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="comment">// 打包生成一个mainfest.json-&gt;提供和jquery映射</span></span><br><span class="line">    <span class="keyword">new</span> webpack.DllPlugin(&#123;</span><br><span class="line">      <span class="comment">// 映射库的暴露的内容名称</span></span><br><span class="line">      name: <span class="string">&#x27;[name]_[hash]&#x27;</span>,</span><br><span class="line">      <span class="comment">// 输出文件路径</span></span><br><span class="line">      path: resolve(__dirname, <span class="string">&#x27;dll/mainfest.json&#x27;</span>),</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">  mode: <span class="string">&#x27;production&#x27;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>webpack.config.js 配置：（告诉 webpack 不需要再打包 jquery，并将之前打包好的 jquery 跟其他打包好的 jquery 跟其他打包好的资源一同输出到 build 目录下）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">&#x27;webpack&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> AddAssetHtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">&#x27;add-asset-html-webpack-plugin&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plugins: [</span><br><span class="line">  <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">    template: <span class="string">&#x27;./src/index.html&#x27;</span>,</span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="comment">// 告诉webpack哪些库不参与打包，同时使用时的名称也得变</span></span><br><span class="line">  <span class="keyword">new</span> webpack.DllReferencePlugin(&#123;</span><br><span class="line">    manifest: resolve(__dirname, <span class="string">&#x27;dll/manifest.json&#x27;</span>),</span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="comment">// 将某个文件打包输出到build目录下，并在html中自动引入该资源</span></span><br><span class="line">  <span class="keyword">new</span> AddAssetHtmlWebpackPlugin(&#123;</span><br><span class="line">    filepath: resolve(__dirname, <span class="string">&#x27;dll/jquery.js&#x27;</span>),</span><br><span class="line">  &#125;),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h4 id="缓存："><a href="#缓存：" class="headerlink" title="缓存："></a>缓存：</h4><ul>
<li>babel 缓存：第二次打包构建速度更快（<strong>优化打包构建速度</strong>）</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">  exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">  loader: <span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line">  options: &#123;</span><br><span class="line">    presets: [</span><br><span class="line">      [</span><br><span class="line">        <span class="string">&#x27;@babel/preset-env&#x27;</span>,</span><br><span class="line">        &#123;</span><br><span class="line">          useBuiltIns: <span class="string">&#x27;usage&#x27;</span>,</span><br><span class="line">          corejs: &#123; <span class="attr">version</span>: <span class="number">3</span> &#125;,</span><br><span class="line">          targets: &#123;</span><br><span class="line">            chrome: <span class="string">&#x27;60&#x27;</span>,</span><br><span class="line">            ie: <span class="string">&#x27;9&#x27;</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">    ],</span><br><span class="line">    <span class="comment">// 开启babel缓存；第二次构建，会读取之前的缓存</span></span><br><span class="line">    cacheDirectory: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<ul>
<li>文件资源缓存：上线代码运行缓存更好使用（<strong>优化代码运行性能</strong>）</li>
</ul>
<ol>
<li>hash：每次webpack构建时会生成一个唯一的hash值。不管文件是否有变化它都会变化</li>
<li>chunkhash：如果打包来源于同一个chunk，那么hash值就一样。如果在 js 中引入 css，js 和 css 就会绑定在一起</li>
<li>contenthash：根据文件的内容生成hash值。不同文件hash值一定不一样</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">hash</span></span><br><span class="line"><span class="comment">  问题：因为js和css同时使用一个hash值，如果重新打包，会导致所有缓存失效</span></span><br><span class="line"><span class="comment">chunkhash</span></span><br><span class="line"><span class="comment">  问题：js和css值还是一样的。因为css是在js中被引入的，所以同属于一个chunk</span></span><br><span class="line"><span class="comment">contenthash</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">output: &#123;</span><br><span class="line">  filename: <span class="string">&#x27;js/built.[contenthash:10].js&#x27;</span>,</span><br><span class="line">  path: resolve(__dirname, <span class="string">&#x27;build&#x27;</span>),</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h4 id="tree-shaking：树摇（优化代码运行性能）"><a href="#tree-shaking：树摇（优化代码运行性能）" class="headerlink" title="tree shaking：树摇（优化代码运行性能）"></a>tree shaking：树摇（优化代码运行性能）</h4><p>去除程序中没有使用的代码，从而使体积更小，请求速度快</p>
<p>前提：</p>
<ol>
<li>必须使用 ES6 模块化</li>
<li>开启 production 环境</li>
</ol>
<p>在 <code>package.json</code> 中配置</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 可能会把css @babel/polyfill 文件都干掉</span></span><br><span class="line">&quot;sideEffects&quot;: false</span><br><span class="line"><span class="comment">// 不会对css、less文件tree shaking</span></span><br><span class="line">&quot;sideEffects&quot;: [&quot;*.css&quot;, &quot;*.less&quot;]</span><br></pre></td></tr></table></figure>

<h4 id="code-split：代码分割（优化代码运行性能）"><a href="#code-split：代码分割（优化代码运行性能）" class="headerlink" title="code split：代码分割（优化代码运行性能）"></a>code split：代码分割（优化代码运行性能）</h4><p>代码分割：将打包输出的一个大的 bundle.js 文件拆分成多个小文件，这样可以并行加载多个文件，比加载一个文件更快</p>
<ol>
<li><p>多入口拆分</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">entry: &#123;</span><br><span class="line">  <span class="comment">// 多入口：有一个入口，最终输出就有一个bundle</span></span><br><span class="line">  main: <span class="string">&#x27;./src/js/index.js&#x27;</span>,</span><br><span class="line">  test: <span class="string">&#x27;./src/js/test.js&#x27;</span>,</span><br><span class="line">&#125;,</span><br><span class="line">output: &#123;</span><br><span class="line">  filename: <span class="string">&#x27;js/[name].[contenthash:10].js&#x27;</span>,</span><br><span class="line">  path: resolve(__dirname, <span class="string">&#x27;build&#x27;</span>),</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
</li>
<li><p>optimization：</p>
<ul>
<li>可以将 node_modules 中代码单独打包一个 chunk 最终输出</li>
<li>自动分析多入口 chunk 中，有没有公共的文件。如果有会打包成单独一个 chunk（比如两个模块中都引入了 jquery 会被打包成单独的文件）</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">optimization: &#123;</span><br><span class="line">  splitChunks: &#123;</span><br><span class="line">    chunks: <span class="string">&#x27;all&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
</li>
<li><p>import 动态导入语法</p>
<p>通过 js 代码，让某个文件被单独打包成一个 chunk</p>
<p>import 动态导入语法：能将某个文件单独打包</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>(<span class="comment">/* webpackChunkName: &#x27;test&#x27; */</span> <span class="string">&#x27;./utils&#x27;</span>)</span><br><span class="line">  .then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;文件加载成功&#x27;</span>, result)</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;文件加载失败&#x27;</span>)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="lazy-loading：懒加载（优化代码运行性能）"><a href="#lazy-loading：懒加载（优化代码运行性能）" class="headerlink" title="lazy loading：懒加载（优化代码运行性能）"></a>lazy loading：懒加载（优化代码运行性能）</h4><ol>
<li>懒加载：当文件需要使用时才加载</li>
<li>正常加载：并行加载（同一时间加载多个文件）</li>
<li>预加载 prefetch：会在使用之前，提前加载 js 文件。等其他资源加载完毕，浏览器空闲了，再加载资源</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&#x27;btn&#x27;</span>).onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: &#x27;test&#x27;, webpackPrefetch: true */</span> <span class="string">&#x27;./test&#x27;</span>).then(<span class="function">(<span class="params">&#123; mul &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(mul(<span class="number">4</span>, <span class="number">5</span>))</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">import</span>(<span class="string">&#x27;./test&#x27;</span>).then(<span class="function">(<span class="params">&#123; mul &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(mul(<span class="number">2</span>, <span class="number">5</span>))</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="PWA：离线可访问技术（优化代码运行性能）"><a href="#PWA：离线可访问技术（优化代码运行性能）" class="headerlink" title="PWA：离线可访问技术（优化代码运行性能）"></a>PWA：离线可访问技术（优化代码运行性能）</h4><p>渐进式网络开发应用程序，使用 serviceworker 和 worker 技术</p>
<ul>
<li>优点：离线也能访问</li>
<li>缺点：兼容性差</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i workbox-webpack-plugin -D</span><br></pre></td></tr></table></figure>

<p>webpack.config.js 中配置：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> workboxWebpackPlugin = <span class="built_in">require</span>(<span class="string">&#x27;workbox-webpack-plugin&#x27;</span>)</span><br><span class="line">plugins: [</span><br><span class="line">  <span class="keyword">new</span> workboxWebpackPlugin.GenerateSW(&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    1.帮助serviceworker快速启动</span></span><br><span class="line"><span class="comment">    2.删除旧的serviceworker</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    生成一个serviceworker配置文件</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    clientsClaim: <span class="literal">true</span>,</span><br><span class="line">    skipWaiting: <span class="literal">true</span>,</span><br><span class="line">  &#125;),</span><br><span class="line">],</span><br></pre></td></tr></table></figure>

<p>index.js 中还需要写一段代码来激活它的使用</p>
<ol>
<li><p>eslint 不认识 window、navigator 全局变量</p>
<p>解决：需要修改 package.json 中 eslintConfig 配置</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&quot;eslintConfig&quot;: &#123;</span><br><span class="line">  &quot;env&quot;: &#123;</span><br><span class="line">    &quot;browser&quot;: true // 支持浏览器端全局变量</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
</li>
<li><p>sw 代码必须运行在服务器上</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i serve -g</span><br><span class="line"><span class="comment"># 启动服务器，将build目录下所有资源作为静态资源暴露出去</span></span><br><span class="line">serve -s build</span><br></pre></td></tr></table></figure>

</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  注册serviceWorker 处理兼容性问题</span></span><br><span class="line"><span class="keyword">if</span> (<span class="string">&#x27;serviceWorker&#x27;</span> <span class="keyword">in</span> navigator) &#123;</span><br><span class="line">  <span class="built_in">window</span>.addEventListener(<span class="string">&#x27;load&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    navigator.serviceWorker</span><br><span class="line">      .register(<span class="string">&#x27;/service-worker.js&#x27;</span>)</span><br><span class="line">      .then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;sw注册成功&#x27;</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">      .catch(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;sw注册失败&#x27;</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Webpack-配置详情"><a href="#Webpack-配置详情" class="headerlink" title="Webpack 配置详情"></a>Webpack 配置详情</h2><h3 id="entry"><a href="#entry" class="headerlink" title="entry"></a>entry</h3><ol>
<li><p>string -&gt; <code>entry: &#39;./src/index.js&#39;</code> <strong>单入口</strong></p>
<p>打包形成一个 chunk。输出一个 bundle 文件，此时 chunk 的名称默认是 main</p>
</li>
<li><p>array -&gt; <code>entry: [&#39;./src/index.js&#39;, &#39;./src/add.js&#39;]</code> 多入口</p>
<p>所有入口文件最终只会形成一个 chunk。输出出去只有一个 bundle 文件</p>
<p>只有在 HMR 功能中让 html 热更新生效</p>
</li>
<li><p>object -&gt; <code>entry: &#123; index: &#39;./src/index.js&#39;, add: &#39;./src/add.js&#39; &#125;</code> <strong>多入口</strong></p>
<p>有几个入口文件就形成几个 chunk，输出几个 bundle 文件，此时 chunk 的名称是 key</p>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">entry: &#123;</span><br><span class="line">  <span class="comment">// 最终只会形成一个chunk, 输出出去只有一个bundle文件。</span></span><br><span class="line">  index: [<span class="string">&#x27;./src/index.js&#x27;</span>, <span class="string">&#x27;./src/count.js&#x27;</span>],</span><br><span class="line">  <span class="comment">// 形成一个chunk，输出一个bundle文件。</span></span><br><span class="line">  add: <span class="string">&#x27;./src/add.js&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="output"><a href="#output" class="headerlink" title="output"></a>output</h3><p>library 一般是作为暴露库去使用，通常是结合 dll，将某个库单独打包</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">output: &#123;</span><br><span class="line">  <span class="comment">// 文件名称（指定名称+目录）</span></span><br><span class="line">  filename: <span class="string">&#x27;js/[name].js&#x27;</span>,</span><br><span class="line">  <span class="comment">// 输出文件目录（将来所有资源输出的公共目录）</span></span><br><span class="line">  path: resolve(__dirname, <span class="string">&#x27;build&#x27;</span>),</span><br><span class="line">  <span class="comment">// 所有资源引入公共路径前缀</span></span><br><span class="line">  publicPath: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">  <span class="comment">// 非入口chunk的名称</span></span><br><span class="line">  chunkFilename: <span class="string">&#x27;js/[name]_chunk.js&#x27;</span>,</span><br><span class="line">  <span class="comment">// 整个库向外暴露的变量名</span></span><br><span class="line">  library: <span class="string">&#x27;[name]&#x27;</span>,</span><br><span class="line">  <span class="comment">// libraryTarget: &#x27;window&#x27;, // 变量名添加到哪个browser</span></span><br><span class="line">  <span class="comment">// libraryTarget: &#x27;global&#x27;, // 变量名添加到哪个node</span></span><br><span class="line">  <span class="comment">// libraryTarget: &#x27;commonjs&#x27;,</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h3 id="module"><a href="#module" class="headerlink" title="module"></a>module</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">  rules: [</span><br><span class="line">    &#123;</span><br><span class="line">      test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">      <span class="comment">// 多个loader用use</span></span><br><span class="line">      use: [<span class="string">&#x27;style-loader&#x27;</span>, <span class="string">&#x27;css-loader&#x27;</span>],</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">      <span class="comment">// 排除node_modules下的js文件</span></span><br><span class="line">      exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">      <span class="comment">// 只检查src下的js文件</span></span><br><span class="line">      include: resolve(__dirname, <span class="string">&#x27;src&#x27;</span>),</span><br><span class="line">      <span class="comment">// 优先执行</span></span><br><span class="line">      enforce: <span class="string">&#x27;pre&#x27;</span>,</span><br><span class="line">      <span class="comment">// 延后执行</span></span><br><span class="line">      <span class="comment">// enforce: &#x27;post&#x27;,</span></span><br><span class="line">      <span class="comment">// 单个loader用loader</span></span><br><span class="line">      loader: <span class="string">&#x27;eslint-loader&#x27;</span>,</span><br><span class="line">      options: &#123;&#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">// 以下配置只会生效一个</span></span><br><span class="line">      oneOf: [],</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h3 id="resolve"><a href="#resolve" class="headerlink" title="resolve"></a>resolve</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 解析模块的规则</span></span><br><span class="line">resolve: &#123;</span><br><span class="line">  <span class="comment">// 配置解析模块的别名</span></span><br><span class="line">  alias: &#123;</span><br><span class="line">    $css: resolve(__dirname, <span class="string">&#x27;src/css&#x27;</span>),</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 配置省略文件路径的后缀名</span></span><br><span class="line">  extensions: [<span class="string">&#x27;.js&#x27;</span>, <span class="string">&#x27;.json&#x27;</span>, <span class="string">&#x27;.jsx&#x27;</span>],</span><br><span class="line">  <span class="comment">// 告诉webpack解析模块去找哪个目录</span></span><br><span class="line">  modules: [resolve(__dirname, <span class="string">&#x27;../node_modules&#x27;</span>), <span class="string">&#x27;node_modules&#x27;</span>],</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h3 id="dev-server"><a href="#dev-server" class="headerlink" title="dev server"></a>dev server</h3><p>正常浏览器和服务器之间有跨域，但是服务器之间没有跨域。代码通过代理服务器运行，所以浏览器和代理服务器之间没有跨域，浏览器把请求发送到代理服务器上，代理服务器再把接收到的响应给浏览器</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">devServer: &#123;</span><br><span class="line">  <span class="comment">// 运行代码的目录</span></span><br><span class="line">  contentBase: resolve(__dirname, <span class="string">&#x27;build&#x27;</span>),</span><br><span class="line">  <span class="comment">// 监视contentBase目录下的所有文件，一旦文件变化就会reload</span></span><br><span class="line">  watchContentBase: <span class="literal">true</span>,</span><br><span class="line">  watchOptions: &#123;</span><br><span class="line">    <span class="comment">// 忽略文件</span></span><br><span class="line">    ignored: <span class="regexp">/node_modules/</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 启动gzip压缩</span></span><br><span class="line">  compress: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// 端口号</span></span><br><span class="line">  port: <span class="number">5000</span>,</span><br><span class="line">  <span class="comment">// 域名</span></span><br><span class="line">  host: <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">  <span class="comment">// 自动打开浏览器</span></span><br><span class="line">  open: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// 开启HMR功能</span></span><br><span class="line">  hot: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// 不要显示启动服务器日志信息</span></span><br><span class="line">  clientLogLevel: <span class="string">&#x27;none&#x27;</span>,</span><br><span class="line">  <span class="comment">// 除了一些基本启动信息以外，其他内容都不要显示</span></span><br><span class="line">  quiet: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// 如果出错了，不要全屏提示</span></span><br><span class="line">  overlay: <span class="literal">false</span>,</span><br><span class="line">  <span class="comment">// 服务器代理-&gt;解决开发环境跨域问题</span></span><br><span class="line">  proxy: &#123;</span><br><span class="line">    <span class="comment">// 一旦devServer(5000)服务器接收到了 /api/xxx 请求，就会把请求转发到另一个服务器(3000)</span></span><br><span class="line">    <span class="string">&#x27;/api&#x27;</span>: &#123;</span><br><span class="line">      target: <span class="string">&#x27;http://localhost:3000&#x27;</span>,</span><br><span class="line">      <span class="comment">// 发送请求时，请求路径重写：将 /api/xxx -&gt; /xxx</span></span><br><span class="line">      pathRewrite: &#123;</span><br><span class="line">        <span class="string">&#x27;^/api&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h3 id="optimization"><a href="#optimization" class="headerlink" title="optimization"></a>optimization</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i terser-webpack-plugin -D</span><br></pre></td></tr></table></figure>

<p>contenthash 缓存会导致一个问题：修改 a 文件导致 b 文件 contenthash 变化</p>
<p>因为在 index.js，打包后 index.js 记录了 a.js 的 hash 值，而 a.js 改变，其重新打包后的 hash 改变，导致 index.js 文件内容中记录的 a.js 的 hash 也变化，从而重新打包后 index.js 的 hash 值也会变，这样就会缓存失效</p>
<ul>
<li>splitChunks：能帮我们提取一些公共代码，呈单独 chunk 打包</li>
<li>runtimeChunk：解决 splitChunks 出现的一些问题（某个文件 js 修改，会导致其他 js 文件失效）</li>
<li>minimizer：生产环境压缩 js 可以做的更好</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; resolve &#125; = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> TerserWebpackPlugin = <span class="built_in">require</span>(<span class="string">&#x27;terser-webpack-plugin&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">&#x27;js/[name].[contenthash:10].js&#x27;</span>,</span><br><span class="line">    path: resolve(__dirname, <span class="string">&#x27;build&#x27;</span>),</span><br><span class="line">    chunkFilename: <span class="string">&#x27;js/[name].[contenthash:10]_chunk.js&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  optimization: &#123;</span><br><span class="line">    splitChunks: &#123;</span><br><span class="line">      chunks: <span class="string">&#x27;all&#x27;</span>,</span><br><span class="line"></span><br><span class="line">      <span class="comment">/*</span></span><br><span class="line"><span class="comment">    默认值：可以不写</span></span><br><span class="line"><span class="comment">    // 分割的chunks最小为30kb</span></span><br><span class="line"><span class="comment">    minSize: 30 * 1024,</span></span><br><span class="line"><span class="comment">    // 最大没有限制</span></span><br><span class="line"><span class="comment">    maxSize: 0,</span></span><br><span class="line"><span class="comment">    // 要提取的chunks最少被引用1次</span></span><br><span class="line"><span class="comment">    minChunks: 1,</span></span><br><span class="line"><span class="comment">    // 按需加载时并行加载的文件的最大数量</span></span><br><span class="line"><span class="comment">    maxAsyncRequests: 5,</span></span><br><span class="line"><span class="comment">    // 入口js文件最大并行数量</span></span><br><span class="line"><span class="comment">    maxInitialRequest: 3,</span></span><br><span class="line"><span class="comment">    // 名称连接符</span></span><br><span class="line"><span class="comment">    automaticNameDelimiter: &#x27;~&#x27;,</span></span><br><span class="line"><span class="comment">    // 可以使用命名规则</span></span><br><span class="line"><span class="comment">    name: true,</span></span><br><span class="line"><span class="comment">    // 分割chunk的组</span></span><br><span class="line"><span class="comment">    cacheGroup: &#123;</span></span><br><span class="line"><span class="comment">      // node_modules文件会被打包到vendors组的chunk中</span></span><br><span class="line"><span class="comment">      // 满足上面的公共规则。如：大小超过30kb，至少被引用一次</span></span><br><span class="line"><span class="comment">      vendors: &#123;</span></span><br><span class="line"><span class="comment">        test: /[\\/]node_modules[\\/]/,</span></span><br><span class="line"><span class="comment">        // 优先级</span></span><br><span class="line"><span class="comment">        priority: -10,</span></span><br><span class="line"><span class="comment">      &#125;,</span></span><br><span class="line"><span class="comment">      default: &#123;</span></span><br><span class="line"><span class="comment">        // 要提取的chunk最少被引用2次</span></span><br><span class="line"><span class="comment">        minChunks: 2,</span></span><br><span class="line"><span class="comment">        // 优先级</span></span><br><span class="line"><span class="comment">        priority: -20,</span></span><br><span class="line"><span class="comment">        // 如果当前要打包的模块和之前已经被提取的模块是同一个，就会复用，而不是重新打包模块</span></span><br><span class="line"><span class="comment">        reuseExistingChunk: true,</span></span><br><span class="line"><span class="comment">      &#125;,</span></span><br><span class="line"><span class="comment">    &#125;,</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 当前模块记录其他模块的hash，单独打包为一个文件runtime</span></span><br><span class="line">    <span class="comment">// 解决：修改a文件导致b文件的contenthash变化</span></span><br><span class="line">    runtimeChunk: &#123;</span><br><span class="line">      name: <span class="function"><span class="params">entryPoint</span> =&gt;</span> <span class="string">`runtime-<span class="subst">$&#123;entryPoint.name&#125;</span>`</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    minimizer: [</span><br><span class="line">      <span class="comment">// 配置生产环境的压缩方案：js和css</span></span><br><span class="line">      <span class="keyword">new</span> TerserWebpackPlugin(&#123;</span><br><span class="line">        <span class="comment">// 开启缓存</span></span><br><span class="line">        cache: <span class="literal">true</span>,</span><br><span class="line">        <span class="comment">// 开启多进程打包</span></span><br><span class="line">        parallel: <span class="literal">true</span>,</span><br><span class="line">        <span class="comment">// 启动source-map</span></span><br><span class="line">        sourceMap: <span class="literal">true</span>,</span><br><span class="line">      &#125;),</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Webpack-5"><a href="#Webpack-5" class="headerlink" title="Webpack 5"></a>Webpack 5</h2><p>此版本重点关注以下内容：</p>
<ul>
<li>通过持久缓存提高构建性能</li>
<li>使用更好的算法和默认值来改善长期缓存</li>
<li>通过更好的树摇和代码生成来改善捆绑包大小</li>
<li>清除处于怪异状态的内部结构，同时在 v4 中实现功能而不引入任何重大更改</li>
<li>通过引入重大更改来为将来的功能做准备，以使我们能够尽可能长时间地使用 v5</li>
</ul>
<p>下载：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i webpack@next webpack-cli -D</span><br></pre></td></tr></table></figure>

<h3 id="自动删除-Node-js-Polyfills"><a href="#自动删除-Node-js-Polyfills" class="headerlink" title="自动删除 Node.js Polyfills"></a>自动删除 Node.js Polyfills</h3><p>早期，webpack 的目标是允许在浏览器中运行大多数 node.js 模块，但是模块格局发生了变化，许多模块用途主要是为前端目的而编写的。webpack &lt;= 4 附带了许多 node.js 核心模块 polyfill，一旦模块使用任何核心模块（即 crypto 模块），这些模块就会自动应用</p>
<p>尽管这使使用为 node.js 编写的模块变得容易，但它会将这些巨大的 polyfill 添加到包中。在许多情况下，这些 polyfill 是不必要的</p>
<p>webpack 5 会自动停止填充这些核心模块，并专注于与前端兼容的模块</p>
<ul>
<li>尽可能尝试使用与前端兼容的模块</li>
<li>可以为 node.js 核心模块手动添加一个 polyfill。错误消息将提示如何实现该目标</li>
</ul>
<p>Chunk 和模块 ID，添加了用于长期缓存的新算法。在生产模式下默认情况下启用这些功能</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">chunkIds: <span class="string">&quot;deterministic&quot;</span>, <span class="attr">moduleIds</span>: <span class="string">&quot;deterministic&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="Chunk-ID"><a href="#Chunk-ID" class="headerlink" title="Chunk ID"></a>Chunk ID</h3><p>你可以不用使用 <code>import(/* webpackChunkName: &quot;name&quot; */ &quot;module&quot;)</code> 在开发环境来为 chunk 命名，生产环境还是有必要的</p>
<p>webpack 内部有 chunk 命名规则，不再是以 id(0, 1, 2) 命名了</p>
<h3 id="Tree-Shaking"><a href="#Tree-Shaking" class="headerlink" title="Tree Shaking"></a>Tree Shaking</h3><ol>
<li><p>webpack 现在能够处理对嵌套模块的 tree shaking</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 在生产环境中，inner 模块暴露的 b 会被删除 */</span></span><br><span class="line"><span class="comment">// inner.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> b = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// module.js</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> inner <span class="keyword">from</span> <span class="string">&#x27;./inner&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> &#123; inner &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// user.js</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> <span class="built_in">module</span> <span class="keyword">from</span> <span class="string">&#x27;./module&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">module</span>.inner.a);</span><br></pre></td></tr></table></figure>
</li>
<li><p>webpack 现在能够处理多个模块之间的关系</p>
<p>当设置了 <code>&quot;sideEffects: false&quot;</code> 时，一旦发现 <code>test</code> 方法没有使用，不但删除 test，还会删除 <code>&quot;./someting&quot;</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; something &#125; <span class="keyword">from</span> <span class="string">&#x27;./something&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">usingSomething</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> something;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> usingSomething();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>webpack 现在能处理 Commonjs 的 tree shaking</p>
</li>
</ol>
<h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p>webpack 4 默认只能输出 ES5 代码</p>
<p>webpack 5 开始新增一个属性 output.ecmaVersion，可以生成 ES5 和 ES6 代码，如：<code>output.ecmaVersion: 2015</code></p>
<h3 id="SplitChunk"><a href="#SplitChunk" class="headerlink" title="SplitChunk"></a>SplitChunk</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// webpack4</span></span><br><span class="line">minSize: <span class="number">30000</span>;</span><br><span class="line"><span class="comment">// webpack5，可以针对js和css明确划分</span></span><br><span class="line">minSize: &#123;</span><br><span class="line">  javascript: <span class="number">30000</span>,</span><br><span class="line">  style: <span class="number">50000</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Caching"><a href="#Caching" class="headerlink" title="Caching"></a>Caching</h3><p>缓存将存储到 <code>node_modules/.cache/webpack</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 配置缓存</span></span><br><span class="line">cache: &#123;</span><br><span class="line">  <span class="comment">// 磁盘存储</span></span><br><span class="line">  type: <span class="string">&quot;filesystem&quot;</span>,</span><br><span class="line">  buildDependencies: &#123;</span><br><span class="line">    <span class="comment">// 当配置修改时，缓存失效</span></span><br><span class="line">    config: [__filename]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="监视输出文件"><a href="#监视输出文件" class="headerlink" title="监视输出文件"></a>监视输出文件</h3><p>之前 webpack 总是在第一次构建时输出全部文件，但是监视重新构建时只更新修改的文件</p>
<p>此次更新在第一次构建时会找到输出文件看是否有变化，从而决定要不要输出全部文件</p>
<h3 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h3><ul>
<li><code>entry: &quot;./src/index.js&quot;</code></li>
<li><code>output.path: path.resolve(__dirname, &quot;dist&quot;)</code></li>
<li><code>output.filename: &quot;[name].js&quot;</code></li>
</ul>
<h2 id="推荐版本"><a href="#推荐版本" class="headerlink" title="推荐版本"></a>推荐版本</h2><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&quot;devDependencies&quot;: &#123;</span><br><span class="line">  &quot;@babel/core&quot;: &quot;^7.10.4&quot;,</span><br><span class="line">  &quot;@babel/polyfill&quot;: &quot;^7.10.4&quot;,</span><br><span class="line">  &quot;@babel/preset-env&quot;: &quot;^7.10.4&quot;,</span><br><span class="line">  &quot;add-asset-html-webpack-plugin&quot;: &quot;^3.1.3&quot;,</span><br><span class="line">  &quot;babel&quot;: &quot;^6.23.0&quot;,</span><br><span class="line">  &quot;babel-loader&quot;: &quot;^8.1.0&quot;,</span><br><span class="line">  &quot;core-js&quot;: &quot;^3.6.5&quot;,</span><br><span class="line">  &quot;css-loader&quot;: &quot;^3.6.0&quot;,</span><br><span class="line">  &quot;eslint&quot;: &quot;^6.8.0&quot;,</span><br><span class="line">  &quot;eslint-config-airbnb-base&quot;: &quot;^14.2.0&quot;,</span><br><span class="line">  &quot;eslint-loader&quot;: &quot;^3.0.4&quot;,</span><br><span class="line">  &quot;eslint-plugin-import&quot;: &quot;^2.22.0&quot;,</span><br><span class="line">  &quot;file-loader&quot;: &quot;^5.1.0&quot;,</span><br><span class="line">  &quot;html-loader&quot;: &quot;^0.5.5&quot;,</span><br><span class="line">  &quot;html-webpack-plugin&quot;: &quot;^3.2.0&quot;,</span><br><span class="line">  &quot;jquery&quot;: &quot;^3.5.1&quot;,</span><br><span class="line">  &quot;less&quot;: &quot;^3.11.3&quot;,</span><br><span class="line">  &quot;less-loader&quot;: &quot;^5.0.0&quot;,</span><br><span class="line">  &quot;mini-css-extract-plugin&quot;: &quot;^0.9.0&quot;,</span><br><span class="line">  &quot;optimize-css-assets-webpack-plugin&quot;: &quot;^5.0.3&quot;,</span><br><span class="line">  &quot;postcss-loader&quot;: &quot;^3.0.0&quot;,</span><br><span class="line">  &quot;postcss-preset-env&quot;: &quot;^6.7.0&quot;,</span><br><span class="line">  &quot;style-loader&quot;: &quot;^1.2.1&quot;,</span><br><span class="line">  &quot;terser-webpack-plugin&quot;: &quot;^2.3.5&quot;,</span><br><span class="line">  &quot;thread-loader&quot;: &quot;^2.1.3&quot;,</span><br><span class="line">  &quot;url-loader&quot;: &quot;^3.0.0&quot;,</span><br><span class="line">  &quot;webpack&quot;: &quot;^4.43.0&quot;,</span><br><span class="line">  &quot;webpack-cli&quot;: &quot;^3.3.12&quot;,</span><br><span class="line">  &quot;webpack-dev-server&quot;: &quot;^3.11.0&quot;,</span><br><span class="line">  &quot;workbox-webpack-plugin&quot;: &quot;^5.1.3&quot;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h2 id="Webpack-问题汇总"><a href="#Webpack-问题汇总" class="headerlink" title="Webpack 问题汇总"></a>Webpack 问题汇总</h2><h3 id="TypeError-this-getOptions-is-not-a-function"><a href="#TypeError-this-getOptions-is-not-a-function" class="headerlink" title="TypeError: this.getOptions is not a function"></a>TypeError: this.getOptions is not a function</h3><ul>
<li>原因：less-loader 安装版本过高（我安装的是 9 版本的）</li>
<li>解决方案：<code>npm i less-loader@6 -D</code> 即可</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ERROR <span class="keyword">in</span> ./src/index.less (../node_modules/css-loader/dist/cjs.js!../node_modules/less-loader/dist/cjs.js!./src/index.less)</span><br><span class="line">Module build failed (from ../node_modules/less-loader/dist/cjs.js):</span><br><span class="line">TypeError: this.getOptions is not a <span class="keyword">function</span></span><br><span class="line">    at Object.lessLoader (F:\git_demo\Webpack-study\node_modules\less-loader\dist\index.js:19:24)</span><br><span class="line"> @ ./src/index.less 2:12-134 9:17-24 13:15-22</span><br><span class="line"> @ ./src/index.js</span><br></pre></td></tr></table></figure>

<h3 id="ERROR-in-Error-Child-compilation-failed"><a href="#ERROR-in-Error-Child-compilation-failed" class="headerlink" title="ERROR in   Error: Child compilation failed:"></a>ERROR in   Error: Child compilation failed:</h3><ul>
<li>原因：html-loader 安装版本过高（我安装的是 2 版本的）</li>
<li>解决方案：<code>npm i html-loader@0.5 -D</code> 即可</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ERROR <span class="keyword">in</span>   Error: Child compilation failed:</span><br><span class="line"> Module build failed (from ../node_modules/html-loader/dist/cjs.js):</span><br><span class="line"> TypeError: this.getOptions is not a <span class="keyword">function</span></span><br><span class="line"> - TypeError: this.getOptions is not a <span class="keyword">function</span></span><br><span class="line"> - ModuleBuildError: Module build failed (from ../node_modules/html-loader/dist/cjs.js):</span><br><span class="line"> - TypeError: this.getOptions is not a <span class="keyword">function</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h3 id="TypeError-Cannot-read-property-‘tap’-of-undefined"><a href="#TypeError-Cannot-read-property-‘tap’-of-undefined" class="headerlink" title="TypeError: Cannot read property ‘tap’ of undefined"></a>TypeError: Cannot read property ‘tap’ of undefined</h3><ul>
<li>原因：html-webpack-plugin 安装版本过高（我安装的是 5 版本的）</li>
<li>解决方案：<code>npm i html-loader@4 -D</code> 即可</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">TypeError: Cannot <span class="built_in">read</span> property <span class="string">&#x27;tap&#x27;</span> of undefined at HtmlWebpackPlugin.apply (F:\git_demo\Webpack-study\node_modules\html-webpack-plugin\index.js:40:31)  </span><br><span class="line">    at webpack (F:\git_demo\Webpack-study\node_modules\webpack\lib\webpack.js:51:13)</span><br><span class="line">    at processOptions (F:\git_demo\Webpack-study\node_modules\webpack-cli\bin\cli.js:272:16)</span><br><span class="line">    at F:\git_demo\Webpack-study\node_modules\webpack-cli\bin\cli.js:364:3</span><br><span class="line">    at Object.parse (F:\git_demo\Webpack-study\node_modules\yargs\yargs.js:576:18)</span><br><span class="line">    at F:\git_demo\Webpack-study\node_modules\webpack-cli\bin\cli.js:49:8</span><br><span class="line">    at Object.&lt;anonymous&gt; (F:\git_demo\Webpack-study\node_modules\webpack-cli\bin\cli.js:366:3)</span><br></pre></td></tr></table></figure>

<h3 id="img-src-”-object-Module-”"><a href="#img-src-”-object-Module-”" class="headerlink" title="img src=”[object Module]”"></a>img <em>src</em>=”[object Module]”</h3><p>因为 <code>url-loader</code> 默认使用 ES6 模块化解析，而 <code>html-loader</code> 引入图片是CommonJS，解析时会出问题：[object Module]</p>
<p>解决：关闭 <code>url-loader</code> 的 ES6 模块化，使用 CommonJS 解析 <code>esModule: false,</code></p>
<h3 id="Module-build-failed-from-node-modules-mini-css-extract-plugin-dist-loader-js"><a href="#Module-build-failed-from-node-modules-mini-css-extract-plugin-dist-loader-js" class="headerlink" title="Module build failed (from ../node_modules/mini-css-extract-plugin/dist/loader.js):"></a>Module build failed (from ../node_modules/mini-css-extract-plugin/dist/loader.js):</h3><ul>
<li>原因：postcss-loader 安装版本过高（我安装的是 6 版本的）</li>
<li>解决方案：<code>npm i postcss-loader@3 -D</code> 即可</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Module build failed (from ../node_modules/mini-css-extract-plugin/dist/loader.js):</span><br><span class="line">ModuleBuildError: Module build failed (from ../node_modules/postcss-loader/dist/cjs.js):</span><br><span class="line">ValidationError: Invalid options object. PostCSS Loader has been initialized using an options object that does not match the API schema.</span><br><span class="line"> - options has an unknown property <span class="string">&#x27;plugins&#x27;</span>. These properties are valid:</span><br><span class="line">   object &#123; postcssOptions?, execute?, sourceMap?, implementation? &#125;</span><br><span class="line">    at validate (F:\git_demo\Webpack-study\node_modules\postcss-loader\node_modules\schema-utils\dist\validate.js:104:11)</span><br><span class="line">    at Object.loader (F:\git_demo\Webpack-study\node_modules\postcss-loader\dist\index.js:43:29)    </span><br><span class="line">    at F:\git_demo\Webpack-study\node_modules\webpack\lib\NormalModule.js:316:20</span><br><span class="line">    at F:\git_demo\Webpack-study\node_modules\loader-runner\lib\LoaderRunner.js:367:11</span><br><span class="line">    at F:\git_demo\Webpack-study\node_modules\loader-runner\lib\LoaderRunner.js:233:18</span><br><span class="line"> @ ./src/js/index.js 1:0-2</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>工程化</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>问题</tag>
        <tag>优化</tag>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue 封装自定义表格的选择框组件</title>
    <url>/posts/643ce53f/</url>
    <content><![CDATA[<p>有这样一个需求：</p>
<ol>
<li>下拉框组件希望显示的内容是一个表格</li>
<li>回显只显示其姓名</li>
<li>选择框切换时父组件需要能拿到对应名字的一整行数据</li>
</ol>
<a id="more"></a>

<p>如图：</p>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/js-img/%E8%87%AA%E5%AE%9A%E4%B9%89%E8%A1%A8%E6%A0%BC%E7%9A%84%E9%80%89%E6%8B%A9%E6%A1%86.gif"></p>
<h2 id="问题分析："><a href="#问题分析：" class="headerlink" title="问题分析："></a>问题分析：</h2><p>需求其实很简单，主要利用 <code>v-model</code> 里的 <code>@input</code> 控制其回显和 <code>@change</code> 找到对应行的数据，这里主要说一下可能出现的问题：</p>
<ul>
<li>如果后端返回的数据没有唯一值（可能出现重复值的情况），需要自行处理一下，给每一项绑定一个唯一值（下标）</li>
<li>当选择框组件有 <code>clearable</code> 属性时，<code>@change</code> 的值需要对空值进行处理一下</li>
</ul>
<p>其他方面优化：</p>
<ul>
<li><p>可以使用 <code>v-bind=&quot;$attrs&quot;</code> 将父组件调用子组件时传入的属性展开（排除被 prop 注册、class、style）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">fu-input</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入&quot;</span> <span class="attr">maxlength</span>=<span class="string">&quot;50&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- fu-input组件内部实现 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-bind</span>=<span class="string">&quot;$attrs&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 上面代码渲染出的效果如下--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入&quot;</span> <span class="attr">maxlength</span>=<span class="string">&quot;50&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>可以使用 <code>v-on=&quot;$listeners&quot;</code> 将父组件调用子组件时传入的方法展开</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">fu-input</span> @<span class="attr">focus</span>=<span class="string">&quot;focus&quot;</span> @<span class="attr">input</span>=<span class="string">&quot;xxx&quot;</span> @<span class="attr">change</span>=<span class="string">&quot;xxx&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- fu-input组件内部实现 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-on</span>=<span class="string">&quot;$listeners&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 上面代码渲染出的效果如下--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> @<span class="attr">focus</span>=<span class="string">&quot;focus&quot;</span> @<span class="attr">input</span>=<span class="string">&quot;xxx&quot;</span> @<span class="attr">change</span>=<span class="string">&quot;xxx&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>组件上的 v-model 默认会利用名为 value 的 prop 和名为 input 的 event。可以使用 <code>model</code> 对其 prop 和 event 修改名字</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">my-div</span> <span class="attr">v-model</span>=<span class="string">&quot;someValue&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">my-div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 等价于 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">my-div</span> <span class="attr">:value</span>=<span class="string">&quot;someValue&quot;</span> @<span class="attr">input</span>=<span class="string">&quot;someValue = $event&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">my-div</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="组件代码："><a href="#组件代码：" class="headerlink" title="组件代码："></a>组件代码：</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">:label</span>=<span class="string">&quot;label&quot;</span> <span class="attr">:prop</span>=<span class="string">&quot;prop&quot;</span>&gt;</span></span><br><span class="line">    &lt;el-select</span><br><span class="line">      :value=&quot;selected&quot;</span><br><span class="line">      :placeholder=&quot;placeholder&quot;</span><br><span class="line">      popper-class=&quot;select-options_table&quot;</span><br><span class="line">      clearable</span><br><span class="line">      filterable</span><br><span class="line">      default-first-option</span><br><span class="line">      style=&quot;width: 100%&quot;</span><br><span class="line">      @change=&quot;selectChange&quot;</span><br><span class="line">    &gt;</span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;option-header&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>日期<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      &lt;el-option</span><br><span class="line">        v-for=&quot;item in tableData&quot;</span><br><span class="line">        :key=&quot;item.index&quot;</span><br><span class="line">        :label=&quot;item.name&quot;</span><br><span class="line">        :value=&quot;item.index&quot;</span><br><span class="line">        class=&quot;select-option_li&quot;</span><br><span class="line">      &gt;</span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; item.date &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; item.name &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; item.age &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-select</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> tableData = [</span></span><br><span class="line">  &#123;</span><br><span class="line"><span class="javascript">    date: <span class="string">&#x27;2019-06-06&#x27;</span>,</span></span><br><span class="line"><span class="javascript">    name: <span class="string">&#x27;王小虎&#x27;</span>,</span></span><br><span class="line"><span class="javascript">    age: <span class="string">&#x27;23&#x27;</span></span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line"><span class="javascript">    date: <span class="string">&#x27;2019-06-06&#x27;</span>,</span></span><br><span class="line"><span class="javascript">    name: <span class="string">&#x27;李小鸭&#x27;</span>,</span></span><br><span class="line"><span class="javascript">    age: <span class="string">&#x27;14&#x27;</span></span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line"><span class="javascript">    date: <span class="string">&#x27;2019-06-06&#x27;</span>,</span></span><br><span class="line"><span class="javascript">    name: <span class="string">&#x27;王小虎&#x27;</span>,</span></span><br><span class="line"><span class="javascript">    age: <span class="string">&#x27;23&#x27;</span></span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line"><span class="javascript">    date: <span class="string">&#x27;2019-06-06&#x27;</span>,</span></span><br><span class="line"><span class="javascript">    name: <span class="string">&#x27;张小马&#x27;</span>,</span></span><br><span class="line"><span class="javascript">    age: <span class="string">&#x27;18&#x27;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  name: <span class="string">&#x27;SelectName&#x27;</span>,</span></span><br><span class="line">  model: &#123;</span><br><span class="line"><span class="javascript">    prop: <span class="string">&#x27;selected&#x27;</span>,</span></span><br><span class="line"><span class="javascript">    event: <span class="string">&#x27;select-event&#x27;</span></span></span><br><span class="line">  &#125;,</span><br><span class="line">  props: &#123;</span><br><span class="line"><span class="javascript">    prop: <span class="built_in">String</span>,</span></span><br><span class="line">    label: &#123;</span><br><span class="line"><span class="javascript">      type: <span class="built_in">String</span>,</span></span><br><span class="line"><span class="javascript">      <span class="keyword">default</span>: <span class="string">&#x27;姓名&#x27;</span></span></span><br><span class="line">    &#125;,</span><br><span class="line">    placeholder: &#123;</span><br><span class="line"><span class="javascript">      type: <span class="built_in">String</span>,</span></span><br><span class="line"><span class="javascript">      <span class="keyword">default</span>: <span class="string">&#x27;请选择姓名&#x27;</span></span></span><br><span class="line">    &#125;,</span><br><span class="line">    params: &#123;</span><br><span class="line"><span class="javascript">      type: <span class="built_in">Object</span>,</span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">default</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> &#123;&#125;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    selected: &#123;</span><br><span class="line"><span class="javascript">      type: <span class="built_in">String</span>,</span></span><br><span class="line"><span class="javascript">      value: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line">      tableData: tableData</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">created</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">this</span>.tableData.map(<span class="function">(<span class="params">item, i</span>) =&gt;</span> &#123;</span></span><br><span class="line">      item.index = i</span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> item</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">selectChange</span>(<span class="params">val</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (val === <span class="string">&#x27;&#x27;</span>) <span class="keyword">return</span> <span class="built_in">this</span>.$emit(<span class="string">&#x27;select-event&#x27;</span>, val)</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> nameList = <span class="built_in">this</span>.tableData.find(<span class="function"><span class="params">item</span> =&gt;</span> item.index === val)</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.$emit(<span class="string">&#x27;select-event&#x27;</span>, nameList.name)</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.$emit(<span class="string">&#x27;change&#x27;</span>, nameList)</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;less&quot;</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-class">.select-options_table</span> &#123;</span></span><br><span class="line">  span &#123;</span><br><span class="line">    width: 100px;</span><br><span class="line">    height: 30px;</span><br><span class="line">    line-height: 30px;</span><br><span class="line">    text-align: center;</span><br><span class="line">    display: inline-block;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="selector-class">.select-option_li</span> &#123;</span></span><br><span class="line">    padding: 0;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="selector-class">.option-header</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">background</span>: <span class="selector-id">#ffddbb</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="父组件代码："><a href="#父组件代码：" class="headerlink" title="父组件代码："></a>父组件代码：</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-form</span> <span class="attr">:model</span>=<span class="string">&quot;listQuery&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 300px&quot;</span> <span class="attr">label-width</span>=<span class="string">&quot;110px&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">select-name</span> <span class="attr">v-model</span>=<span class="string">&quot;name&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;name&quot;</span> @<span class="attr">change</span>=<span class="string">&quot;getName&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> SelectName <span class="keyword">from</span> <span class="string">&#x27;./components/SelectName&#x27;</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      name: <span class="string">&#x27;李小鸭&#x27;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    SelectName</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">getName</span>(<span class="params">val</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(val)</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>Element</tag>
        <tag>封装</tag>
      </tags>
  </entry>
  <entry>
    <title>常见 Web 攻击（前端篇）</title>
    <url>/posts/8188972/</url>
    <content><![CDATA[<h2 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h2><p>Cross Site Scripting（跨站脚本攻击），因为缩写和 CSS 重叠，所以改叫 XSS。跨站脚本攻击是指通过存在安全漏洞的 Web 网址注册用户的浏览器内运行非本站点 HTML 或 JavaScript 进行的一种攻击</p>
<p>跨站脚本攻击可以造成以下影响：</p>
<ul>
<li><p>利用虚假输入表单骗取用户个人信息</p>
</li>
<li><p>利用脚本窃取用户的 Cookie 值，被害者在不知情的情况下，帮助攻击者发送恶意请求</p>
<p>显示伪造的文章或图片</p>
</li>
</ul>
<h3 id="XSS-攻击分类"><a href="#XSS-攻击分类" class="headerlink" title="XSS 攻击分类"></a>XSS 攻击分类</h3><h4 id="反射型-XSS"><a href="#反射型-XSS" class="headerlink" title="反射型 XSS"></a>反射型 XSS</h4><ul>
<li><p>反射型：url 参数直接注入</p>
<p>URL 注入非法脚本，然后发送给受害用户</p>
<p>服务端返回的富文本中包含非法脚本，被直接展示</p>
</li>
</ul>
<p>反射型 XSS 攻击步骤：</p>
<ol>
<li>攻击者构造出特殊的 URL，其中包含恶意代码</li>
<li>用户打开带有恶意代码的 URL 时，网站服务端将恶意代码从 URL 中取出，拼接在 HTML 中返回给浏览器</li>
<li>用户浏览器接收到响应后解析执行，混在其中的恶意代码也被执行</li>
<li>恶意代码窃取用户数据并发送到攻击者的网站，或者冒充用户的行为，调用目标网站接口执行攻击者指定的操作</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 普通 --&gt;</span></span><br><span class="line">http://localhost:3000/?from=china</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- alert尝试 --&gt;</span></span><br><span class="line">http://localhost:3000/?from=<span class="tag">&lt;<span class="name">script</span>&gt;</span>alert(3)<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 获取Cookie --&gt;</span></span><br><span class="line">http://localhost:3000/?from=<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;http://localhost:4000/hack.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 伪造cookie入侵 --&gt;</span></span><br><span class="line">document.cookie=&quot;...&quot;</span><br></pre></td></tr></table></figure>

<h4 id="存储型-XSS"><a href="#存储型-XSS" class="headerlink" title="存储型 XSS"></a>存储型 XSS</h4><ul>
<li><p>存储型：存储到 DB 后读取时注入</p>
<p>发帖中发出包含恶意代码的内容，其它用户访问到该内容后，满足特定条件即触发</p>
<p>后台不过滤信息，并且前端展示时也不过滤信息</p>
</li>
</ul>
<p>存储型 XSS 的攻击步骤：</p>
<ol>
<li>攻击者将恶意代码提交到目标网站的数据库中</li>
<li>用户打开网站时，网站服务端将恶意代码从数据库取出，拼接在 HTML 中返回给浏览器</li>
<li>用户浏览器接收到响应后解析执行，混在其中的恶意代码也被执行</li>
<li>恶意代码窃取用户数据并发送到攻击者的网站，或者冒充用户的行为，调用目标网站接口执行攻击者指定的操作</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 评论 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span>alert(1)<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 跨站脚本注入 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;http://localhost:4000/hack.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="DOM-型-XSS"><a href="#DOM-型-XSS" class="headerlink" title="DOM 型 XSS"></a>DOM 型 XSS</h4><ul>
<li><p>DOM型：基于 DOM 或本地的 XSS 攻击</p>
<p>wifi 流量劫持、DNS 劫持，并且直接返回钓鱼页面</p>
</li>
</ul>
<p>DOM 型 XSS 其实是一种特殊类型的反射型 XSS，通过 <strong>JS 操作 DOM 树</strong> 动态地 <strong>输出数据到页面</strong>，而不依赖于将数据提交给服务器端，它是基于 DOM 文档对象模型的一种漏洞</p>
<p>DOM 型 XSS 的攻击步骤：</p>
<ol>
<li>攻击者构造出特殊的 URL，其中包含恶意代码</li>
<li>用户打开带有恶意代码的 URL</li>
<li>用户浏览器接收到响应后解析执行，前端 JavaScript 取出 URL 中的恶意代码并执行</li>
<li>恶意代码窃取用户数据并发送到攻击者的网站，或者冒充用户的行为，调用目标网站接口执行攻击者指定的操作</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.write(<span class="string">&quot;&lt;script&gt;alert(0)&lt;\/script&gt;&quot;</span>)</span></span><br><span class="line"><span class="javascript"><span class="built_in">eval</span>(location.hash.substr(<span class="number">1</span>))</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h4><p>反射型 XSS 跟存储型 XSS 区别：</p>
<ul>
<li>存储型 XSS 的恶意代码存在数据库里</li>
<li>反射型 XSS 的恶意代码存在 URL 里</li>
</ul>
<p>DOM 型 XSS 和前两种 XSS 区别：</p>
<ul>
<li>DOM 型 XSS 攻击中，取出和执行恶意代码由浏览器端完成，属于前端 JavaScript 自身的安全漏洞</li>
<li>其他两种 XSS 都属于服务端的安全漏洞</li>
</ul>
<h3 id="攻击危害"><a href="#攻击危害" class="headerlink" title="攻击危害"></a>攻击危害</h3><ul>
<li>盗取用户 Cookie</li>
<li>钓鱼攻击</li>
<li>偷取网站的任意数据</li>
<li>偷取用户的资料</li>
<li>偷取用户的秘密和登录态</li>
<li>删除目标文字、恶意篡改数据、嫁祸</li>
<li>劫持用户 Web 行为，进一步渗透内网</li>
<li>蠕虫式挂马攻击、刷广告、刷流量、破坏网上数据</li>
</ul>
<h3 id="防范手段"><a href="#防范手段" class="headerlink" title="防范手段"></a>防范手段</h3><h4 id="HEAD"><a href="#HEAD" class="headerlink" title="HEAD"></a>HEAD</h4><p>0：禁止 XSS 过滤</p>
<p>1：启用 XSS 过滤（通常浏览器是默认的）。如果检测到跨站脚本攻击，浏览器将清除页面（删除不安全的部分）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ctx.set(<span class="string">&#x27;X-XSS-Protection&#x27;</span>, <span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<h4 id="CSP"><a href="#CSP" class="headerlink" title="CSP"></a>CSP</h4><p><strong>内容安全策略</strong>（CSP, Content Security Policy）是一个附加的安全层，用于帮助检测和缓解某些类型的攻击，包括跨站脚本（XSS）和数据注入等攻击。这些攻击可用于实现从数据窃取到网站破坏或作为恶意软件分发版本等用途</p>
<p><strong>CSP 本质就是建立白名单</strong>，开发者明确告诉浏览器哪些外部资源可以加载和执行。我们只需要配置规则，如何拦截是由浏览器自己实现的。我们可以通过这种方式来尽量减少 XSS 攻击</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 只允许加载本站资源</span></span><br><span class="line">ctx.set(<span class="string">&#x27;Content-Security-Policy&#x27;</span>, <span class="string">&quot;default-src &#x27;self&#x27;&quot;</span>)</span><br><span class="line"><span class="comment">// 只允许加载 HTTPS 协议图片</span></span><br><span class="line">ctx.set(<span class="string">&#x27;Content-Security-Policy&#x27;</span>, <span class="string">&#x27;img-src https://*&#x27;</span>)</span><br><span class="line"><span class="comment">// 不允许加载任何来源框架</span></span><br><span class="line">ctx.set(<span class="string">&#x27;Content-Security-Policy&#x27;</span>, <span class="string">&quot;child-src &#x27;none&#x27;&quot;</span>)</span><br></pre></td></tr></table></figure>

<h4 id="转义字符（过滤）"><a href="#转义字符（过滤）" class="headerlink" title="转义字符（过滤）"></a>转义字符（过滤）</h4><p>转义（应该在输出 HTML 进行，而不是在提交用户输入时）</p>
<ul>
<li>输入处理：用户输入、URL 参数、POST 请求参数、Ajax</li>
<li>输出处理：转为实体名称</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;% code %&gt; 用于执行其中JavaScript代码</span><br><span class="line">&lt;%&#x3D; code %&gt; 会对code进行html转义（尽量使用这个）</span><br><span class="line">&lt;%- code %&gt; 不会进行转义</span><br></pre></td></tr></table></figure>

<ul>
<li><p>黑名单</p>
<p>用户的输入永远不可信任，最普通的做法就是转义输入输出的内容，对于引号、尖括号、斜杠进行转义</p>
<p>把显示结果转为实体名称</p>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/js-img/html%E5%AE%9E%E4%BD%93%E5%90%8D%E7%A7%B0.jpg"></p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">escape</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  str = str.replace(<span class="regexp">/&amp;/g</span>, <span class="string">&#x27;&amp;amp;&#x27;</span>)</span><br><span class="line">  str = str.replace(<span class="regexp">/&lt;/g</span>, <span class="string">&#x27;&amp;lt;&#x27;</span>)</span><br><span class="line">  str = str.replace(<span class="regexp">/&gt;/g</span>, <span class="string">&#x27;&amp;gt;&#x27;</span>)</span><br><span class="line">  str = str.replace(<span class="regexp">/&quot;/g</span>, <span class="string">&#x27;&amp;quto;&#x27;</span>)</span><br><span class="line">  str = str.replace(<span class="regexp">/&#x27;/g</span>, <span class="string">&#x27;&amp;#39;&#x27;</span>)</span><br><span class="line">  str = str.replace(<span class="regexp">/`/g</span>, <span class="string">&#x27;&amp;#96;&#x27;</span>)</span><br><span class="line">  str = str.replace(<span class="regexp">/\//g</span>, <span class="string">&#x27;&amp;#x2F;&#x27;</span>)</span><br><span class="line">  <span class="keyword">return</span> str</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>白名单</p>
<p>对于富文本来说，显然不能通过上面办法转义所有字符，因为这样会把需要的格式也过滤掉。对于这种情况，通常采用白名单过滤的方法</p>
<p><strong>对用户的输入进行合理的验证，对特殊字符（如：&lt;、&gt;、”、”等）</strong>以及 <code>&lt;script&gt;</code> 、javascript 等进行过滤</p>
</li>
</ul>
<p>编程语言解决方案：</p>
<ul>
<li><p>nodejs 使用 <a href="https://github.com/leizongmin/js-xss">js-xss</a></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> xss = <span class="built_in">require</span>(<span class="string">&quot;xss&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> html = xss(<span class="string">&#x27;&lt;script&gt;alert(&quot;xss&quot;);&lt;/script&gt;&#x27;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>Java 使用 <a href="https://github.com/naver/lucy-xss-filter">lucy-xss-filter</a></p>
<p>Java 里，常用的转义库为  <code>org.owasp.encoder</code></p>
</li>
<li><p>Spring Boot</p>
<p><a href="https://zdran.com/20180511.html">Spring Boot 使用 Jsoup 拦截XSS</a></p>
</li>
</ul>
<h4 id="HttpOnly"><a href="#HttpOnly" class="headerlink" title="HttpOnly"></a>HttpOnly</h4><p>这是预防 XSS 攻击窃取用户 cookie 最有效的防御手段。Web 应用程序设置 cookie 时，将其属性设为 HttpOnly，就可以避免该网页的 cookie 被客户端恶意 JavaScript 窃取，保护用户 cookie 信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># node</span></span><br><span class="line">app.use(session(&#123; httpOnly: <span class="literal">true</span> &#125;, app))</span><br><span class="line"><span class="comment"># java</span></span><br><span class="line">cookie.setHttpOnly(<span class="literal">true</span>)</span><br><span class="line"><span class="comment"># python</span></span><br><span class="line">tools.sessions.httponly = True</span><br><span class="line"><span class="comment"># php</span></span><br><span class="line">session.cookie_httponly = 1</span><br></pre></td></tr></table></figure>

<h4 id="DOM-型注意"><a href="#DOM-型注意" class="headerlink" title="DOM 型注意"></a>DOM 型注意</h4><p>在使用 <code>innerHTML</code>、<code>outerHTML</code>、<code>document.write()</code> 时要特别小心，不要把不可信的数据作为 HTML 插入页面上，而应尽量使用 <code>.textContent</code> 、<code>setAttribute()</code> 等</p>
<p>如果使用 Vue 或 React 技术栈，并不适用 <code>v-html / dangerouslySetInnerHTML</code> 功能，就在前端 render 阶段避免 <code>innerHTML</code> 、<code>outerHTML</code> 的 XSS 隐患</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span> </span><br><span class="line"><span class="javascript"><span class="comment">// setTimeout()/setInterval() 中调⽤恶意代码</span></span></span><br><span class="line"><span class="javascript"><span class="built_in">setTimeout</span>(<span class="string">&quot;UNTRUSTED&quot;</span>)</span></span><br><span class="line"><span class="javascript"><span class="built_in">setInterval</span>(<span class="string">&quot;UNTRUSTED&quot;</span>)</span></span><br><span class="line"><span class="javascript"><span class="comment">// location 调⽤恶意代码</span></span></span><br><span class="line"><span class="javascript">location.href = <span class="string">&#x27;UNTRUSTED&#x27;</span></span></span><br><span class="line"><span class="javascript"><span class="comment">// eval() 中调⽤恶意代码</span></span></span><br><span class="line"><span class="javascript"><span class="built_in">eval</span>(<span class="string">&quot;UNTRUSTED&quot;</span>) </span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>对于不信任的输入，都应该限定一个合理的长度</strong></p>
<h2 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h2><p>CSRF（Cross Site Request Forgery），即跨站请求伪造，是一种常见 Web 攻击，它利用用户已登录的身份，在用户毫不知情的情况下，已用户的名义完成非法操作</p>
<p>CSRF 攻击流程：</p>
<ul>
<li>受害者登录 <code>a.com</code>，并保留了登录凭证（Cookie）</li>
<li>攻击者引诱受害者访问了 <code>b.com</code></li>
<li><code>b.com</code> 向 <code>a.com</code> 发送了一个请求：<code>a.com/act=xxx</code> 浏览器会默认携带 <code>a.com</code> 的 Cookie</li>
<li><code>a.com</code> 接收到请求后，对请求进行验证，并确认是受害者的凭证，误认为是受害者自己发送的请求</li>
<li><code>a.com</code> 以受害者的名义执行了 <code>act=xxx</code></li>
<li>攻击完成，攻击者在受害者不知情的情况下，冒充受害者，让 <code>a.com</code> 执行了自己定义的操作</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- GET 请求 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;http://127.0.0.1:9000/transfer?to_user=jack&amp;money=2000&quot;</span> <span class="attr">width</span>=<span class="string">&quot;500&quot;</span> <span class="attr">height</span>=<span class="string">&quot;300&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- POST 请求 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">style</span>=<span class="string">&quot;display: none&quot;</span> <span class="attr">name</span>=<span class="string">&quot;csrf-frame&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span> <span class="attr">action</span>=<span class="string">&quot;http://127.0.0.1:9000/transfer&quot;</span> <span class="attr">target</span>=<span class="string">&quot;csrf-frame&quot;</span> <span class="attr">id</span>=<span class="string">&quot;csrf-form&quot;</span> &gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;to_user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;hack01&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;money&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2000&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;submit&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="built_in">document</span>.getElementById(<span class="string">&quot;csrf-form&quot;</span>).submit()</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="CSRF-攻击危害"><a href="#CSRF-攻击危害" class="headerlink" title="CSRF 攻击危害"></a>CSRF 攻击危害</h3><ul>
<li>利用用户登录态</li>
<li>用户不知情</li>
<li>完成业务需求</li>
<li>盗取用户资金（转账、消费）</li>
<li>冒充用户发帖背锅</li>
<li>损害网站声誉</li>
</ul>
<h3 id="防范手段-1"><a href="#防范手段-1" class="headerlink" title="防范手段"></a>防范手段</h3><p>CSRF 两个特点：</p>
<ul>
<li><p>CSRF（通常）发生在第三方域名</p>
<p>阻止不明外域的访问（同源检测、Samesite Cookie）</p>
</li>
<li><p>CSRF 攻击者不能获取到 Cookie 等信息，只是使用</p>
<p>提交时要求附加本域才能获取的信息（CSRF Token、双重 Cookie 验证）</p>
</li>
</ul>
<p>cookie 的应用场景：</p>
<ul>
<li>自动登录</li>
<li>电商购物车功能</li>
<li>记录用户登录网址的次数</li>
<li>商品浏览记录</li>
</ul>
<p>防范手段：</p>
<ul>
<li><p>验证码</p>
</li>
<li><p><strong>同源检测 验证 Referer</strong></p>
<p>HTTP 协议头中有一个字段叫 referer，记录了该 HTTP 请求的来源地址</p>
<p>Https 不发生 referer</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.use(<span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">    <span class="keyword">await</span> next()</span><br><span class="line">    <span class="keyword">const</span> referer = ctx.request.header.referer</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Referer:&#x27;</span>, referer)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<img data-src="https://gitee.com/lilyn/pic/raw/master/js-img/HTTP%20Referer.jpg" style="zoom:80%;" />

<p>比如：转账的操作一定是用户登陆之后在本站点的页面上操作的，因此可以讲 Referer 字段限制为只允许本站点</p>
</li>
<li><p><strong>Anti CSRF Token</strong></p>
<p>所有用户请求都携带一个 CSRF 攻击者无法获取到的 Token。服务器通过校验请求是否携带正确 Token，来把正确请求和攻击的请求区分开</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;csrf-token&quot;</span> <span class="attr">content</span>=<span class="string">&quot;...&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>确保 token 的保密性和随机性</p>
</li>
<li><p>cookie 双重验证</p>
<p>CSRF 成功的原因在于站点对于用户身份的辨别依赖于 Cookie，因此攻击者可以在不知道用户口令的情况下直接使用用户的 Cookie 来通过安全验证</p>
</li>
</ul>
<p><strong>Samesite Cookie 属性</strong></p>
<ul>
<li><code>Samesite=Strict</code>：严格模式，表明这个 Cookie 在任何情况下都不可能作为第三方 Cookie</li>
<li><code>Samesite=Lax</code>：宽松模式，比 Strict 放宽了点限制，假如这个请求是这个请求且是个 GET 请求，则这个 Cookie 可以作为第三方 Cookie</li>
</ul>
<p>注意：这个可以解决 <code>某些 Cookie 滥用推荐的“SameSite“属性 </code> 问题</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Cookies.set(<span class="string">&#x27;lang&#x27;</span>, lang, &#123;</span><br><span class="line">  sameSite: <span class="string">&#x27;Strict&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="点击劫持-clickjacking"><a href="#点击劫持-clickjacking" class="headerlink" title="点击劫持 clickjacking"></a>点击劫持 clickjacking</h2><p>点击劫持是一种视觉欺骗的攻击手段。攻击者将需要攻击的网站通过 iframe 嵌套的方式嵌入自己的网页中，并将 iframe 设置为透明，在页面透出一个按钮诱导用户点击</p>
<ul>
<li><p>DNS 劫持：（输入京东被强制跳转到淘宝，这就属于 DNS 劫持）</p>
<p>DNS 强制解析：通过修改运营商的本地 DNS 记录，来引导用户流量到缓存服务器</p>
<p>302 跳转的方式：通过监控网络出口的流量，分析判断哪些内容是可以进行劫持处理的，再对劫持内存发起 302 跳转的回复，引导用户获取内容</p>
</li>
<li><p>HTTP 劫持：（访问谷歌但是一直有贪玩蓝月的广告）由于 http 明文传输，运营商会修改你的 http 响应内容（即加广告）</p>
</li>
</ul>
<h3 id="防范手段-2"><a href="#防范手段-2" class="headerlink" title="防范手段"></a>防范手段</h3><ul>
<li><p>最有效的方法就是全站 HTTPS，即 HTTP 加密，这使得运营商无法获取明文，就无法劫持你的响应内容</p>
</li>
<li><p>X-FRAME-OPTIONS</p>
<p><code>X-FRAME-OPTIONS</code> 是一个 HTTP 响应头，在现代浏览器有一个很好的支持。这个 HTTP 响应头就是为了防御用 iframe 嵌套的点击劫持</p>
<p>改响应头有三个值可选，分别是：</p>
<ul>
<li><code>DENT</code> ：页面不允许通过 iframe 的方式展示</li>
<li><code>SAMEORIGIN</code> ：页面可以在相同域名下通过 iframe 的方式展示</li>
<li><code>ALLOW-FROM</code> ：页面可以在指定来源的 iframe 中展示</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ctx.set(<span class="string">&#x27;X-FRAME-OPTIONS&#x27;</span>, <span class="string">&#x27;DENY&#x27;</span>)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="SQL-注入"><a href="#SQL-注入" class="headerlink" title="SQL 注入"></a>SQL 注入</h2><p>SQL 注入发生于 <strong>应用程序与数据库层</strong> 的安全漏洞</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 填入特殊密码</span></span><br><span class="line">1&#x27;or&#x27;1&#x27;=&#x27;1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拼接后的SQL</span></span><br><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> test.user</span><br><span class="line"><span class="keyword">WHERE</span> username = <span class="string">&#x27;bird&#x27;</span></span><br><span class="line"><span class="keyword">AND</span> <span class="keyword">password</span> = <span class="number">1</span><span class="string">&#x27;or&#x27;</span><span class="number">1</span><span class="string">&#x27;=&#x27;</span><span class="number">1</span></span><br></pre></td></tr></table></figure>

<h3 id="攻击危害-1"><a href="#攻击危害-1" class="headerlink" title="攻击危害"></a>攻击危害</h3><ul>
<li>猜解后台数据库，盗取网站敏感信息</li>
<li>绕过验证登录网站后台</li>
<li>借助数据库的存储过程进行提权等操作</li>
</ul>
<h3 id="防范手段-3"><a href="#防范手段-3" class="headerlink" title="防范手段"></a>防范手段</h3><ul>
<li>严格限制 Web 应用的数据库的操作权限，给此用户提供仅仅能够满足其工作的最低权限，从而最大限度的减少注入攻击对数据库的危害</li>
<li>后端代码检查输入的数据是否符合预期，严格限制变量的类型，例如使用正则表达式进行一些匹配处理</li>
<li>对进入数据库的特殊字符（<code>&#39;、&quot;、\、&lt;、&gt;、&amp;、*、;</code> 等），或编码转换。基本上所有的后端语言都有对字符串进行转义处理的 方法，比如 lodash 的 <code>lodash._escapehtmlchar</code> </li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">router.post(<span class="string">&#x27;/login&#x27;</span>, <span class="keyword">async</span> (ctx) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; username, password &#125; = ctx.request.body</span><br><span class="line">    <span class="keyword">const</span> sql = <span class="string">`</span></span><br><span class="line"><span class="string">    SELECT *</span></span><br><span class="line"><span class="string">    FROM test.user</span></span><br><span class="line"><span class="string">    WHERE username = ?</span></span><br><span class="line"><span class="string">    AND password = ?</span></span><br><span class="line"><span class="string">    `</span></span><br><span class="line">    res = <span class="keyword">await</span> query(sql, [username, password])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="其他注入"><a href="#其他注入" class="headerlink" title="其他注入"></a>其他注入</h2><h3 id="OS-命令注入"><a href="#OS-命令注入" class="headerlink" title="OS 命令注入"></a>OS 命令注入</h3><p>OS 命令注入和 SQL 注入差不多，只不过 SQL 注入是针对数据库的，而 OS 命令注入是针对操作系统的</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 以 Node.js 为例，假如在接⼝中需要从 github 下载⽤户指定的 repo</span></span><br><span class="line"><span class="keyword">const</span> exec = <span class="built_in">require</span>(<span class="string">&#x27;mz/child_process&#x27;</span>).exec;</span><br><span class="line"><span class="keyword">let</span> params = &#123;<span class="comment">/* ⽤户输⼊的参数 */</span>&#125;;</span><br><span class="line">exec(<span class="string">`git clone <span class="subst">$&#123;params.repo&#125;</span> /some/path`</span>);</span><br></pre></td></tr></table></figure>

<h3 id="DDOS"><a href="#DDOS" class="headerlink" title="DDOS"></a>DDOS</h3><p>distributed denial of service，DDOS 不是一种攻击，而是一大类攻击的总称。其中，比较常见的一种攻击是 cc 攻击。它就是简单粗暴地送来大量正常的请求，超出服务器的最大承受量，导致宕机</p>
<ul>
<li><p>SYN Flood</p>
<p>此攻击通过向目标发送具有可欺骗性源 IP 地址的大量 TCP “初始连接请求” SYN 数据包来利用 TCP 握手。目标机器响应每个连接请求，然后等待握手中的最后一步，这一步从未发生过，耗尽了进程中的目标资源</p>
</li>
<li><p>HTTP Flood</p>
<p>此攻击类似于同时在多个不同计算机上反复按 Web 浏览器中的刷新（大量 HTTP 请求泛滥服务器，导致拒绝服务）</p>
</li>
</ul>
<p><strong>防御手段</strong></p>
<ul>
<li>备份网站</li>
<li>HTTP 请求拦截 高防 IP</li>
<li>宽带扩容 + CDN</li>
</ul>
]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>XSS</tag>
        <tag>CSRF</tag>
        <tag>网络安全</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue 中使用 Upload 组件上传 Excel</title>
    <url>/posts/5c61fd6a/</url>
    <content><![CDATA[<p>vue 中使用 Element 的 upload 组件上传 Excel，大致可以分两种情况</p>
<ol>
<li>使用 <code>action</code> 上传到服务器</li>
<li>使用 <code>axios</code> 上传到服务器</li>
</ol>
<a id="more"></a>

<p><strong>注意：上传文件可能由于前后端格式不统一导致上传失败</strong></p>
<ul>
<li><code>application/x-www-form-urlencoded</code> 一般情况下使用这个比较多</li>
<li><code>multipart/form-data</code></li>
<li><code>application/json</code></li>
</ul>
<h2 id="使用-action"><a href="#使用-action" class="headerlink" title="使用 action"></a>使用 <code>action</code></h2><p>使用 <code>action</code> 时，首先会使用OPTIONS方法发起一个<strong>预检请求</strong>，从而获知服务器是否允许该跨域请求。服务器确认允许之后，才发起实际的 HTTP 请求。后端返回 204，以防处理 POST 请求时访问错误</p>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/company-img/upload_options.jpg"></p>
<p><strong>注意：使用 <code>action</code> ，需要后端做跨域处理。比如 Nginx <a href="https://juejin.cn/post/6844903782556368910">反向代理</a>、CORS 等</strong></p>
<p>效果如下：</p>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/js-img/%E4%B8%8A%E4%BC%A0xlsx.gif"></p>
<p>备注：</p>
<ol>
<li>如果希望使用 ajax 发送请求可以配置 <code>http-request</code></li>
<li>Window 电脑可以选择 <code>所有文件（*.*）</code> ，之后可以上传任意文件，最好在上传之前做个 <code>before-upload</code> 判断类型处理</li>
</ol>
<p>代码如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    &lt;el-upload</span><br><span class="line">      ref=&quot;upload&quot;</span><br><span class="line">      :accept=&quot;fileType.join(&#x27;,&#x27;)&quot;</span><br><span class="line">      :limit=&quot;1&quot;</span><br><span class="line">      :headers=&quot;upload.headers&quot;</span><br><span class="line">      :action=&quot;upload.url&quot;</span><br><span class="line">      :disabled=&quot;upload.isUploading&quot;</span><br><span class="line">      :before-upload=&quot;beforeUpload&quot;</span><br><span class="line">      :on-progress=&quot;handleFileProgress&quot;</span><br><span class="line">      :on-success=&quot;handleFileSuccess&quot;</span><br><span class="line">      :auto-upload=&quot;false&quot;</span><br><span class="line">      drag</span><br><span class="line">    &gt;</span><br><span class="line">      <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;el-icon-upload&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;el-upload__text&quot;</span>&gt;</span>将文件拖到此处，或<span class="tag">&lt;<span class="name">em</span>&gt;</span>点击上传<span class="tag">&lt;/<span class="name">em</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">&quot;tip&quot;</span> <span class="attr">class</span>=<span class="string">&quot;el-upload__tip&quot;</span> <span class="attr">style</span>=<span class="string">&quot;color: red&quot;</span>&gt;</span></span><br><span class="line">        提示：仅允许导入“xls”或“xlsx”格式文件！</span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-upload</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;success&quot;</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;submitUpload&quot;</span>&gt;</span>上传到服务器<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123; getToken &#125; <span class="keyword">from</span> <span class="string">&#x27;@/utils/auth&#x27;</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  name: <span class="string">&#x27;Upload&#x27;</span>,</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      fileType: [<span class="string">&#x27;.xlsx&#x27;</span>, <span class="string">&#x27;.xls&#x27;</span>],</span></span><br><span class="line">      upload: &#123;</span><br><span class="line"><span class="javascript">        <span class="comment">// 设置上传的请求头部</span></span></span><br><span class="line">        headers: &#123; Authorization: getToken() &#125;,</span><br><span class="line"><span class="javascript">        <span class="comment">// 上传地址</span></span></span><br><span class="line"><span class="javascript">        url: <span class="string">&#x27;https://jsonplaceholder.typicode.com/posts/&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 是否更新已经存在的用户数据</span></span></span><br><span class="line"><span class="javascript">        isUploading: <span class="literal">false</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line"><span class="javascript">    <span class="comment">// 文件上传中处理</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">handleFileProgress</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.upload.isUploading = <span class="literal">true</span></span></span><br><span class="line">    &#125;,</span><br><span class="line"><span class="javascript">    <span class="comment">// 文件上传成功处理</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">handleFileSuccess</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.upload.isUploading = <span class="literal">false</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.$refs.upload.clearFiles()</span></span><br><span class="line">    &#125;,</span><br><span class="line"><span class="javascript">    <span class="comment">// 提交上传文件</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">submitUpload</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.$refs.upload.submit()</span></span><br><span class="line">    &#125;,</span><br><span class="line"><span class="javascript">    <span class="comment">// 上传文件之前的钩子</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">beforeUpload</span>(<span class="params">file</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> isXlsx = file.type === <span class="string">&#x27;application/vnd.ms-excel&#x27;</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (!isXlsx) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.$message.error(<span class="string">&#x27;上传文件只能是 xlsx 或 xls 格式&#x27;</span>)</span></span><br><span class="line">      &#125;</span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> isXlsx</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="不使用-action"><a href="#不使用-action" class="headerlink" title="不使用 action"></a>不使用 <code>action</code></h2><p>上面需要后端配合使用，沟通起来还是比较麻烦的，还是推荐不使用 <code>action</code>，自己处理 ajax 请求可以更自由些</p>
<p>效果如下（数据是拿 mock 随机生成存入 Excel 的）：</p>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/company-img/%E5%AF%BC%E5%85%A5Excel.gif"></p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/FileReader">FileReader - MDN</a></p>
<ul>
<li>想把文件以断点续传的形式传给服务器，一般使用 <code>readAsArrayBuffer()</code> 读取文件</li>
<li>想把文件中的数据展示到页面上，一般使用 <code>readAsBinaryString()</code> 读取文件</li>
</ul>
<p><a href="https://element.eleme.cn/#/zh-CN/component/upload">Element Upload</a></p>
<ul>
<li><p><code>:on-change</code> 文件状态改变时的钩子，添加文件、上传成功和上传失败时都会被调用</p>
<p>第一个参数是 file，里面有文件内容、状态等信息</p>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/company-img/upload_file_raw.jpg"></p>
</li>
<li><p>把文件内容通过 FileReader 转换成二进制文件后</p>
<p>再通过 <code>xlsx.read</code> 读取，即可拿到 Excel 数据内容</p>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/company-img/upload_xlsx.jpg"></p>
</li>
<li><p>最后通过 <code>xlsx.utils.sheet_to_json</code> 即可转换成我们需要的数据格式</p>
</li>
</ul>
<p><a href="https://element.eleme.cn/#/zh-CN/component/loading">Element Loading</a></p>
<ul>
<li><p><code>Loading.service(options)</code> 以服务的方式调用的 Loading 需要异步关闭</p>
<p>需结合 <code>this.$nextTick()</code> 使用</p>
</li>
</ul>
<p>代码如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;uploadBox&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 上传文件按钮 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;buttonBox&quot;</span>&gt;</span></span><br><span class="line">      &lt;el-upload</span><br><span class="line">        action</span><br><span class="line">        accept=&quot;.xlsx,.xls&quot;</span><br><span class="line">        :show-file-list=&quot;false&quot;</span><br><span class="line">        :on-change=&quot;handleChange&quot;</span><br><span class="line">        :auto-upload=&quot;false&quot;</span><br><span class="line">      &gt;</span><br><span class="line">        <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">slot</span>=<span class="string">&quot;trigger&quot;</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span>&gt;</span>选取Excel文件<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;success&quot;</span> <span class="attr">:disabled</span>=<span class="string">&quot;disabled&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>提交到服务器<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-upload</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 解析出来的数据 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-show</span>=<span class="string">&quot;show&quot;</span> <span class="attr">class</span>=<span class="string">&quot;tableBox&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;el-icon-info&quot;</span>&gt;</span>请您检查无误后，再点击“提交到服务器”按钮<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-table</span> <span class="attr">:data</span>=<span class="string">&quot;tempData&quot;</span> <span class="attr">border</span> <span class="attr">style</span>=<span class="string">&quot;width: 100%&quot;</span> <span class="attr">:height</span>=<span class="string">&quot;height&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;name&quot;</span> <span class="attr">label</span>=<span class="string">&quot;姓名&quot;</span> <span class="attr">min-width</span>=<span class="string">&quot;50%&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;phone&quot;</span> <span class="attr">label</span>=<span class="string">&quot;电话&quot;</span> <span class="attr">min-width</span>=<span class="string">&quot;50%&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> xlsx <span class="keyword">from</span> <span class="string">&#x27;xlsx&#x27;</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123; Loading &#125; <span class="keyword">from</span> <span class="string">&#x27;element-ui&#x27;</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> uploadExcel <span class="keyword">from</span> <span class="string">&#x27;@/api&#x27;</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  name: <span class="string">&#x27;Upload&#x27;</span>,</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      height: <span class="built_in">document</span>.documentElement.clientHeight - <span class="number">130</span>,</span></span><br><span class="line">      tempData: [],</span><br><span class="line"><span class="javascript">      show: <span class="literal">false</span>,</span></span><br><span class="line"><span class="javascript">      disabled: <span class="literal">false</span>,</span></span><br><span class="line">      character: &#123;</span><br><span class="line">        name: &#123;</span><br><span class="line"><span class="javascript">          text: <span class="string">&#x27;姓名&#x27;</span>,</span></span><br><span class="line"><span class="javascript">          type: <span class="string">&#x27;string&#x27;</span></span></span><br><span class="line">        &#125;,</span><br><span class="line">        phone: &#123;</span><br><span class="line"><span class="javascript">          text: <span class="string">&#x27;电话&#x27;</span>,</span></span><br><span class="line"><span class="javascript">          type: <span class="string">&#x27;string&#x27;</span></span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line"><span class="javascript">    <span class="comment">// 采集excel数据</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">async</span> <span class="function"><span class="title">handleChange</span>(<span class="params">file</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> originData = file.raw</span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (!originData) <span class="keyword">return</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.show = <span class="literal">false</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> loadingInstance = Loading.service(&#123;</span></span><br><span class="line"><span class="javascript">        text: <span class="string">&#x27;努力加载中!!!&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        background: <span class="string">&#x27;rgba(0, 0, 0, 0.8)&#x27;</span></span></span><br><span class="line">      &#125;)</span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> binaryData = <span class="keyword">await</span> <span class="built_in">this</span>.readFile(originData)</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> workbook = xlsx.read(binaryData, &#123; <span class="attr">type</span>: <span class="string">&#x27;binary&#x27;</span> &#125;)</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> worksheet = workbook.Sheets[workbook.SheetNames[<span class="number">0</span>]]</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> data = xlsx.utils.sheet_to_json(worksheet)</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.tempData = <span class="built_in">this</span>.handleData(data)</span></span><br><span class="line"><span class="javascript">      <span class="keyword">await</span> <span class="built_in">this</span>.delay(<span class="number">300</span>)</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.show = <span class="literal">true</span></span></span><br><span class="line">      loadingInstance.close()</span><br><span class="line">    &#125;,</span><br><span class="line"><span class="javascript">    <span class="comment">// 把读取出来的数据转换为服务器需要的格式</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">handleData</span>(<span class="params">data</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> arr = []</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> char = <span class="built_in">this</span>.character</span></span><br><span class="line"><span class="javascript">      data.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> obj = &#123;&#125;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> char) &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">if</span> (<span class="built_in">Object</span>.hasOwnProperty.call(char, key)) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> el = char[key]</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> val = item[el.text] || <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> type = el.type</span></span><br><span class="line"><span class="javascript">            type === <span class="string">&#x27;string&#x27;</span> ? (val = <span class="built_in">String</span>(val)) : <span class="literal">null</span></span></span><br><span class="line"><span class="javascript">            type === <span class="string">&#x27;number&#x27;</span> ? (val = <span class="built_in">Number</span>(val)) : <span class="literal">null</span></span></span><br><span class="line">            obj[key] = val</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        arr.push(obj)</span><br><span class="line">      &#125;)</span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> arr</span></span><br><span class="line">    &#125;,</span><br><span class="line"><span class="javascript">    <span class="comment">// 提交数据给服务器</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">async</span> <span class="function"><span class="title">submit</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (<span class="built_in">this</span>.tempData.length &lt;= <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.$message(&#123;</span></span><br><span class="line"><span class="javascript">          message: <span class="string">&#x27;请先选择Excel文件&#x27;</span>,</span></span><br><span class="line"><span class="javascript">          type: <span class="string">&#x27;warning&#x27;</span>,</span></span><br><span class="line"><span class="javascript">          showClose: <span class="literal">true</span></span></span><br><span class="line">        &#125;)</span><br><span class="line"><span class="javascript">        <span class="keyword">return</span></span></span><br><span class="line">      &#125;</span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.disabled = <span class="literal">true</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> loadingInstance = Loading.service(&#123;</span></span><br><span class="line"><span class="javascript">        text: <span class="string">&#x27;努力加载中!!!&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        background: <span class="string">&#x27;rgba(0, 0, 0, 0.8)&#x27;</span></span></span><br><span class="line">      &#125;)</span><br><span class="line"><span class="javascript">      <span class="keyword">await</span> <span class="built_in">this</span>.delay(<span class="number">300</span>)</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 发送API请求</span></span></span><br><span class="line"><span class="javascript">      uploadExcel(<span class="built_in">this</span>.tempData).then(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.$message(&#123;</span></span><br><span class="line"><span class="javascript">          message: <span class="string">&#x27;Excel文件已上传完毕&#x27;</span>,</span></span><br><span class="line"><span class="javascript">          type: <span class="string">&#x27;success&#x27;</span>,</span></span><br><span class="line"><span class="javascript">          showClose: <span class="literal">true</span></span></span><br><span class="line">        &#125;)</span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.show = <span class="literal">false</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.disabled = <span class="literal">false</span></span></span><br><span class="line">        loadingInstance.close()</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">readFile</span>(<span class="params">file</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> reader = <span class="keyword">new</span> FileReader()</span></span><br><span class="line">        reader.readAsBinaryString(file)</span><br><span class="line"><span class="javascript">        reader.onload = <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span></span><br><span class="line">          resolve(e.target.result)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">delay</span>(<span class="params">interval = <span class="number">0</span></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> timer = <span class="built_in">setTimeout</span>(<span class="function"><span class="params">_</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">clearTimeout</span>(timer)</span></span><br><span class="line">          resolve()</span><br><span class="line">        &#125;, interval)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-class">.buttonBox</span> &#123;</span></span><br><span class="line">  padding: 15px;</span><br><span class="line">  display: flex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-class">.el-button</span> &#123;</span></span><br><span class="line">  margin-right: 20px !important;</span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-class">.tableBox</span> &#123;</span></span><br><span class="line">  padding: 0 15px;</span><br><span class="line">&#125;</span><br><span class="line">h3 &#123;</span><br><span class="line">  font-size: 18px;</span><br><span class="line"><span class="css">  <span class="selector-tag">color</span>: <span class="selector-id">#f56c6c</span>;</span></span><br><span class="line">  padding-bottom: 15px;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>导出数据</strong></p>
<p>如下方法使用 xlsx 导出，也可以使用 xlsx + file-saver 导出</p>
<ul>
<li><p><code>@selection-change</code> ，当选择项发生变化时会触发该事件</p>
<p>参数为 selection，拿到后处理一下</p>
</li>
<li><p>之后通过 <code>xlsx.utils.json_to_sheet</code> 将其变成 sheet</p>
<p>再新建一个表格 <code>xlsx.utils.book_new</code></p>
<p>往表格插入数据 <code>xlsx.utils.book_append_sheet</code></p>
<p>最后通过 <code>xlsx.writeFile</code> 即可下载</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = <span class="built_in">this</span>.selectionList.map(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    编号: item.id,</span><br><span class="line">    姓名: item.name,</span><br><span class="line">    电话: item.phone</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> sheet = xlsx.utils.json_to_sheet(arr)</span><br><span class="line"><span class="keyword">const</span> book = xlsx.utils.book_new()</span><br><span class="line">xlsx.utils.book_append_sheet(book, sheet, <span class="string">&#x27;表格名&#x27;</span>)</span><br><span class="line">xlsx.writeFile(book, <span class="string">`user<span class="subst">$&#123;<span class="keyword">new</span> <span class="built_in">Date</span>().getTime()&#125;</span>.xls`</span>)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>Element</tag>
        <tag>封装</tag>
      </tags>
  </entry>
  <entry>
    <title>Element tree树组件 鼠标双击事件</title>
    <url>/posts/e082dc34/</url>
    <content><![CDATA[<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>双击 tree上的子节点，把节点文字显示在输入框中（这里简化一下，双击 tree 显示文字即可，省略 $emit 那一步）</p>
<ul>
<li>注解：<strong>props 可以接收 defaultExpandAll</strong>（是否默认展开所有节点）</li>
</ul>
<a id="more"></a>

<p>效果如下：</p>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/company-img/%E5%8F%8C%E5%87%BB%E6%95%88%E6%9E%9C.gif"></p>
<p>因为 Element 的 tree 组件不支持双击事件，这时可以曲线救国试一下</p>
<h2 id="基本代码"><a href="#基本代码" class="headerlink" title="基本代码"></a>基本代码</h2><h3 id="树组件代码"><a href="#树组件代码" class="headerlink" title="树组件代码"></a>树组件代码</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  &lt;el-tree</span><br><span class="line">    id=&quot;tree&quot;</span><br><span class="line">    v-loading=&quot;treeDataLoading&quot;</span><br><span class="line">    node-key=&quot;id&quot;</span><br><span class="line">    :data=&quot;treeData&quot;</span><br><span class="line">    :default-expand-all=&quot;defaultExpandAll&quot;</span><br><span class="line">    :expand-on-click-node=&quot;false&quot;</span><br><span class="line">    style=&quot;height: 100%;&quot;</span><br><span class="line">  /&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  name: <span class="string">&#x27;TreeDbl&#x27;</span>,</span></span><br><span class="line">  props: &#123;</span><br><span class="line">    defaultExpandAll: &#123;</span><br><span class="line"><span class="javascript">      type: <span class="built_in">Boolean</span>,</span></span><br><span class="line"><span class="javascript">      <span class="keyword">default</span>: <span class="literal">false</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line">      treeData: [],</span><br><span class="line"><span class="javascript">      treeDataLoading: <span class="literal">false</span>,</span></span><br><span class="line">      resData: [</span><br><span class="line">        &#123;</span><br><span class="line"><span class="javascript">          id: <span class="string">&#x27;1&#x27;</span>,</span></span><br><span class="line"><span class="javascript">          label: <span class="string">&#x27;动物&#x27;</span>,</span></span><br><span class="line"><span class="javascript">          parentId: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line"><span class="javascript">          id: <span class="string">&#x27;2&#x27;</span>,</span></span><br><span class="line"><span class="javascript">          label: <span class="string">&#x27;狗&#x27;</span>,</span></span><br><span class="line"><span class="javascript">          parentId: <span class="string">&#x27;1&#x27;</span></span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line"><span class="javascript">          id: <span class="string">&#x27;3&#x27;</span>,</span></span><br><span class="line"><span class="javascript">          label: <span class="string">&#x27;哈士奇&#x27;</span>,</span></span><br><span class="line"><span class="javascript">          parentId: <span class="string">&#x27;2&#x27;</span></span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line"><span class="javascript">          id: <span class="string">&#x27;4&#x27;</span>,</span></span><br><span class="line"><span class="javascript">          label: <span class="string">&#x27;柯基&#x27;</span>,</span></span><br><span class="line"><span class="javascript">          parentId: <span class="string">&#x27;2&#x27;</span></span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line"><span class="javascript">          id: <span class="string">&#x27;6&#x27;</span>,</span></span><br><span class="line"><span class="javascript">          label: <span class="string">&#x27;猫&#x27;</span>,</span></span><br><span class="line"><span class="javascript">          parentId: <span class="string">&#x27;1&#x27;</span></span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line"><span class="javascript">          id: <span class="string">&#x27;7&#x27;</span>,</span></span><br><span class="line"><span class="javascript">          label: <span class="string">&#x27;植物&#x27;</span>,</span></span><br><span class="line"><span class="javascript">          parentId: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">created</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">this</span>.getTree()</span></span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">dblClickItem</span>(<span class="params">e</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (e.target.nodeName === <span class="string">&#x27;SPAN&#x27;</span>) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(e.target.innerText)</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    /*</span><br><span class="line">    以下处理数据逻辑可以直接跳过</span><br><span class="line">    */</span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">getTree</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.treeDataLoading = <span class="literal">true</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// 发送数据请求（这里不发送请求以resData模拟）</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resovle</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> tree = <span class="built_in">this</span>.resData</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.treeData = <span class="built_in">this</span>.transfromData(tree)</span></span><br><span class="line">        resovle()</span><br><span class="line">      &#125;)</span><br><span class="line"><span class="javascript">        .catch(<span class="function">() =&gt;</span> &#123;&#125;)</span></span><br><span class="line"><span class="javascript">        .finally(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.treeDataLoading = <span class="literal">false</span></span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">transfromData</span>(<span class="params">data, params = &#123;&#125;</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 深拷贝一份（以防连续调用出错）</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> cData = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(data))</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> map = &#123;&#125;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> tData = []</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> attr = &#123;</span></span><br><span class="line"><span class="javascript">        id: <span class="string">&#x27;id&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        parentId: <span class="string">&#x27;parentId&#x27;</span></span></span><br><span class="line">      &#125;</span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> arg = <span class="built_in">Object</span>.assign(&#123;&#125;, attr, params)</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 注意：这里item的引用地址指向cData</span></span></span><br><span class="line"><span class="javascript">      cData.forEach(<span class="function"><span class="params">item</span> =&gt;</span> (map[item[arg.id]] = item))</span></span><br><span class="line"><span class="javascript">      cData.forEach(<span class="function"><span class="params">child</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> mapItem = map[child[arg.parentId]]</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (mapItem) &#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">// 注意：这里mapItem引用地址指向也是指向cData</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">if</span> (!mapItem.children) mapItem.children = []</span></span><br><span class="line">          mapItem.children.push(child)</span><br><span class="line"><span class="javascript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">// 顶级节点</span></span></span><br><span class="line">          tData.push(child)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> tData</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="父组件代码"><a href="#父组件代码" class="headerlink" title="父组件代码"></a>父组件代码</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tree-dbl</span> <span class="attr">defaultExpandAll</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="效果如下："><a href="#效果如下：" class="headerlink" title="效果如下："></a>效果如下：</h3><p><img data-src="https://gitee.com/lilyn/pic/raw/master/company-img/TreeDbl1.jpg"></p>
<h2 id="一个不太好的方案：直接添加事件绑定"><a href="#一个不太好的方案：直接添加事件绑定" class="headerlink" title="一个不太好的方案：直接添加事件绑定"></a>一个不太好的方案：直接添加事件绑定</h2><p>可以直接给 tree添加事件绑定，利用事件委托显示每一个元素的文字信息，可以在 getTree 方法中的 finally 中添加如下代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&#x27;tree&#x27;</span>).addEventListener(<span class="string">&#x27;dblclick&#x27;</span>, <span class="built_in">this</span>.dblClickItem)</span><br></pre></td></tr></table></figure>

<ul>
<li>也可以借助 <code>@node-expand</code>（节点被展开时触发的事件） 和 <code>@node-collapse</code> （节点被关闭时触发的事件）添加/解除事件绑定，不过有些麻烦</li>
<li>也可以使用 <code>@node-click</code> （节点被点击时的回调），记录点击次数，<strong>由于 <code>@node-click</code> 可以拿到点击节点的 data，可以对其进行是否是根节点的判断</strong></li>
</ul>
<h2 id="推荐方案：使用自定义节点内容"><a href="#推荐方案：使用自定义节点内容" class="headerlink" title="推荐方案：使用自定义节点内容"></a>推荐方案：使用自定义节点内容</h2><p>可以在节点区添加按钮或图标等内容</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  &lt;el-tree</span><br><span class="line">    id=&quot;tree&quot;</span><br><span class="line">    ref=&quot;tree&quot;</span><br><span class="line">    v-loading=&quot;treeDataLoading&quot;</span><br><span class="line">    node-key=&quot;id&quot;</span><br><span class="line">    :data=&quot;treeData&quot;</span><br><span class="line">    :default-expand-all=&quot;defaultExpandAll&quot;</span><br><span class="line">    :expand-on-click-node=&quot;false&quot;</span><br><span class="line">    style=&quot;height: 100%;&quot;</span><br><span class="line">  &gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;custom-tree-node&quot;</span> <span class="attr">slot-scope</span>=<span class="string">&quot;&#123; node &#125;&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> @<span class="attr">dblclick</span>=<span class="string">&quot;dblClickItem&quot;</span>&gt;</span>&#123;&#123; node.label &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-tree</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">&gt;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-class">.custom-tree-node</span> &#123;</span></span><br><span class="line">  font-size: 14px;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>Element</tag>
        <tag>双击</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue 处理文件的下载（后端Excel导出）</title>
    <url>/posts/14d3abe4/</url>
    <content><![CDATA[<p>大概有两种方法（通常对应的是需要不需要携带 token），原理都是通过 <code>a</code> 标签下载</p>
<ol>
<li>通过 Ajax 请求，拿到 <code>response</code> ，转换为 blob 格式（主要是为了处理 type），为其生成下载链接，下载即可</li>
<li>直接拼接 URL，拼出来对应请求链接，直接访问即可（不需要二次 token 认证）</li>
</ol>
<a id="more"></a>

<h2 id="后端文件流"><a href="#后端文件流" class="headerlink" title="后端文件流"></a>后端文件流</h2><ul>
<li>首先点击导出 Excel ，这里调用接口成功</li>
</ul>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/company-img/%E5%AF%BC%E5%87%BAExcel%E6%8E%A5%E5%8F%A3%E6%88%90%E5%8A%9F.jpg"></p>
<ul>
<li>接下来看一下后台返回的数据是什么样，是文件流格式（<code>OutputStream</code>）</li>
</ul>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/company-img/%E5%90%8E%E7%AB%AF%E8%BF%94%E5%9B%9E%E7%9A%84%E6%95%B0%E6%8D%AE%E6%B5%81.jpg"></p>
<p>在处理之前，说几个要注意的点！！！</p>
<ol>
<li><p><strong>注意：后端在这里一般会设置如下几个请求头</strong></p>
<p>后端还可能开启 jwt token 验证，如果开启请移步第 2 点请求拦截设置 headers</p>
<p><strong>注意： 由于跨域浏览器处于安全考虑不让自定义响应头通过 JS 获取</strong> （详见： <a href="https://blog.csdn.net/PGguoqi/article/details/106824957">JS 无法获取响应 header 的 Content-Disposition 字段</a> ），也就是说 <code>Content-Disposition</code> 前端在 Network 里是能看到的，但是无法通过 JS 获取到，这里后端需要将其暴露出去</p>
<p>跨域情况默认只暴露：<code>Cache-Control</code>、<code>Content-Language</code>、<code>Content-Type</code>、<code>Expires</code>、<code>Last-Modified</code>、<code>Pragma</code> 六个属性</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设置返回类型为excel</span></span><br><span class="line">response.setContentType(<span class="string">&quot;application/vnd.ms-excel; charset=UTF-8&quot;</span>);  </span><br><span class="line"><span class="comment">// 设置返回文件名为filename.xls </span></span><br><span class="line">response.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;filename.xls&quot;</span>); </span><br><span class="line"><span class="comment">// 请求或响应消息不能走缓存</span></span><br><span class="line">response.setHeader(<span class="string">&quot;Cache-Control&quot;</span>, <span class="string">&quot;no-cache&quot;</span>);</span><br><span class="line"><span class="comment">// 将Content-Disposition暴露出去，这样就可以用过JS获取到了</span></span><br><span class="line">response.setHeader(<span class="string">&quot;Access-Control-Expose-Headers&quot;</span>, <span class="string">&quot;Content-Disposition&quot;</span>);</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p><strong>注意：前端在 Axios 请求和响应拦截的时候，需要对其进行处理</strong></p>
<p>请求拦截一般我们都是会设置 headers，这里只是简单处理一下，实际会根据不同情况设置 headers</p>
<p>响应拦截一般我们都是把 <code>response.data</code> 进行返回，但是这里我们需要把整个 <code>response</code> 返回（因为文件名在 headers 里面）</p>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; getToken &#125; <span class="keyword">from</span> <span class="string">&#x27;@/utils/auth&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; AUTHOR_KEY &#125; <span class="keyword">from</span> <span class="string">&#x27;@/global&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> service = axios.create(&#123;</span><br><span class="line">  baseURL: process.env.NODE_ENV === <span class="string">&#x27;development&#x27;</span> ? <span class="string">&#x27;&#x27;</span> : <span class="string">&#x27;http://127.0.0.1:9999&#x27;</span></span><br><span class="line">  withCredentials: <span class="literal">true</span>,</span><br><span class="line">  timeout: <span class="number">5000</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 请求拦截器</span></span><br><span class="line">service.interceptors.request.use(</span><br><span class="line">  config =&gt; &#123;</span><br><span class="line">    config.headers[AUTHOR_KEY] = getToken()</span><br><span class="line">    <span class="keyword">return</span> config</span><br><span class="line">  &#125;,</span><br><span class="line">  error =&gt; <span class="built_in">console</span>.log(error)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 响应拦截器</span></span><br><span class="line">service.interceptors.response.use(</span><br><span class="line">  response =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (response.config.responseType === <span class="string">&#x27;blob&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> response</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> response.data</span><br><span class="line">  &#125;,</span><br><span class="line">  error =&gt; <span class="built_in">console</span>.log(error)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> service</span><br></pre></td></tr></table></figure>

<p>接下来要处理这个文件流，大概有两种方法（通常对应的是需要不需要携带 token），原理都是通过 <code>a</code> 标签下载</p>
<ol>
<li>通过 Ajax 请求，拿到 <code>response</code> ，转换为 blob 格式（主要是为了处理 type），为其生成下载链接，下载即可</li>
<li>拼接 URL，拼出来对应请求链接，直接访问即可</li>
</ol>
<h2 id="通过-Blob-下载"><a href="#通过-Blob-下载" class="headerlink" title="通过 Blob 下载"></a>通过 Blob 下载</h2><p>Blob 通常用于存储大文件，典型的 Blob 内容是一张图片或一个音频</p>
<ol>
<li>默认情况下 axios 不会处理二进制数据，即请求可以正常被浏览器接收，但 axios 不会去处理。<strong>需要在请求的时候设置 <code>responseType: &#39;blob&#39;</code> 才可以</strong></li>
<li>拿到文件流之后，需要生成一个 URL 才可以下载，可以<strong>通过<code>URL.createObjectURL()</code>方法生成一个链接</strong></li>
<li>a 标签添加文件名<br>正常情况下，通过 <code>window.location = url</code> 就可以下载文件。浏览器判断这个链接是一个资源而不是页面的时候，就会下载文件。但是通过文件流生成的 url 对应的资源是没有文件名的，需要添加文件名。这时候可以用到 download 属性指定下载的文件名</li>
</ol>
<p>由于有浏览器问题可能会出现 <code>content-disposition</code> 匹配不到，最好做一下判断看 <code>content-disposition</code> 和 <code>Content-Disposition</code> 哪个能取到</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> mimeMap = &#123;</span><br><span class="line">  xlsx: <span class="string">&#x27;application/vnd.ms-excel&#x27;</span>,</span><br><span class="line">  zip: <span class="string">&#x27;application/zip&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> toExcel = <span class="function"><span class="params">params</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> request(&#123;</span><br><span class="line">    method: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">    url: <span class="string">&#x27;/dayReportToExcel/toExcel&#x27;</span>,</span><br><span class="line">    responseType: <span class="string">&#x27;blob&#x27;</span>,</span><br><span class="line">    params</span><br><span class="line">  &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> resolveBlob(res, mimeMap.xlsx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">resolveBlob</span>(<span class="params">res, mimeType</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 创建a标签，并处理二级制数据</span></span><br><span class="line">  <span class="keyword">const</span> aLink = <span class="built_in">document</span>.createElement(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> blob = <span class="keyword">new</span> Blob([res.data], &#123; <span class="attr">type</span>: mimeType &#125;)</span><br><span class="line">  <span class="comment">// 生成下载链接</span></span><br><span class="line">  <span class="keyword">const</span> URL = <span class="built_in">window</span>.URL || <span class="built_in">window</span>.webkitURL</span><br><span class="line">  aLink.href = URL.createObjectURL(blob)</span><br><span class="line">  <span class="comment">// 设置下载文件名称</span></span><br><span class="line">  <span class="keyword">let</span> fileName = <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="keyword">if</span> (res.headers[<span class="string">&#x27;content-disposition&#x27;</span>]) fileName = res.headers[<span class="string">&#x27;content-disposition&#x27;</span>]</span><br><span class="line">  <span class="keyword">if</span> (res.headers[<span class="string">&#x27;Content-Disposition&#x27;</span>]) fileName = res.headers[<span class="string">&#x27;Content-Disposition&#x27;</span>]</span><br><span class="line">  aLink.setAttribute(<span class="string">&#x27;download&#x27;</span>, fileName)</span><br><span class="line">  <span class="comment">// 下载</span></span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(aLink)</span><br><span class="line">  aLink.click()</span><br><span class="line">  <span class="comment">// 释放URL对象</span></span><br><span class="line">  <span class="built_in">window</span>.URL.revokeObjectURL(aLink.href)</span><br><span class="line">  <span class="built_in">document</span>.body.removeChild(aLink)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意：一般情况下文件名都是需要匹配的，后端传过来的可能是这样的，首选需要 <code>decodeURI</code> 解码一下，再用正则把文件名匹配出来（替换设置下载文件名那里即可）</p>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/company-img/Excel%E6%96%87%E4%BB%B6%E5%90%8D.jpg"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">resolveBlob</span>(<span class="params">res, mimeType</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> aLink = <span class="built_in">document</span>.createElement(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> blob = <span class="keyword">new</span> Blob([res.data], &#123; <span class="attr">type</span>: mimeType &#125;)</span><br><span class="line">  <span class="keyword">const</span> pat = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">&#x27;filename=([^;]+\\.[^\\.;]+)&#x27;</span>)</span><br><span class="line">  <span class="keyword">let</span> contentDisposition</span><br><span class="line">  <span class="keyword">if</span> (res.headers[<span class="string">&#x27;content-disposition&#x27;</span>]) contentDisposition = res.headers[<span class="string">&#x27;content-disposition&#x27;</span>]</span><br><span class="line">  <span class="keyword">if</span> (res.headers[<span class="string">&#x27;Content-Disposition&#x27;</span>]) contentDisposition = res.headers[<span class="string">&#x27;Content-Disposition&#x27;</span>]</span><br><span class="line">  <span class="keyword">const</span> result = pat.exec(<span class="built_in">decodeURI</span>(contentDisposition))</span><br><span class="line">  <span class="keyword">let</span> fileName = result &amp;&amp; result[<span class="number">1</span>]</span><br><span class="line">  <span class="keyword">const</span> URL = <span class="built_in">window</span>.URL || <span class="built_in">window</span>.webkitURL</span><br><span class="line">  aLink.href = URL.createObjectURL(blob)</span><br><span class="line">  <span class="comment">// 如果Content-Disposition没有暴露，给文件一个默认名字</span></span><br><span class="line">  <span class="keyword">if</span> (fileName == <span class="literal">null</span>) fileName = <span class="string">&#x27;日报表&#x27;</span></span><br><span class="line">  aLink.setAttribute(<span class="string">&#x27;download&#x27;</span>, fileName)</span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(aLink)</span><br><span class="line">  aLink.click()</span><br><span class="line">  <span class="comment">// 释放URL对象</span></span><br><span class="line">  <span class="built_in">window</span>.URL.revokeObjectURL(aLink.href)</span><br><span class="line">  <span class="built_in">document</span>.body.removeChild(aLink)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="拼接-URL-下载"><a href="#拼接-URL-下载" class="headerlink" title="拼接 URL 下载"></a>拼接 URL 下载</h2><p>如果可以直接通过 URL 下载文件，则可以不需要发送 Ajax 请求（前提是没有 token、headers 验证），直接下载</p>
<ul>
<li>可以使用 <code>a</code> 标签进行下载</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> qs <span class="keyword">from</span> <span class="string">&#x27;qs&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">downloadExcel</span>(<span class="params">params</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> url = <span class="built_in">window</span>.location.origin + <span class="string">&#x27;/dayReportToExcel/toExcel?&#x27;</span> + qs.stringify(params)</span><br><span class="line">  <span class="keyword">const</span> aLink = <span class="built_in">document</span>.createElement(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">  aLink.setAttribute(<span class="string">&#x27;download&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">  aLink.setAttribute(<span class="string">&#x27;target&#x27;</span>, <span class="string">&#x27;_blank&#x27;</span>)</span><br><span class="line">  aLink.href = url</span><br><span class="line">  aLink.click()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>可以使用 <code>window.open(url, &#39;_blank&#39;)</code></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> qs <span class="keyword">from</span> <span class="string">&#x27;qs&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">downloadExcel</span>(<span class="params">params</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> url = <span class="built_in">window</span>.location.origin + <span class="string">&#x27;/dayReportToExcel/toExcel?&#x27;</span> + qs.stringify(params)</span><br><span class="line">  <span class="built_in">window</span>.open(url, <span class="string">&#x27;_blank&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>Excel</tag>
        <tag>跨域处理</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 批量获取文件夹文件名称和数量</title>
    <url>/posts/5a7a946b/</url>
    <content><![CDATA[<h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><ul>
<li><p>替换 <code>image path</code> 为你想获取的地址</p>
<p>file 获取文件名称/数量</p>
<p>floder 获取文件夹名称/数量</p>
</li>
<li><p>可以服务器或 CMD 中使用（不能在 Git Bash 中使用）</p>
</li>
</ul>
<a id="more"></a>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python getFile.py &#123;image path&#125; &#123;file/floder&#125;</span><br></pre></td></tr></table></figure>

<p><img data-src="https://gitee.com/lilyn/pic/raw/master/company-img/%E6%89%B9%E9%87%8F%E8%8E%B7%E5%8F%96%E6%96%87%E4%BB%B61.jpg"></p>
<h2 id="文件名-getFile-py"><a href="#文件名-getFile-py" class="headerlink" title="文件名 getFile.py"></a>文件名 getFile.py</h2><p>效果如下：</p>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/company-img/%E6%89%B9%E9%87%8F%E8%8E%B7%E5%8F%96%E6%96%87%E4%BB%B62.jpg"></p>
<p>代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) &lt; <span class="number">3</span>:</span><br><span class="line">    print(<span class="string">&quot;Usage python getFile.py &#123;image path&#125; &#123;file/floder&#125;&quot;</span>)</span><br><span class="line">    sys.exit()</span><br><span class="line">root_path = sys.argv[<span class="number">1</span>].replace(<span class="string">&#x27;\\&#x27;</span>, <span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">type_f = sys.argv[<span class="number">2</span>]</span><br><span class="line"><span class="keyword">if</span> type_f != <span class="string">&#x27;file&#x27;</span> <span class="keyword">and</span> type_f != <span class="string">&#x27;floder&#x27;</span>:</span><br><span class="line">    print(<span class="string">&quot;Usage &#123;file/floder&#125;&quot;</span>)</span><br><span class="line">    sys.exit()</span><br><span class="line"></span><br><span class="line">File_list = []</span><br><span class="line">Primary_list = []</span><br><span class="line">Secondary_list = []</span><br><span class="line">Count = []</span><br><span class="line">Floder = []</span><br><span class="line">name = root_path.split(<span class="string">&#x27;/&#x27;</span>)[-<span class="number">1</span>]</span><br><span class="line"><span class="keyword">for</span> dirpath, dirnames, files <span class="keyword">in</span> os.walk(root_path):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> files:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> dirpath == root_path:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    dir_Primary, dir_Secondary = dirpath.split(<span class="string">&#x27;/&#x27;</span>)[-<span class="number">2</span>:]</span><br><span class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">        File_list.append(file)</span><br><span class="line">        Primary_list.append(dir_Primary)</span><br><span class="line">        Secondary_list.append(dir_Secondary)</span><br><span class="line">    Floder.append(dir_Secondary)</span><br><span class="line">    Count.append(<span class="built_in">str</span>(<span class="built_in">len</span>(files)))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> type_f == <span class="string">&#x27;file&#x27;</span>:</span><br><span class="line">    print(<span class="string">f&#x27;文件数量 <span class="subst">&#123;<span class="built_in">len</span>(File_list)&#125;</span>&#x27;</span>)</span><br><span class="line">    content_dict = &#123;</span><br><span class="line">        <span class="string">&#x27;PrimaryFolder&#x27;</span>: Primary_list,</span><br><span class="line">        <span class="string">&#x27;SecondaryFolder&#x27;</span>: Secondary_list,</span><br><span class="line">        <span class="string">&#x27;Filename&#x27;</span>: File_list,</span><br><span class="line">    &#125;</span><br><span class="line">    df = pd.DataFrame(content_dict)</span><br><span class="line">    df.to_csv(os.path.join(root_path, <span class="string">f&#x27;<span class="subst">&#123;name&#125;</span>_file.csv&#x27;</span>), encoding=<span class="string">&#x27;utf_8_sig&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> type_f == <span class="string">&#x27;floder&#x27;</span>:</span><br><span class="line">    print(<span class="string">f&#x27;文件夹数量 <span class="subst">&#123;<span class="built_in">len</span>(Floder)&#125;</span>&#x27;</span>)</span><br><span class="line">    content_dict = &#123;</span><br><span class="line">        <span class="string">&#x27;Floder&#x27;</span>: Floder,</span><br><span class="line">        <span class="string">&#x27;Count&#x27;</span>: Count,</span><br><span class="line">    &#125;</span><br><span class="line">    df = pd.DataFrame(content_dict)</span><br><span class="line">    df.to_csv(os.path.join(root_path, <span class="string">f&#x27;<span class="subst">&#123;name&#125;</span>_floder.csv&#x27;</span>), encoding=<span class="string">&#x27;utf_8_sig&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>批处理</tag>
        <tag>导出Excel</tag>
        <tag>获取文件</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 爬取必应（壁纸+搜索词）</title>
    <url>/posts/d6422dce/</url>
    <content><![CDATA[<h2 id="爬取必应壁纸"><a href="#爬取必应壁纸" class="headerlink" title="爬取必应壁纸"></a>爬取必应壁纸</h2><p>经常使用必应应该可以发现，其主页每天都会更新一张图片，这些图片很好看，希望每天能够下载收藏每张图片。具体请看这个网站：必应每日高清壁纸(<a href="https://bing.ioliu.cn/">https://bing.ioliu.cn/</a>)</p>
<a id="more"></a>

<p>效果如下：</p>
<p><img data-src="https://img-blog.csdnimg.cn/20200628162535832.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4Njg5Mzk1,size_16,color_FFFFFF,t_70" alt="效果"></p>
<p>代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">headers = &#123;<span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.131 Safari/537.36&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_page</span>(<span class="params">num</span>):</span></span><br><span class="line">    page_list = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, num+<span class="number">1</span>):</span><br><span class="line">        url = <span class="string">f&#x27;https://bing.ioliu.cn/?p=<span class="subst">&#123;i&#125;</span>&#x27;</span></span><br><span class="line">        page_list.append(url)</span><br><span class="line">    <span class="keyword">return</span> page_list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_html</span>(<span class="params">url</span>):</span></span><br><span class="line">    r = requests.get(url, headers=headers)</span><br><span class="line">    html = r.text</span><br><span class="line">    <span class="keyword">return</span> html</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_html</span>(<span class="params">html</span>):</span></span><br><span class="line">    pattern1 = re.<span class="built_in">compile</span>(<span class="string">r&#x27;data-progressive.*?src=&quot;(.*?)&quot;&#x27;</span>)</span><br><span class="line">    pattern2 = re.<span class="built_in">compile</span>(<span class="string">r&#x27;&lt;h3&gt;(.*?)&lt;/h3&gt;&#x27;</span>)</span><br><span class="line">    img_list = re.findall(pattern1, html)</span><br><span class="line">    title_list = re.findall(pattern2, html)</span><br><span class="line">    <span class="keyword">return</span> img_list, title_list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download</span>(<span class="params">path, img_list, title_list</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(img_list)):</span><br><span class="line">        img_url = img_list[i]</span><br><span class="line">        title = title_list[i]</span><br><span class="line">        img_url = img_url.replace(<span class="string">&#x27;640&#x27;</span>, <span class="string">&#x27;1920&#x27;</span>).replace(<span class="string">&#x27;480&#x27;</span>, <span class="string">&#x27;1080&#x27;</span>)</span><br><span class="line">        pattern3 = re.<span class="built_in">compile</span>(<span class="string">r&#x27;[()-/_]&#x27;</span>)</span><br><span class="line">        title = re.sub(pattern3, <span class="string">&#x27;&#x27;</span>, title)</span><br><span class="line">        print(<span class="string">f&#x27;正在爬取: <span class="subst">&#123;img_url&#125;</span>&#x27;</span>)</span><br><span class="line">        img_floder = <span class="string">&#x27;D:/图片/&#x27;</span>+keyword</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(img_floder):</span><br><span class="line">            os.makedirs(img_floder)</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">f&#x27;<span class="subst">&#123;img_floder&#125;</span>/<span class="subst">&#123;title&#125;</span>.jpg&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            img_content = requests.get(img_url).content</span><br><span class="line">            f.write(img_content)</span><br><span class="line">        <span class="comment"># 将爬取失败的删除</span></span><br><span class="line">		<span class="keyword">if</span> os.path.getsize(img_path) &lt; <span class="number">50</span>:</span><br><span class="line">            os.remove(img_path)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    num = <span class="number">20</span></span><br><span class="line">    keyword = <span class="string">&#x27;必应壁纸&#x27;</span></span><br><span class="line">    path = <span class="string">&#x27;D:/图片/&#x27;</span></span><br><span class="line">    page_list = get_page(num)</span><br><span class="line">    <span class="keyword">for</span> page <span class="keyword">in</span> page_list:</span><br><span class="line">        html = get_html(page)</span><br><span class="line">        img_list, title_list = parse_html(html)</span><br><span class="line">        download(path, img_list, title_list)</span><br></pre></td></tr></table></figure>



<h2 id="根据搜索词爬取必应图片"><a href="#根据搜索词爬取必应图片" class="headerlink" title="根据搜索词爬取必应图片"></a>根据搜索词爬取必应图片</h2><p>这里需要注意： <code>requests.get(url, headers=headers).text</code> 会有很多 html 转义编码的字符，比如：引号变为<code>&amp;quot</code>，会影响使用正则</p>
<p><strong>解决方法：</strong></p>
<ol>
<li>正则中加入<code>&amp;quot</code></li>
<li>使用 <code>etree.HTML</code> 重新加载一下，再用 <code>xpath</code> 定位到此处</li>
</ol>
<p><strong>出现问题：</strong></p>
<ol>
<li><p>请求超时</p>
<p>设置请求超时时间，防止长时间停留在同一个请求</p>
<p><code>socket.setdefaulttimeout(10)</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">requests.exceptions.ConnectionError: HTTPConnectionPool(host=<span class="string">&#x27;www.iutour.cn&#x27;</span>, port=<span class="number">80</span>): </span><br><span class="line">        </span><br><span class="line">Max retries exceeded <span class="keyword">with</span> url: /uploadfile/bjzb/<span class="number">20141126124539763.j</span>pg </span><br><span class="line">(Caused by NewConnectionError(<span class="string">&#x27;&lt;urllib3.connection.HTTPConnection object at 0x000001A46192EC50&gt;: </span></span><br><span class="line"><span class="string">                              </span></span><br><span class="line"><span class="string">Failed to establish a new connection: [WinError 10060] 由于连接方在一段时间后没有正确答复或连接的主机没有反应，连接尝试失败。&#x27;</span>,))</span><br></pre></td></tr></table></figure>
</li>
<li><p>需要验证证书</p>
<p><code>requests.get(img_url, verify=False)</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">requests.exceptions.SSLError: HTTPSConnectionPool(host=<span class="string">&#x27;bbp.jp&#x27;</span>, port=<span class="number">443</span>):</span><br><span class="line"></span><br><span class="line">Max retries exceeded <span class="keyword">with</span> url: /wp-content/uploads/<span class="number">2016</span>/05/<span class="number">2</span>-<span class="number">20.j</span>pg </span><br><span class="line">(Caused by SSLError(SSLError(<span class="string">&quot;bad handshake: Error([(&#x27;SSL routines&#x27;, &#x27;tls_process_server_certificate&#x27;, &#x27;certificate verify failed&#x27;)],)&quot;</span>,),))</span><br></pre></td></tr></table></figure>


</li>
</ol>
<p>直接使用 <code>try:catch</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.131 Safari/537.36&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_page</span>(<span class="params">num</span>):</span></span><br><span class="line">    img_list = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>((num // <span class="number">35</span>) + <span class="number">1</span>):</span><br><span class="line">        url = <span class="string">f&#x27;https://cn.bing.com/images/async?q=<span class="subst">&#123;keyword&#125;</span>&amp;first=<span class="subst">&#123;i*<span class="number">35</span>&#125;</span>&amp;count=35&amp;relp=35&amp;scenario=ImageBasicHover&amp;datsrc=I&amp;layout=RowBased_Landscape&amp;mmasync=1&#x27;</span></span><br><span class="line">        r = requests.get(url, headers=headers)</span><br><span class="line">        html = r.text</span><br><span class="line">        html = etree.HTML(html)</span><br><span class="line">        conda_list = html.xpath(<span class="string">&#x27;//a[@class=&quot;iusc&quot;]/@m&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> conda_list:</span><br><span class="line">            pattern = re.<span class="built_in">compile</span>(<span class="string">r&#x27;&quot;murl&quot;:&quot;(.*?)&quot;&#x27;</span>)</span><br><span class="line">            img_url = re.findall(pattern, j)[<span class="number">0</span>]</span><br><span class="line">            img_list.append(img_url)</span><br><span class="line">    <span class="keyword">return</span> img_list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download</span>(<span class="params">path, img_list</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(img_list)):</span><br><span class="line">        img_url = img_list[i]</span><br><span class="line">        print(<span class="string">f&#x27;正在爬取: <span class="subst">&#123;img_url&#125;</span>&#x27;</span>)</span><br><span class="line">        img_floder = <span class="string">&#x27;D:/图片/&#x27;</span>+keyword</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(img_floder):</span><br><span class="line">            os.makedirs(img_floder)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">f&#x27;<span class="subst">&#123;img_floder&#125;</span>/<span class="subst">&#123;i&#125;</span>.jpg&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                img_content = requests.get(img_url).content</span><br><span class="line">                f.write(img_content)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    num = <span class="number">100</span></span><br><span class="line">    keyword = <span class="string">&#x27;食品街&#x27;</span></span><br><span class="line">    path = <span class="string">&#x27;D:/图片/&#x27;</span></span><br><span class="line">    img_list = get_page(num)</span><br><span class="line">    download(path, img_list)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>批处理</tag>
        <tag>爬取必应</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 查询并爬取地理信息</title>
    <url>/posts/676d36dc/</url>
    <content><![CDATA[<p>看了 B站up主 应心小栈 的视频有感 <a href="https://space.bilibili.com/95113417/">应心小栈</a></p>
<a id="more"></a>

<h2 id="一、高德地图"><a href="#一、高德地图" class="headerlink" title="一、高德地图"></a>一、高德地图</h2><h3 id="地理编码"><a href="#地理编码" class="headerlink" title="地理编码"></a>地理编码</h3><p><img data-src="https://img-blog.csdnimg.cn/20191018183654671.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4Njg5Mzk1,size_16,color_FFFFFF,t_70" alt="gaode"></p>
<p>操作步骤：</p>
<ol>
<li>申请 <strong>Web服务API 密钥（key）</strong><br><a href="https://lbs.amap.com/dev/index">申请密钥链接</a></li>
<li>拼接 HTTP 请求 URL<br>这里选用的是【地理编码】</li>
</ol>
<p><strong>修改 address 和 key</strong></p>
<ul>
<li>address=&lt;搜索的地址&gt;</li>
<li>key=&lt;用户的key&gt;<br><code>https://restapi.amap.com/v3/geocode/geo?address=&lt;搜索的地址&gt;&amp;output=XML&amp;key=&lt;用户的key&gt;</code></li>
</ul>
<ol start="3">
<li>接收HTTP请求返回的数据（JSON 或 XML 格式），解析数据。<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># _*_coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">base_url = <span class="string">&#x27;https://restapi.amap.com/v3/geocode/geo?address=&#x27;</span></span><br><span class="line"><span class="comment">#填写key</span></span><br><span class="line">fun_url = <span class="string">&#x27;&amp;output=XML&amp;key=您的key&#x27;</span></span><br><span class="line">address = <span class="string">&#x27;北京大学&#x27;</span></span><br><span class="line">url = base_url + address + fun_url</span><br><span class="line">response = requests.get(url)</span><br><span class="line">soup = BeautifulSoup(response.text,<span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">location_source = <span class="built_in">str</span>(soup.find(<span class="string">&#x27;location&#x27;</span>))</span><br><span class="line">location_down = re.split(<span class="string">&#x27;&lt;|&gt;&#x27;</span>,location_source)[<span class="number">2</span>]</span><br><span class="line">location_out = re.split(<span class="string">&#x27;,&#x27;</span>,location_down)</span><br><span class="line">longitude = location_out[<span class="number">0</span>]</span><br><span class="line">latitude = location_out[<span class="number">1</span>]</span><br><span class="line">print(<span class="string">&#x27;经度为：&#123;&#125; 纬度为：&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(longitude,latitude))</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>经度为：<span class="number">116.308264</span> 纬度为：<span class="number">39.995304</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="搜索POI"><a href="#搜索POI" class="headerlink" title="搜索POI"></a>搜索POI</h3><p><img data-src="https://img-blog.csdnimg.cn/20200526152357308.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4Njg5Mzk1,size_16,color_FFFFFF,t_70" alt="使用POI"><br><img data-src="https://img-blog.csdnimg.cn/20200526152415980.png" alt="接口_高德"><br>详细参数参考链接：<a href="https://lbs.amap.com/api/webservice/guide/api/search">https://lbs.amap.com/api/webservice/guide/api/search</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">headers = &#123;<span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.117 Safari/537.36&#x27;</span>&#125;</span><br><span class="line">url = <span class="string">&#x27;https://restapi.amap.com/v3/place/text?&#x27;</span></span><br><span class="line">page = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">  data = &#123;<span class="string">&#x27;key&#x27;</span>: <span class="string">&#x27;您的key&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;keywords&#x27;</span>: <span class="string">&#x27;海底捞&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;city&#x27;</span>: <span class="string">&#x27;南京&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;output&#x27;</span>: <span class="string">&#x27;json&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;page&#x27;</span>: page&#125;</span><br><span class="line">  html = requests.get(url,params=data,headers=headers)</span><br><span class="line">  j = html.json()</span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(j[<span class="string">&#x27;pois&#x27;</span>])):</span><br><span class="line">    data1 = [(j[<span class="string">&#x27;pois&#x27;</span>][i][<span class="string">&#x27;name&#x27;</span>],</span><br><span class="line">            j[<span class="string">&#x27;pois&#x27;</span>][i][<span class="string">&#x27;address&#x27;</span>],</span><br><span class="line">            j[<span class="string">&#x27;pois&#x27;</span>][i][<span class="string">&#x27;pname&#x27;</span>],</span><br><span class="line">            j[<span class="string">&#x27;pois&#x27;</span>][i][<span class="string">&#x27;cityname&#x27;</span>],</span><br><span class="line">            j[<span class="string">&#x27;pois&#x27;</span>][i][<span class="string">&#x27;adname&#x27;</span>],</span><br><span class="line">            j[<span class="string">&#x27;pois&#x27;</span>][i][<span class="string">&#x27;tel&#x27;</span>],</span><br><span class="line">            j[<span class="string">&#x27;pois&#x27;</span>][i][<span class="string">&#x27;location&#x27;</span>],</span><br><span class="line">            j[<span class="string">&#x27;pois&#x27;</span>][i][<span class="string">&#x27;biz_ext&#x27;</span>][<span class="string">&#x27;rating&#x27;</span>])]</span><br><span class="line">    data2 = pd.DataFrame(data1)</span><br><span class="line">    data2.to_csv(<span class="string">&#x27;map_gaode.csv&#x27;</span>,header=<span class="literal">False</span>,index=<span class="literal">False</span>,mode=<span class="string">&#x27;a+&#x27;</span>)</span><br><span class="line">print(<span class="built_in">str</span>(page)+<span class="string">&#x27;has done&#x27;</span>)</span><br><span class="line">page += <span class="number">1</span></span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>爬取效果如下：</p>
<p><img data-src="https://img-blog.csdnimg.cn/2020061615172698.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4Njg5Mzk1,size_16,color_FFFFFF,t_70" alt="高德爬取"></p>
<h2 id="二、百度地图"><a href="#二、百度地图" class="headerlink" title="二、百度地图"></a>二、百度地图</h2><h3 id="地理编码-1"><a href="#地理编码-1" class="headerlink" title="地理编码"></a>地理编码</h3><p><img data-src="https://img-blog.csdnimg.cn/20191018183153897.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4Njg5Mzk1,size_16,color_FFFFFF,t_70" alt="baidu"></p>
<p>操作步骤：</p>
<ol>
<li>申请 <strong>Web 服务API 密钥（ak）</strong><br><a href="https://lbsyun.baidu.com/apiconsole/key/create">申请密钥链接</a></li>
</ol>
<p><strong>Referer 白名单：</strong>  *<br>Referer 白名单：后面填写 * 否则会出现 <strong>message：APP Referer校验失败</strong><br>2. 拼接 HTTP 请求 URL<br>这里选用的是【地理编码】<br><strong>修改 address 和 key</strong></p>
<ul>
<li>address=&lt;搜索的地址&gt;</li>
<li>key=&lt;用户的key&gt;<br><code>http://api.map.baidu.com/geocoding/v3/?address=&lt;搜索的地址&gt;&amp;output=xml&amp;ak=&lt;用户的key&gt;</code></li>
</ul>
<ol start="3">
<li>接收 HTTP 请求返回的数据（JSON 或 XML 格式），解析数据。</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># _*_coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">base_url = <span class="string">&#x27;http://api.map.baidu.com/geocoding/v3/?address=&#x27;</span></span><br><span class="line"><span class="comment">#填写ak</span></span><br><span class="line">fun_url = <span class="string">&#x27;&amp;output=xml&amp;ak=您的ak&#x27;</span></span><br><span class="line">address = <span class="string">&#x27;北京大学&#x27;</span></span><br><span class="line">url = base_url + address + fun_url</span><br><span class="line">response = requests.get(url)</span><br><span class="line">soup = BeautifulSoup(response.text,<span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">location_lng = <span class="built_in">str</span>(soup.find(<span class="string">&#x27;lng&#x27;</span>))</span><br><span class="line">location_down_lng = re.split(<span class="string">&#x27;&lt;|&gt;&#x27;</span>,location_lng)</span><br><span class="line">longitude = location_down_lng[<span class="number">2</span>]</span><br><span class="line">location_lat = <span class="built_in">str</span>(soup.find(<span class="string">&#x27;lat&#x27;</span>))</span><br><span class="line">location_down_lat = re.split(<span class="string">&#x27;&lt;|&gt;&#x27;</span>,location_lat)</span><br><span class="line">latitude = location_down_lat[<span class="number">2</span>]</span><br><span class="line">print(<span class="string">&#x27;经度为：&#123;&#125; 纬度为：&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(longitude,latitude))</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>经度为：<span class="number">116.304152442</span> 纬度为：<span class="number">39.9670892266</span></span><br></pre></td></tr></table></figure>

<h3 id="搜索POI-1"><a href="#搜索POI-1" class="headerlink" title="搜索POI"></a>搜索POI</h3><p>百度可能出现的问题（请求人数过多报错）：<code>&#123;&#39;status&#39;: 401, &#39;message&#39;: &#39;当前并发量已经超过约定并发配额，限制访问&#39;&#125;</code> 加一个<code>try:except:</code><br><img data-src="https://img-blog.csdnimg.cn/20200526165701771.png" alt="接口_百度"><br>详细参数参考链接：<a href="http://lbsyun.baidu.com/index.php?title=webapi/guide/webservice-placeapi#service-page-anchor-1-3">http://lbsyun.baidu.com/index.php?title=webapi/guide/webservice-placeapi#service-page-anchor-1-3</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">headers = &#123;<span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.117 Safari/537.36&#x27;</span>&#125;</span><br><span class="line">url = <span class="string">&#x27;http://api.map.baidu.com/place/v2/search?&#x27;</span></span><br><span class="line">page_num = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">  data = &#123;<span class="string">&#x27;ak&#x27;</span>: <span class="string">&#x27;您的ak&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;query&#x27;</span>: <span class="string">&#x27;海底捞&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;region&#x27;</span>: <span class="string">&#x27;南京&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;output&#x27;</span>: <span class="string">&#x27;json&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;page_num&#x27;</span>: page_num&#125;</span><br><span class="line">  html = requests.get(url,params=data,headers=headers)</span><br><span class="line">  j = html.json()</span><br><span class="line">  <span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(j[<span class="string">&#x27;results&#x27;</span>])):</span><br><span class="line">      data1 = [(j[<span class="string">&#x27;results&#x27;</span>][i][<span class="string">&#x27;name&#x27;</span>],</span><br><span class="line">              j[<span class="string">&#x27;results&#x27;</span>][i][<span class="string">&#x27;address&#x27;</span>],</span><br><span class="line">              j[<span class="string">&#x27;results&#x27;</span>][i][<span class="string">&#x27;province&#x27;</span>],</span><br><span class="line">              j[<span class="string">&#x27;results&#x27;</span>][i][<span class="string">&#x27;city&#x27;</span>],</span><br><span class="line">              j[<span class="string">&#x27;results&#x27;</span>][i][<span class="string">&#x27;area&#x27;</span>],</span><br><span class="line">              j[<span class="string">&#x27;results&#x27;</span>][i][<span class="string">&#x27;telephone&#x27;</span>],</span><br><span class="line">              <span class="built_in">str</span>(j[<span class="string">&#x27;results&#x27;</span>][i][<span class="string">&#x27;location&#x27;</span>][<span class="string">&#x27;lat&#x27;</span>])+<span class="string">&#x27;,&#x27;</span>+<span class="built_in">str</span>(j[<span class="string">&#x27;results&#x27;</span>][i][<span class="string">&#x27;location&#x27;</span>][<span class="string">&#x27;lng&#x27;</span>]))]</span><br><span class="line">      data2 = pd.DataFrame(data1)</span><br><span class="line">      data2.to_csv(<span class="string">&#x27;map_baidu.csv&#x27;</span>,header=<span class="literal">False</span>,index=<span class="literal">False</span>,mode=<span class="string">&#x27;a+&#x27;</span>)</span><br><span class="line">  <span class="keyword">except</span> KeyError:</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="built_in">str</span>(page_num)+<span class="string">&#x27;has done&#x27;</span>)</span><br><span class="line">page_num += <span class="number">1</span></span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<p>爬取效果如下：</p>
<p><img data-src="https://img-blog.csdnimg.cn/20200616151556844.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4Njg5Mzk1,size_16,color_FFFFFF,t_70" alt="百度爬取"></p>
<h2 id="三、腾讯地图"><a href="#三、腾讯地图" class="headerlink" title="三、腾讯地图"></a>三、腾讯地图</h2><h3 id="地理编码-2"><a href="#地理编码-2" class="headerlink" title="地理编码"></a>地理编码</h3><p><img data-src="https://img-blog.csdnimg.cn/20191018185450427.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4Njg5Mzk1,size_16,color_FFFFFF,t_70" alt="tengxun"></p>
<p>操作步骤：</p>
<ol>
<li>申请 <strong>Web 服务 API 密钥（key）</strong><br><a href="https://lbs.qq.com/dev/console/key/add">申请密钥链接</a></li>
<li>拼接 HTTP 请求 URL<br>这里选用的是【地理编码】</li>
</ol>
<p><strong>修改 address 和 key</strong></p>
<ul>
<li>address=&lt;搜索的地址&gt;</li>
<li>key=&lt;用户的key&gt;<br><code>https://apis.map.qq.com/ws/geocoder/v1/?address=&lt;搜索的地址&gt;&amp;key=&lt;用户的key&gt;</code></li>
</ul>
<ol start="3">
<li>接收 HTTP 请求返回的数据（JSON 或 XML 格式），解析数据。</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># _*_coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">base_url = <span class="string">&#x27;https://apis.map.qq.com/ws/geocoder/v1/?address=&#x27;</span></span><br><span class="line">fun_url = <span class="string">&#x27;&amp;output=xml&amp;key=您的key&#x27;</span></span><br><span class="line">address = <span class="string">&#x27;北京大学&#x27;</span></span><br><span class="line">url = base_url + address + fun_url</span><br><span class="line">response = requests.get(url)</span><br><span class="line">location_text = response.text</span><br><span class="line">longitude = re.findall(<span class="string">&quot;lng\&quot;: (.*?),&quot;</span>,location_text)[<span class="number">0</span>]</span><br><span class="line">latitude = re.findall(<span class="string">&quot;lat\&quot;: (.*?)\n&quot;</span>,location_text)[<span class="number">0</span>]</span><br><span class="line">print(<span class="string">&#x27;经度为：&#123;&#125; 纬度为：&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">str</span>(longitude),<span class="built_in">str</span>(latitude)))</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>经度为：<span class="number">116.310249</span> 纬度为：<span class="number">39.99287</span></span><br></pre></td></tr></table></figure>
<h3 id="搜索POI-2"><a href="#搜索POI-2" class="headerlink" title="搜索POI"></a>搜索POI</h3><p>详细参数参考链接：<a href="https://lbs.qq.com/service/webService/webServiceGuide/webServiceSearch">https://lbs.qq.com/service/webService/webServiceGuide/webServiceSearch</a></p>
<p>这部分就不进行爬取了…</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>批处理</tag>
        <tag>爬取地图</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 批量压缩图片（维持原目录结构）</title>
    <url>/posts/258a330/</url>
    <content><![CDATA[<h2 id="需求："><a href="#需求：" class="headerlink" title="需求："></a>需求：</h2><p>最近在做图像识别的时候，遇到了一个问题，图片很多并且图像比较大，没有办法上传到服务器，于是想到了用 python 批量压缩。</p>
<p>用到 PIL 库，PIL 是 Python 平台事实上的图像处理标准库，支持多种格式，并提供强大的图形与图像处理功能。使用如下命令安装：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install pillow</span><br></pre></td></tr></table></figure>
<a id="more"></a>

<p>效果图如下：<br><img data-src="https://img-blog.csdnimg.cn/20210608182907195.gif" alt="维持原目录结构"></p>
<h2 id="代码如下："><a href="#代码如下：" class="headerlink" title="代码如下："></a>代码如下：</h2><p>注意：</p>
<ol>
<li>如果你的图片有其他图片后缀名（比如：bmp）直接在 suffix 数组中添加即可</li>
<li>控制 <code>save(dstFile, quality=80, subsampling=0)</code> 中的 quality 即可控制图片大小</li>
<li>如果希望控制图片尺寸，修改 <code>resize((int(w), int(h))</code> w 和 h 即可</li>
<li>替换 srcPath（图片原始路径）和 dstPath （图片生成路径）路径即可使用</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># 图片原始存放路径</span></span><br><span class="line">srcPath = <span class="string">r&#x27;E:\图片\convert&#x27;</span></span><br><span class="line"><span class="comment"># 图片最后存放到什么路径</span></span><br><span class="line">dstPath = <span class="string">r&#x27;E:\图片\to&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compressImage</span>(<span class="params">srcPath, dstPath</span>):</span></span><br><span class="line">    suffix = [<span class="string">&#x27;.jpg&#x27;</span>, <span class="string">&#x27;.png&#x27;</span>, <span class="string">&#x27;.jpeg&#x27;</span>]</span><br><span class="line">    <span class="keyword">for</span> dirpath, dirnames, files <span class="keyword">in</span> os.walk(srcPath):</span><br><span class="line">        <span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">            file_path = os.path.join(dirpath, file)</span><br><span class="line">            <span class="keyword">for</span> fix <span class="keyword">in</span> suffix:</span><br><span class="line">                <span class="keyword">if</span> file.endswith(fix):</span><br><span class="line">                    srcFile = os.path.join(dirpath, file)</span><br><span class="line">                    floder = dirpath.split(<span class="string">&#x27;\\&#x27;</span>)[-<span class="number">1</span>]</span><br><span class="line">                    dstFloder = os.path.join(dstPath, floder)</span><br><span class="line">                    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(dstFloder):</span><br><span class="line">                        os.makedirs(dstFloder)</span><br><span class="line">                    dstFile = os.path.join(dstFloder, file)</span><br><span class="line">                    <span class="keyword">try</span>:</span><br><span class="line">                        img = Image.<span class="built_in">open</span>(srcFile)</span><br><span class="line">                        w, h = img.size</span><br><span class="line">                        <span class="comment"># 设置压缩尺寸和选项，注意尺寸要用括号！！！</span></span><br><span class="line">                        dImg = img.resize((<span class="built_in">int</span>(w), <span class="built_in">int</span>(h)), Image.ANTIALIAS)</span><br><span class="line">                        <span class="comment"># 压缩图片质量，控制quality的值即可！！！</span></span><br><span class="line">                        dImg.save(dstFile, quality=<span class="number">80</span>, subsampling=<span class="number">0</span>)</span><br><span class="line">                        print(dstFile + <span class="string">&quot; 成功！&quot;</span>)</span><br><span class="line">                    <span class="keyword">except</span> Exception:</span><br><span class="line">                        print(dstFile + <span class="string">&quot;失败！&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    compressImage(srcPath, dstPath)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>批处理</tag>
        <tag>压缩图片</tag>
      </tags>
  </entry>
  <entry>
    <title>Element 可选日期范围限制或检验（开始日期结束日期）</title>
    <url>/posts/94396d70/</url>
    <content><![CDATA[<h2 id="需求："><a href="#需求：" class="headerlink" title="需求："></a>需求：</h2><ol start="2">
<li>选择起始日期后截止日期不能小于起始日期</li>
<li>选择截止日期后起始日期不能大于截止日期</li>
</ol>
<a id="more"></a>

<p>有两种实现方法：</p>
<ol>
<li><p>选择起始日期，起始日期之前的日期就不让你选择</p>
<p>效果如下：</p>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/company-img/%E8%B5%B7%E5%A7%8B%E6%97%A5%E6%9C%9F%E6%88%AA%E6%AD%A2%E6%97%A5%E6%9C%9F.gif"></p>
</li>
<li><p>选择起始日期，表单校验截止日期不能小于起始日期</p>
<p>效果如下：</p>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/js-img/%E8%A1%A8%E5%8D%95%E9%AA%8C%E8%AF%81_%E8%B5%B7%E5%A7%8B%E6%97%A5%E6%9C%9F%E5%92%8C%E6%88%AA%E6%AD%A2%E6%97%A5%E6%9C%9F.gif"></p>
</li>
</ol>
<h2 id="第一种情况：不让选"><a href="#第一种情况：不让选" class="headerlink" title="第一种情况：不让选"></a>第一种情况：不让选</h2><ul>
<li>首先不能使用 Element 中的 DatePicker 选择日期范围</li>
<li>给 DatePicker 动态配置 pick-options 中的 disableDate 即可对可选日期进行限制</li>
</ul>
<p><strong>注意：</strong></p>
<ol>
<li>如果加<code> value-format</code> 需要给日期格式中间加 <code>-</code></li>
<li>需要给 DatePicker  加 <code>type=&quot;date&quot;</code></li>
<li>截止日期如果不能超过当前日期需要减一天（<code>24 * 3600 * 1000 = 8.64e7 </code>）</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-form</span> <span class="attr">ref</span>=<span class="string">&quot;form&quot;</span> <span class="attr">:model</span>=<span class="string">&quot;form&quot;</span> <span class="attr">label-width</span>=<span class="string">&quot;100px&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;起始日期&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;startDate&quot;</span>&gt;</span></span><br><span class="line">      &lt;el-date-picker</span><br><span class="line">        v-model=&quot;form.startDate&quot;</span><br><span class="line">        value-format=&quot;yyyy-MM-dd&quot;</span><br><span class="line">        clearable</span><br><span class="line">        type=&quot;date&quot;</span><br><span class="line">        placeholder=&quot;请选择起始日期&quot;</span><br><span class="line">        :picker-options=&quot;dateTimeStartFunc&quot;</span><br><span class="line">      /&gt;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;截止日期&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;stopDate&quot;</span>&gt;</span></span><br><span class="line">      &lt;el-date-picker</span><br><span class="line">        v-model=&quot;form.stopDate&quot;</span><br><span class="line">        value-format=&quot;yyyy-MM-dd&quot;</span><br><span class="line">        clearable</span><br><span class="line">        type=&quot;date&quot;</span><br><span class="line">        placeholder=&quot;请选择截止日期&quot;</span><br><span class="line">        :picker-options=&quot;dateTimeEndFunc&quot;</span><br><span class="line">      /&gt;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line">      form: &#123;</span><br><span class="line"><span class="javascript">        startDate: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        stopDate: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line">      &#125;,</span><br><span class="line">      dateTimeStartFunc: &#123;</span><br><span class="line"><span class="javascript">        disabledDate: <span class="function"><span class="params">time</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">if</span> (<span class="built_in">this</span>.form.stopDate) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> time.getTime() &gt; <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="built_in">this</span>.form.stopDate).getTime()</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      dateTimeEndFunc: &#123;</span><br><span class="line"><span class="javascript">        disabledDate: <span class="function"><span class="params">time</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">if</span> (<span class="built_in">this</span>.form.startDate) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> time.getTime() &lt; <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="built_in">this</span>.form.startDate).getTime() - <span class="number">8.64e7</span></span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="第二种情况：表单校验"><a href="#第二种情况：表单校验" class="headerlink" title="第二种情况：表单校验"></a>第二种情况：表单校验</h2><ul>
<li>使用 DatePicker 的 validateField 来对部分表单字段进行校验，如下需动态校验 startDate 和 stopDate</li>
</ul>
<p><strong>注意：</strong></p>
<ol>
<li>这里需要结合 watch 来使用，不然会出现<code>截止日期必须大于起始日期</code> 不会随着只改变起始日期的情况下消失</li>
<li>这里可以把表单校验方法抽出去，以后后续修改</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;el-form ref=<span class="string">&quot;form&quot;</span> :model=<span class="string">&quot;form&quot;</span> label-width=<span class="string">&quot;100px&quot;</span> :rules=<span class="string">&quot;rules&quot;</span>&gt;</span><br><span class="line">    &lt;el-form-item label=<span class="string">&quot;起始日期&quot;</span> prop=<span class="string">&quot;startDate&quot;</span>&gt;</span><br><span class="line">      &lt;el-date-picker</span><br><span class="line">        v-model=<span class="string">&quot;form.startDate&quot;</span></span><br><span class="line">        value-format=<span class="string">&quot;yyyy-MM-dd&quot;</span></span><br><span class="line">        clearable</span><br><span class="line">        type=<span class="string">&quot;date&quot;</span></span><br><span class="line">        placeholder=<span class="string">&quot;请选择起始日期&quot;</span></span><br><span class="line">      /&gt;</span><br><span class="line">    &lt;/el-form-item&gt;</span><br><span class="line">    &lt;el-form-item label=<span class="string">&quot;截止日期&quot;</span> prop=<span class="string">&quot;stopDate&quot;</span>&gt;</span><br><span class="line">      &lt;el-date-picker</span><br><span class="line">        v-model=<span class="string">&quot;form.stopDate&quot;</span></span><br><span class="line">        value-format=<span class="string">&quot;yyyy-MM-dd&quot;</span></span><br><span class="line">        clearable</span><br><span class="line">        type=<span class="string">&quot;date&quot;</span></span><br><span class="line">        placeholder=<span class="string">&quot;请选择截止日期&quot;</span></span><br><span class="line">      /&gt;</span><br><span class="line">    &lt;/el-form-item&gt;</span><br><span class="line">  &lt;/el-form&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> checkEndTime = <span class="function">(<span class="params">rule, value, callback</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.ValidatorEndTime(rule, value, callback, <span class="built_in">this</span>.form.startDate)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      form: &#123;</span><br><span class="line">        startDate: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        stopDate: <span class="string">&#x27;&#x27;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      rules: &#123;</span><br><span class="line">        startDate: [&#123; <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&#x27;请选择起始日期&#x27;</span>, <span class="attr">trigger</span>: <span class="string">&#x27;change&#x27;</span> &#125;],</span><br><span class="line">        stopDate: [&#123; <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">validator</span>: checkEndTime, <span class="attr">trigger</span>: <span class="string">&#x27;change&#x27;</span> &#125;]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  watch: &#123;</span><br><span class="line">    <span class="string">&#x27;form.startDate&#x27;</span>() &#123;</span><br><span class="line">      <span class="built_in">this</span>.validateReset([<span class="string">&#x27;startDate&#x27;</span>, <span class="string">&#x27;stopDate&#x27;</span>])</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&#x27;form.stopDate&#x27;</span>() &#123;</span><br><span class="line">      <span class="built_in">this</span>.validateReset([<span class="string">&#x27;startDate&#x27;</span>, <span class="string">&#x27;stopDate&#x27;</span>])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    <span class="function"><span class="title">validateReset</span>(<span class="params">arr</span>)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.$refs[<span class="string">&#x27;form&#x27;</span>].validateField(arr)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">ValidatorEndTime</span>(<span class="params">rule, value, callback, start</span>)</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (!value) &#123;</span><br><span class="line">        callback(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;请选择截止日期&#x27;</span>))</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!start) &#123;</span><br><span class="line">          callback(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;请选择起始日期！&#x27;</span>))</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">Date</span>.parse(start) &gt; <span class="built_in">Date</span>.parse(value)) &#123;</span><br><span class="line">          callback(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;截止日期必须大于起始日期！&#x27;</span>))</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          callback()</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>Element</tag>
        <tag>问题</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue 把表格导出 Excel 文件及打印</title>
    <url>/posts/9fef765/</url>
    <content><![CDATA[<h2 id="安装文件"><a href="#安装文件" class="headerlink" title="安装文件"></a>安装文件</h2><ol>
<li><p>安装 <code>xlsx</code> 库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install xlsx</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装 <code>file-saver</code> 库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install file-saver</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果需要打印表格，安装 <code>vue-print-nb</code> 库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install vue-print-nb</span><br></pre></td></tr></table></figure>

</li>
</ol>
<a id="more"></a>

<p><img data-src="https://gitee.com/lilyn/pic/raw/master/company-img/%E5%AF%BC%E5%87%BA%E6%89%93%E5%8D%B0.gif"></p>
<h2 id="导出表格"><a href="#导出表格" class="headerlink" title="导出表格"></a>导出表格</h2><p>主要使用的是 <code>js-xlsx</code>，导出 Excel 文件，主要是如何生成一个 sheet，之后将这个 sheet 转成最终 Excel 文件的 blob 对象，然后利用 <code>URL.createObject</code> 下载</p>
<ol>
<li><p>配置生成 Excel 的配置项</p>
<p><code>bookType</code> 要生成的文件类型</p>
<p><code>bookSST</code> 是否生成 <code>Shared String Table</code>，如果开启生成速度会下降，但在低版本 IOS 设备上有更好的兼容性</p>
<p><code>type</code> 可以使用 <code>base64</code> 、<code>binary</code> （BinaryString）、<code>string</code> （utf8 字符串）、<code>buffer</code>（node buffer） 、<code>array</code>（Unit8Array 8位无符号数组） 、<code>file</code> （文件路径，仅 node 支持）</p>
</li>
<li><p>字符串转 ArrayBuffer 进行文件下载，这里使用 <code>file-saver</code></p>
<p><code>FileSaver.saveAs(Blob/File/Url, filename)</code></p>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> FileSaver <span class="keyword">from</span> <span class="string">&#x27;file-saver&#x27;</span></span><br><span class="line"><span class="keyword">import</span> XLSX <span class="keyword">from</span> <span class="string">&#x27;xlsx&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">htmlToExcel</span>(<span class="params">dom, title = <span class="string">&#x27;默认标题&#x27;</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> wb = XLSX.utils.table_to_book(<span class="built_in">document</span>.querySelector(dom))</span><br><span class="line">  <span class="keyword">const</span> wbout = XLSX.write(wb, &#123; <span class="attr">bookType</span>: <span class="string">&#x27;xlsx&#x27;</span>, <span class="attr">bookSST</span>: <span class="literal">true</span>, <span class="attr">type</span>: <span class="string">&#x27;array&#x27;</span> &#125;)</span><br><span class="line">  <span class="keyword">const</span> blob = <span class="keyword">new</span> Blob([wbout], &#123; <span class="attr">type</span>: <span class="string">&#x27;application/octet-stream&#x27;</span> &#125;)</span><br><span class="line">  FileSaver.saveAs(blob, <span class="string">`<span class="subst">$&#123;title&#125;</span>.xlsx`</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>组件里使用。直接调用 <code>htmlToExcel</code> 方法，传入选择器和标题名称即可</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-table</span> <span class="attr">id</span>=<span class="string">&quot;printTest&quot;</span> <span class="attr">:data</span>=<span class="string">&quot;tableData&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 500px&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;date&quot;</span> <span class="attr">label</span>=<span class="string">&quot;日期&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;name&quot;</span> <span class="attr">label</span>=<span class="string">&quot;姓名&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;age&quot;</span> <span class="attr">label</span>=<span class="string">&quot;年龄&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;success&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;htmlToExcel(&#x27;#printTest&#x27;, &#x27;表格&#x27;)&quot;</span>&gt;</span>导出Excel<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="打印表格"><a href="#打印表格" class="headerlink" title="打印表格"></a>打印表格</h2><p><code>main.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Print <span class="keyword">from</span> <span class="string">&#x27;vue-print-nb&#x27;</span></span><br><span class="line"></span><br><span class="line">Vue.use(Print)</span><br></pre></td></tr></table></figure>

<p>组件里使。用 <code>v-print</code> 指定需要打印的容器，如下示例 <code>&quot;&#39;#printTest&#39;&quot;</code>：</p>
<ul>
<li>注意：选择器需要用单引号包裹</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-table</span> <span class="attr">id</span>=<span class="string">&quot;printTest&quot;</span> <span class="attr">:data</span>=<span class="string">&quot;tableData&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 500px&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;date&quot;</span> <span class="attr">label</span>=<span class="string">&quot;日期&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;name&quot;</span> <span class="attr">label</span>=<span class="string">&quot;姓名&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;age&quot;</span> <span class="attr">label</span>=<span class="string">&quot;年龄&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">v-print</span>=<span class="string">&quot;&#x27;#printTest&#x27;&quot;</span>&gt;</span>打印<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>Element</tag>
        <tag>导出Excel</tag>
        <tag>打印</tag>
      </tags>
  </entry>
  <entry>
    <title>跨域常见的几种解决方案</title>
    <url>/posts/519525d/</url>
    <content><![CDATA[<h2 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h2><p><strong>非同源策略请求</strong>（比较协议、域名、端口号，只要有一个不一样就是跨域）：</p>
<ol>
<li>页面的访问地址（Web地址）</li>
<li>数据接口的请求地址</li>
</ol>
<a id="more"></a>

<p>情况1：开发时候是跨域的，但是服务器部署的时候是同源的</p>
<ul>
<li><p>修改本地 HOST【DNS解析】</p>
<p>核心：骗过浏览器，让浏览器认为是同源，但是本质还是跨域</p>
</li>
</ul>
<p>情况2：开发和上线都是跨域的</p>
<ul>
<li><p>JSONP（不安全，并且只支持GET请求）</p>
</li>
<li><p>其它方案</p>
<p><code>document.domain + iframe</code></p>
<p><code>window.name + iframe</code></p>
<p><code>H5 postMessage</code></p>
</li>
<li><p>CORS 跨域资源共享</p>
</li>
<li><p>proxy 跨域代理（目前最常用的）</p>
</li>
</ul>
<h2 id="JSONP-跨域资源请求"><a href="#JSONP-跨域资源请求" class="headerlink" title="JSONP 跨域资源请求"></a>JSONP 跨域资源请求</h2><p>利用<code>&lt;script&gt;</code> 或者<code>&lt;link&gt; &lt;img&gt; &lt;iframe&gt;...</code> 不存在域的限制</p>
<ul>
<li>特征：资源访问一定都是GET请求，不可能有POST</li>
</ul>
<p>全局函数 <code>function fn(result) &#123; ... &#125;</code></p>
<ol>
<li><code>&lt;script src=&#39;http://127.0.0.1:8888/user/list?callback=fn&#39;&gt;</code> 一定能发送到服务器（不存在域的限制），把全局函数 fn 名字，当做参数传递给服务器</li>
<li>服务器接收到这个请求，同时也可以获取 callback 传递的值（fn）</li>
<li>准备数据，最后返回给客户端 <code>fn([10,20,30])</code></li>
<li>客户端把函数 fn 执行，把服务器准备的数据作为实参传递给函数的形参</li>
</ol>
<h3 id="服务器代码"><a href="#服务器代码" class="headerlink" title="服务器代码"></a>服务器代码</h3><ul>
<li>首先看一下服务器代码，这里提供了 <code>jsonpTest</code> 这个资源路径，并返回给客户端 一个字符串（包含执行函数和参数）</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> port = <span class="number">1001</span></span><br><span class="line">app.listen(port, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`The Web Service Is Listening To The Port: <span class="subst">$&#123;port&#125;</span>`</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&#x27;/jsonpTest&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> fname = req.query.callback</span><br><span class="line">  <span class="keyword">let</span> data = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>]</span><br><span class="line">  res.send(<span class="string">`<span class="subst">$&#123;fname&#125;</span>(<span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(data)&#125;</span>)`</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="JSONP-简单案例"><a href="#JSONP-简单案例" class="headerlink" title="JSONP 简单案例"></a>JSONP 简单案例</h3><ul>
<li>现在来尝试一下 jsonp 的一个简单案例</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params">result</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(result)</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;http://127.0.0.1:1001/jsonpTest?callback=func&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="封装-JSONP"><a href="#封装-JSONP" class="headerlink" title="封装 JSONP"></a>封装 JSONP</h3><ul>
<li>每次像简单案例那样调用太过麻烦，现在我们想像 Axios 那样调用 jsonp</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;node_modules/qs/dist/qs.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;1.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">  jsonp(&#123;</span><br><span class="line"><span class="javascript">    url: <span class="string">&#x27;https://www.baidu.com/sugrec&#x27;</span>,</span></span><br><span class="line">    params: &#123;</span><br><span class="line">      prod: 0,</span><br><span class="line"><span class="javascript">      <span class="keyword">from</span>: <span class="string">&#x27;qq&#x27;</span>,</span></span><br><span class="line">    &#125;,</span><br><span class="line"><span class="javascript">    jsonpName: <span class="string">&#x27;callback&#x27;</span>,</span></span><br><span class="line"><span class="javascript">    success: <span class="function"><span class="params">result</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(result)</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>实现代码如下：</p>
<p>当前还可以实现 Promise 版本，这里就不再实现了</p>
<p>可以参考：<a href="https://juejin.cn/post/6844904161985708046">面试中如何实现一个高质量的JSONP</a></p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">;(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> jsonp = <span class="function"><span class="keyword">function</span> <span class="title">jsonp</span>(<span class="params">config</span>) </span>&#123;</span><br><span class="line">    config == <span class="literal">null</span> ? (config = &#123;&#125;) : <span class="literal">null</span></span><br><span class="line">    <span class="keyword">typeof</span> config !== <span class="string">&#x27;object&#x27;</span> ? (config = &#123;&#125;) : <span class="literal">null</span></span><br><span class="line">    <span class="keyword">let</span> &#123; url, params = &#123;&#125;, jsonpName = <span class="string">&#x27;callback&#x27;</span>, success = <span class="built_in">Function</span>.prototype &#125; = config</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 自己创建一个全局函数</span></span><br><span class="line">    <span class="keyword">let</span> f_name = <span class="string">`jsonp<span class="subst">$&#123;+<span class="keyword">new</span> <span class="built_in">Date</span>()&#125;</span>`</span></span><br><span class="line">    <span class="built_in">window</span>[f_name] = <span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">typeof</span> success === <span class="string">&#x27;function&#x27;</span> ? success(result) : <span class="literal">null</span></span><br><span class="line">      <span class="keyword">delete</span> <span class="built_in">window</span>[f_name]</span><br><span class="line">      <span class="built_in">document</span>.body.removeChild(script)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理URL</span></span><br><span class="line">    params = Qs.stringify(params)</span><br><span class="line">    <span class="keyword">if</span> (params) url += <span class="string">`<span class="subst">$&#123;url.includes(<span class="string">&#x27;?&#x27;</span>) ? <span class="string">&#x27;&amp;&#x27;</span> : <span class="string">&#x27;?&#x27;</span>&#125;</span><span class="subst">$&#123;params&#125;</span>`</span></span><br><span class="line">    url += <span class="string">`<span class="subst">$&#123;url.includes(<span class="string">&#x27;?&#x27;</span>) ? <span class="string">&#x27;&amp;&#x27;</span> : <span class="string">&#x27;?&#x27;</span>&#125;</span><span class="subst">$&#123;jsonpName&#125;</span>=<span class="subst">$&#123;f_name&#125;</span>`</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发送请求</span></span><br><span class="line">    <span class="keyword">let</span> script = <span class="built_in">document</span>.createElement(<span class="string">&#x27;script&#x27;</span>)</span><br><span class="line">    script.src = url</span><br><span class="line">    <span class="comment">// script.onerror = () =&gt; &#123;&#125;;</span></span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(script)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">window</span> !== <span class="string">&#x27;undefined&#x27;</span>) &#123;</span><br><span class="line">    <span class="built_in">window</span>.jsonp = jsonp</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure>

<h3 id="其它网站-JSONP-案例"><a href="#其它网站-JSONP-案例" class="headerlink" title="其它网站 JSONP 案例"></a>其它网站 JSONP 案例</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  jsonp(&#123;</span><br><span class="line">    url: <span class="string">&#x27;https://www.baidu.com/sugrec&#x27;</span>,</span><br><span class="line">    params: &#123;</span><br><span class="line">      prod: <span class="string">&#x27;pc&#x27;</span>,</span><br><span class="line">      wd: <span class="string">&#x27;百度&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    jsonpName: <span class="string">&#x27;cb&#x27;</span>,</span><br><span class="line">    success: <span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(result)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="CORS-跨域资源共享"><a href="#CORS-跨域资源共享" class="headerlink" title="CORS 跨域资源共享"></a>CORS 跨域资源共享</h2><p>在发送真实请求之前，浏览器会先发送一个试探性请求 OPTIONS（目的：测试客户端和服务器之间是否可以正常通信）如果可以正常通信，接下来再发送真实请求信息</p>
<h3 id="服务器代码-1"><a href="#服务器代码-1" class="headerlink" title="服务器代码"></a>服务器代码</h3><p><strong>Allow-Origin</strong> 可以设置的值</p>
<ul>
<li>单一源</li>
<li><code>*</code> 所有源（但是此时不安全，而且不允许携带资源凭证）</li>
</ul>
<p>假如你希望有多个源（不是所有源）都可以跨域，这时就需要<strong>设置一个白名单</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 白名单</span></span><br><span class="line"><span class="keyword">const</span> safeList = [, <span class="string">&#x27;http://127.0.0.1:5500&#x27;</span>, <span class="string">&#x27;http://127.0.0.1:5501&#x27;</span>]</span><br><span class="line">app.use(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> origin = req.headers.origin || req.headers.referer</span><br><span class="line">  origin = origin.replace(<span class="regexp">/\/$/</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">  <span class="keyword">if</span> (safeList.includes(origin)) &#123;</span><br><span class="line">    res.header(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>, origin)</span><br><span class="line">    res.header(<span class="string">&#x27;Access-Control-Allow-Credentials&#x27;</span>, <span class="literal">true</span>)</span><br><span class="line">    req.method === <span class="string">&#x27;OPTIONS&#x27;</span> ? res.send(<span class="string">&#x27;Current Services Support Domain Request!&#x27;</span>) : next()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">app.get(<span class="string">&#x27;/test&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.send(<span class="string">&#x27;OK&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="客户端代码"><a href="#客户端代码" class="headerlink" title="客户端代码"></a>客户端代码</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  fetch(<span class="string">&#x27;http://127.0.0.1:1001/test&#x27;</span>).then(<span class="function"><span class="params">response</span> =&gt;</span> response.text()).then(<span class="function"><span class="params">data</span> =&gt;</span> <span class="built_in">console</span>.log(data))</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="Proxy-跨域代理"><a href="#Proxy-跨域代理" class="headerlink" title="Proxy 跨域代理"></a>Proxy 跨域代理</h2><p>爬虫：自己写一个后台，去爬取别的后台的数据（平台和平台之间没有跨域）</p>
<ul>
<li>后台和后台之间没有跨域限制（服务器一般会做白名单）</li>
<li>客户端和服务器才有跨域限制（浏览器的安全性）</li>
</ul>
<p>使用 <code>webpack devServer</code> 插件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    port: <span class="string">&#x27;3000&#x27;</span>,</span><br><span class="line">    compress: <span class="literal">true</span>,</span><br><span class="line">    open: <span class="literal">true</span>,</span><br><span class="line">    hot: <span class="literal">true</span>,</span><br><span class="line">    proxy: &#123;</span><br><span class="line">      <span class="string">&#x27;/&#x27;</span>: &#123;</span><br><span class="line">        target: <span class="string">&#x27;https://www.jianshu.com&#x27;</span>,</span><br><span class="line">        changeOrigin: <span class="literal">true</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="通过代理爬取简书"><a href="#通过代理爬取简书" class="headerlink" title="通过代理爬取简书"></a>通过代理爬取简书</h3><ul>
<li>通过 pipe 实现请求代理</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> request = <span class="built_in">require</span>(<span class="string">&#x27;request&#x27;</span>)</span><br><span class="line">app.get(<span class="string">&#x27;/subscriptions/recommended_collections&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> url = <span class="string">&#x27;https://www.jianshu.com/asimov&#x27;</span> + req.url</span><br><span class="line">  req.pipe(request(url)).pipe(res)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意：这里html文件名必须为index.html</span></span><br><span class="line">app.use(express.static(<span class="string">&#x27;./&#x27;</span>))</span><br></pre></td></tr></table></figure>

<ul>
<li>前端代码</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  fetch(<span class="string">&#x27;/subscriptions/recommended_collections&#x27;</span>).then(<span class="function"><span class="params">response</span> =&gt;</span> response.text()).then(<span class="function"><span class="params">data</span> =&gt;</span> <span class="built_in">console</span>.log(</span></span><br><span class="line">    data))</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JSONP</tag>
        <tag>CORS</tag>
        <tag>Proxy</tag>
        <tag>跨域处理</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTP网络层性能优化</title>
    <url>/posts/2623edef/</url>
    <content><![CDATA[<h2 id="客户端和服务端之间的信息通信"><a href="#客户端和服务端之间的信息通信" class="headerlink" title="客户端和服务端之间的信息通信"></a>客户端和服务端之间的信息通信</h2><ul>
<li>ajax / fetch 数据交互</li>
<li>跨域处理方案：ajax、fetch、jsonp、postMessage</li>
<li>资源获取【html|、css、js、image、音视频】</li>
<li>webscoket</li>
</ul>
<a id="more"></a>

<p>请求：客户端把信息传递给服务器或者向服务器发送请求</p>
<p>响应：服务器接受客户端信息并且返回给客户端相关的内容</p>
<p>HTTP 报文：客户端和服务器之间的传输的所有内容</p>
<ul>
<li><p>起始行：基本信息【包含 HTTP 的版本等】</p>
<p>请求起始行：GET【请求方式】 xxx【请求地址】 HTTP/1.1【HTTP 版本号】</p>
<p>响应起始行：HTTP/1.1【HTTP 版本】 200【HTTP 响应状态码】 OK【状态码描述】</p>
</li>
<li><p>首部（头）：请求头【客户端-&gt;服务器】、响应头【服务器-&gt;客户端】</p>
</li>
<li><p>主体：请求主体【客户端-&gt;服务器】、响应主体【服务器-&gt;客户端】</p>
</li>
</ul>
<p>客户端和服务器之间的数据传输，依托于网络【通信模式 TCP/IP… 传输协议 HTTP/HTTPS/FTP…】</p>
<h2 id="从输入-URL-地址到看到页面，中间的经历"><a href="#从输入-URL-地址到看到页面，中间的经历" class="headerlink" title="从输入 URL 地址到看到页面，中间的经历"></a>从输入 URL 地址到看到页面，中间的经历</h2><ol>
<li>URL 解析</li>
<li>检查缓存【强缓存、协商缓存（针对资源文件请求）；本地缓存（针对数据请求）】</li>
<li>DNS 服务器解析【域名解析：根据域名解析出服务器外网 IP】</li>
<li>TCP 三次握手【建立客户端和服务器之间的网络连接通道】</li>
<li>基于 HTTP/HTTPS 等协议，实现客户端和服务端之间的信息通信</li>
<li>TCP 四次挥手【把建立好的网络通道释放掉】</li>
<li>客户端渲染【呈现出页面和效果】</li>
</ol>
<h3 id="URL-解析"><a href="#URL-解析" class="headerlink" title="URL 解析"></a>URL 解析</h3><p><img data-src="https://gitee.com/lilyn/pic/raw/master/js-img/URL%E8%A7%A3%E6%9E%90.jpg" alt="URL解析"></p>
<p>URI：统一资源标识符</p>
<ul>
<li>URL：统一资源定位符</li>
<li>URN：统一资源名称</li>
</ul>
<p><strong>传输协议：</strong> 用什么样的协议负责客户端和服务端的信息传输</p>
<ul>
<li><p>HTTP：超文本传输协议</p>
<p>除了传输文本还可以传输其余的信息，例如：文件流、二进制或者 Buffer 格式或者 BASE64 格式的数据</p>
</li>
<li><p>HTTPS：HTTP + SSL（TSL） 更安全的 HTTP，传输的内容经过加密</p>
</li>
<li><p>FTP：文件的上传下载</p>
</li>
</ul>
<p><strong>域名：</strong> 对服务器外网 IP 的一个重命名</p>
<p><code>www.baidu.com</code></p>
<ul>
<li>顶级域名 <code>baidu.com</code></li>
<li>一级域名 <code>www.baidu.com</code></li>
<li>二级域名 <code>video.baidu.com</code></li>
<li>三级域名 <code>image.video.baidu.com</code></li>
</ul>
<p>域名和服务器购买完后，需要在 DNS 服务器生成一条解析记录，用于以后的 DNS 解析</p>
<p><strong>端口号：</strong> 区分同一台服务器上不同的服务的</p>
<ul>
<li><p>取值范围：0~65535 之间</p>
</li>
<li><p>默认端口号：浏览器会根据输入的协议，给与默认端口号</p>
<p>HTTP -&gt; 80</p>
<p>HTTPS -&gt; 443</p>
<p>FTP -&gt; 21</p>
</li>
</ul>
<p><strong>请求资源的路径名称：</strong> 基于路径找到客户端需要的资源文件</p>
<p>看到的 URL 地址可能是重写后的【看到的地址在文件目录不存在】</p>
<ul>
<li><p>ajax 数据请求 <code>/api/list</code></p>
</li>
<li><p>url 重写</p>
<p>动态网址，页面中的内容是无法被搜索引擎收录的（不利于 SEO 优化）</p>
<p>静态化地址 <code>https://item.jd.com/....</code>，通过 URL 重写为 <code>https://item.jd.com/detail.jsp?id=...</code></p>
<p><code>https://item.jd.com/info/100000</code> 路径参数【导航】</p>
<p><code>https://www.baidu.com/info?id=100000</code></p>
</li>
</ul>
<p><strong>问号传参：</strong></p>
<ul>
<li><p>把信息参数传递给服务器，GET 系列请求一般都是这样传递参数</p>
<p><code>xxx=xxx&amp;xxx=xxx</code> -&gt; x-www-form-urlencoded 格式</p>
</li>
<li><p>如果是页面跳转，把信息传递给另一个页面</p>
</li>
</ul>
<p><strong>HASH 值：</strong></p>
<ul>
<li>锚点定位</li>
<li>HASH 路由</li>
</ul>
<p>URL 编译问题：</p>
<ul>
<li>encodeURI decodeURI：编译空格和中文，一般编译整个 URL 中的信息（前后端都支持的 API）</li>
<li>encodeURIComponent decodeURIComponent：编译空格和中文以及一些特殊符号，所以一般只用来编译传递的信息的值，而不是整个 URL（前后端都支持的 API）</li>
<li>escape unescape（用于客户端页面信息传递或一些信息的编译【cookie 中的中文内容编译】）</li>
<li>也可以基于自己设定的加密机制规则处理（对称加密）</li>
<li>对于某些数据，需要采用不可解密的（非对称加密），例如：md5</li>
</ul>
<h3 id="缓存检测"><a href="#缓存检测" class="headerlink" title="缓存检测"></a>缓存检测</h3><p><strong>缓存处理是基于 HTTP 网络层进行优化的一个非常重要的手段</strong> 【针对资源文件请求】</p>
<p>强缓存还是协商缓存都是服务器设置的，客户端浏览器自己会根据返回的一些信息，进行相关处理，无需前端单独设置东西</p>
<p><strong>缓存位置：</strong></p>
<ul>
<li>Memory Cache : 内存缓存（页面没有关闭，只是刷新）</li>
<li>Disk Cache：硬盘缓存（页面关闭后重新打开）</li>
</ul>
<p>打开网页：查找硬盘缓存中是否有匹配，如有则使用，如没有则发送网络请求</p>
<p>普通刷新（F5）：因 TAB 没关闭，因此内存缓存是可用的，会被优先使用，其次才是硬盘缓存</p>
<p>强制刷新（Ctrl + F5）：浏览器不使用缓存，因此发送的请求头均带有 <code>Cache-Control: no-cache</code>，服务器直接返回 200 和最新内容</p>
<p><strong>强缓存：</strong>  <code>Expires / Cache-Control</code></p>
<blockquote>
<p>Expires：缓存过期时间，用来指定资源到期的事件（HTTP/1.0）</p>
<p>Cache-Control：<code>cache-control: public, max-age=2592000</code> 第一次拿到资源后的 2592000 秒内（30 天），再次发生请求，读取缓存中的信息（HTTP/1.1）</p>
</blockquote>
<ul>
<li>如果获取的是强缓存信息，HTTP 状态码是 <strong>200</strong></li>
<li>如果是从服务器成功重新获取，HTTP 状态码也是 <strong>200</strong></li>
</ul>
<p>问题：本地缓存了文件，但是服务对应的资源文件更新了，如何保证获取的是最新的内容？</p>
<ol>
<li>所有请求的资源文件（css / js / 图片）后面都带一个时间戳</li>
<li>每一次资源的更新，基于 webpack 生成不同的资源名称（HASH 值）</li>
</ol>
<p>所以 HTML 永远不会做强缓存，资源文件一般会使用 强缓存+协商缓存</p>
<p><strong>协商缓存：</strong> <code>Last-Modified / ETag</code></p>
<blockquote>
<p>Last-Modified：记录服务器资源文件最后一次更新的时间（HTTP/1.0）请求头： <code>If-Modified-Since</code></p>
<p>ETag：只要服务器资源文件改变，会生成一个不同的标识（HTTP/1.1）请求头： <code>If-None-Match</code></p>
</blockquote>
<p>当强缓存失效（不存在）【html 可以做协商缓存】，会校验协商缓存，每一次都会向服务器校验资源是否更新</p>
<ul>
<li>如果没有更新，返回 <strong>304</strong> 通知客户端读取缓存信息，从本地缓存中获取内容进行渲染</li>
<li>如果有更新，返回 <strong>200</strong> 及最新资源信息，直接渲染，并把最新的 Last-Modified / ETag 和最新的资源信息缓存到本地</li>
</ul>
<p><strong>数据缓存：</strong></p>
<p>没有缓存数据，从服务器拉取最新数据；有缓存数据，直接读取缓存数据【减少和服务器之间的交互频率，降低服务器压力，也可以提高页面的渲染速度】</p>
<ul>
<li>页面不刷新，某些内容频繁操作，但是数据不是需要实时更新，可以做缓存【不经常更新的数据】</li>
<li>页面只要不关闭，直接读取缓存，如果页面关闭，重新打开我们也可以读取缓存中的数据【数据更新频率更低，可以设置过期时间】</li>
</ul>
<p>客户端存储数据的方案：</p>
<ol>
<li>（全局）变量存储【vuex / redux】：页面刷新或关闭后打开，之前存储的数据都没有（内存释放）</li>
<li>cookie</li>
<li>webStorage：LocalStorage SessionStorage</li>
<li>IndexedDB 浏览器数据库存储</li>
<li>Cache</li>
<li>Manifest 离线存储</li>
</ol>
<p><strong>LocalStorage V.S. SessionStorage</strong></p>
<ul>
<li>LocalStorage 持久化本地存储（没有过期时间），页面关闭存储内容也是存在的，除非用户手动清除 <code>removeItem clear</code></li>
<li>SessionStorage 会话存储，页面关闭后，存储的信息会消息【页面刷新不消失】</li>
</ul>
<p><strong>Cookie V.S. LocalStorage</strong></p>
<ul>
<li><p>Cookie 只允许一个源下最多存储 4KB 内容，所以不能存储太多的数据</p>
<p>本地存储的数据是由同源访问限制的，只允许读取本源下存储的内容</p>
</li>
<li><p>LocalStorage 可以在同源下存储 5MB 内容</p>
<br>
</li>
<li><p>Cookie 需要设置过期时间，超过时间就失效，并且有路径限制</p>
</li>
<li><p>LocalStorage 持久化存储，没有过期时间，除非手动清除</p>
<br>
</li>
<li><p>Cookie 不稳定</p>
<p>基于安全卫士或浏览器自带的清除操作，会把 Cookie 删除掉，开启无痕浏览，不能存储 Cookie</p>
</li>
<li><p>LocalStorage 不受这些操作影响</p>
<br>
</li>
<li><p>Cookie 兼容低版本浏览器</p>
</li>
<li><p>LocalStorage HTML5 新增的 API【不兼容 IE8 以下浏览器】</p>
<br>
</li>
<li><p>Cookie 不算严格本地存储</p>
<p>客户端向服务器发送请求，会默认把本地的 Cookie 基于请求头发送给服务器，并且服务器返回的响应头中有 Set-Cookie 字段，浏览器会默认把这些信息种在客户端本地中</p>
</li>
<li><p>LocalStorage 严格本地存储，默认情况下和服务器没有任何关系</p>
</li>
</ul>
<p>想要基于 ajax 获取数据，必须要保证当前页面的运行是在 http/https 协议下，file 文件协议不行</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getData</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">    xhr.open(<span class="string">&#x27;get&#x27;</span>, <span class="string">&#x27;./data.json&#x27;</span>)</span><br><span class="line">    xhr.onreadystatechange = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (xhr.status === <span class="number">200</span> &amp;&amp; xhr.readyState === <span class="number">4</span>) &#123;</span><br><span class="line">        resolve(<span class="built_in">JSON</span>.parse(xhr.responseText))</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    xhr.send()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">;(<span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> cache_data = <span class="built_in">localStorage</span>.getItem(<span class="string">&#x27;cache-data&#x27;</span>)</span><br><span class="line">  <span class="keyword">if</span> (cache_data) &#123;</span><br><span class="line">    cache_data = <span class="built_in">JSON</span>.parse(cache_data)</span><br><span class="line">    <span class="keyword">if</span> (+<span class="keyword">new</span> <span class="built_in">Date</span>() - cache_data.time &lt;= <span class="number">10000</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> result = <span class="keyword">await</span> getData()</span><br><span class="line">  <span class="built_in">localStorage</span>.setItem(</span><br><span class="line">    <span class="string">&#x27;cache-data&#x27;</span>,</span><br><span class="line">    <span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">      time: +<span class="keyword">new</span> <span class="built_in">Date</span>(),</span><br><span class="line">      data: result,</span><br><span class="line">    &#125;)</span><br><span class="line">  )</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure>

<h3 id="DNS-解析"><a href="#DNS-解析" class="headerlink" title="DNS 解析"></a>DNS 解析</h3><ul>
<li>递归查询</li>
</ul>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/company-img/DNS%E8%A7%A3%E6%9E%90-%E9%80%92%E5%BD%92%E6%9F%A5%E8%AF%A2.jpg"></p>
<ul>
<li>迭代查询</li>
</ul>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/company-img/DNS%E8%A7%A3%E6%9E%90-%E8%BF%AD%E4%BB%A3%E6%9F%A5%E8%AF%A2.jpg"></p>
<p>多服务器部署</p>
<ul>
<li>弊端：增加了 DNS 解析次数</li>
<li>优势：资源合理利用、抗压能力增强、提高 HTTP 并发性【同源并发 HTTP 5~7 个】</li>
</ul>
<p>每一次 DNS 解析时间预计在 20~120 毫秒</p>
<ul>
<li>减少 DNS 请求次数</li>
<li>DNS 预获取（DNS Prefetch）</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;meta http-equiv=<span class="string">&quot;x-dns-prefetch-control&quot;</span> content=<span class="string">&quot;on&quot;</span>&gt;</span><br><span class="line">&lt;link rel=<span class="string">&quot;dns-prefetch&quot;</span> href=<span class="string">&quot;//static.360buyimg.com&quot;</span>/&gt;</span><br></pre></td></tr></table></figure>

<h3 id="TCP-三次握手"><a href="#TCP-三次握手" class="headerlink" title="TCP 三次握手"></a>TCP 三次握手</h3><ul>
<li>seq 序号，用来标识从 TCP 源端向目的端发送的字节流，发起方发送数据时对此进行标记</li>
<li>ack 确认序号，只有 ACK 标识为 1 时，确认序号字段才有效，ack=seq+1</li>
<li>标识位<ul>
<li>ACK：确认序号有效（acknowledge）</li>
<li>RST：重置连接 （reset）</li>
<li>SYN：发起一个新连接（synchronous）</li>
<li>FIN：释放一个新连接（finish）</li>
<li>seq：序号（sequence）</li>
</ul>
</li>
</ul>
<p><img data-src="https://img-blog.csdnimg.cn/20200430211404285.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4Njg5Mzk1,size_16,color_FFFFFF,t_70#pic_center" alt="三次握手"></p>
<p>TCP 三次握手通俗理解，C→S：在不在，S→C：我在你在不在，C→S：我在</p>
<p><strong>三次握手为什么不用两次或四次？</strong></p>
<ul>
<li>TCP 作为一种可靠传输控制协议，其核心思想： <strong>既要保证数据可靠传输，又要提高传输的效率</strong></li>
<li>两次握手只能保证客户端给服务器端的信息收到了，不能保证服务端给客户端的信息收到了（不够稳定）</li>
<li>四次握手就多余了，因为服务端已经知道客户端收到信息了，再给客户端发信息就没有意义了</li>
</ul>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/company-img/OSI%20TCP.png"></p>
<p>UDP(User Datagram Protocol) 连接没有三次握手机制</p>
<ol>
<li>相对于 TCP 来讲快</li>
<li>不稳定可靠</li>
</ol>
<h3 id="数据传输"><a href="#数据传输" class="headerlink" title="数据传输"></a>数据传输</h3><p>HTTP 报文</p>
<ul>
<li>请求报文</li>
<li>响应报文</li>
</ul>
<p>响应状态码</p>
<ul>
<li>200 OK：请求已成功</li>
<li>202 Accepted：服务器已接受请求，但尚未处理（异步）</li>
<li>204 No Content：服务器成功处理了请求，但不需要返回任何实体内容</li>
<li>301 Moved Permanently：永久重定向</li>
<li>302 Move Temporarily：临时重定向</li>
<li>304 Not Modified：文档内容没有改变，走协商缓存</li>
<li>400 Bad Request : 请求参数有误</li>
<li>401 Unauthorized：请求需要权限验证</li>
<li>404 Not Found：请求失败，服务器没有这个资源</li>
<li>405 Method Not Allowed：请求方法不能由于请求相应资源</li>
<li>500 Internal Server Error：服务器未知错误</li>
<li>502 Bad Gateway：网关有误</li>
<li>503 Service Unavailable：服务器维护或过载，无法处理请求</li>
</ul>
<h3 id="TCP-四次挥手"><a href="#TCP-四次挥手" class="headerlink" title="TCP 四次挥手"></a>TCP 四次挥手</h3><p>服务受到信息和标识后</p>
<ol>
<li>准备客户端需要的东西【需要时间】</li>
<li>把信息返回给客户端</li>
</ol>
<p>但是为了保证消息的及时反馈，此时需要立即告诉客户端：我收到你的东西了，我现在开始准备等我一会</p>
<p><img data-src="https://img-blog.csdnimg.cn/20200430211431423.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4Njg5Mzk1,size_16,color_FFFFFF,t_70#pic_center" alt="四次握手"></p>
<p>TCP 四次挥手通俗理解，C→S：我要走了，S→C：等下，我看看还有没有数据要传输，C→S：好了，没事了，挂了吧（已经挂了），C→S：挂了</p>
<p><strong>为什么连接的时候是三次握手，关闭的时候却是四次挥手？</strong></p>
<ul>
<li>服务端收到客户端的 SYN 连接请求，可以直接发送 SYN+ACK 报文</li>
<li>但关闭连接时，当服务器收到 FIN 报文时，很可能并不会立即关闭连接，所以只能先回复以一个 ACK 报文，告诉客户端：你发的 FIN 报文我收到了，只有等到服务端所有的报文都发送完了，才能发送 FIN 报文，因此不能一起发送，故需要四次握手</li>
</ul>
<p><strong>为了减少 TCP 握手和挥手的时间，一般都使用 <code>Connection: keep-alive</code></strong></p>
<p>数据请求：</p>
<ul>
<li>长轮询：设置定时器，每隔多久发送一次请求，拿到最新数据</li>
<li>长连接：如果数据没有更新则连接不中断（服务器挂起），监听数据改变</li>
</ul>
<h3 id="页面渲染"><a href="#页面渲染" class="headerlink" title="页面渲染"></a>页面渲染</h3><h2 id="性能优化汇总"><a href="#性能优化汇总" class="headerlink" title="性能优化汇总"></a>性能优化汇总</h2><ol>
<li><p>利用缓存</p>
<ul>
<li>对于静态资源文件实现强缓存和协商缓存（扩展：文件有更新，如何保证及时刷新？）</li>
<li>对于不经常更新的接口数据采用本地存储做数据缓存（扩展：cookie / localStorage / vuex|redux 区别？）</li>
</ul>
</li>
<li><p>DNS 优化</p>
<ul>
<li>分服务器部署，增加 HTTP 并发性（导致 DNS 解析变慢）</li>
<li>DNS Prefetch</li>
</ul>
</li>
<li><p>TCP 的三次握手和四次挥手</p>
<ul>
<li>Connection: keep-alive</li>
</ul>
</li>
<li><p>数据传输</p>
<ul>
<li><p>减少数据传输的大小</p>
<p>内容或者数据压缩（webpack 等）</p>
<p>服务器端一定要开启 GZIP 压缩（一般能压缩 60%左右）</p>
<p>大批量数据分批次请求（例如：下拉刷新或者分页，保证首次加载请求数据少）</p>
</li>
<li><p>减少 HTTP 请求的次数</p>
<p>资源文件合并处理</p>
<p>字体图标</p>
<p>雪碧图 CSS-Sprit</p>
<p>图片的 BASE64</p>
</li>
</ul>
</li>
<li><p>CDN 服务器“地域分布式“</p>
</li>
<li><p>采用 HTTP2.0</p>
</li>
</ol>
<p>网络优化是前端性能优化的中的重点内容，因为大部分的消耗都发生在网络层，尤其是第一次页面加载，如何减少等待时间很重要“减少白屏的效果和时间”</p>
<ul>
<li>loading 人性化体验</li>
<li>骨架屏：客户端骨屏 + 服务器骨架屏</li>
<li>图片延迟加载</li>
</ul>
<h2 id="HTTP1-0-VS-HTTP1-1-VS-HTTP2-0"><a href="#HTTP1-0-VS-HTTP1-1-VS-HTTP2-0" class="headerlink" title="HTTP1.0 VS HTTP1.1 VS HTTP2.0"></a>HTTP1.0 VS HTTP1.1 VS HTTP2.0</h2><h3 id="HTTP1-0-VS-HTTP1-1-区别："><a href="#HTTP1-0-VS-HTTP1-1-区别：" class="headerlink" title="HTTP1.0 VS HTTP1.1 区别："></a>HTTP1.0 VS HTTP1.1 区别：</h3><ul>
<li><strong>缓存处理：</strong> HTTP1.0 中主要使用 Last-Modified、Expires 来做缓存判断标准，HTTP1.1 则引入了更多的缓存控制策略：ETag、Cache-Control…</li>
<li><strong>带宽优化及网络连接的使用：</strong> HTTP1.1 支持断点续传，即返回码是 206（Partial Content）</li>
<li><strong>长连接：</strong> HTTP1.1 中默认开启 <code>Connection: keep-alive</code>，一定程度上弥补了 HTTP1.0 每次请求都要创建连接的缺点</li>
<li><strong>错误通知的管理：</strong> 在 HTTP1.1 中新增了 24 个错误状态响应码，如 409（Conflict）表示请求的资源与资源的当前状态发生冲突；410（Gone）表示服务器上的某个资源被永久性的删除…</li>
<li><strong>Host 头处理：</strong> 在 HTTP1.0 中认为每台服务器都绑定一个唯一的 IP 地址，因此，请求消息中的 URL 并没有传递主机名（hostname）。但随着虚拟主机技术的发展，在一台物理服务器上可以存在多个虚拟主机（Multi-homed Web Servers），并且它们共享一个 IP 地址。HTTP1.1 的请求消息和响应消息都应支持 Host 头域，且请求消息中如果没有 Host 头域会报告一个错误（400 Bad Request）</li>
</ul>
<h3 id="HTTP2-0-VS-HTTP1-x-的新特性："><a href="#HTTP2-0-VS-HTTP1-x-的新特性：" class="headerlink" title="HTTP2.0 VS HTTP1.x 的新特性："></a>HTTP2.0 VS HTTP1.x 的新特性：</h3><ul>
<li><p><strong>新的二进制格式（Binary Format）：</strong> HTTP1.x 的解析是基于文本，基于文本协议的格式解析存在天然缺陷，文本的表现形式有多样性，要做到健壮性考虑的场景必然很多，二进制则不同，只认 0 和 1 的组合，基于这种考虑 HTTP2.0 的协议解析决定采用二进制格式，实现方便且健壮</p>
</li>
<li><p><strong>header 压缩：</strong> HTTP1.x 的 header 带有大量信息，而且每次都要重复发送，HTTP2.0 使用 encoder 来减少需要传输的 header 大小，通讯双方各自 cache 一份 header fields 表，既避免了重复 header 的传输，又减小了需要传输的大小</p>
</li>
<li><p><strong>服务端推送（server push）：</strong> 例如我的网页有一个 sytle.css 的请求，在客户端收到 sytle.css 数据的同时，服务端会将 sytle.js 的文件推送给客户端，当客户端再次尝试获取 sytle.js 时就可以直接从缓存中获取到，不用再发请求了</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">Link: <span class="tag">&lt;/<span class="name">styles.css</span>&gt;</span>; rel=preload; as=style, <span class="tag">&lt;/<span class="name">example.png</span>&gt;</span>; rel=preload; as=image</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>多路复用（MultiPlexing）</strong></p>
<p>HTTP/1.0 每次请求响应，建立一个 TCP 连接，用完关闭</p>
<p>HTTP/1.1 「长连接」 若干个请求排队串行化单线程处理，后面的请求等待前面请求的返回才能获得执行机会，一旦有某请求超时等，后续请求只能被阻塞，毫无办法，也就是人们常说的线头阻塞；</p>
<p>HTTP/2.0 「多路复用」多个请求可同时在一个连接上并行执行，某个请求任务耗时严重，不会影响到其它连接的正常执行；</p>
</li>
</ul>
]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>HTTP网络层</tag>
        <tag>优化</tag>
        <tag>HTTP通信</tag>
      </tags>
  </entry>
  <entry>
    <title>Canvas 学习（时钟 绘图板）</title>
    <url>/posts/453bf97e/</url>
    <content><![CDATA[<h2 id="canvas画圆"><a href="#canvas画圆" class="headerlink" title="canvas画圆"></a>canvas画圆</h2><ul>
<li>为什么需要用canvas，如果用<code>onmousemove</code>，每一次移动都会进行DOM重绘，非常消耗性能，这时我们需要看一下 canvas</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;canvas&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    canvas.onmousemove = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> div = <span class="built_in">document</span>.createElement(<span class="string">&quot;div&quot;</span>);</span></span><br><span class="line"><span class="javascript">        div.style.position = <span class="string">&quot;absolute&quot;</span>;</span></span><br><span class="line"><span class="javascript">        div.style.left = e.clientX + <span class="string">&quot;px&quot;</span>;</span></span><br><span class="line"><span class="javascript">        div.style.top = e.clientY + <span class="string">&quot;px&quot;</span>;</span></span><br><span class="line"><span class="javascript">        div.style.width = <span class="string">&quot;6px&quot;</span>;</span></span><br><span class="line"><span class="javascript">        div.style.height = <span class="string">&quot;6px&quot;</span>;</span></span><br><span class="line"><span class="javascript">        div.style.marginLeft = <span class="string">&quot;-3px&quot;</span>;</span></span><br><span class="line"><span class="javascript">        div.style.marginRight = <span class="string">&quot;-3px&quot;</span>;</span></span><br><span class="line"><span class="javascript">        div.style.borderRadius = <span class="string">&quot;50%&quot;</span>;</span></span><br><span class="line"><span class="javascript">        div.style.backgroundColor = <span class="string">&quot;black&quot;</span>;</span></span><br><span class="line">        canvas.appendChild(div);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>我们现在已经给 canvas 设置一屏宽高，但还是出现滚动条，原因是 canvas 是 inline 元素，设置宽高不起作用，所以需要把它转换成块级元素（<strong>不要这样做，这样做会拉伸元素</strong>）</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">&quot;canvas&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-id">#canvas</span> &#123;</span></span><br><span class="line">        height: 100vh;</span><br><span class="line">        width: 100vw;</span><br><span class="line">        border: 1px solid red;</span><br><span class="line"><span class="css">        <span class="comment">/* display: block; */</span></span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>&lt;canvas&gt;</code> 标签只有两个属性<strong>——</strong> <code>width</code>和<code>height</code>，可以使用 JS 设置canvas 宽高，这里不能直接给 canvas 设置 <code>height: 100vh;</code> <code>width: 100vw;</code> </li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">&quot;canvas&quot;</span>);</span><br><span class="line">canvas.width = <span class="built_in">document</span>.documentElement.clientWidth;</span><br><span class="line">canvas.height = <span class="built_in">document</span>.documentElement.clientHeight;</span><br></pre></td></tr></table></figure>

<ul>
<li>canvas画圆</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> painting = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">let</span> ctx = canvas.getContext(<span class="string">&quot;2d&quot;</span>);</span><br><span class="line">ctx.fillStyle = <span class="string">&quot;black&quot;</span>;</span><br><span class="line">ctx.strokeStyle = <span class="string">&quot;none&quot;</span>;</span><br><span class="line"></span><br><span class="line">canvas.onmousedown = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    painting = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">canvas.onmousemove = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (painting === <span class="literal">true</span>) &#123;</span><br><span class="line">        ctx.beginPath();</span><br><span class="line">        ctx.arc(e.clientX, e.clientY, <span class="number">10</span>, <span class="number">0</span>, <span class="number">2</span> * <span class="built_in">Math</span>.PI);</span><br><span class="line">        ctx.stroke();</span><br><span class="line">        ctx.fill()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">canvas.onmouseup = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    painting = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Canvas"><a href="#Canvas" class="headerlink" title="Canvas"></a>Canvas</h2><h3 id="颜色、样式和阴影"><a href="#颜色、样式和阴影" class="headerlink" title="颜色、样式和阴影"></a>颜色、样式和阴影</h3><table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://www.w3school.com.cn/tags/canvas_fillstyle.asp">fillStyle</a></td>
<td>设置或返回用于填充绘画的颜色、渐变或模式</td>
</tr>
<tr>
<td><a href="https://www.w3school.com.cn/tags/canvas_strokestyle.asp">strokeStyle</a></td>
<td>设置或返回用于笔触的颜色、渐变或模式</td>
</tr>
<tr>
<td><a href="https://www.w3school.com.cn/tags/canvas_shadowcolor.asp">shadowColor</a></td>
<td>设置或返回用于阴影的颜色</td>
</tr>
<tr>
<td><a href="https://www.w3school.com.cn/tags/canvas_shadowblur.asp">shadowBlur</a></td>
<td>设置或返回用于阴影的模糊级别</td>
</tr>
<tr>
<td><a href="https://www.w3school.com.cn/tags/canvas_shadowoffsetx.asp">shadowOffsetX</a></td>
<td>设置或返回阴影距形状的水平距离</td>
</tr>
<tr>
<td><a href="https://www.w3school.com.cn/tags/canvas_shadowoffsety.asp">shadowOffsetY</a></td>
<td>设置或返回阴影距形状的垂直距离</td>
</tr>
</tbody></table>
<h3 id="线条样式"><a href="#线条样式" class="headerlink" title="线条样式"></a>线条样式</h3><table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://www.w3school.com.cn/tags/canvas_linecap.asp">lineCap</a></td>
<td>设置或返回线条的结束端点样式</td>
</tr>
<tr>
<td><a href="https://www.w3school.com.cn/tags/canvas_linejoin.asp">lineJoin</a></td>
<td>设置或返回两条线相交时，所创建的拐角类型</td>
</tr>
<tr>
<td><a href="https://www.w3school.com.cn/tags/canvas_linewidth.asp">lineWidth</a></td>
<td>设置或返回当前的线条宽度</td>
</tr>
<tr>
<td><a href="https://www.w3school.com.cn/tags/canvas_miterlimit.asp">miterLimit</a></td>
<td>设置或返回最大斜接长度</td>
</tr>
</tbody></table>
<h3 id="矩形"><a href="#矩形" class="headerlink" title="矩形"></a>矩形</h3><table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://www.w3school.com.cn/tags/canvas_rect.asp">rect()</a></td>
<td>创建矩形</td>
</tr>
<tr>
<td><a href="https://www.w3school.com.cn/tags/canvas_fillrect.asp">fillRect()</a></td>
<td>绘制“被填充”的矩形</td>
</tr>
<tr>
<td><a href="https://www.w3school.com.cn/tags/canvas_strokerect.asp">strokeRect()</a></td>
<td>绘制矩形（无填充）</td>
</tr>
<tr>
<td><a href="https://www.w3school.com.cn/tags/canvas_clearrect.asp">clearRect()</a></td>
<td>在给定的矩形内清除指定的像素</td>
</tr>
</tbody></table>
<h3 id="路径"><a href="#路径" class="headerlink" title="路径"></a>路径</h3><table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://www.w3school.com.cn/tags/canvas_fill.asp">fill()</a></td>
<td>填充当前绘图（路径）</td>
</tr>
<tr>
<td><a href="https://www.w3school.com.cn/tags/canvas_stroke.asp">stroke()</a></td>
<td>绘制已定义的路径</td>
</tr>
<tr>
<td><a href="https://www.w3school.com.cn/tags/canvas_beginpath.asp">beginPath()</a></td>
<td>起始一条路径，或重置当前路径</td>
</tr>
<tr>
<td><a href="https://www.w3school.com.cn/tags/canvas_moveto.asp">moveTo()</a></td>
<td>把路径移动到画布中的指定点，不创建线条</td>
</tr>
<tr>
<td><a href="https://www.w3school.com.cn/tags/canvas_closepath.asp">closePath()</a></td>
<td>创建从当前点回到起始点的路径</td>
</tr>
<tr>
<td><a href="https://www.w3school.com.cn/tags/canvas_lineto.asp">lineTo()</a></td>
<td>添加一个新点，然后在画布中创建从该点到最后指定点的线条</td>
</tr>
<tr>
<td><a href="https://www.w3school.com.cn/tags/canvas_clip.asp">clip()</a></td>
<td>从原始画布剪切任意形状和尺寸的区域</td>
</tr>
<tr>
<td><a href="https://www.w3school.com.cn/tags/canvas_quadraticcurveto.asp">quadraticCurveTo()</a></td>
<td>创建二次贝塞尔曲线</td>
</tr>
<tr>
<td><a href="https://www.w3school.com.cn/tags/canvas_beziercurveto.asp">bezierCurveTo()</a></td>
<td>创建三次方贝塞尔曲线</td>
</tr>
<tr>
<td><a href="https://www.w3school.com.cn/tags/canvas_arc.asp">arc()</a></td>
<td>创建弧/曲线（用于创建圆形或部分圆）</td>
</tr>
<tr>
<td><a href="https://www.w3school.com.cn/tags/canvas_arcto.asp">arcTo()</a></td>
<td>创建两切线之间的弧/曲线</td>
</tr>
<tr>
<td><a href="https://www.w3school.com.cn/tags/canvas_ispointinpath.asp">isPointInPath()</a></td>
<td>如果指定的点位于当前路径中，则返回 true，否则返回 false</td>
</tr>
</tbody></table>
<h3 id="转换"><a href="#转换" class="headerlink" title="转换"></a>转换</h3><table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://www.w3school.com.cn/tags/canvas_scale.asp">scale()</a></td>
<td>缩放当前绘图至更大或更小</td>
</tr>
<tr>
<td><a href="https://www.w3school.com.cn/tags/canvas_rotate.asp">rotate()</a></td>
<td>旋转当前绘图</td>
</tr>
<tr>
<td><a href="https://www.w3school.com.cn/tags/canvas_translate.asp">translate()</a></td>
<td>重新映射画布上的 (0,0) 位置</td>
</tr>
<tr>
<td><a href="https://www.w3school.com.cn/tags/canvas_transform.asp">transform()</a></td>
<td>替换绘图的当前转换矩阵</td>
</tr>
<tr>
<td><a href="https://www.w3school.com.cn/tags/canvas_settransform.asp">setTransform()</a></td>
<td>将当前转换重置为单位矩阵。然后运行 transform()</td>
</tr>
</tbody></table>
<h3 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h3><table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://www.w3school.com.cn/tags/canvas_font.asp">font</a></td>
<td>设置或返回文本内容的当前字体属性</td>
</tr>
<tr>
<td><a href="https://www.w3school.com.cn/tags/canvas_textalign.asp">textAlign</a></td>
<td>设置或返回文本内容的当前对齐方式</td>
</tr>
<tr>
<td><a href="https://www.w3school.com.cn/tags/canvas_textbaseline.asp">textBaseline</a></td>
<td>设置或返回在绘制文本时使用的当前文本基线</td>
</tr>
</tbody></table>
<h3 id="图像绘制"><a href="#图像绘制" class="headerlink" title="图像绘制"></a>图像绘制</h3><table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://www.w3school.com.cn/tags/canvas_drawimage.asp">drawImage()</a></td>
<td>向画布上绘制图像、画布或视频</td>
</tr>
</tbody></table>
<h3 id="像素操作"><a href="#像素操作" class="headerlink" title="像素操作"></a>像素操作</h3><table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>width</td>
<td>返回 ImageData 对象的宽度</td>
</tr>
<tr>
<td>height</td>
<td>返回 ImageData 对象的高度</td>
</tr>
<tr>
<td>data</td>
<td>返回一个对象，其包含指定的 ImageData 对象的图像数据</td>
</tr>
</tbody></table>
<h2 id="Canvas练习"><a href="#Canvas练习" class="headerlink" title="Canvas练习"></a>Canvas练习</h2><h3 id="绘制圆形和文本"><a href="#绘制圆形和文本" class="headerlink" title="绘制圆形和文本"></a>绘制圆形和文本</h3><ul>
<li>绘制线段</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ctx.beginPath();</span><br><span class="line"><span class="comment">// 设置绘制的起始点</span></span><br><span class="line">ctx.moveTo(<span class="number">50</span>, <span class="number">50</span>);</span><br><span class="line"><span class="comment">// 设置经过某个位置</span></span><br><span class="line">ctx.lineTo(<span class="number">50</span>, <span class="number">300</span>);</span><br><span class="line">ctx.lineTo(<span class="number">300</span>, <span class="number">100</span>);</span><br><span class="line"><span class="comment">// 设置绘制的结束点</span></span><br><span class="line">ctx.closePath();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 起始路径的线段边缘设置为圆角</span></span><br><span class="line">ctx.lineCap = <span class="string">&quot;round&quot;</span>;</span><br><span class="line"><span class="comment">// 转折处的线段设置为圆角</span></span><br><span class="line">ctx.lineJoin = <span class="string">&quot;round&quot;</span></span><br><span class="line"><span class="comment">// 设置颜色样式</span></span><br><span class="line">ctx.strokeStyle = <span class="string">&quot;aqua&quot;</span>;</span><br><span class="line">ctx.lineWidth = <span class="number">20</span>;</span><br><span class="line">ctx.stroke()</span><br></pre></td></tr></table></figure>

<ul>
<li>绘制圆</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 默认为false，顺时针，true逆时针</span></span><br><span class="line"><span class="comment">// ctx,arc(x, y, radius, startAngle, endAngle, anticlockwise)</span></span><br><span class="line">ctx.arc(<span class="number">300</span>, <span class="number">300</span>, <span class="number">100</span>, <span class="number">0</span>, <span class="number">2</span> * <span class="built_in">Math</span>.PI, <span class="literal">true</span>);</span><br><span class="line">ctx.fillStyle = <span class="string">&quot;bisque&quot;</span>;</span><br><span class="line">ctx.fill();</span><br><span class="line">ctx.stroke();</span><br></pre></td></tr></table></figure>

<ul>
<li>弹幕字体</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ctx.font = <span class="string">&quot;50px sans-serif&quot;</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="number">1200</span>;</span><br><span class="line"><span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    ctx.clearRect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">1200</span>, <span class="number">1200</span>);</span><br><span class="line">    x -= <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">if</span> (x &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        x = <span class="number">1200</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ctx.fillText(<span class="string">&quot;hello&quot;</span>, x, <span class="number">100</span>);</span><br><span class="line">    ctx.strokeText(<span class="string">&quot;world&quot;</span>, x, <span class="number">200</span>);</span><br><span class="line">&#125;, <span class="number">40</span>)</span><br></pre></td></tr></table></figure>

<h3 id="绘制图形"><a href="#绘制图形" class="headerlink" title="绘制图形"></a>绘制图形</h3><ul>
<li>绘制图像（同一图片）</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> img = <span class="keyword">new</span> Image();</span><br><span class="line">img.src = <span class="string">&quot;./imgs/2.jpg&quot;</span>;</span><br><span class="line">img.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    ctx.drawImage(img, <span class="number">50</span>, <span class="number">100</span>, <span class="number">480</span>, <span class="number">270</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> img2 = <span class="keyword">new</span> Image();</span><br><span class="line">img2.src = <span class="string">&quot;./imgs/3.jpg&quot;</span>;</span><br><span class="line">img2.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    ctx.drawImage(img2, <span class="number">400</span>, <span class="number">400</span>, <span class="number">480</span>, <span class="number">270</span>, <span class="number">100</span>, <span class="number">400</span>, <span class="number">480</span>, <span class="number">270</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>绘制图像（视频抽帧）</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> video = <span class="built_in">document</span>.querySelector(<span class="string">&quot;video&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> interval = <span class="literal">null</span>;</span><br><span class="line">video.onplay = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    interval = <span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        ctx.drawImage(video, <span class="number">0</span>, <span class="number">800</span>, <span class="number">800</span>, <span class="number">400</span>)</span><br><span class="line">    &#125;, <span class="number">32</span>)</span><br><span class="line">&#125;</span><br><span class="line">video.onpause = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">clearInterval</span>(interval);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="绘制时钟"><a href="#绘制时钟" class="headerlink" title="绘制时钟"></a>绘制时钟</h2><p>ES6版本参考这个（附带效果）：<a href="https://github.com/llwodexue/clock">https://github.com/llwodexue/clock</a></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> canvas1 = <span class="built_in">document</span>.querySelector(<span class="string">&quot;#canvas1&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> ctx = canvas1.getContext(<span class="string">&quot;2d&quot;</span>);</span><br><span class="line">ctx.clearRect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">800</span>, <span class="number">600</span>);</span><br><span class="line">ctx.save();</span><br><span class="line">ctx.translate(<span class="number">400</span>, <span class="number">300</span>);</span><br><span class="line">ctx.rotate(-<span class="built_in">Math</span>.PI / <span class="number">2</span>);</span><br><span class="line"><span class="comment">// 绘制表盘</span></span><br><span class="line">ctx.beginPath();</span><br><span class="line">ctx.arc(<span class="number">0</span>, <span class="number">0</span>, <span class="number">200</span>, <span class="number">0</span>, <span class="number">2</span> * <span class="built_in">Math</span>.PI);</span><br><span class="line">ctx.strokeStyle = <span class="string">&quot;darkgrey&quot;</span>;</span><br><span class="line">ctx.lineWidth = <span class="number">10</span>;</span><br><span class="line">ctx.stroke();</span><br><span class="line">ctx.closePath();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">renderClock</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    ctx.clearRect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">800</span>, <span class="number">600</span>);</span><br><span class="line">    ctx.save();</span><br><span class="line">    ctx.translate(<span class="number">400</span>, <span class="number">300</span>);</span><br><span class="line">    ctx.rotate(-<span class="built_in">Math</span>.PI / <span class="number">2</span>);</span><br><span class="line">    <span class="comment">// 绘制表盘</span></span><br><span class="line">    ctx.beginPath();</span><br><span class="line">    ctx.arc(<span class="number">0</span>, <span class="number">0</span>, <span class="number">200</span>, <span class="number">0</span>, <span class="number">2</span> * <span class="built_in">Math</span>.PI);</span><br><span class="line">    ctx.strokeStyle = <span class="string">&quot;darkgrey&quot;</span>;</span><br><span class="line">    ctx.lineWidth = <span class="number">10</span>;</span><br><span class="line">    ctx.stroke();</span><br><span class="line">    ctx.closePath();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">drawLine</span>(<span class="params">&#123; count, start, end, width, color &#125;</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (; i &lt; count; i++) &#123;</span><br><span class="line">            ctx.beginPath();</span><br><span class="line">            ctx.rotate((<span class="number">2</span> * <span class="built_in">Math</span>.PI) / count);</span><br><span class="line">            ctx.moveTo(start, <span class="number">0</span>);</span><br><span class="line">            ctx.lineTo(end, <span class="number">0</span>);</span><br><span class="line">            ctx.lineWidth = width;</span><br><span class="line">            ctx.strokeStyle = color;</span><br><span class="line">            ctx.stroke();</span><br><span class="line">            ctx.closePath();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 绘制分针刻度线</span></span><br><span class="line">    drawLine(&#123;</span><br><span class="line">        count: <span class="number">60</span>,</span><br><span class="line">        start: <span class="number">180</span>,</span><br><span class="line">        end: <span class="number">190</span>,</span><br><span class="line">        width: <span class="number">2</span>,</span><br><span class="line">        color: <span class="string">&quot;orangered&quot;</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 绘制时针刻度线</span></span><br><span class="line">    drawLine(&#123;</span><br><span class="line">        count: <span class="number">12</span>,</span><br><span class="line">        start: <span class="number">180</span>,</span><br><span class="line">        end: <span class="number">200</span>,</span><br><span class="line">        width: <span class="number">10</span>,</span><br><span class="line">        color: <span class="string">&quot;darkgrey&quot;</span>,</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> time = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    <span class="keyword">let</span> min = time.getMinutes();</span><br><span class="line">    <span class="keyword">let</span> sec = time.getSeconds();</span><br><span class="line">    <span class="keyword">let</span> hour = time.getHours();</span><br><span class="line">    hour = hour &gt; <span class="number">12</span> ? hour - <span class="number">12</span> : hour;</span><br><span class="line">    <span class="comment">// 绘制秒针</span></span><br><span class="line">    ctx.save();</span><br><span class="line">    ctx.beginPath();</span><br><span class="line">    ctx.rotate(((<span class="number">2</span> * <span class="built_in">Math</span>.PI) / <span class="number">60</span>) * sec);</span><br><span class="line">    ctx.moveTo(-<span class="number">30</span>, <span class="number">0</span>);</span><br><span class="line">    ctx.lineTo(<span class="number">170</span>, <span class="number">0</span>);</span><br><span class="line">    ctx.lineWidth = <span class="number">2</span>;</span><br><span class="line">    ctx.strokeStyle = <span class="string">&quot;red&quot;</span>;</span><br><span class="line">    ctx.stroke();</span><br><span class="line">    ctx.closePath();</span><br><span class="line">    ctx.restore();</span><br><span class="line">    <span class="comment">// 绘制分针</span></span><br><span class="line">    ctx.save();</span><br><span class="line">    ctx.beginPath();</span><br><span class="line">    ctx.rotate(((<span class="number">2</span> * <span class="built_in">Math</span>.PI) / <span class="number">60</span>) * min + ((<span class="number">2</span> * <span class="built_in">Math</span>.PI) / <span class="number">3600</span>) * sec);</span><br><span class="line">    ctx.moveTo(-<span class="number">20</span>, <span class="number">0</span>);</span><br><span class="line">    ctx.lineTo(<span class="number">150</span>, <span class="number">0</span>);</span><br><span class="line">    ctx.lineWidth = <span class="number">4</span>;</span><br><span class="line">    ctx.strokeStyle = <span class="string">&quot;darkblue&quot;</span>;</span><br><span class="line">    ctx.stroke();</span><br><span class="line">    ctx.closePath();</span><br><span class="line">    ctx.restore();</span><br><span class="line">    <span class="comment">// 绘制时针</span></span><br><span class="line">    ctx.save();</span><br><span class="line">    ctx.beginPath();</span><br><span class="line">    ctx.rotate(</span><br><span class="line">        ((<span class="number">2</span> * <span class="built_in">Math</span>.PI) / <span class="number">12</span>) * hour +</span><br><span class="line">            ((<span class="number">2</span> * <span class="built_in">Math</span>.PI) / <span class="number">12</span> / <span class="number">60</span>) * min +</span><br><span class="line">            ((<span class="number">2</span> * <span class="built_in">Math</span>.PI) / <span class="number">12</span> / <span class="number">60</span> / <span class="number">60</span>) * sec</span><br><span class="line">    );</span><br><span class="line">    ctx.moveTo(-<span class="number">10</span>, <span class="number">0</span>);</span><br><span class="line">    ctx.lineTo(<span class="number">130</span>, <span class="number">0</span>);</span><br><span class="line">    ctx.lineWidth = <span class="number">6</span>;</span><br><span class="line">    ctx.strokeStyle = <span class="string">&quot;darkgrey&quot;</span>;</span><br><span class="line">    ctx.stroke();</span><br><span class="line">    ctx.closePath();</span><br><span class="line">    ctx.restore();</span><br><span class="line">    <span class="comment">// 绘制表圈</span></span><br><span class="line">    ctx.beginPath();</span><br><span class="line">    ctx.arc(<span class="number">0</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">2</span> * <span class="built_in">Math</span>.PI);</span><br><span class="line">    ctx.fillStyle = <span class="string">&quot;deepskyblue&quot;</span>;</span><br><span class="line">    ctx.fill();</span><br><span class="line">    ctx.closePath();</span><br><span class="line">    ctx.restore();</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    renderClock();</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure>

<h2 id="Canvas-绘图板"><a href="#Canvas-绘图板" class="headerlink" title="Canvas 绘图板"></a>Canvas 绘图板</h2><p>绘图板参考（附带效果）： <a href="https://github.com/llwodexue/canvas_painting">https://github.com/llwodexue/canvas_painting</a></p>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/company-img/%E7%BB%98%E5%9B%BE%E6%9D%BF.gif"></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.jianshu.com/p/266b4fa2c446">Fira Code | 为写程序而生的字体</a></p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Canvas_API/Tutorial">Canvas教程</a></p>
<p><a href="https://stackoverflow.com/questions/3974827/detecting-touch-screen-devices-with-javascript">Detecting touch screen devices with Javascript</a></p>
<p><a href="https://www.w3school.com.cn/tags/html_ref_canvas.asp">HTML 5 Canvas 参考手册</a></p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Canvas</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 实现 sizeOf 函数，计算 object 占用了多少个 bytes</title>
    <url>/posts/9cad4e3f/</url>
    <content><![CDATA[<h2 id="实现-sizeOf-函数，传入一个-object，计算这个-Object-占用了多少个-bytes"><a href="#实现-sizeOf-函数，传入一个-object，计算这个-Object-占用了多少个-bytes" class="headerlink" title="实现 sizeOf 函数，传入一个 object，计算这个 Object 占用了多少个 bytes"></a>实现 sizeOf 函数，传入一个 object，计算这个 Object 占用了多少个 bytes</h2><p>可以参考：<a href="https://github.com/miktam/sizeof">https://github.com/miktam/sizeof</a></p>
<ul>
<li>Number：一个数字 8 字节（64 位存储）</li>
<li>String：一个字符 2 字节</li>
<li>Boolean：4 个字节</li>
</ul>
<a id="more"></a>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> same = &#123;&#125;</span><br><span class="line"><span class="keyword">const</span> testData = &#123;</span><br><span class="line">  a: <span class="number">111</span>,</span><br><span class="line">  b: <span class="string">&#x27;ccc&#x27;</span>,</span><br><span class="line">  <span class="number">222</span>: <span class="literal">false</span>,</span><br><span class="line">  c: same,</span><br><span class="line">  d: same,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> seen = <span class="keyword">new</span> <span class="built_in">WeakSet</span>()</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sizeOfObj</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (obj === <span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> bytes = <span class="number">0</span></span><br><span class="line">  <span class="comment">// 对象里的key也是占用内存空间的</span></span><br><span class="line">  <span class="keyword">const</span> props = <span class="built_in">Object</span>.keys(obj)</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; props.length; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> key = props[i]</span><br><span class="line">    <span class="comment">// 无论value是否重复，都需要计算key</span></span><br><span class="line">    bytes += calculator(key)</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> obj[key] === <span class="string">&#x27;object&#x27;</span> &amp;&amp; obj[key] !== <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="comment">// 这里需要注意value使用相同内存空间（只需计算一次内存）</span></span><br><span class="line">      <span class="keyword">if</span> (seen.has(obj[key])) <span class="keyword">continue</span></span><br><span class="line">      seen.add(obj[key])</span><br><span class="line">    &#125;</span><br><span class="line">    bytes += calculator(obj[key])</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> bytes</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">calculator</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> objType = <span class="keyword">typeof</span> obj</span><br><span class="line">  <span class="keyword">switch</span> (objType) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;string&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> obj.length * <span class="number">2</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;boolean&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="number">4</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;number&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="number">8</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;object&#x27;</span>:</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(obj)) &#123;</span><br><span class="line">        <span class="comment">// 数组处理 [1,2] [&#123;x:1&#125;,&#123;y:2&#125;]</span></span><br><span class="line">        <span class="keyword">return</span> obj.map(calculator).reduce(<span class="function">(<span class="params">res, cur</span>) =&gt;</span> res + cur, <span class="number">0</span>)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 对象处理</span></span><br><span class="line">        <span class="keyword">return</span> sizeOfObj(obj)</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(calculator(testData)) <span class="comment">// 32</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>字节数</tag>
        <tag>面试题</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue 大量数据展示卡顿解决方案（长列表优化）</title>
    <url>/posts/b05a9b29/</url>
    <content><![CDATA[<h2 id="需求分析（长列表展示）"><a href="#需求分析（长列表展示）" class="headerlink" title="需求分析（长列表展示）"></a>需求分析（长列表展示）</h2><p>页面某处需要渲染 <strong>1w+</strong> 条数据，并需要<strong>滚动展示</strong>，这时如果直接把这些数据渲染到页面上，会导致系统内存大量被占用，导致页面卡顿或崩溃</p>
<p>我们都知道，每次 DOM 修改，浏览器都会重新计算元素布局，再重新渲染（回流 / 重绘）。如果数据量很大，页面计算时间就会加成，造成页面卡顿</p>
<a id="more"></a>

<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><ul>
<li>根源：DOM 元素太多</li>
<li>思路：限制元素数量 / 虚拟DOM</li>
</ul>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/company-img/bigData.gif"></p>
<p>后台数据格式：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        checked: <span class="number">0</span>，</span><br><span class="line">        data: <span class="string">&quot;xxx&quot;</span>，</span><br><span class="line">        label: <span class="string">&quot;xxx&quot;</span>，</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>Vue 中就有一个现成的轮子可以解决这个问题：<a href="https://github.com/Akryum/vue-virtual-scroller#recyclescroller">vue-virtual-scroller</a></p>
<ol>
<li>安装 <code>vue-virtual-scroller</code> 插件</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save vue-virtual-scroller</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>在 <code>main.js</code> 引入</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 注意：别忘了引用这个css</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;vue-virtual-scroller/dist/vue-virtual-scroller.css&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; RecycleScroller &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-virtual-scroller&#x27;</span></span><br><span class="line"></span><br><span class="line">Vue.component(<span class="string">&#x27;RecycleScroller&#x27;</span>, RecycleScroller)</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>在组件里使用<ul>
<li><code>items</code>：呈现数据</li>
<li><code>item-size</code>：呈现数据的大小 / 高度</li>
<li><code>key-filed</code>：如果 <code>items</code> 是对象，需要用这个做唯一标识</li>
</ul>
</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;RecycleScroller</span><br><span class="line">  style=&quot;height: 200px; overflow: auto&quot;</span><br><span class="line">  class=&quot;scroller&quot;</span><br><span class="line">  :items=&quot;listItem&quot;</span><br><span class="line">  :item-size=&quot;20&quot;</span><br><span class="line">  key-field=&quot;data&quot;</span><br><span class="line">&gt;</span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot</span>=<span class="string">&quot;&#123; item &#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-checkbox</span> <span class="attr">:key</span>=<span class="string">&quot;item.data&quot;</span> <span class="attr">:label</span>=<span class="string">&quot;item.label&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">RecycleScroller</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">	<span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line">            listItem: []</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>使用  <code>vue-virtual-scroller</code> 插件展示大量数据，是可以比较流畅的渲染 / 滚动的</p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>滚动展示</tag>
        <tag>大数据</tag>
        <tag>长列表优化</tag>
      </tags>
  </entry>
  <entry>
    <title>Axios 二次封装</title>
    <url>/posts/84a23fec/</url>
    <content><![CDATA[<h2 id="Axios-二次封装"><a href="#Axios-二次封装" class="headerlink" title="Axios 二次封装"></a>Axios 二次封装</h2><blockquote>
<p>目的：把当前项目中，所有请求的公共部分进行统一处理</p>
</blockquote>
<ul>
<li><code>axios.defaults</code> 设置公共的配置项</li>
<li><code>axios.interceptors</code> 基于拦截器做统一处理</li>
</ul>
<a id="more"></a>

<p>配置请求接口的统一前缀</p>
<ul>
<li>开发 <code>development</code></li>
<li>测试 <code>test</code></li>
<li>灰度 <code>grayscale</code></li>
<li>生成 <code>production</code></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Qs <span class="keyword">from</span> <span class="string">&#x27;qs&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;@/router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; Message &#125; <span class="keyword">from</span> <span class="string">&#x27;element-ui&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Cookies <span class="keyword">from</span> <span class="string">&#x27;js-cookie&#x27;</span></span><br><span class="line"></span><br><span class="line">axios.defaults.baseURL =</span><br><span class="line">  process.env.NODE_ENV === <span class="string">&#x27;development&#x27;</span> ? <span class="string">&#x27;&#x27;</span> : <span class="string">&#x27;http://127.0.0.1:9999&#x27;</span></span><br><span class="line">axios.defaults.withCredentials = <span class="literal">true</span> <span class="comment">// 设置跨域请求中是否携带资源凭证</span></span><br><span class="line">axios.defaults.timeout = <span class="number">1000</span></span><br><span class="line">axios.defaults.headers.post[<span class="string">&#x27;Content-Type&#x27;</span>] =</span><br><span class="line">  <span class="string">&#x27;application/x-www-form-urlencoded;charset=UTF-8&#x27;</span> <span class="comment">// 配置公共的自定义请求头信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// POST系列请求对于请求主体信息的统一格式化</span></span><br><span class="line">axios.defaults.transformRequest = <span class="function"><span class="keyword">function</span> (<span class="params">data, headers</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (data === <span class="literal">null</span> || <span class="keyword">typeof</span> data !== <span class="string">&#x27;object&#x27;</span>) <span class="keyword">return</span> data</span><br><span class="line">  <span class="keyword">let</span> contentType = headers[<span class="string">&#x27;Content-Type&#x27;</span>] || headers.post[<span class="string">&#x27;Content-Type&#x27;</span>]</span><br><span class="line">  <span class="keyword">if</span> (contentType.includes(<span class="string">&#x27;urlencoded&#x27;</span>)) <span class="keyword">return</span> Qs.stringify(data)</span><br><span class="line">  <span class="keyword">if</span> (contentType.includes(<span class="string">&#x27;json&#x27;</span>)) <span class="keyword">return</span> <span class="built_in">JSON</span>.stringify(data)</span><br><span class="line">  <span class="keyword">return</span> data</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 设置响应状态码的校验处理&#123;状态码哪些是算请求成功，哪些算失败&#125;</span></span><br><span class="line">axios.defaults.validateStatus = <span class="function"><span class="keyword">function</span> (<span class="params">status</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> status &gt;= <span class="number">200</span> &amp;&amp; status &lt; <span class="number">400</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 请求拦截器，在向服务器发送请求之前，拦截到现有的配置，再去做一些统一修改</span></span><br><span class="line">axios.interceptors.request.use(</span><br><span class="line">  config =&gt; &#123;</span><br><span class="line">    <span class="comment">// 是否需要设置 token</span></span><br><span class="line">    <span class="keyword">const</span> token = Cookies.get(<span class="string">&#x27;token&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> (token) &#123;</span><br><span class="line">      config.headers[<span class="string">&#x27;Authorization&#x27;</span>] = token</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> config</span><br><span class="line">  &#125;,</span><br><span class="line">  error =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error) <span class="comment">// for debug</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 响应拦截器，当前请求有结果之后，做一些成功或者失败的统一提示处理等...</span></span><br><span class="line">axios.interceptors.response.use(</span><br><span class="line">  response =&gt; &#123;</span><br><span class="line">    <span class="comment">// 服务器正常返回结果 &amp; validateStatus状态码校验成功</span></span><br><span class="line">    <span class="keyword">return</span> response.data</span><br><span class="line">  &#125;,</span><br><span class="line">  error =&gt; &#123;</span><br><span class="line">    <span class="comment">// 取消请求也会在这里拦截到</span></span><br><span class="line">    <span class="keyword">if</span> (error.message === <span class="string">&#x27;取消请求&#x27;</span>) <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(<span class="string">&#x27;取消请求&#x27;</span>)</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    失败情况：</span></span><br><span class="line"><span class="comment">    1.服务器返回了结果但是状态码没有经过validateStatus校验</span></span><br><span class="line"><span class="comment">    2.服务器压根没有返回任何的结果</span></span><br><span class="line"><span class="comment">    3.请求中断或者超时</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">let</span> response = error.response</span><br><span class="line">    <span class="keyword">if</span> (response) &#123;</span><br><span class="line">      <span class="comment">// @1</span></span><br><span class="line">      <span class="keyword">switch</span> (response.status) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">401</span>:</span><br><span class="line">          router.push(&#123; <span class="attr">path</span>: <span class="string">&#x27;/login&#x27;</span> &#125;)</span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">500</span>:</span><br><span class="line">          router.push(&#123; <span class="attr">path</span>: <span class="string">&#x27;/login&#x27;</span> &#125;)</span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">      &#125;</span><br><span class="line">      Message(&#123;</span><br><span class="line">        message: <span class="string">&#x27;访问失败，请联系系统管理员&#x27;</span>,</span><br><span class="line">        type: <span class="string">&#x27;warning&#x27;</span>,</span><br><span class="line">        duration: <span class="number">3</span> * <span class="number">1000</span>,</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (error &amp;&amp; error.code === <span class="string">&#x27;ECONNABORTED&#x27;</span>) &#123;</span><br><span class="line">        Message(&#123;</span><br><span class="line">          message: <span class="string">&#x27;服务器拒绝了您的请求&#x27;</span>,</span><br><span class="line">          type: <span class="string">&#x27;warning&#x27;</span>,</span><br><span class="line">          duration: <span class="number">3</span> * <span class="number">1000</span>,</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (!navigator.onLine) &#123;</span><br><span class="line">        Message(&#123;</span><br><span class="line">          message: <span class="string">&#x27;设备已离线&#x27;</span>,</span><br><span class="line">          type: <span class="string">&#x27;warning&#x27;</span>,</span><br><span class="line">          duration: <span class="number">3</span> * <span class="number">1000</span>,</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> axios</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>Axios</tag>
        <tag>封装</tag>
      </tags>
  </entry>
  <entry>
    <title>手撕React.createElement和ReactDOM.render</title>
    <url>/posts/7e319c36/</url>
    <content><![CDATA[<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install create-react-app -g</span><br><span class="line">create-react-app demo</span><br><span class="line"><span class="built_in">cd</span> demo</span><br><span class="line">yarn start</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<ul>
<li>这时已经新建好了一个 react 项目，接下来 index.js 写入如下代码</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">console.log(</span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">&quot;h1&quot;</span> <span class="attr">className</span>=<span class="string">&quot;title&quot;</span> <span class="attr">key</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">    hello world</span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">color:</span> &#x27;<span class="attr">red</span>&#x27; &#125;&#125;&gt;</span>cat<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<ul>
<li>如下对象就是一个 React 对象，也就是虚拟 DOM</li>
</ul>
<p><img data-src="https://img-blog.csdnimg.cn/img_convert/723b629d0e10b5bd476871bed912c40b.png" alt="虚拟dom对象示例"></p>
<ul>
<li>接下来我们打开<a href="https://www.babeljs.cn/repl">babel 官网</a>，勾选 <code>react</code> ，粘贴上去。通过 babel 把 jsx 对象转换成 React 中的 createElement 函数</li>
</ul>
<p><img data-src="https://img-blog.csdnimg.cn/img_convert/c9c1436f832951ebbe63cb587d77585f.png" alt="babel_react"></p>
<ul>
<li>在项目中写入如下代码</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">&#x27;react-dom&#x27;</span></span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;h1 id=<span class="string">&quot;h1&quot;</span> className=<span class="string">&quot;title&quot;</span> key=<span class="string">&quot;1&quot;</span>&gt;</span><br><span class="line">    hello world</span><br><span class="line">    &lt;span style=&#123;&#123; <span class="attr">color</span>: <span class="string">&#x27;red&#x27;</span> &#125;&#125;&gt;cat&lt;/span&gt;</span><br><span class="line">  &lt;/h1&gt;,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<ul>
<li>效果图如下：</li>
</ul>
<p><img data-src="https://img-blog.csdnimg.cn/img_convert/1e643e0830b8155a555ee3261eed6a4a.png" alt="渲染示例"></p>
<p><strong>过程：</strong></p>
<ol>
<li>通过 babel（babel-preset-react-app）转换成 jsx 对象</li>
<li>默认会把 createElement 函数执行，得到 JSX 对象（虚拟 DOM 对象）<ul>
<li>第一个参数：type，后期要创建元素的标签名（或是组件）</li>
<li>第二个参数：props，属性对象，包含当前元素标签上设置的各个属性及属性值（不设置，props 值是 null）</li>
<li>第三个以后的参数：children，当前元素的所有子节点（没有写，则不存在这个参数），如果有，有几个就依次传递几个<ul>
<li>如果是文本节点，则直接传递文本内容</li>
<li>如果是元素节点，则把元素依次变为 createElement 格式，把执行的返回值，作为参数传递进来</li>
</ul>
</li>
</ul>
</li>
<li>ReactDOM.render，把虚拟 DOM 对象转换为真实 DOM 对象</li>
</ol>
<h2 id="React-中-createElement-函数"><a href="#React-中-createElement-函数" class="headerlink" title="React 中 createElement 函数"></a>React 中 createElement 函数</h2><p><strong>React.createElement 返回值</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  $$typeof: <span class="built_in">Symbol</span>(react.element),</span><br><span class="line">  key: <span class="literal">null</span>,</span><br><span class="line">  ref: <span class="literal">null</span>,</span><br><span class="line">  <span class="comment">// 存储的是传递给createElement的第一个参数</span></span><br><span class="line">  type: <span class="string">&#x27;h1&#x27;</span>,</span><br><span class="line">  <span class="comment">// 首先会把传递给createElement的属性对象，一项项的赋值给对象的props</span></span><br><span class="line">  props: &#123;</span><br><span class="line">    <span class="comment">// 并且返回对象的prop还包含children，记录当前元素的子节点（可能是一个值&#123;字符串或JSX返回的对象&#125;，如果有多个子节点，则其是一个数组）</span></span><br><span class="line">    children: <span class="string">&#x27;hello world&#x27;</span>,</span><br><span class="line">    className: <span class="string">&#x27;title&#x27;</span>,</span><br><span class="line">    id: <span class="string">&#x27;title&#x27;</span>,</span><br><span class="line">  &#125;, <span class="comment">// 即使没有传递任何属性，也没有任何的子节点，返回对象的props也是一个&#123;&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>这里需要注意，key 和 ref 虽然都在 props 里，但是这两个不在 props 里添加，而与 props 同级</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">React.createElement = <span class="function"><span class="keyword">function</span> <span class="title">createElement</span>(<span class="params">type, props, ...children</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> len = children.length,</span><br><span class="line">    obj = &#123;</span><br><span class="line">      type,</span><br><span class="line">      props: &#123;&#125;,</span><br><span class="line">      key: <span class="literal">null</span>,</span><br><span class="line">      ref: <span class="literal">null</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">// 处理传递进来的属性</span></span><br><span class="line">  <span class="keyword">if</span> (props !== <span class="literal">null</span> &amp;&amp; <span class="keyword">typeof</span> props === <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">    each(props, <span class="function">(<span class="params">value, key</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="regexp">/^(key|ref)$/</span>.test(key)) &#123;</span><br><span class="line">        obj[key] = value[key]</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      obj.props[key] = value[key]</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// for in 循环性能较差</span></span><br><span class="line">    <span class="comment">/* for (let key in props) &#123;</span></span><br><span class="line"><span class="comment">      if (!props.hasOwnProperty(key)) break</span></span><br><span class="line"><span class="comment">      if (/^(key|ref)$/.test(key)) &#123;</span></span><br><span class="line"><span class="comment">        obj[key] = props[key]</span></span><br><span class="line"><span class="comment">        continue</span></span><br><span class="line"><span class="comment">      &#125;</span></span><br><span class="line"><span class="comment">      obj.props[key] = props[key]</span></span><br><span class="line"><span class="comment">    &#125; */</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 处理子节点</span></span><br><span class="line">  <span class="keyword">if</span> (len &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    obj.props.children = len === <span class="number">1</span> ? children[<span class="number">0</span>] : children</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> obj</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>由于 <code>for...in...</code> 循环性能较差，这里稍微优化一下（封装一个 each 方法）</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> each = <span class="function"><span class="keyword">function</span> <span class="title">each</span>(<span class="params">obj, callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (obj == <span class="literal">null</span> || <span class="keyword">typeof</span> obj !== <span class="string">&#x27;object&#x27;</span>)</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">&#x27;obj must be an object&#x27;</span>)</span><br><span class="line">  <span class="keyword">let</span> keys = <span class="built_in">Object</span>.keys(obj),</span><br><span class="line">    key,</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">Symbol</span> !== <span class="string">&#x27;undefined&#x27;</span>) &#123;</span><br><span class="line">    keys = keys.concat(<span class="built_in">Object</span>.getOwnPropertySymbols(obj))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (; i &lt; keys.length; i++) &#123;</span><br><span class="line">    key = keys[i]</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> callback === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">      callback(obj[key], key)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="ReactDOM-中-render-函数"><a href="#ReactDOM-中-render-函数" class="headerlink" title="ReactDOM 中 render 函数"></a>ReactDOM 中 render 函数</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ReactDOM.render = <span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params">obj, container, callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> &#123; type, props &#125; = obj,</span><br><span class="line">    element</span><br><span class="line">  <span class="comment">// 核心思想：动态创建指定类型的元素，插入到指定容器当中</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> type === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">    element = <span class="built_in">document</span>.createElement(type)</span><br><span class="line">    each(props, <span class="function">(<span class="params">value, key</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (key === <span class="string">&#x27;className&#x27;</span>) &#123;</span><br><span class="line">        element.setAttribute(<span class="string">&#x27;class&#x27;</span>, value)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (key === <span class="string">&#x27;style&#x27;</span>) &#123;</span><br><span class="line">        <span class="comment">// 把style对象中的每一项分别给元素设置样式 value:style对象</span></span><br><span class="line">        each(value, <span class="function">(<span class="params">item, attr</span>) =&gt;</span> &#123;</span><br><span class="line">          element.style[attr] = item</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (key === <span class="string">&#x27;children&#x27;</span>) &#123;</span><br><span class="line">        <span class="comment">// 肯定有子节点 value:children属性值</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">Array</span>.isArray(value)) value = [value] <span class="comment">// 让它都是数组</span></span><br><span class="line">        value.forEach(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="comment">// item每个子节点</span></span><br><span class="line">          <span class="comment">// 1.文本子节点：直接创建一个文本节点，插入到element中</span></span><br><span class="line">          <span class="comment">// 2.元素子节点：新的jsx对象（createElement），我们需要把它也创建成为一个元素标签，插入到element中即可</span></span><br><span class="line">          <span class="keyword">if</span> (<span class="keyword">typeof</span> item === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> textNode = <span class="built_in">document</span>.createTextNode(item)</span><br><span class="line">            element.appendChild(textNode)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">// 递归处理</span></span><br><span class="line">          render(item, element)</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      element.setAttribute(key, value)</span><br><span class="line">    &#125;)</span><br><span class="line">    container.appendChild(element)</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> callback === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">      callback()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 如果type是一个组件，有不同的处理方案</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>源码分析</tag>
        <tag>React</tag>
        <tag>createElement</tag>
        <tag>render</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue+Element 国际化(i18n)页面全覆盖（路由、表单检验、弹出框等）</title>
    <url>/posts/82482c19/</url>
    <content><![CDATA[<h1 id="安装-i18n"><a href="#安装-i18n" class="headerlink" title="安装 i18n"></a>安装 i18n</h1><p><code>internationalization</code> 这个单词中，i 和 n 之间有 18 个字母</p>
<a id="more"></a>

<p><strong>注意：</strong> 当前 i18n 最新版本为 9 版本，9 版本没有 VueI18n，<code>import VueI18n from &#39;vue-i18n&#39;</code> 解构会报错 <code>Cannot read property &#39;install&#39; of undefined</code></p>
<ul>
<li>这里为了让 Element 兼容，安装的是 8 版本的</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install vue-i18n@8</span><br></pre></td></tr></table></figure>

<h1 id="基础配置篇"><a href="#基础配置篇" class="headerlink" title="基础配置篇"></a>基础配置篇</h1><h2 id="1-页面中使用国际化"><a href="#1-页面中使用国际化" class="headerlink" title="1.页面中使用国际化"></a>1.页面中使用国际化</h2><h3 id="i18n-文件夹下的-index-js-文件"><a href="#i18n-文件夹下的-index-js-文件" class="headerlink" title="* i18n 文件夹下的 index.js 文件"></a>* i18n 文件夹下的 index.js 文件</h3><blockquote>
<p><code>require.context</code></p>
<p>它允许传入一个目录进行搜索，一个标志指示是否应该搜索子目录，还有一个正则表达式来匹配文件</p>
<ul>
<li>第一个参数：<code>directory</code> 要搜索的文件夹目录不能是变量，否则在编译阶段无法定位目录</li>
<li>第二个参数：<code>useSubdirectories</code> 是否搜索子目录</li>
<li>第三个参数：<code>regExp</code> 匹配文件的正则表达式</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">require</span>.context(<span class="string">&#x27;demo&#x27;</span>, <span class="literal">false</span>, <span class="regexp">/\.js$/</span>)</span><br></pre></td></tr></table></figure>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* i18n/index.js */</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> VueI18n <span class="keyword">from</span> <span class="string">&#x27;vue-i18n&#x27;</span></span><br><span class="line"></span><br><span class="line">Vue.use(VueI18n)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> langFiles = <span class="built_in">require</span>.context(<span class="string">&#x27;./config&#x27;</span>, <span class="literal">false</span>, <span class="regexp">/\.js$/</span>)</span><br><span class="line"><span class="keyword">const</span> regExp = <span class="regexp">/\.\/([^\.\/]+)\.([^\.]+)$/</span></span><br><span class="line"><span class="keyword">const</span> messages = &#123;&#125;</span><br><span class="line"><span class="keyword">const</span> lang = &#123;</span><br><span class="line">  zh: zhCNLocale,</span><br><span class="line">  zhTW: zhTWLocale,</span><br><span class="line">  en: enLocale</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 默认语言</span></span><br><span class="line"><span class="keyword">const</span> loadLanguage = <span class="string">&#x27;zh&#x27;</span></span><br><span class="line"></span><br><span class="line">langFiles.keys().forEach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">  messages[k] = langFiles(key).default</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getLanguage</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 第一次进入页面或手动清除设置默认语言</span></span><br><span class="line">  <span class="built_in">localStorage</span>.getItem(<span class="string">&#x27;lang&#x27;</span>) ? <span class="literal">null</span> : <span class="built_in">localStorage</span>.setItem(<span class="string">&#x27;lang&#x27;</span>, loadLanguage)</span><br><span class="line">  <span class="keyword">let</span> locale = <span class="built_in">localStorage</span>.getItem(<span class="string">&#x27;lang&#x27;</span>)</span><br><span class="line">  <span class="keyword">if</span> (!(locale <span class="keyword">in</span> messages)) locale = loadLanguage</span><br><span class="line">  <span class="keyword">return</span> locale</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> i18n = <span class="keyword">new</span> VueI18n(&#123;</span><br><span class="line">  locale: getLanguage(),</span><br><span class="line">  messages</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> i18n</span><br></pre></td></tr></table></figure>

<ul>
<li>messages 对象</li>
</ul>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/js-img/%E5%9B%BD%E9%99%85%E5%8C%96%E8%AF%AD%E8%A8%80%E6%96%87%E4%BB%B6.jpg"></p>
<h3 id="main-js-引入"><a href="#main-js-引入" class="headerlink" title="main.js 引入"></a>main.js 引入</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* main.js */</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> i18n <span class="keyword">from</span> <span class="string">&#x27;./i18n&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App),</span><br><span class="line">  i18n</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="展示页面"><a href="#展示页面" class="headerlink" title="展示页面"></a>展示页面</h3><p>效果图如下：</p>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/company-img/%E5%88%87%E6%8D%A2%E8%AF%AD%E8%A8%80.gif"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    &lt;el-dropdown</span><br><span class="line">      trigger=&quot;click&quot;</span><br><span class="line">      class=&quot;international&quot;</span><br><span class="line">      @command=&quot;handleSetLanguage&quot;</span><br><span class="line">    &gt;</span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;el-icon-s-tools&quot;</span> /&gt;</span>切换语言<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-dropdown-menu</span> <span class="attr">slot</span>=<span class="string">&quot;dropdown&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-dropdown-item</span> <span class="attr">:disabled</span>=<span class="string">&quot;language === &#x27;zh&#x27;&quot;</span> <span class="attr">command</span>=<span class="string">&quot;zh&quot;</span>&gt;</span></span><br><span class="line">          中文</span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-dropdown-item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-dropdown-item</span> <span class="attr">:disabled</span>=<span class="string">&quot;language === &#x27;en&#x27;&quot;</span> <span class="attr">command</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">          English</span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-dropdown-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-dropdown-menu</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-dropdown</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-table</span> <span class="attr">:data</span>=<span class="string">&quot;tableData&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 100%&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;date&quot;</span> <span class="attr">:label</span>=<span class="string">&quot;$t(&#x27;table.date&#x27;)&quot;</span> <span class="attr">width</span>=<span class="string">&quot;180&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;name&quot;</span> <span class="attr">:label</span>=<span class="string">&quot;$t(&#x27;table.name&#x27;)&quot;</span> <span class="attr">width</span>=<span class="string">&quot;180&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;age&quot;</span> <span class="attr">:label</span>=<span class="string">&quot;$t(&#x27;table.age&#x27;)&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line">      tableData: [</span><br><span class="line">        &#123;</span><br><span class="line"><span class="javascript">          date: <span class="string">&#x27;2016-05-02&#x27;</span>,</span></span><br><span class="line"><span class="javascript">          name: <span class="string">&#x27;王小虎&#x27;</span>,</span></span><br><span class="line"><span class="javascript">          age: <span class="string">&#x27;23&#x27;</span></span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line"><span class="javascript">          date: <span class="string">&#x27;2016-05-04&#x27;</span>,</span></span><br><span class="line"><span class="javascript">          name: <span class="string">&#x27;李小鸭&#x27;</span>,</span></span><br><span class="line"><span class="javascript">          age: <span class="string">&#x27;14&#x27;</span></span></span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line"><span class="javascript">      language: <span class="built_in">localStorage</span>.getItem(<span class="string">&#x27;lang&#x27;</span>)</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">handleSetLanguage</span>(<span class="params">lang</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.$i18n.locale = lang</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.language = lang</span></span><br><span class="line"><span class="javascript">      <span class="built_in">localStorage</span>.setItem(<span class="string">&#x27;lang&#x27;</span>, lang)</span></span><br><span class="line"><span class="javascript">      <span class="comment">// window.location.reload()</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="语言配置文件"><a href="#语言配置文件" class="headerlink" title="语言配置文件"></a>语言配置文件</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* en.js */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  table: &#123;</span><br><span class="line">    date: <span class="string">&#x27;Date&#x27;</span>,</span><br><span class="line">    name: <span class="string">&#x27;Name&#x27;</span>,</span><br><span class="line">    age: <span class="string">&#x27;Age&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* zh.js */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  table: &#123;</span><br><span class="line">    date: <span class="string">&#x27;日期&#x27;</span>,</span><br><span class="line">    name: <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">    age: <span class="string">&#x27;年龄&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="英文首字母大写"><a href="#英文首字母大写" class="headerlink" title="英文首字母大写"></a>英文首字母大写</h3><p>英文情况下，需要对其进行大小写转换处理（让每个单词首字母大写）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> k <span class="keyword">in</span> langs) &#123;</span><br><span class="line">  <span class="keyword">const</span> item = langs[k]</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> j <span class="keyword">in</span> item) &#123;</span><br><span class="line">    item[j] = item[j].toLowerCase().replace(<span class="regexp">/( |^)[a-z]/g</span>, <span class="function"><span class="params">L</span> =&gt;</span> L.toUpperCase())</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-Element-国际化"><a href="#2-Element-国际化" class="headerlink" title="2.Element 国际化"></a>2.Element 国际化</h2><h3 id="main-js-引入-1"><a href="#main-js-引入-1" class="headerlink" title="main.js 引入"></a>main.js 引入</h3><ul>
<li>参考 <a href="https://element.eleme.cn/#/zh-CN/component/i18n#jian-rong-vue-i18n-6-x">兼容 <code>vue-i18n@6.x</code></a>  的步骤（需要手动处理）</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* main.js */</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> i18n <span class="keyword">from</span> <span class="string">&#x27;./i18n&#x27;</span></span><br><span class="line"><span class="keyword">import</span> ElementUI <span class="keyword">from</span> <span class="string">&#x27;element-ui&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;element-ui/lib/theme-chalk/index.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 8版本以上需要这么使用</span></span><br><span class="line">Vue.use(ElementUI, &#123;</span><br><span class="line">  i18n: <span class="function">(<span class="params">key, value</span>) =&gt;</span> i18n.t(key, value),</span><br><span class="line">  size: <span class="string">&#x27;mini&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App),</span><br><span class="line">  i18n</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="i18n-文件夹下的-index-js-文件-1"><a href="#i18n-文件夹下的-index-js-文件-1" class="headerlink" title="* i18n 文件夹下的 index.js 文件"></a>* i18n 文件夹下的 index.js 文件</h3><p>在 index.js 中使用 <code>Object.assign</code>  合并有一个好处：方便扩展（相对于在语言配置表引入使用扩展运算符）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* i18n/index.js */</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> VueI18n <span class="keyword">from</span> <span class="string">&#x27;vue-i18n&#x27;</span></span><br><span class="line"><span class="keyword">import</span> enLocale <span class="keyword">from</span> <span class="string">&#x27;element-ui/lib/locale/lang/en&#x27;</span></span><br><span class="line"><span class="keyword">import</span> zhCNLocale <span class="keyword">from</span> <span class="string">&#x27;element-ui/lib/locale/lang/zh-CN&#x27;</span></span><br><span class="line"><span class="keyword">import</span> zhTWLocale <span class="keyword">from</span> <span class="string">&#x27;element-ui/lib/locale/lang/zh-TW&#x27;</span></span><br><span class="line"></span><br><span class="line">Vue.use(VueI18n)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> langFiles = <span class="built_in">require</span>.context(<span class="string">&#x27;./config&#x27;</span>, <span class="literal">false</span>, <span class="regexp">/\.js$/</span>)</span><br><span class="line"><span class="keyword">const</span> regExp = <span class="regexp">/\.\/([^\.\/]+)\.([^\.]+)$/</span></span><br><span class="line"><span class="keyword">const</span> messages = &#123;&#125;</span><br><span class="line"><span class="keyword">const</span> lang = &#123;</span><br><span class="line">  zh: zhCNLocale,</span><br><span class="line">  zhTW: zhTWLocale,</span><br><span class="line">  en: enLocale</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 默认语言</span></span><br><span class="line"><span class="keyword">const</span> loadLanguage = <span class="string">&#x27;zh&#x27;</span></span><br><span class="line"></span><br><span class="line">langFiles.keys().forEach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> k = regExp.exec(key)[<span class="number">1</span>]</span><br><span class="line">  <span class="comment">// 合并Element国际化配置</span></span><br><span class="line">  messages[k] = <span class="built_in">Object</span>.assign(langFiles(key).default, lang[k])</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getLanguage</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 第一次进入页面或手动清除设置默认语言</span></span><br><span class="line">  <span class="built_in">localStorage</span>.getItem(<span class="string">&#x27;lang&#x27;</span>) ? <span class="literal">null</span> : <span class="built_in">localStorage</span>.setItem(<span class="string">&#x27;lang&#x27;</span>, loadLanguage)</span><br><span class="line">  <span class="keyword">let</span> locale = <span class="built_in">localStorage</span>.getItem(<span class="string">&#x27;lang&#x27;</span>)</span><br><span class="line">  <span class="keyword">if</span> (!(locale <span class="keyword">in</span> messages)) locale = loadLanguage</span><br><span class="line">  <span class="keyword">return</span> locale</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> i18n = <span class="keyword">new</span> VueI18n(&#123;</span><br><span class="line">  locale: getLanguage(),</span><br><span class="line">  messages</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> i18n</span><br></pre></td></tr></table></figure>

<p>到此为止，Element 和 页面国际化基本做完了，不过还有一些国际化难点，接下来说一下</p>
<h2 id="3-与vuex进行关联"><a href="#3-与vuex进行关联" class="headerlink" title="3.与vuex进行关联"></a>3.与vuex进行关联</h2><blockquote>
<p>参考：<a href="https://github.com/vueComponent/ant-design-vue-pro">ant-design-vue-pro</a></p>
</blockquote>
<ul>
<li>增加给 HTML 根节点增加 <code>lang</code> 属性</li>
<li>可以在 <code>loadLanguageAsync</code> 力作缓存语言设置，切换语言时懒加载对应语言，以提升性能</li>
<li>增加 <code>i18nRender</code> 方法</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* i18n/index.js */</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> VueI18n <span class="keyword">from</span> <span class="string">&#x27;vue-i18n&#x27;</span></span><br><span class="line"><span class="keyword">import</span> enLocale <span class="keyword">from</span> <span class="string">&#x27;element-ui/lib/locale/lang/en&#x27;</span></span><br><span class="line"><span class="keyword">import</span> zhCNLocale <span class="keyword">from</span> <span class="string">&#x27;element-ui/lib/locale/lang/zh-CN&#x27;</span></span><br><span class="line"><span class="keyword">import</span> zhTWLocale <span class="keyword">from</span> <span class="string">&#x27;element-ui/lib/locale/lang/zh-TW&#x27;</span></span><br><span class="line"></span><br><span class="line">Vue.use(VueI18n)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> langFiles = <span class="built_in">require</span>.context(<span class="string">&#x27;./config&#x27;</span>, <span class="literal">false</span>, <span class="regexp">/\.js$/</span>)</span><br><span class="line"><span class="keyword">const</span> regExp = <span class="regexp">/\.\/([^\.\/]+)\.([^\.]+)$/</span></span><br><span class="line"><span class="keyword">const</span> messages = &#123;&#125;</span><br><span class="line"><span class="keyword">const</span> lang = &#123;</span><br><span class="line">  zh: zhCNLocale,</span><br><span class="line">  zhTW: zhTWLocale,</span><br><span class="line">  en: enLocale</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 默认语言</span></span><br><span class="line"><span class="keyword">const</span> loadLanguage = <span class="string">&#x27;zh&#x27;</span></span><br><span class="line"></span><br><span class="line">langFiles.keys().forEach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> k = regExp.exec(key)[<span class="number">1</span>]</span><br><span class="line">  <span class="comment">// 合并Element国际化配置</span></span><br><span class="line">  messages[k] = <span class="built_in">Object</span>.assign(langFiles(key).default, lang[k])</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setI18nLanguage</span>(<span class="params">lang</span>) </span>&#123;</span><br><span class="line">  i18n.locale = lang</span><br><span class="line">  <span class="built_in">localStorage</span>.setItem(<span class="string">&#x27;lang&#x27;</span>, lang)</span><br><span class="line">  <span class="built_in">document</span>.querySelector(<span class="string">&#x27;html&#x27;</span>).setAttribute(<span class="string">&#x27;lang&#x27;</span>, lang)</span><br><span class="line">  <span class="keyword">return</span> lang</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> i18n = <span class="keyword">new</span> VueI18n(&#123;</span><br><span class="line">  silentTranslationWarn: <span class="literal">true</span>, <span class="comment">// 取消本地化失败时输出的警告</span></span><br><span class="line">  locale: getLanguage(), <span class="comment">// 语言环境</span></span><br><span class="line">  messages</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getLanguage</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 第一次进入页面或手动清除设置默认语言</span></span><br><span class="line">  <span class="built_in">localStorage</span>.getItem(<span class="string">&#x27;lang&#x27;</span>) ? <span class="literal">null</span> : <span class="built_in">localStorage</span>.setItem(<span class="string">&#x27;lang&#x27;</span>, loadLanguage)</span><br><span class="line">  <span class="keyword">let</span> locale = <span class="built_in">localStorage</span>.getItem(<span class="string">&#x27;lang&#x27;</span>)</span><br><span class="line">  <span class="keyword">if</span> (!(locale <span class="keyword">in</span> messages)) locale = loadLanguage</span><br><span class="line">  <span class="keyword">return</span> locale</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以在这里做动态加载国际化语言</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">loadLanguageAsync</span>(<span class="params">lang</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> resolve(setI18nLanguage(lang))</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">i18nRender</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> i18n.t(<span class="string">`<span class="subst">$&#123;key&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> i18n</span><br></pre></td></tr></table></figure>

<p>在 vuex 里增加 <code>state</code>、<code>mutation</code>、<code>actions</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* store/modules/app.js */</span></span><br><span class="line"><span class="keyword">import</span> &#123; loadLanguageAsync &#125; <span class="keyword">from</span> <span class="string">&#x27;@/i18n&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">  lang: <span class="string">&#x27;zh&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">  SET_LANG: <span class="function">(<span class="params">state, lang</span>) =&gt;</span> &#123;</span><br><span class="line">    state.lang = lang</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">  <span class="function"><span class="title">setLang</span>(<span class="params">&#123; commit &#125;, lang</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      commit(<span class="string">&#x27;SET_LANG&#x27;</span>, lang)</span><br><span class="line">      loadLanguageAsync(lang)</span><br><span class="line">        .then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          resolve()</span><br><span class="line">        &#125;)</span><br><span class="line">        .catch(<span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">          reject(e)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在 vuex 的 <code>getters</code> 里增加 lang</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* store/getters.js */</span></span><br><span class="line"><span class="keyword">const</span> getters = &#123;</span><br><span class="line">  lang: <span class="function"><span class="params">state</span> =&gt;</span> state.app.lang</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> getters</span><br></pre></td></tr></table></figure>

<p>在创建 Vue 实例时 <code>dispatch</code> 让 <code>state</code> 有 lang 的状态</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* main.js */</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;@/store&#x27;</span></span><br><span class="line"><span class="keyword">import</span> i18n <span class="keyword">from</span> <span class="string">&#x27;@/i18n&#x27;</span> </span><br><span class="line"><span class="keyword">import</span> &#123; getLanguage &#125; <span class="keyword">from</span> <span class="string">&#x27;@/i18n&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createdConfig</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  store.dispatch(<span class="string">&#x27;app/setLang&#x27;</span>, getLanguage())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  store,</span><br><span class="line">  i18n,</span><br><span class="line">  created: createdConfig,</span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>可以将修改语言抽成组件（这里只写 JS 部分）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mapState &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  computed: &#123;</span><br><span class="line">    ...mapState(&#123;</span><br><span class="line">      language: <span class="function"><span class="params">state</span> =&gt;</span> state.app.lang</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    <span class="function"><span class="title">handleSetLanguage</span>(<span class="params">lang</span>)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.$store.dispatch(<span class="string">&#x27;app/setLang&#x27;</span>, lang).then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">window</span>.location.reload()</span><br><span class="line">      &#125;).catch(<span class="function">() =&gt;</span> &#123;&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="路由导航篇"><a href="#路由导航篇" class="headerlink" title="路由导航篇"></a>路由导航篇</h1><p>这里有一些前端后端都可以处理，如果后端进行国际化处理，前端需要在请求拦截器里加 <code>Accept-Language</code> 请求头</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> service = axios.create(&#123;</span><br><span class="line">  baseURL: process.env.VUE_APP_BASE_API,</span><br><span class="line">  withCredentials: <span class="literal">true</span>,</span><br><span class="line">  timeout: <span class="number">5000</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">service.interceptors.request.use(</span><br><span class="line">  config =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> langConfig = &#123;</span><br><span class="line">      zh: <span class="string">&#x27;zh_CN&#x27;</span>,</span><br><span class="line">      en: <span class="string">&#x27;en_US&#x27;</span>,</span><br><span class="line">      zhTW: <span class="string">&#x27;zh_TW&#x27;</span>,</span><br><span class="line">      other: <span class="string">&#x27;other&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    config.headers[<span class="string">&#x27;Accept-Language&#x27;</span>] = langConfig[locale]</span><br><span class="line">    <span class="keyword">return</span> config</span><br><span class="line">  &#125;,</span><br><span class="line">  error =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> service</span><br></pre></td></tr></table></figure>

<h2 id="1-路由菜单国际化"><a href="#1-路由菜单国际化" class="headerlink" title="1.路由菜单国际化"></a>1.路由菜单国际化</h2><h3 id="使用-te-判断是否存在语言包内"><a href="#使用-te-判断是否存在语言包内" class="headerlink" title="* 使用 $te 判断是否存在语言包内"></a>* 使用 $te 判断是否存在语言包内</h3><ul>
<li><p>首先需要处理一下菜单名，如果这个名在语言配置文件中就直接返回，如果不在返回原信息中的菜单。这个可以后端进行国际化处理，如果想修改 <code>UPDATE</code> 数据库一下即可</p>
<p><code>$te</code> 这个方法用以判断需要翻译的 <code>key</code> 在你提供的 <code>语言包(messages)</code> 中是否存在</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* utils/get-page-title.js */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">routeTitle</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> name = <span class="string">`sidebar.<span class="subst">$&#123;item.path&#125;</span>`</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">this</span>.$te(name)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.$t(name)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> item.meta.title</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="展示页面-1"><a href="#展示页面-1" class="headerlink" title="展示页面"></a>展示页面</h3><p>把每一项传到处理菜单的方法中，这样路由菜单国际化基本完成了，如果有多级路由，基本同理</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in routesSystem&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">:index</span>=<span class="string">&quot;index.toString()&quot;</span>&gt;</span>&#123;&#123; routeTitle(item) &#125;&#125;<span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123; routeTitle &#125; <span class="keyword">from</span> <span class="string">&#x27;@/utils/get-page-title&#x27;</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">  methods: &#123;</span><br><span class="line"><span class="javascript">    routeTitle <span class="comment">// 声明一下</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="2-面包屑导航国际化"><a href="#2-面包屑导航国际化" class="headerlink" title="2.面包屑导航国际化"></a>2.面包屑导航国际化</h2><p>面包屑导航使用的是 <code>vue-element-admin</code> 的 Breadcrumb 组件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-breadcrumb</span> <span class="attr">class</span>=<span class="string">&quot;app-breadcrumb&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;/&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">transition-group</span> <span class="attr">name</span>=<span class="string">&quot;breadcrumb&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-breadcrumb-item</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in levelList&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.path&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-if</span>=<span class="string">&quot;item.redirect === &#x27;noRedirect&#x27; || index == levelList.length - 1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;no-redirect&quot;</span>&gt;</span>&#123;&#123; breadTitle(item) &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">v-else</span>&gt;</span>&#123;&#123; breadTitle(item) &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-breadcrumb-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">transition-group</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-breadcrumb</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123; breadTitle &#125; <span class="keyword">from</span> <span class="string">&#x27;@/utils/get-page-title&#x27;</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">  methods: &#123;</span><br><span class="line"><span class="javascript">    breadTitle <span class="comment">// 声明一下</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>可以通过 <code>/</code> 去判断它是几级路由；也可以在路由的 <code>meta</code> 中设定一个标识，判断这个标识即可</p>
<ul>
<li>三级路由场景：一、二级路由可以放在 <code>sidebar</code> 对象中，三级路由放在 <code>menu</code> 中（当然也可以都放在一个对象里）</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* utils/get-page-title.js */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">breadTitle</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">window</span>.indexConfig.afterTitle) <span class="keyword">return</span> item.meta.title</span><br><span class="line">  <span class="keyword">const</span> n = item.name || item.path.slice(<span class="number">1</span>)</span><br><span class="line">  <span class="keyword">let</span> name</span><br><span class="line">  <span class="keyword">if</span> (item.path.match(<span class="regexp">/\//g</span>).length !== <span class="number">3</span>) &#123;</span><br><span class="line">    name = <span class="string">`sidebar.<span class="subst">$&#123;n&#125;</span>`</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    name = <span class="string">`menu.<span class="subst">$&#123;n&#125;</span>`</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">this</span>.$te(name)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.$t(name)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> item.meta.title</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-导航守卫国际化"><a href="#3-导航守卫国际化" class="headerlink" title="3.导航守卫国际化"></a>3.导航守卫国际化</h2><p>因为导航守卫中拿不到 <code>this</code>，所以可以采用了一种取巧的方式。首先在 <code>router</code> 文件中引入 <code>i18n</code> 文件夹下的 <code>index.js</code>，之后直接取它的 <code>messages</code> 和 <code>locale</code> 即可拿到对应语言文件</p>
<ul>
<li>不过这样写会产生一个问题，就是切换语言无法实时更新，需要刷新状态</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* src/permission.js */</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router/index&#x27;</span></span><br><span class="line"><span class="keyword">import</span> i18n <span class="keyword">from</span> <span class="string">&#x27;@jp/i18n&#x27;</span></span><br><span class="line"><span class="keyword">import</span> modal <span class="keyword">from</span> <span class="string">&#x27;@jp/utils/modal&#x27;</span> <span class="comment">// 二次封装的弹出框</span></span><br><span class="line"><span class="keyword">import</span> NProgress <span class="keyword">from</span> <span class="string">&#x27;nprogress&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;nprogress/nprogress.css&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; getToken, removeCookies, removeToken &#125; <span class="keyword">from</span> <span class="string">&#x27;@/utils/auth&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; isDebugger &#125; <span class="keyword">from</span> <span class="string">&#x27;@/settings&#x27;</span> <span class="comment">// 也可以维护在store里</span></span><br><span class="line"></span><br><span class="line">NProgress.configure(&#123; <span class="attr">showSpinner</span>: <span class="literal">false</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> locale = i18n.locale</span><br><span class="line"><span class="keyword">const</span> msg = i18n.messages[locale]</span><br><span class="line"><span class="keyword">const</span> whiteList = [<span class="string">&#x27;/login&#x27;</span>]</span><br><span class="line"></span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  NProgress.start()</span><br><span class="line">  <span class="keyword">if</span> (getToken()) &#123;</span><br><span class="line">    <span class="built_in">document</span>.title = getPageTitle(to.meta.title)</span><br><span class="line">    <span class="keyword">if</span> (to.path === <span class="string">&#x27;/login&#x27;</span>) &#123;</span><br><span class="line">      next(&#123; <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span> &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// debugger下不获取用户权限</span></span><br><span class="line">      <span class="keyword">if</span> (isDebugger) &#123;</span><br><span class="line">        next()</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 设置动态路由，拉取user_info...</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (whiteList.includes(to.path)) &#123;</span><br><span class="line">      next()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      removeCookies()</span><br><span class="line">      modal.msgError(msg.info.tokenExpire) <span class="comment">// 弹出框国际化</span></span><br><span class="line">      next(&#123; <span class="attr">path</span>: <span class="string">&#x27;/login&#x27;</span> &#125;)</span><br><span class="line">      NProgress.done()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">router.afterEach(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  NProgress.done()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="4-render-函数展示文字"><a href="#4-render-函数展示文字" class="headerlink" title="4.render 函数展示文字"></a>4.render 函数展示文字</h2><p> <code>vue-element-admin</code> 里的 Item 组件，是采用 <code>render</code> 函数渲染的，这个一般</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- src/layout/components/Sidebar/Item.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123; childTitle &#125; <span class="keyword">from</span> <span class="string">&#x27;@/utils/get-page-title&#x27;</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  name: <span class="string">&#x27;MenuItem&#x27;</span>,</span></span><br><span class="line"><span class="javascript">  functional: <span class="literal">true</span>,</span></span><br><span class="line">  props: &#123;</span><br><span class="line">    icon: &#123;</span><br><span class="line"><span class="javascript">      type: <span class="built_in">String</span>,</span></span><br><span class="line"><span class="javascript">      <span class="keyword">default</span>: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line">    &#125;,</span><br><span class="line">    title: &#123;</span><br><span class="line"><span class="javascript">      type: <span class="built_in">String</span>,</span></span><br><span class="line"><span class="javascript">      <span class="keyword">default</span>: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line">    &#125;,</span><br><span class="line">    path: &#123;</span><br><span class="line"><span class="javascript">      type: <span class="built_in">String</span>,</span></span><br><span class="line"><span class="javascript">      <span class="keyword">default</span>: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">render</span>(<span class="params">h, context</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> &#123; icon, title &#125; = context.props</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> vnodes = []</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">if</span> (icon) &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (icon.includes(<span class="string">&#x27;el-icon&#x27;</span>)) &#123;</span></span><br><span class="line"><span class="javascript">        vnodes.push(<span class="xml"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&#123;[icon,</span> &#x27;<span class="attr">sub-el-icon</span>&#x27;]&#125; /&gt;</span></span>)</span></span><br><span class="line"><span class="javascript">      &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">        vnodes.push(<span class="xml"><span class="tag">&lt;<span class="name">svg-icon</span> <span class="attr">icon-class</span>=<span class="string">&#123;icon&#125;/</span>&gt;</span></span>)</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">if</span> (title) &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 三级目录文字展示</span></span></span><br><span class="line"><span class="javascript">      vnodes.push(<span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">slot</span>=<span class="string">&quot;title&quot;</span>&gt;</span>&#123;childTitle(context)&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span>)</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> vnodes</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这里可以用一个取巧的方式，因为 <code>render</code> 函数里的 <code>context</code> 里面有 <code>parent</code> 父节点，可以使用这个父节点上面的方法（<code>$t</code>、<code>$te</code>）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">childTitle</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> p = item.props.path</span><br><span class="line">  <span class="keyword">const</span> parent = item.parent</span><br><span class="line">  <span class="keyword">const</span> name = <span class="string">`menu.<span class="subst">$&#123;p&#125;</span>`</span></span><br><span class="line">  <span class="keyword">if</span> (parent.$te(name)) &#123;</span><br><span class="line">    <span class="keyword">return</span> parent.$t(name)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> item.props.title</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样路由菜单、面包屑导航及导航守卫国际化基本做完事了</p>
<h1 id="组件篇"><a href="#组件篇" class="headerlink" title="组件篇"></a>组件篇</h1><h2 id="1-选择框、输入框组件"><a href="#1-选择框、输入框组件" class="headerlink" title="1.选择框、输入框组件"></a>1.选择框、输入框组件</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">:label</span>=<span class="string">&quot;$t(&#x27;viewsC.animal&#x27;)&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;animal&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;rowsFormData.animal&quot;</span> <span class="attr">:placeholder</span>=<span class="string">&quot;$t(&#x27;viewsC.animalHolder&#x27;)&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>选择框输入框，我将其都放在 viewC 对象中，并按照，如下方式命名：</p>
<ul>
<li>没有加 Holder 后缀的后面需要加 <code>：</code>，有加 Holder 后缀的前面需要加 <code>请输入/请选择</code></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> ps = <span class="string">&#x27;请选择&#x27;</span></span><br><span class="line"><span class="keyword">const</span> pi = <span class="string">&#x27;请输入&#x27;</span></span><br><span class="line"><span class="keyword">const</span> end = <span class="string">&#x27;：&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> viewsC = &#123;</span><br><span class="line">  startDate: <span class="string">&#x27;起始日期&#x27;</span>,</span><br><span class="line">  startDateHolder: ps + <span class="string">&#x27;起始日期&#x27;</span>,</span><br><span class="line">  stopDate: <span class="string">&#x27;截止日期&#x27;</span>,</span><br><span class="line">  stopDateHolder: ps + <span class="string">&#x27;截止日期&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> item <span class="keyword">in</span> viewsC) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!item.includes(<span class="string">&#x27;Holder&#x27;</span>)) &#123;</span><br><span class="line">    viewsC[item] = viewsC[item] + end</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!viewsC[item].includes(<span class="string">&#x27;请&#x27;</span>)) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(viewsC[item] + <span class="string">&#x27;需要加 ps 或 pi&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>详细例子可以参考 <code>2.选择框、输入框表单校验</code>，表格 Table 跟这个同理 <code>el-table-column : label=&quot;$t(&#39;tableC.xxx)&quot;</code> 即可</p>
<h2 id="2-选择框、输入框表单校验"><a href="#2-选择框、输入框表单校验" class="headerlink" title="* 2.选择框、输入框表单校验"></a>* 2.选择框、输入框表单校验</h2><p>如果直接把 <code>rules</code> 校验规则写在 <code>data</code> 里面，Element 内部对其 <code>this</code> 进行了处理，所以需要换一种思路</p>
<ol>
<li><p>使用 <code>computed</code> 计算属性</p>
</li>
<li><p>写在 <code>data</code> 里面，在 return 之前是可以拿到 <code>this</code> 的，<code>message</code> 取到这个变量即可（不过这个切换语言不能实时更新）</p>
<p>注意：如果使用自定义规则是可以实时更新的，但是出于复用性一般会将其抽到 utils 方法库中，这样就会产生其他问题</p>
<ul>
<li><code>this</code> 无法处理</li>
<li>简单认证还得写复杂的自定义规则</li>
</ul>
<p>所以这个不是一个好方法，推荐使用计算属性</p>
</li>
</ol>
<p><strong>一般出于复用性将方法抽到 utils 方法库中，直接写是不行的</strong>（Element 内部对其 <code>this</code> 进行了处理），需要结合 <code>bind/call/apply</code> 来使用</p>
<ul>
<li><code>pattern: &#39;[^ \x22]+&#39;</code> 是校验不能全部为空格</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-scrollbar</span> <span class="attr">wrap-class</span>=<span class="string">&quot;scrollbar-wrapper&quot;</span> <span class="attr">style</span>=<span class="string">&quot;height: 100%;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-form</span> <span class="attr">ref</span>=<span class="string">&quot;rowsForm&quot;</span> <span class="attr">:model</span>=<span class="string">&quot;rowsFormData&quot;</span> <span class="attr">:rules</span>=<span class="string">&quot;rules&quot;</span> <span class="attr">label-width</span>=<span class="string">&quot;130px&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-row</span> <span class="attr">:gutter</span>=<span class="string">&quot;20&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">:label</span>=<span class="string">&quot;$t(&#x27;viewsC.animal&#x27;)&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;animal&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;rowsFormData.animal&quot;</span> <span class="attr">:placeholder</span>=<span class="string">&quot;$t(&#x27;viewsC.animalHolder&#x27;)&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">:label</span>=<span class="string">&quot;$t(&#x27;viewsC.plants&#x27;)&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;plants&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;rowsFormData.plants&quot;</span> <span class="attr">:placeholder</span>=<span class="string">&quot;$t(&#x27;viewsC.plantsHolder&#x27;)&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-row</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-scrollbar</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123; ValidAnimal &#125; <span class="keyword">from</span> <span class="string">&#x27;@/utils/viewValidate&#x27;</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line">      rowsFormData: &#123;</span><br><span class="line"><span class="javascript">        animal: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        plants: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">rules</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        animal: [&#123; <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">validator</span>: ValidAnimal.bind(<span class="built_in">this</span>), <span class="attr">trigger</span>: <span class="string">&#x27;change&#x27;</span>, <span class="attr">pattern</span>: <span class="string">&#x27;[^ \x22]+&#x27;</span> &#125;],</span></span><br><span class="line">        plants: [</span><br><span class="line"><span class="javascript">          &#123; <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="built_in">this</span>.$t(<span class="string">&#x27;form.plantsTip&#x27;</span>), <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span>, <span class="attr">pattern</span>: <span class="string">&#x27;[^ \x22]+&#x27;</span> &#125;,</span></span><br><span class="line"><span class="javascript">          &#123; <span class="attr">max</span>: <span class="number">5</span>, <span class="attr">message</span>: <span class="built_in">this</span>.$t(<span class="string">&#x27;form.maxLength10&#x27;</span>), <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span> &#125;</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="3-弹出框（MessageBox-或-Notification）"><a href="#3-弹出框（MessageBox-或-Notification）" class="headerlink" title="3.弹出框（MessageBox 或 Notification）"></a>3.弹出框（MessageBox 或 Notification）</h2><p>弹出框的 <code>title</code> 是可以使用 <code>this</code> 的，不过需要注意：</p>
<ul>
<li><p>如果使用 function，拿到的是错误的 <code>this</code> （可能由于代码不规范导致有这个问题）</p>
<p><strong>要么用一个变量存，要么使用箭头函数</strong></p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">this</span>.$confirm(<span class="built_in">this</span>.$t(<span class="string">&#x27;info.notify&#x27;</span>) , <span class="built_in">this</span>.$t(<span class="string">&#x27;info.friendlyTips&#x27;</span>), &#123;</span><br><span class="line">  type: <span class="string">&#x27;warning&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> params = &#123;&#125;</span><br><span class="line">    Api(params)</span><br><span class="line">      .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.$notify(&#123; <span class="attr">title</span>: <span class="built_in">this</span>.$t(<span class="string">&#x27;info.friendlyTips&#x27;</span>), <span class="attr">message</span>: res.data.msg, <span class="attr">type</span>: <span class="string">&#x27;success&#x27;</span> &#125;)</span><br><span class="line">        <span class="built_in">this</span>.getList()</span><br><span class="line">      &#125;)</span><br><span class="line">      .catch(<span class="function"><span class="params">e</span> =&gt;</span> <span class="built_in">console</span>.log(e))</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>

<h2 id="4-自制弹出框组件国际化（Vue-extend）"><a href="#4-自制弹出框组件国际化（Vue-extend）" class="headerlink" title="4.自制弹出框组件国际化（Vue.extend）"></a>4.自制弹出框组件国际化（Vue.extend）</h2><p><code>Vue.extend</code> 其实相当于创建了一个 <code>Vue</code> 子类，然后对这个子类上扩展一些 <code>options</code> 属性</p>
<h3 id="popup-js-中处理"><a href="#popup-js-中处理" class="headerlink" title="popup.js 中处理"></a>popup.js 中处理</h3><p>结合 <code>el-dialog</code> 自制弹出框组件，需要在创建实例时混入 <code>$i18n</code> ，这样弹出框组件才能使用 <code>$t</code>、<code>$te</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;@/store&#x27;</span></span><br><span class="line"><span class="keyword">import</span> i18n <span class="keyword">from</span> <span class="string">&#x27;@/i18n&#x27;</span> <span class="comment">// 引入国际化</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span>(<span class="params">el, params</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 初始化一个Promise</span></span><br><span class="line">  <span class="keyword">let</span> resolve</span><br><span class="line">  <span class="keyword">let</span> reject</span><br><span class="line">  <span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">res, rej</span>) =&gt;</span> &#123;</span><br><span class="line">    resolve = res</span><br><span class="line">    reject = rej</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// 初始化弹窗</span></span><br><span class="line">  <span class="keyword">const</span> Popups = Vue.extend(el)</span><br><span class="line">  <span class="keyword">const</span> vEl = <span class="keyword">new</span> Popups(&#123;</span><br><span class="line">    store,</span><br><span class="line">    i18n,</span><br><span class="line">    propsData: &#123;</span><br><span class="line">      params: <span class="built_in">Object</span>.assign(&#123;&#125;, params)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        visible: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      <span class="function"><span class="title">resolve</span>(<span class="params">arg</span>)</span> &#123;</span><br><span class="line">        resolve(arg)</span><br><span class="line">        <span class="built_in">this</span>.visible = <span class="literal">false</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="function"><span class="title">reject</span>(<span class="params">arg</span>)</span> &#123;</span><br><span class="line">        reject(arg)</span><br><span class="line">        <span class="built_in">this</span>.visible = <span class="literal">false</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="function"><span class="title">closed</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.visible = <span class="literal">false</span></span><br><span class="line">        removePopup()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// 把弹窗挂载到body</span></span><br><span class="line">  <span class="keyword">const</span> shadeEl = vEl.$mount().$el</span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(shadeEl)</span><br><span class="line">  <span class="comment">// 从body中移除弹窗体</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">removePopup</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.body.removeChild(shadeEl)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> promise</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="popup-vue-组件"><a href="#popup-vue-组件" class="headerlink" title="popup.vue 组件"></a>popup.vue 组件</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  &lt;el-dialog</span><br><span class="line">    :title=&quot;title&quot;</span><br><span class="line">    :width=&quot;width&quot;</span><br><span class="line">    :visible.sync=&quot;visible&quot;</span><br><span class="line">    append-to-body</span><br><span class="line">    :close-on-click-modal=&quot;false&quot;</span><br><span class="line">    :close-on-press-escape=&quot;false&quot;</span><br><span class="line">    :show-close=&quot;showClose&quot;</span><br><span class="line">    :modal=&quot;modal&quot;</span><br><span class="line">    :custom-class=&quot;customClass&quot;</span><br><span class="line">    class=&quot;popup-wrapper&quot;</span><br><span class="line">    :top=&quot;top&quot;</span><br><span class="line">    @closed=&quot;closed&quot;</span><br><span class="line">  &gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;popup__body&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">slot</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;!isFooter&quot;</span> <span class="attr">slot</span>=<span class="string">&quot;footer&quot;</span> <span class="attr">class</span>=<span class="string">&quot;dialog-footer&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;footer&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">&quot;onCancel&quot;</span>&gt;</span>&#123;&#123; $t(&#x27;tools.cancel&#x27;) &#125;&#125;<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;onSubmit&quot;</span>&gt;</span>&#123;&#123; $t(&#x27;tools.confirm&#x27;) &#125;&#125;<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-dialog</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  name: <span class="string">&#x27;UiPopup&#x27;</span>,</span></span><br><span class="line">  props: &#123;</span><br><span class="line">    value: &#123;</span><br><span class="line"><span class="javascript">      type: [<span class="built_in">String</span>, <span class="built_in">Object</span>, <span class="built_in">Array</span>, <span class="built_in">Number</span>, <span class="built_in">Boolean</span>],</span></span><br><span class="line"><span class="javascript">      <span class="keyword">default</span>: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line">    &#125;,</span><br><span class="line">    title: &#123;</span><br><span class="line"><span class="javascript">      type: <span class="built_in">String</span>,</span></span><br><span class="line"><span class="javascript">      <span class="keyword">default</span>: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line">    &#125;,</span><br><span class="line">    width: &#123;</span><br><span class="line"><span class="javascript">      type: <span class="built_in">String</span>,</span></span><br><span class="line"><span class="javascript">      <span class="keyword">default</span>: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line">    &#125;,</span><br><span class="line">    isFooter: &#123;</span><br><span class="line"><span class="javascript">      type: <span class="built_in">String</span>,</span></span><br><span class="line"><span class="javascript">      <span class="keyword">default</span>: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line">    &#125;,</span><br><span class="line">    showClose: &#123;</span><br><span class="line"><span class="javascript">      type: <span class="built_in">Boolean</span>,</span></span><br><span class="line"><span class="javascript">      <span class="keyword">default</span>: <span class="literal">true</span></span></span><br><span class="line">    &#125;,</span><br><span class="line">    modal: &#123;</span><br><span class="line"><span class="javascript">      type: <span class="built_in">Boolean</span>,</span></span><br><span class="line"><span class="javascript">      <span class="keyword">default</span>: <span class="literal">true</span></span></span><br><span class="line">    &#125;,</span><br><span class="line">    customClass: &#123;</span><br><span class="line"><span class="javascript">      type: <span class="built_in">String</span>,</span></span><br><span class="line"><span class="javascript">      <span class="keyword">default</span>: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line">    &#125;,</span><br><span class="line">    top: &#123;</span><br><span class="line"><span class="javascript">      type: <span class="built_in">String</span>,</span></span><br><span class="line"><span class="javascript">      <span class="keyword">default</span>: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line"><span class="javascript">    <span class="comment">// visible控制器，点X时调用取消</span></span></span><br><span class="line">    visible: &#123;</span><br><span class="line"><span class="javascript">      get: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="built_in">this</span>.$parent.visible</span></span><br><span class="line">      &#125;,</span><br><span class="line"><span class="javascript">      set: <span class="function"><span class="keyword">function</span>(<span class="params">v</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.$parent.reject(<span class="built_in">this</span>.value)</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">onCancel</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.$emit(<span class="string">&#x27;onCancel&#x27;</span>, <span class="built_in">this</span>.value)</span></span><br><span class="line">    &#125;,</span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">onSubmit</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.$emit(<span class="string">&#x27;onSubmit&#x27;</span>, <span class="built_in">this</span>.value)</span></span><br><span class="line">    &#125;,</span><br><span class="line"><span class="javascript">    <span class="comment">// 点 X 关闭时调用父组件的注入</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">closed</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.$parent.closed()</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="components-下的-index-js"><a href="#components-下的-index-js" class="headerlink" title="components 下的 index.js"></a>components 下的 index.js</h3><p>把 popup 通过全局方式注册</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> popup <span class="keyword">from</span> <span class="string">&#x27;./Popup/popup.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> jsPopup <span class="keyword">from</span> <span class="string">&#x27;./Popup/popup.js&#x27;</span></span><br><span class="line"><span class="keyword">const</span> components = [</span><br><span class="line">  popup</span><br><span class="line">]</span><br><span class="line"><span class="keyword">const</span> jsComponents = &#123;</span><br><span class="line">  $popup: jsPopup</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 出口函数为组件安装函数</span></span><br><span class="line"><span class="keyword">const</span> install = <span class="function"><span class="params">Vue</span> =&gt;</span> &#123;</span><br><span class="line">  components.forEach(<span class="function"><span class="params">component</span> =&gt;</span> &#123;</span><br><span class="line">    Vue.component(component.name, component)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> jsComponents) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!Vue.prototype.hasOwnProperty(key)) &#123;</span><br><span class="line">      Vue.prototype[key] = jsComponents[key]</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.warn(key + <span class="string">&#x27;被占用&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  install</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="main-js"><a href="#main-js" class="headerlink" title="main.js"></a>main.js</h3><p>这样就可以在全局使用 <code>$popup</code> 了</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> globalComponents <span class="keyword">from</span> <span class="string">&#x27;@/components&#x27;</span></span><br><span class="line"></span><br><span class="line">Vue.use(globalComponents)</span><br></pre></td></tr></table></figure>

<h1 id="打包篇"><a href="#打包篇" class="headerlink" title="打包篇"></a>打包篇</h1><p>toB 的项目可能会有这个需求：</p>
<ul>
<li>因为页面组件和表格很多，如果有一个字段名想改，就需要重新打包，很麻烦，现在想将其提出去（比如提取到 <code>public</code> 文件夹下的 config.js 文件中，这个 config.js 在 index.html 中引入一下），这样以后只需要改一下这个 js 文件无需重新打包</li>
</ul>
<h2 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h2><p>首先将各个配置文件复制到 <code>public</code> 下面，<strong>并将其用匿名函数包裹</strong>，之后在入口 index.html 中，引入如下配置文件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span></span><br><span class="line"><span class="javascript">  <span class="built_in">document</span>.write(<span class="string">&#x27;&lt;script src=&quot;../config.js?t=&#x27;</span> + now + <span class="string">&#x27;&quot;&gt;&lt;\/script\&gt;&#x27;</span>)</span></span><br><span class="line"><span class="javascript">  <span class="built_in">document</span>.write(<span class="string">&#x27;&lt;script src=&quot;../i18n/en.js?t=&#x27;</span> + now + <span class="string">&#x27;&quot;&gt;&lt;\/script\&gt;&#x27;</span>)</span></span><br><span class="line"><span class="javascript">  <span class="built_in">document</span>.write(<span class="string">&#x27;&lt;script src=&quot;../i18n/zh.js?t=&#x27;</span> + now + <span class="string">&#x27;&quot;&gt;&lt;\/script\&gt;&#x27;</span>)</span></span><br><span class="line"><span class="javascript">  <span class="built_in">document</span>.write(<span class="string">&#x27;&lt;script src=&quot;../i18n/zhTW.js?t=&#x27;</span> + now + <span class="string">&#x27;&quot;&gt;&lt;\/script\&gt;&#x27;</span>)</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>config.js 中用 <code>var</code> 声明变量挂载到 window 上，并在 <code>en/zh/zhTW</code> js文件中把配置加到 <code>lang</code> 对象中</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> indexConfig = &#123;&#125;</span><br><span class="line">indexConfig.lang = &#123;&#125;</span><br><span class="line"><span class="comment">// zh中文-简体； en-英文； zhTW-中文繁体</span></span><br><span class="line">indexConfig.langShow = [<span class="string">&#x27;zh&#x27;</span>, <span class="string">&#x27;en&#x27;</span>, <span class="string">&#x27;zhTW&#x27;</span>]</span><br></pre></td></tr></table></figure>

<p>最后在各个 <code>lang</code> 文件下用 <code>window.indexConfig.lang</code> 获取即可</p>
<h2 id="打包配置"><a href="#打包配置" class="headerlink" title="打包配置"></a>打包配置</h2><p>由于打包时不会携带 <code>i18n</code> 文件夹下面的配置文件，所以需要借助 CopyWebpackPlugin 插件进行复制</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> copyWebpackPlugins = [<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;/i18n&#x27;</span>].map(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> CopyWebpackPlugin([</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">from</span>: <span class="string">`./public<span class="subst">$&#123;item&#125;</span>/*`</span>,</span><br><span class="line">      to: path.resolve(__dirname, <span class="string">`dist/`</span>),</span><br><span class="line">      <span class="function"><span class="title">transformPath</span>(<span class="params">targetPath, absolutePath</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> targetPath.replace(<span class="string">`public`</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">      &#125;,</span><br><span class="line">      toType: <span class="string">&#x27;dir&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ])</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    plugins: [</span><br><span class="line">      <span class="keyword">new</span> HtmlWebpackPlugin(<span class="string">&#x27;src/index.html&#x27;</span>)</span><br><span class="line">    ].concat(copyWebpackPlugins)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样配置文件就提出去了，不过有安全风险，这个以后再说</p>
<h2 id="推荐参考"><a href="#推荐参考" class="headerlink" title="推荐参考"></a>推荐参考</h2><p><a href="https://segmentfault.com/a/1190000008752459">前端国际化之Vue-i18n源码分析</a></p>
<p><a href="https://segmentfault.com/a/1190000016445415">vue中如何使用i18n实现国际化</a></p>
<p><a href="https://element.eleme.cn/#/zh-CN/component/i18n">Element国际化</a></p>
<p><a href="https://www.jianshu.com/p/c49296f13a17">elementUI——locale，国际化方案</a></p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>Element</tag>
        <tag>i18n</tag>
        <tag>切换语言</tag>
      </tags>
  </entry>
  <entry>
    <title>Element 日期选择器清除问题（Axios get请求问题）</title>
    <url>/posts/379f43e/</url>
    <content><![CDATA[<h2 id="Element-日期选择器问题"><a href="#Element-日期选择器问题" class="headerlink" title="Element 日期选择器问题"></a>Element 日期选择器问题</h2><p>条件查询中需要根据日期进行筛选，为了用户便利性展示清除按钮</p>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/company-img/%E6%98%BE%E7%A4%BA%E6%B8%85%E9%99%A4%E6%8C%89%E9%92%AE.jpg"></p>
<ul>
<li>当点击清除按钮后进行查询（<strong>get 请求</strong>），报 500 了，看一下 Network，并<strong>没有进行 url 拼接</strong>（startDate 没有拼接到 url）</li>
<li>检查 api 文件的 params 参数，发现 params 中的 startDate 值为 null</li>
</ul>
<a id="more"></a>

<p><img data-src="https://gitee.com/lilyn/pic/raw/master/company-img/headersget%E8%AF%B7%E6%B1%82500.jpg"></p>
<p>到这里就出现了两个问题：</p>
<ol>
<li><strong>startDate 为什么赋值为 null 了</strong>（input 清除之后值变为空字符）</li>
<li>我使用的是 Axios 为什么，<strong>值为 null 没有进行 url 拼接</strong>（空字符串的就可以进行拼接）</li>
</ol>
<p>接下来先看先一下业务代码长什么样，之后就是 Axios 和 Element 源码分析</p>
<h3 id="vue-代码如下："><a href="#vue-代码如下：" class="headerlink" title="vue 代码如下："></a>vue 代码如下：</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-form</span> <span class="attr">ref</span>=<span class="string">&quot;queryForm&quot;</span> <span class="attr">label-width</span>=<span class="string">&quot;110px&quot;</span> <span class="attr">:model</span>=<span class="string">&quot;listQuery&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;开车日期：&quot;</span>&gt;</span></span><br><span class="line">        &lt;el-date-picker</span><br><span class="line">          v-model=&quot;listQuery.startDate&quot;</span><br><span class="line">          value-format=&quot;yyyy-MM-dd&quot;</span><br><span class="line">          type=&quot;date&quot;</span><br><span class="line">          clearable</span><br><span class="line">          placeholder=&quot;选择开车日期&quot;</span><br><span class="line">          style=&quot;width: 100%&quot;</span><br><span class="line">        /&gt;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">icon</span>=<span class="string">&quot;el-icon-search&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;getList&quot;</span></span></span><br><span class="line"><span class="tag">      &gt;</span>查 询&lt;/el-button</span><br><span class="line">    &gt;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> &#123; getStationBus &#125; <span class="keyword">from</span> <span class="string">&#x27;@/api/station-bus&#x27;</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line">        listQuery: &#123;</span><br><span class="line">          pageNumber: 1,</span><br><span class="line">          pageSize: 20,</span><br><span class="line"><span class="javascript">          startDate: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line">        &#125;,</span><br><span class="line">        list: [],</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">created</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.getList()</span></span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">getList</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        getStationBus(<span class="built_in">this</span>.listQuery).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.list = res.data</span></span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="api-代码如下："><a href="#api-代码如下：" class="headerlink" title="api 代码如下："></a>api 代码如下：</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">&#x27;@/utils/request&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getStationBus = <span class="function"><span class="params">params</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> request(&#123;</span><br><span class="line">    method: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">    url: <span class="string">&#x27;/stationBus/list&#x27;</span>,</span><br><span class="line">    params,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Axios-源码分析"><a href="#Axios-源码分析" class="headerlink" title="Axios 源码分析"></a>Axios 源码分析</h2><p><a href="https://github.com/axios/axios/blob/master/dist/axios.js">https://github.com/axios/axios/blob/master/dist/axios.js</a> 622 行左右（搜素 buildURL）</p>
<ul>
<li>当请是 get 系列请求时，如果 params 对象里面有值为 null/undefined，不会进行 url 拼接，直接 return 出去了</li>
</ul>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/company-img/get%E7%B3%BB%E5%88%97%E8%AF%B7%E6%B1%82.png"></p>
<h2 id="Element-源码分析-TimePicker组件"><a href="#Element-源码分析-TimePicker组件" class="headerlink" title="Element 源码分析[TimePicker组件]"></a>Element 源码分析[TimePicker组件]</h2><p><a href="https://github.com/ElemeFE/element/blob/dev/packages/date-picker/src/picker.vue">https://github.com/ElemeFE/element/blob/dev/packages/date-picker/src/picker.vue</a> ，搜 handleClickIcon</p>
<p><strong>点击清除按钮后，把值赋值为 null</strong>。这里需要注意！！！与 Input 组件不同</p>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/company-img/%E7%82%B9%E5%87%BB%E6%B8%85%E9%99%A4%E6%8C%89%E9%92%AE%E5%90%8E%E8%B5%8B%E5%80%BC%E4%B8%BAnull%E6%97%A5%E6%9C%9F%E7%BB%84%E4%BB%B6.jpg"></p>
<h2 id="Element-源码分析-Input组件"><a href="#Element-源码分析-Input组件" class="headerlink" title="Element 源码分析[Input组件]"></a>Element 源码分析[Input组件]</h2><p><a href="https://github.com/ElemeFE/element/blob/dev/packages/input/src/input.vue">https://github.com/ElemeFE/element/blob/dev/packages/input/src/input.vue</a>，搜 clear</p>
<p><strong>点击清除按钮后，把值赋值为 空字符串</strong></p>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/company-img/%E7%82%B9%E5%87%BB%E6%B8%85%E9%99%A4%E6%8C%89%E9%92%AE%E5%90%8E%E8%B5%8B%E5%80%BC%E4%B8%BAnull%E8%BE%93%E5%85%A5%E6%A1%86%E7%BB%84%E4%BB%B6.jpg"></p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>Axios</tag>
        <tag>Element</tag>
        <tag>源码分析</tag>
        <tag>问题</tag>
      </tags>
  </entry>
  <entry>
    <title>前后端 JS 加密常用方法（非对称加密、对称加密）</title>
    <url>/posts/9f5130f2/</url>
    <content><![CDATA[<h1 id="对称加密"><a href="#对称加密" class="headerlink" title="对称加密"></a>对称加密</h1><p>对称加密一大缺点是密钥的管理与分配，换句话说，如何把密钥发送到需要解密你的消息的人的手里是一个问题。在发送密钥的过程中，密钥有很大的风险会被黑客拦截。现实中通常的做法是将对称加密的密钥进行非对称加密，然后传送给需要它的人</p>
<p>彩虹表是对于散列函数做逆运算的表（空间换时间），密码安全度比较低是可以用彩虹表碰撞去破解的，可以在 <a href="https://freerainbowtables.com/">Free Rainbow Tables</a> 上下载进行试验，如果试图解密，可以使用 <a href="https://cmd5.com/">CMD5</a> 进行解密</p>
<h2 id="不可逆加密（MD5-SHA）"><a href="#不可逆加密（MD5-SHA）" class="headerlink" title="不可逆加密（MD5 SHA）"></a>不可逆加密（MD5 SHA）</h2><p>node 中有原生 crypto 模块，该模块提供了 hash、hmac、加密解密等一整套封装。因为是 node 中的模块，所以需要使用 <code>const crypto = require(&#39;crypto&#39;)</code> 来引入</p>
<p>MD5、SHA1 也成散列算法</p>
<h3 id="crypto-进行-MD5-SHA-加密"><a href="#crypto-进行-MD5-SHA-加密" class="headerlink" title="crypto 进行 MD5 SHA 加密"></a>crypto 进行 MD5 SHA 加密</h3><p>hash 算法又称摘要算法，该算法可以将任意长度的数据，转换为固定长度的 hash 值，且具有不可逆性</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> crypto = <span class="built_in">require</span>(<span class="string">&#x27;crypto&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(crypto.getHashes())</span><br></pre></td></tr></table></figure>

<p>使用 <code>getHashes</code> 方法，可以获取到所有支持 hash 算法的一个数组</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">  <span class="string">&#x27;RSA-MD4&#x27;</span>, <span class="string">&#x27;RSA-MD5&#x27;</span>, <span class="string">&#x27;RSA-MDC2&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;RSA-RIPEMD160&#x27;</span>, <span class="string">&#x27;RSA-SHA1&#x27;</span>, <span class="string">&#x27;RSA-SHA1-2&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;RSA-SHA224&#x27;</span>, <span class="string">&#x27;RSA-SHA256&#x27;</span>, <span class="string">&#x27;RSA-SHA3-224&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;RSA-SHA3-256&#x27;</span>, <span class="string">&#x27;RSA-SHA3-384&#x27;</span>, <span class="string">&#x27;RSA-SHA3-512&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;RSA-SHA384&#x27;</span>, <span class="string">&#x27;RSA-SHA512&#x27;</span>, <span class="string">&#x27;RSA-SHA512/224&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;RSA-SHA512/256&#x27;</span>, <span class="string">&#x27;RSA-SM3&#x27;</span>, <span class="comment">// ....</span></span><br><span class="line">  <span class="string">&#x27;md5&#x27;</span>, <span class="string">&#x27;md5-sha1&#x27;</span>, <span class="string">&#x27;md5WithRSAEncryption&#x27;</span>, <span class="comment">// ...</span></span><br><span class="line">  <span class="string">&#x27;sha1&#x27;</span>, <span class="string">&#x27;sha1WithRSAEncryption&#x27;</span>, <span class="string">&#x27;sha224&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;sha224WithRSAEncryption&#x27;</span>, <span class="string">&#x27;sha256&#x27;</span>, <span class="string">&#x27;sha256WithRSAEncryption&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;sha3-224&#x27;</span>, <span class="string">&#x27;sha3-256&#x27;</span>, <span class="string">&#x27;sha3-384&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;sha3-512&#x27;</span>, <span class="string">&#x27;sha384&#x27;</span>, <span class="string">&#x27;sha384WithRSAEncryption&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;sha512&#x27;</span>, <span class="string">&#x27;sha512-224&#x27;</span>, <span class="string">&#x27;sha512-224WithRSAEncryption&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;sha512-256&#x27;</span>, <span class="string">&#x27;sha512-256WithRSAEncryption&#x27;</span>, <span class="string">&#x27;sha512WithRSAEncryption&#x27;</span>,</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>这些 hash 算法，我们平常用的比较多的是：<code>md5</code>、<code>sha1</code>、<code>sha256</code> 等。这里我们可以简单封装一下，根据不同摘要算法生成不同 hash 值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> crypto = <span class="built_in">require</span>(<span class="string">&#x27;crypto&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> createHash = <span class="function">(<span class="params">type, str</span>) =&gt;</span> crypto.createHash(type).update(str).digest(<span class="string">&#x27;hex&#x27;</span>)</span><br><span class="line"></span><br><span class="line">[<span class="string">&#x27;md5&#x27;</span>, <span class="string">&#x27;sha1&#x27;</span>, <span class="string">&#x27;sha256&#x27;</span>].forEach(<span class="function"><span class="params">type</span> =&gt;</span> &#123;</span><br><span class="line">  createHash(type, <span class="string">&#x27;123&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">md5 202cb962ac59075b964b07152d234b70</span></span><br><span class="line"><span class="comment">sha1 40bd001563085fc35165329ea1ff5c5ecbdbbeef</span></span><br><span class="line"><span class="comment">sha256 a665a45920422f9d417e4867efdc4fb8a04a1f3fff1fa07e998e86f7f7a27ae3</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h3 id="上面版本的加盐和-hmac-算法"><a href="#上面版本的加盐和-hmac-算法" class="headerlink" title="* 上面版本的加盐和 hmac 算法"></a>* 上面版本的加盐和 hmac 算法</h3><p>如果密码安全强度过低，是很容易被彩虹表碰撞上的，所以一般还会做一层加盐加字符串的处理，这样碰撞成功的概率就大大减少了</p>
<p>这里以 MD5 加密方式举例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> crypto = <span class="built_in">require</span>(<span class="string">&#x27;crypto&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> createHash = <span class="function">(<span class="params">type, str</span>) =&gt;</span> crypto.createHash(type).update(str).digest(<span class="string">&#x27;hex&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> psw = <span class="string">&#x27;123&#x27;</span></span><br><span class="line"><span class="keyword">const</span> md5 = <span class="function"><span class="params">str</span> =&gt;</span> createHash(<span class="string">&#x27;md5&#x27;</span>, str)</span><br><span class="line"><span class="keyword">const</span> encryptPassword = <span class="function">(<span class="params">salt, password</span>) =&gt;</span> md5(salt + <span class="string">&#x27;@3#!8^k.j$0#qr&#x27;</span> + password)</span><br><span class="line"><span class="keyword">const</span> salt = <span class="built_in">Math</span>.random() * <span class="number">99999</span> + <span class="keyword">new</span> <span class="built_in">Date</span>().getTime()</span><br><span class="line"></span><br><span class="line">encryptPassword(salt, psw) <span class="comment">// 5927975bb4e8453b54e244ae4640426f</span></span><br></pre></td></tr></table></figure>

<p>crypto 里有 <code>createHmac()</code> 方法，hmac 类似加盐版 hash 算法，hmac 是密钥相关的哈希运算消息认证码（Hash-basees Message Authentication Code）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> crypto = <span class="built_in">require</span>(<span class="string">&#x27;crypto&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> salt = (<span class="built_in">Math</span>.random() * <span class="number">99999</span>).toString() + <span class="keyword">new</span> <span class="built_in">Date</span>().getTime()</span><br><span class="line"><span class="keyword">const</span> createHmac = <span class="function">(<span class="params">type, str</span>) =&gt;</span> crypto.createHmac(type, salt).update(str).digest(<span class="string">&#x27;hex&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> psw = <span class="string">&#x27;123&#x27;</span></span><br><span class="line"><span class="keyword">const</span> md5 = <span class="function"><span class="params">str</span> =&gt;</span> createHmac(<span class="string">&#x27;md5&#x27;</span>, str)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(md5(salt, psw)) <span class="comment">// c9bce0c58ec62881aa5774a7d304b40a</span></span><br></pre></td></tr></table></figure>

<h3 id="blueimp-md5-进行-MD5-加密"><a href="#blueimp-md5-进行-MD5-加密" class="headerlink" title="blueimp-md5 进行 MD5 加密"></a>blueimp-md5 进行 MD5 加密</h3><p>接下来简单说一下其他可能会用到的加密包</p>
<ul>
<li>注意：使用两次 md5 加密也是不安全的，也能被彩虹表碰撞到</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* npm i blueimp-md5 */</span></span><br><span class="line"><span class="keyword">import</span> md5 <span class="keyword">from</span> <span class="string">&#x27;blueimp-md5&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> txt = <span class="string">&#x27;123&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">passTrans</span>(<span class="params">pass</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> md5(pass)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(passTrans(txt)) <span class="comment">// 202cb962ac59075b964b07152d234b70</span></span><br></pre></td></tr></table></figure>

<h3 id="sha-进行-SHA-加密"><a href="#sha-进行-SHA-加密" class="headerlink" title="sha 进行 SHA 加密"></a>sha 进行 SHA 加密</h3><p>SHA 家族的五个算法，分别是 SHA-1、SHA-224、SHA-256、SHA-384，和 SHA-512，由美国国家安全局（NSA）所规划，并由美国国家规范与技能研究院（NIST）发布，这里只对 SHA-1 和 SHA-256 进行演示</p>
<ul>
<li>SHA-1</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* npm i js-sha1 */</span></span><br><span class="line"><span class="keyword">import</span> sha1 <span class="keyword">from</span> <span class="string">&#x27;js-sha1&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> txt = <span class="string">&#x27;123&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">passTrans</span>(<span class="params">pass</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> sha1(pass)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(passTrans(txt)) <span class="comment">// 40bd001563085fc35165329ea1ff5c5ecbdbbeef</span></span><br></pre></td></tr></table></figure>

<ul>
<li>SHA-256</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* npm i js-sha256 */</span></span><br><span class="line"><span class="keyword">import</span> &#123; sha256 &#125; <span class="keyword">from</span> <span class="string">&#x27;js-sha256&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> txt = <span class="string">&#x27;123&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">passTrans</span>(<span class="params">pass</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> sha256(pass)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(passTrans(txt)) <span class="comment">// a665a45920422f9d417e4867efdc4fb8a04a1f3fff1fa07e998e86f7f7a27ae3</span></span><br></pre></td></tr></table></figure>



<h2 id="可逆加密（AES-DES-BASE64）"><a href="#可逆加密（AES-DES-BASE64）" class="headerlink" title="可逆加密（AES DES BASE64）"></a>可逆加密（AES DES BASE64）</h2><h3 id="crypto-进行-AES-加密"><a href="#crypto-进行-AES-加密" class="headerlink" title="crypto 进行 AES 加密"></a>crypto 进行 AES 加密</h3><p>上述这些方法都是不可逆 hash 加密算法，接下来说一下可加密解密的算法。常见的有 <code>AES</code>、<code>DES</code>、<code>BASE64</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> crypto = <span class="built_in">require</span>(<span class="string">&#x27;crypto&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(crypto.getCiphers())</span><br></pre></td></tr></table></figure>

<p>使用 <code>getCiphers</code> 方法，可以获取到所有支持 cipher 算法的一个数组</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">  <span class="string">&#x27;aes-128-cbc&#x27;</span>, <span class="string">&#x27;aes-128-ccm&#x27;</span>, <span class="string">&#x27;aes-128-cfb&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;aes-128-cfb1&#x27;</span>, <span class="string">&#x27;aes-128-cfb8&#x27;</span>, <span class="string">&#x27;aes-128-ctr&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;aes-128-ecb&#x27;</span>, <span class="string">&#x27;aes-128-gcm&#x27;</span>, <span class="string">&#x27;aes-128-ocb&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;aes-128-ofb&#x27;</span>, <span class="string">&#x27;aes-128-xts&#x27;</span>, <span class="string">&#x27;aes-192-cbc&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;aes-192-ccm&#x27;</span>, <span class="string">&#x27;aes-192-cfb&#x27;</span>, <span class="string">&#x27;aes-192-cfb1&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;aes-192-cfb8&#x27;</span>, <span class="string">&#x27;aes-192-ctr&#x27;</span>, <span class="string">&#x27;aes-192-ecb&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;aes-192-gcm&#x27;</span>, <span class="string">&#x27;aes-192-ocb&#x27;</span>, <span class="string">&#x27;aes-192-ofb&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;aes-256-cbc&#x27;</span>, <span class="string">&#x27;aes-256-ccm&#x27;</span>, <span class="string">&#x27;aes-256-cfb&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;aes-256-cfb1&#x27;</span>, <span class="string">&#x27;aes-256-cfb8&#x27;</span>, <span class="string">&#x27;aes-256-ctr&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;aes-256-ecb&#x27;</span>, <span class="string">&#x27;aes-256-gcm&#x27;</span>, <span class="string">&#x27;aes-256-ocb&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;aes-256-ofb&#x27;</span>, <span class="string">&#x27;aes-256-xts&#x27;</span>, <span class="string">&#x27;aes128&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;aes128-wrap&#x27;</span>, <span class="string">&#x27;aes192&#x27;</span>,      <span class="string">&#x27;aes192-wrap&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;aes256&#x27;</span>,      <span class="string">&#x27;aes256-wrap&#x27;</span>, <span class="string">&#x27;aria-128-cbc&#x27;</span>,</span><br><span class="line">  <span class="comment">// ....</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>cryoto 模块中提供了 <code>createCipheriv</code> 和 <code>createDecipheriv</code> 来进行加密和解密的功能，这两个方法都接收 3 个参数：</p>
<ol>
<li><p>algorithm 同于指定加密算法</p>
<p><code>aes-128-cbc</code>  算法是 128</p>
</li>
<li><p>key：加密解密的密钥，密钥必须是 <code>8/16/32</code> 位</p>
<p>如果加密算法是 128，对应密钥是 16 位</p>
<p>如果加密算法是 256，对应密钥是 32 位</p>
</li>
<li><p>iv：参数可选，用于指定加密时所用的向量，规则与 key 一样</p>
</li>
</ol>
<p>常用的模式是：ECB、CBC、CFB、OFB。详细可见：<a href="https://blog.csdn.net/jerry81333/article/details/78336616">块加密 工作模式 ECB、CBC、PCBC、CFB、OFB、CTR</a></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> crypto = <span class="built_in">require</span>(<span class="string">&#x27;crypto&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> AES_ALGORITHM = <span class="string">&#x27;aes-128-cbc&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> key = <span class="string">&#x27;encode@3#!8^k.j$&#x27;</span></span><br><span class="line"><span class="keyword">const</span> iv = <span class="string">&#x27;vector@3#!8^k.j$&#x27;</span></span><br><span class="line"><span class="keyword">const</span> txt = <span class="string">&#x27;123&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">encrypt</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> encrypted = <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="keyword">const</span> cipher = crypto.createCipheriv(AES_ALGORITHM, key, iv)</span><br><span class="line">  encrypted += cipher.update(data, <span class="string">&#x27;utf8&#x27;</span>, <span class="string">&#x27;base64&#x27;</span>)</span><br><span class="line">  encrypted += cipher.final(<span class="string">&#x27;base64&#x27;</span>)</span><br><span class="line">  <span class="keyword">return</span> encrypted</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">decrypt</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> decrypted = <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="keyword">const</span> cipher = crypto.createDecipheriv(AES_ALGORITHM, key, iv)</span><br><span class="line">  decrypted += cipher.update(data, <span class="string">&#x27;base64&#x27;</span>, <span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">  decrypted += cipher.final(<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">  <span class="keyword">return</span> decrypted</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sign = encrypt(txt)</span><br><span class="line"><span class="keyword">const</span> _src = decrypt(sign)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;加密：&#x27;</span>, sign)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;解密：&#x27;</span>, _src)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">加密： lVKUZlJeTrkHc3Qf5s0KPw==</span></span><br><span class="line"><span class="comment">解密： 123</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h3 id="crypto-js-进行-AES-加密"><a href="#crypto-js-进行-AES-加密" class="headerlink" title="* crypto-js 进行 AES 加密"></a>* crypto-js 进行 AES 加密</h3><p>由于 crypto 是 node 原生的，很多人可能又不习惯，下面介绍另一款 crypto-js 。这个需要 npm 下载，也可以直接去 <a href="https://github.com/brix/crypto-js">crypto-js GitHub</a> 下载</p>
<p>CryptoJS 在处理前需要对参数进行一下处理</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> wordArray = CryptoJS.enc.Utf8.parse(utf8String)</span><br><span class="line"><span class="keyword">const</span> wordArray = CryptoJS.enc.Latin1.parse(latin1String)</span><br><span class="line"><span class="keyword">const</span> wordArray = CryptoJS.enc.Hex.parse(hexString)</span><br><span class="line"><span class="keyword">const</span> wordArray = CryptoJS.enc.Base64.parse(base64String)</span><br></pre></td></tr></table></figure>

<p>CryptoJS 加密出的结果是一个对象：<code>CryptoJs.AES.encrypt(src, key, &#123; iv, mode, padding &#125;)</code> ，所以需要对其进行文本处理 <code>toString()</code> 或 <code>+ &#39;&#39;</code></p>
<ul>
<li><p>key 是密钥，可以是接口返回的</p>
</li>
<li><p>iv 是密钥偏移量，一般都是接口返回的</p>
</li>
<li><p>mode：支持 CBC、CFB、CTR、ECB、OFB，默认 CBC</p>
<p>详细可见：<a href="https://blog.csdn.net/jerry81333/article/details/78336616">块加密 工作模式 ECB、CBC、PCBC、CFB、OFB、CTR</a></p>
<p>ECB 模式下，向量 iv 是没有用的。ECB 加密原理：根据加密块的大小分成若干块，之后将每块使用相同的秘钥单独加密即可</p>
<p>CBC 模式下，向量 iv 是有用的。CBC 加密原理：每个明文块进行异或后再进行加密，每个密文块都依赖前面的所有明文块</p>
</li>
<li><p>padding ：支持 Pkcs7、AnsiX923、Iso10126、NoPadding、ZeroPadding，默认 Pkcs7</p>
</li>
</ul>
<p>CryptoJS 解密密文必须是 BASE64 编码</p>
<blockquote>
<p>详细原理可以参考：<a href="https://blog.csdn.net/qq_28205153/article/details/55798628">AES加密算法的详细介绍与实现</a></p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* npm i crypto-js */</span></span><br><span class="line"><span class="comment">// import CryptoJS from &#x27;crypto-js&#x27;</span></span><br><span class="line"><span class="keyword">const</span> CryptoJS = <span class="built_in">require</span>(<span class="string">&#x27;crypto-js&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> keyStr = <span class="string">&#x27;encode@3#!8^k.j$&#x27;</span></span><br><span class="line"><span class="keyword">const</span> ivStr = <span class="string">&#x27;vector@3#!8^k.j$&#x27;</span></span><br><span class="line"><span class="keyword">const</span> txt = <span class="string">&#x27;123&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">encrypt</span>(<span class="params">data, keyS, ivS</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> key = keyS || keyStr</span><br><span class="line">  <span class="keyword">let</span> iv = ivS || ivStr</span><br><span class="line">  key = CryptoJS.enc.Utf8.parse(key)</span><br><span class="line">  iv = CryptoJS.enc.Utf8.parse(iv)</span><br><span class="line">  <span class="keyword">const</span> src = CryptoJS.enc.Utf8.parse(data)</span><br><span class="line">  <span class="keyword">const</span> cipher = CryptoJS.AES.encrypt(src, key, &#123;</span><br><span class="line">    iv: iv, <span class="comment">// 初始向量</span></span><br><span class="line">    mode: CryptoJS.mode.CBC, <span class="comment">// 加密模式</span></span><br><span class="line">    padding: CryptoJS.pad.Pkcs7, <span class="comment">// 填充方式</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">const</span> encrypted = cipher.toString()</span><br><span class="line">  <span class="keyword">return</span> encrypted</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">decrypt</span>(<span class="params">data, keyS, ivS</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> key = keyS || keyStr</span><br><span class="line">  <span class="keyword">let</span> iv = ivS || ivStr</span><br><span class="line">  key = CryptoJS.enc.Utf8.parse(key)</span><br><span class="line">  iv = CryptoJS.enc.Utf8.parse(iv)</span><br><span class="line">  <span class="keyword">const</span> cipher = CryptoJS.AES.decrypt(data, key, &#123;</span><br><span class="line">    iv: iv,</span><br><span class="line">    mode: CryptoJS.mode.CBC,</span><br><span class="line">    padding: CryptoJS.pad.Pkcs7,</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">const</span> decrypted = cipher.toString(CryptoJS.enc.Utf8) <span class="comment">// 返回的是加密之前的原始数据-&gt;字符串类型</span></span><br><span class="line">  <span class="keyword">return</span> decrypted</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sign = encrypt(txt)</span><br><span class="line"><span class="keyword">const</span> _src = decrypt(sign)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;加密：&#x27;</span>, sign)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;解密：&#x27;</span>, _src)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">加密： lVKUZlJeTrkHc3Qf5s0KPw==</span></span><br><span class="line"><span class="comment">解密： 123</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h3 id="crypto-js-进行-DES-加密"><a href="#crypto-js-进行-DES-加密" class="headerlink" title="crypto-js 进行 DES 加密"></a>crypto-js 进行 DES 加密</h3><p>DES -&gt; TripleDES -&gt; RC4 -&gt; AES（安全性会更高一些）</p>
<ul>
<li>DES 其实只是把之前写 AES 的部分改成 DES</li>
<li>https （SSL 使用 40 位关键字作为 RC4 流加密算法）</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* npm i crypto-js */</span></span><br><span class="line"><span class="comment">// import CryptoJS from &#x27;crypto-js&#x27;</span></span><br><span class="line"><span class="keyword">const</span> CryptoJS = <span class="built_in">require</span>(<span class="string">&#x27;crypto-js&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> keyStr = <span class="string">&#x27;encode@3#!8^k.j$&#x27;</span></span><br><span class="line"><span class="keyword">const</span> ivStr = <span class="string">&#x27;vector@3#!8^k.j$&#x27;</span></span><br><span class="line"><span class="keyword">const</span> txt = <span class="string">&#x27;123&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">encrypt</span>(<span class="params">data, keyS, ivS</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> key = keyS || keyStr</span><br><span class="line">  <span class="keyword">let</span> iv = ivS || ivStr</span><br><span class="line">  key = CryptoJS.enc.Utf8.parse(key)</span><br><span class="line">  iv = CryptoJS.enc.Utf8.parse(iv)</span><br><span class="line">  <span class="keyword">const</span> src = CryptoJS.enc.Utf8.parse(data)</span><br><span class="line">  <span class="keyword">return</span> CryptoJS.DES.encrypt(src, key, &#123;</span><br><span class="line">    iv: iv, <span class="comment">// 初始向量</span></span><br><span class="line">    mode: CryptoJS.mode.CBC, <span class="comment">// 加密模式</span></span><br><span class="line">    padding: CryptoJS.pad.Pkcs7, <span class="comment">// 填充方式</span></span><br><span class="line">  &#125;).toString()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">decrypt</span>(<span class="params">data, keyS, ivS</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> key = keyS || keyStr</span><br><span class="line">  <span class="keyword">let</span> iv = ivS || ivStr</span><br><span class="line">  key = CryptoJS.enc.Utf8.parse(key)</span><br><span class="line">  iv = CryptoJS.enc.Utf8.parse(iv)</span><br><span class="line">  <span class="keyword">return</span> CryptoJS.DES.decrypt(data, key, &#123;</span><br><span class="line">    iv: iv,</span><br><span class="line">    mode: CryptoJS.mode.CBC,</span><br><span class="line">    padding: CryptoJS.pad.Pkcs7,</span><br><span class="line">  &#125;).toString(CryptoJS.enc.Utf8)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sign = encrypt(txt)</span><br><span class="line"><span class="keyword">const</span> _src = decrypt(sign)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;加密：&#x27;</span>, sign)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;解密：&#x27;</span>, _src)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">加密： OaCOFkaXIUc=</span></span><br><span class="line"><span class="comment">解密： 123</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h3 id="crypto-js-进行-BASE64-加密"><a href="#crypto-js-进行-BASE64-加密" class="headerlink" title="crypto-js 进行 BASE64 加密"></a>crypto-js 进行 BASE64 加密</h3><p>可以使用 window 自带的方法，不过使用这个是有缺陷的（无法处理中文）：</p>
<ul>
<li><code>window.btoa</code> 对字符串进行 BASE64 编码（注意：不能编码中文）</li>
<li><code>window.atob</code> 对 BASE64 字符串进行解码（注意：转换含有中文的 BASE64 编码是不能正确解码的）</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* npm i crypto-js */</span></span><br><span class="line"><span class="comment">// import CryptoJS from &#x27;crypto-js&#x27;</span></span><br><span class="line"><span class="keyword">const</span> CryptoJS = <span class="built_in">require</span>(<span class="string">&#x27;crypto-js&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> txt = <span class="string">&#x27;123算法&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">encrypt</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> encrypted = CryptoJS.enc.Utf8.parse(data)</span><br><span class="line">  <span class="keyword">const</span> cipher = CryptoJS.enc.Base64.stringify(encrypted)</span><br><span class="line">  <span class="keyword">return</span> cipher</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">decrypt</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> decrypted = CryptoJS.enc.Base64.parse(data)</span><br><span class="line">  <span class="keyword">const</span> cipher = decrypted.toString(CryptoJS.enc.Utf8)</span><br><span class="line">  <span class="keyword">return</span> cipher</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sign = encrypt(txt)</span><br><span class="line"><span class="keyword">const</span> _src = decrypt(sign)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;加密：&#x27;</span>, sign)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;解密：&#x27;</span>, _src)</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">加密： MTIz566X5rOV</span></span><br><span class="line"><span class="comment">解密： 123算法</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h1 id="非对称加密"><a href="#非对称加密" class="headerlink" title="非对称加密"></a>非对称加密</h1><p>非对称加密会产生一对密钥（公钥负责加密、私钥负责解密），私钥无法解开说明公钥无效（抗抵赖性）。常见算法 RSA（大质数 ）、Elgamal、背包算法、Rabin、D-H、ECC（椭圆曲线加密算法）</p>
<p>如下只对 RSA 算法进行说明</p>
<h2 id="jsencrypt-进行-RSA-加密"><a href="#jsencrypt-进行-RSA-加密" class="headerlink" title="jsencrypt 进行 RSA 加密"></a>jsencrypt 进行 RSA 加密</h2><p>加密算法分为对称加密和非对称加密，AES 是对称加密，RSA 是非对称加密</p>
<ul>
<li>接口加密一般会使用 AES，之所以用 AES 加密是因为效率高</li>
<li>RSA 会慢一些，一般会用做签名认证操作，防止请求被篡改</li>
</ul>
<blockquote>
<p>参考：<a href="http://www.ruanyifeng.com/blog/2013/06/rsa_algorithm_part_one.html">RSA算法原理（一）</a></p>
<p>只能被 1 和本身整除的数叫质数，例如 13，质数是无穷多的，得到两个巨大质数的乘积是简单的事，但想要从该乘积反推出这两个巨大质数却没有任何有效的办法，这种不可逆的单向数学关系，是国际数学界公认的质因数分解难题</p>
<p>Rivest(R)、Shamir(S) 和 Adleman(A) 三人巧妙利用这一假说，设计出 RSA 公钥加密算法的基本原理：</p>
<ol>
<li>让计算机随机生成两个大质数 p 和 q，得出乘积 n</li>
<li>利用 p 和 q 有条件的生成加密密钥 e</li>
<li>通过一系列计算，得到与 n 互为质数的解密密钥 d，置于操作系统才知道的地方</li>
<li>操作系统将 n 和 e 共同作为公钥对外发布，将私钥 d 秘密保存，把初始质数 p 和 q 秘密丢弃</li>
</ol>
</blockquote>
<p>接下来需要生成一下 RSA 密钥对： <a href="http://web.chacuo.net/netrsakeypair">生成 RSA 密钥对</a>，将生成的公钥私钥复制过去（一般复制公钥即可，私钥给后端）</p>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/company-img/rsa%E5%85%AC%E9%92%A5%E7%A7%81%E9%92%A5.jpg"></p>
<p>jsencrypt 包没有处理 node 中的情况，所以这里就不演示代码了，大家可以去 vue 里尝试一下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* npm i jsencrypt */</span></span><br><span class="line"><span class="keyword">import</span> JSEncrypt <span class="keyword">from</span> <span class="string">&#x27;jsencrypt/bin/jsencrypt&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> publicKey = <span class="string">`非对称加密公钥`</span></span><br><span class="line"><span class="keyword">const</span> privateKey = <span class="string">`非对称加密私钥`</span></span><br><span class="line"><span class="keyword">const</span> txt = <span class="string">&#x27;123&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 加密 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">encrypt</span>(<span class="params">pass</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> encrypted = <span class="keyword">new</span> JSEncrypt() <span class="comment">// 创建加密对象实例</span></span><br><span class="line">  encrypted.setPublicKey(publicKey) <span class="comment">// 设置公钥</span></span><br><span class="line">  <span class="keyword">return</span> encrypted.encrypt(pass) <span class="comment">// 对内容进行加密</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 解密 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">decrypt</span>(<span class="params">pass</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> decrypted = <span class="keyword">new</span> JSEncrypt() <span class="comment">// 创建解密对象实例</span></span><br><span class="line">  decrypted.setPrivateKey(privateKey) <span class="comment">// 设置私钥</span></span><br><span class="line">  <span class="keyword">return</span> decrypted.decrypt(pass) <span class="comment">// 拿私钥解密内容</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(decrypt(encrypt(txt))) <span class="comment">// &#x27;123&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="node-rsa-进行-RSA-加密"><a href="#node-rsa-进行-RSA-加密" class="headerlink" title="node-rsa 进行 RSA 加密"></a>node-rsa 进行 RSA 加密</h2><p>前端一般用 jsencrypt 做加密，后端（Node）一般用 node-rsa 解密</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> publicKey = key.exportKey(<span class="string">&#x27;pkcs8-public&#x27;</span>).toString(<span class="string">&#x27;base64&#x27;</span>) <span class="comment">// 可以给前端的公钥</span></span><br><span class="line"><span class="keyword">const</span> privateKey = key.exportKey(<span class="string">&#x27;pkcs8-private&#x27;</span>).toString(<span class="string">&#x27;base64&#x27;</span>) <span class="comment">// 私钥</span></span><br></pre></td></tr></table></figure>

<p>为了增强数据交换的安全性，一般会进行签名和验证操作：</p>
<ul>
<li>由于客户端的公钥是公开的，发送请求被拦截（中间人）， <strong>中间人是可以使用公钥对参数加密，替换拦截到的参数密文，发送给服务端</strong> ，这样就导致服务端无法判断得到的请求是否是可信的客户端发送的了（请求头是对的，但是参数被中间人替换了）</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> nodeRSA = <span class="built_in">require</span>(<span class="string">&#x27;node-rsa&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成一个1024长度的密钥对</span></span><br><span class="line"><span class="keyword">const</span> key = <span class="keyword">new</span> nodeRSA(&#123; <span class="attr">b</span>: <span class="number">1024</span> &#125;)</span><br><span class="line"><span class="keyword">const</span> publicKey = key.exportKey(<span class="string">&#x27;pkcs8-public&#x27;</span>) <span class="comment">// 公钥</span></span><br><span class="line"><span class="keyword">const</span> privateKey = key.exportKey(<span class="string">&#x27;pkcs8-private&#x27;</span>) <span class="comment">// 私钥</span></span><br><span class="line"><span class="keyword">const</span> txt = <span class="string">&#x27;123&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用公钥加密</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">encrypt</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> pubKey = <span class="keyword">new</span> nodeRSA(publicKey, <span class="string">&#x27;pkcs8-public&#x27;</span>)</span><br><span class="line">  <span class="keyword">return</span> pubKey.encrypt(Buffer.from(data), <span class="string">&#x27;base64&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用私钥解密</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">decrypt</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> priKey = <span class="keyword">new</span> nodeRSA(privateKey, <span class="string">&#x27;pkcs8-private&#x27;</span>)</span><br><span class="line">  <span class="keyword">return</span> priKey.decrypt(Buffer.from(data, <span class="string">&#x27;base64&#x27;</span>), <span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sign = encrypt(txt)</span><br><span class="line"><span class="keyword">const</span> _src = decrypt(sign)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;加密：&#x27;</span>, sign)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;解密：&#x27;</span>, _src)</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">加密： fBaBFVPv+96I/r6a2tfPbYWa0yjgJKQ+K2/E9obGNo0dYBOSBzW2PgnPOHX+/pq0wUZPxJzcwt5YcMtOsUNuZAYpaPZJ9o6IOEKj823HBNbyerDMUfU3rINCk2FilRuxFpQPmBZTbSvSumKligdtsh1Vz02DwdRgbJHp5bm4Hjk=</span></span><br><span class="line"><span class="comment">解密： 123</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用私钥对消息签名</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">signRSA</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> priKey = <span class="keyword">new</span> nodeRSA(privateKey, <span class="string">&#x27;pkcs8-private&#x27;</span>)</span><br><span class="line">  <span class="keyword">return</span> priKey.sign(Buffer.from(data), <span class="string">&#x27;hex&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用公钥验证签名</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">verifyRSA</span>(<span class="params">decrypt, signs</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> pubKey = <span class="keyword">new</span> nodeRSA(publicKey, <span class="string">&#x27;pkcs8-public&#x27;</span>)</span><br><span class="line">  <span class="keyword">return</span> pubKey.verify(Buffer.from(decrypt), signs, <span class="string">&#x27;utf8&#x27;</span>, <span class="string">&#x27;hex&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> signature = signRSA(sign)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;私钥签名：&#x27;</span> + signature)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;公钥验证：&#x27;</span> + verifyRSA(sign, signature))</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">私钥签名：873ae60fa3a5a89850185632b53e54b7c9919d146f2464a857f83679d9862e0612973c891994f6f576d4c04913a8b0a17b9b3adaa3577fcb81d637b2ede0c4a1cffadcaa99b81d09a7edfa69a813cd9f87fe52d96c371f6af533dd5577fdc0f6f7dc6857e1a78d425c0be71f7c440e44e8f932c4ed8890dba007721d10832e92</span></span><br><span class="line"><span class="comment">公钥验证：true</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h1 id="前后端接口加密"><a href="#前后端接口加密" class="headerlink" title="前后端接口加密"></a>前后端接口加密</h1><p>前端需要做的就是 2 件事情：</p>
<ol>
<li><p>统一处理数据的响应，在渲染到页面之前进行解密操作</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">service.interceptors.response.use(</span><br><span class="line">  response =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (response.config.responseType === <span class="string">&#x27;blob&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> response</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> res = response.data</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> res === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">      <span class="comment">// 对response.data进行处理</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
</li>
<li><p>请求的数据发出时，统一加密</p>
<p>get 请求对 data 进行加密</p>
<p>post 请求对 param 进行加密</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">service.interceptors.request.use(</span><br><span class="line">  config =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (config.method === <span class="string">&#x27;post&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> data = config.data</span><br><span class="line">      <span class="keyword">if</span> (data) &#123;</span><br><span class="line">        <span class="comment">// 对config.data进行处理</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (config.method === <span class="string">&#x27;get&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> params = config.params</span><br><span class="line">      <span class="keyword">if</span> (params) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">Object</span>.keys(params).length !== <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="comment">// 对config.params进行处理</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> config</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

</li>
</ol>
<blockquote>
<p>前后端请求加密操作可以参考：<a href="https://www.cnblogs.com/wangweizhang/p/12883671.html">前后端API交互加密解密（js、Java）</a></p>
</blockquote>
<p>到此为止前后端交互通信已经做了加密操作，接下来最重要的就是如何保证加密的 key 不泄露？</p>
<ul>
<li>服务端啊安全性较高，可以存储在数据库文件或配置文件中，前端就很危险了</li>
</ul>
<p>下面是动态获取加密 key 的方式：</p>
<ul>
<li>用 RSA 加密传输 AES 的秘钥，用 AES 加密数据，两者相互结合优势互补</li>
</ul>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/js-img/%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%92%8C%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%8E%A5%E5%8F%A3%E5%8A%A0%E5%AF%86.png"></p>
<ol>
<li>客户端发送请求，服务端用 RSA 生成一对公钥和私钥 pub1、pri1，将公钥 pub1 返给客户端</li>
<li>客户端拿到服务端返回的公钥 pub1 后，先用 RSA 算法生成一对公钥和私钥 pub2、pri2，之后用公钥 pub2 对 pub1 加密，加密之后传输给服务端</li>
<li>服务端收到客户端传输的密文，用私钥 pri1 解密（数据是用 pub1 加密的）拿到客户端生成的公钥 pub2</li>
<li>服务端用 AES 生成加密 key 用公钥 pub2 加密，返给客户端，客户端用 pri2 进行解密。以后服务端数据都通过 AES 加密，客户端用对应的 key 进行解密即可</li>
</ol>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>RSA</tag>
        <tag>MD5</tag>
        <tag>SHA</tag>
        <tag>AES</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue 中使用 Upload 组件上传图片</title>
    <url>/posts/5b8836c3/</url>
    <content><![CDATA[<p>vue 中使用 Element 的 upload 组件上传 Excel，大致可以分两种情况</p>
<ol>
<li><p>使用 <code>action</code> 上传到服务器</p>
<p>如下不讨论使用 action 上传服务器，如需了解可以参考：<a href="https://blog.csdn.net/qq_38689395/article/details/118419678">Vue 中使用 Upload 组件上传 Excel</a></p>
</li>
<li><p>使用 <code>axios</code> 上传到服务器</p>
<p>这里主要阐述如下两种情况</p>
<ul>
<li>使用 FormData 上传</li>
<li>使用 base64 上传</li>
</ul>
</li>
</ol>
<a id="more"></a>

<h2 id="基础知识（原理）"><a href="#基础知识（原理）" class="headerlink" title="基础知识（原理）"></a>基础知识（原理）</h2><p><strong>input file 属性</strong></p>
<ul>
<li>accept：可选择的文件类型，例如：<code>image/*</code></li>
<li>multiple：允许用户选择多个文件</li>
</ul>
<p>监听 input file 的 onchange 事件，打印 <code>this.files</code> 是 <strong>选取的文件集合</strong>，每一项就是选择的文件。每一项 files 包含如下属性：</p>
<ul>
<li>lastModified</li>
<li>lastModifiedDate</li>
<li>name</li>
<li>size</li>
<li>type</li>
</ul>
<h2 id="方案1：FormData-上传"><a href="#方案1：FormData-上传" class="headerlink" title="方案1：FormData 上传"></a>方案1：FormData 上传</h2><p>将本地数据上传或导入数据库，有时候需要使用 FormData 对象。FormData 接口提供了一种表示表单数据的键值对 <code>key/value</code> 的构造方式，组成一个 queryString 提交到后台</p>
<p><strong>注意：如下直接打印 formData 里面是空的，formData 需要用 get 方法获取值</strong></p>
<p>代码如下：（这个例子是只要导入就会立即上传）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  &lt;el-upload</span><br><span class="line">    ref=&quot;upload&quot;</span><br><span class="line">    multiple</span><br><span class="line">    action</span><br><span class="line">    :accept=&quot;fileType.join(&#x27;,&#x27;)&quot;</span><br><span class="line">    :http-request=&quot;submitUpload&quot;</span><br><span class="line">    :before-upload=&quot;beforeUpload&quot;</span><br><span class="line">    drag</span><br><span class="line">  &gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;el-icon-upload&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">&quot;tip&quot;</span> <span class="attr">class</span>=<span class="string">&quot;el-upload__tip&quot;</span> <span class="attr">style</span>=<span class="string">&quot;color:red&quot;</span>&gt;</span></span><br><span class="line">      提示：仅允许导入“png”、“jpg”、“jpeg”格式文件，且不超过2M！</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-upload</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123; uploadFile &#125; <span class="keyword">from</span> <span class="string">&#x27;../api/index&#x27;</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      fileType: [<span class="string">&#x27;image/jpeg&#x27;</span>, <span class="string">&#x27;image/jpg&#x27;</span>, <span class="string">&#x27;image/png&#x27;</span>]</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">submitUpload</span>(<span class="params">req</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> formData = <span class="keyword">new</span> FormData()</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> config = &#123;</span></span><br><span class="line">        headers: &#123;</span><br><span class="line"><span class="javascript">          <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;multipart/form-data&#x27;</span></span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="javascript">      formData.append(<span class="string">&#x27;file&#x27;</span>, req.file)</span></span><br><span class="line"><span class="javascript">      formData.append(<span class="string">&#x27;filename&#x27;</span>, req.filename)</span></span><br><span class="line"><span class="javascript">      uploadFile(<span class="string">&#x27;url&#x27;</span>, formData, config)</span></span><br><span class="line">    &#125;,</span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">beforeUpload</span>(<span class="params">file</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> isImg = <span class="built_in">this</span>.fileType.includes(file.type)</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> isLimit = file.size / <span class="number">1024</span> / <span class="number">1024</span> &lt; <span class="number">2</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (!isImg) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.$message.error(<span class="string">&#x27;上传图片只能是“png”、“jpg”、“jpeg”格式!&#x27;</span>)</span></span><br><span class="line">      &#125;</span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (!isLimit) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.$message.error(<span class="string">&#x27;上传图片大小不能超过 2MB!&#x27;</span>)</span></span><br><span class="line">      &#125;</span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> isImg &amp;&amp; isLimit</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="方案2：把选择的文件-base64-后上传"><a href="#方案2：把选择的文件-base64-后上传" class="headerlink" title="方案2：把选择的文件 base64 后上传"></a>方案2：把选择的文件 base64 后上传</h2><p>有一些小图片可能会采取前端 base64 上传。这里我们使用 H5 FileReader 对象，用 <code>readAsDataURL</code> 将文件转 base64 </p>
<p><strong>注意：<code>readAsDataURL 操作是异步的</code></strong></p>
<p>代码如下：（这个例子是手动点击上传再上传）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;el-upload</span><br><span class="line">      ref=<span class="string">&quot;upload&quot;</span></span><br><span class="line">      action</span><br><span class="line">      list-type=<span class="string">&quot;picture-card&quot;</span></span><br><span class="line">      :file-list=<span class="string">&quot;imgList&quot;</span></span><br><span class="line">      :accept=<span class="string">&quot;imgTool.type.join(&#x27;,&#x27;)&quot;</span></span><br><span class="line">      :on-change=<span class="string">&quot;handleChange&quot;</span></span><br><span class="line">      :on-remove=<span class="string">&quot;hadnleRemove&quot;</span></span><br><span class="line">      :auto-upload=<span class="string">&quot;false&quot;</span></span><br><span class="line">    &gt;</span><br><span class="line">      &lt;i <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;el-icon-upload&quot;</span> /&gt;</span><br><span class="line">      &lt;div slot=<span class="string">&quot;tip&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;el-upload__tip&quot;</span> style=<span class="string">&quot;color:red&quot;</span>&gt;</span><br><span class="line">        提示：仅允许导入“png”、“jpg”、“jpeg”格式文件，且不超过2M！</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/el-upload&gt;</span><br><span class="line">    &lt;el-button type=<span class="string">&quot;success&quot;</span> size=<span class="string">&quot;mini&quot;</span> @click=<span class="string">&quot;submitUpload&quot;</span>&gt;上传到服务器&lt;/el-button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; uploadFile &#125; <span class="keyword">from</span> <span class="string">&#x27;../api/index&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      imgTool: &#123;</span><br><span class="line">        type: [<span class="string">&#x27;image/jpeg&#x27;</span>, <span class="string">&#x27;image/jpg&#x27;</span>, <span class="string">&#x27;image/png&#x27;</span>],</span><br><span class="line">        size: <span class="number">2</span> * <span class="number">1024</span> * <span class="number">1024</span></span><br><span class="line">      &#125;,</span><br><span class="line">      imgList: []</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    <span class="keyword">async</span> <span class="function"><span class="title">submitUpload</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="built_in">this</span>.imgList)</span><br><span class="line">      <span class="keyword">const</span> base64Pro = <span class="built_in">this</span>.imgList.map(<span class="function"><span class="params">file</span> =&gt;</span> <span class="built_in">this</span>.fileReader(file.raw))</span><br><span class="line">      <span class="keyword">const</span> base64List = <span class="keyword">await</span> <span class="built_in">Promise</span>.all(base64Pro)</span><br><span class="line">      <span class="keyword">const</span> config = &#123;</span><br><span class="line">        headers: &#123;</span><br><span class="line">          <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      base64List.forEach(<span class="function">(<span class="params">item, i</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> data = &#123;</span><br><span class="line">          base64: <span class="built_in">decodeURIComponent</span>(item),</span><br><span class="line">          name: <span class="built_in">this</span>.imgList[i].name</span><br><span class="line">        &#125;</span><br><span class="line">        uploadFile(<span class="string">&#x27;url&#x27;</span>, data, config)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">handleChange</span>(<span class="params">file, filList</span>)</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> isImg = <span class="built_in">this</span>.imgTool.type.includes(file.raw.type)</span><br><span class="line">      <span class="keyword">const</span> isLimit = file.size &lt; <span class="built_in">this</span>.imgTool.size</span><br><span class="line">      <span class="keyword">if</span> (!isImg) &#123;</span><br><span class="line">        <span class="built_in">this</span>.$message.error(<span class="string">&#x27;上传图片只能是“png”、“jpg”、“jpeg”格式!&#x27;</span>)</span><br><span class="line">        <span class="built_in">this</span>.imgList = filList.filter(<span class="function"><span class="params">v</span> =&gt;</span> v.uid !== file.uid)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (!isLimit) &#123;</span><br><span class="line">        <span class="built_in">this</span>.$message.error(<span class="string">&#x27;上传图片大小不能超过 2MB!&#x27;</span>)</span><br><span class="line">        <span class="built_in">this</span>.imgList = filList.filter(<span class="function"><span class="params">v</span> =&gt;</span> v.uid !== file.uid)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">this</span>.imgList.push(file)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">hadnleRemove</span>(<span class="params">_, fileList</span>)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.imgList = fileList</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">fileReader</span>(<span class="params">file</span>)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> reader = <span class="keyword">new</span> FileReader()</span><br><span class="line">        reader.readAsDataURL(file)</span><br><span class="line">        reader.onload = <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">          resolve(e.target.result)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>上述案例是本地文件转 base64，如需在线图片转 base64，可以参考 <a href="https://juejin.cn/post/6844903639086006279#heading-6">用Vue来实现图片上传多种方式</a></p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>Element</tag>
        <tag>form-data</tag>
        <tag>base64</tag>
      </tags>
  </entry>
  <entry>
    <title>Axios 取消请求</title>
    <url>/posts/a688a8da/</url>
    <content><![CDATA[<h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>取消请求偶尔会用到，以下是两个工作中可能用到的场景</p>
<ol>
<li>如果一个数据请求量比较大（可能会请求错误），还没请求完就切换路由，可能会出现错误的提示框（响应拦截器中配置错误提示）</li>
<li>导出文件或下载文件时，中途取消</li>
<li>一个请求请求量比较大，发送新请求时需要取消上一个请求</li>
</ol>
<a id="more"></a>

<h2 id="取消单个请求（结合生命周期使用）"><a href="#取消单个请求（结合生命周期使用）" class="headerlink" title="取消单个请求（结合生命周期使用）"></a>取消单个请求（结合生命周期使用）</h2><ul>
<li>页面销毁时取消请求</li>
<li>重复发送请求取消上一次请求</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; generatePlan &#125; <span class="keyword">from</span> <span class="string">&#x27;@/api&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      $cancel: <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">destroyed</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.cancelPost()</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    <span class="function"><span class="title">generateList</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> self = <span class="built_in">this</span></span><br><span class="line">      <span class="built_in">this</span>.$confirm(<span class="string">&#x27;生成时间比较长，您是否确定生成？&#x27;</span>, <span class="string">&#x27;警告&#x27;</span>, &#123;</span><br><span class="line">        confirmButtonText: <span class="string">&#x27;确定&#x27;</span>,</span><br><span class="line">        cancaelButtonText: <span class="string">&#x27;取消&#x27;</span>,</span><br><span class="line">      &#125;)</span><br><span class="line">        .then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="built_in">this</span>.cancelPost()</span><br><span class="line">          <span class="comment">// post请求</span></span><br><span class="line">          <span class="keyword">return</span> generatePlan(&#123;</span><br><span class="line">            params: <span class="built_in">this</span>.listQuery,</span><br><span class="line">            cancelToken: <span class="keyword">new</span> axios.CancelToken(<span class="function"><span class="keyword">function</span> <span class="title">exector</span>(<span class="params">c</span>) </span>&#123;</span><br><span class="line">              self.$cancel = c</span><br><span class="line">            &#125;),</span><br><span class="line">          &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (res.code === <span class="number">200</span>) <span class="built_in">this</span>.list = res.data.result</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">        .catch(<span class="function">() =&gt;</span> &#123;&#125;)</span><br><span class="line">        .finally(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          self.$cancel = <span class="literal">null</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">cancelPost</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">typeof</span> <span class="built_in">this</span>.$cancel === <span class="string">&#x27;function&#x27;</span> ? <span class="built_in">this</span>.$cancel(<span class="string">&#x27;取消请求&#x27;</span>) : <span class="literal">null</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="取消所有请求（结合导航守卫）"><a href="#取消所有请求（结合导航守卫）" class="headerlink" title="取消所有请求（结合导航守卫）"></a>取消所有请求（结合导航守卫）</h2><p>思路：在请求拦截器中，给所有请求加一个 token，设置全局变量 source 控制 cancel token，在路由变化时调用 cancel 方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">http.interceptors.request.use(</span><br><span class="line">  config =&gt; &#123;</span><br><span class="line">    config.cancelToken = store.source.token</span><br><span class="line">    <span class="keyword">return</span> config</span><br><span class="line">  &#125;,</span><br><span class="line">  error =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> CancelToken = axios.CancelToken</span><br><span class="line">  store.source.cancel &amp;&amp; store.source.cancel()</span><br><span class="line">  store.source = CancelToken.source()</span><br><span class="line">  next()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="axios-取消请求原理"><a href="#axios-取消请求原理" class="headerlink" title="axios 取消请求原理"></a>axios 取消请求原理</h2><p>axios 是对 XMLHttpRequest 的封装，使用 XMLHttpRequest 实例的 abort()方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// https://github.com/axios/axios/blob/master/lib/adapters/xhr.js</span></span><br><span class="line"><span class="keyword">if</span> (config.cancelToken) &#123;</span><br><span class="line">  <span class="comment">// Handle cancellation</span></span><br><span class="line">  config.cancelToken.promise.then(<span class="function"><span class="keyword">function</span> <span class="title">onCanceled</span>(<span class="params">cancel</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!request) &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    request.abort()</span><br><span class="line">    reject(cancel)</span><br><span class="line">    <span class="comment">// Clean up request</span></span><br><span class="line">    request = <span class="literal">null</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>Axios</tag>
        <tag>二次封装</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue 自定义指令应用场景</title>
    <url>/posts/13e591df/</url>
    <content><![CDATA[<h2 id="Vue-自定义指令应用场景"><a href="#Vue-自定义指令应用场景" class="headerlink" title="Vue 自定义指令应用场景"></a>Vue 自定义指令应用场景</h2><blockquote>
<p>这段是从官网 copy 过来的，相信应该都一看就明白的</p>
</blockquote>
<ul>
<li>bind: 只调用一次，指令第一次绑定到元素时调用。在这里可以进行一次性的初始化设置</li>
<li>inserted: 被绑定元素插入父节点时调用 (仅保证父节点存在，但不一定已被插入文档中)</li>
<li>update: 所在组件的 VNode 更新时调用，但是可能发生在其子 VNode 更新之前。指令的值可能发生了改变，也可能没有</li>
<li>componentUpdated：指令所在组件的 VNode 及其子 VNode 全部更新后调用</li>
<li>unbind: 只调用一次，指令与元素解绑时调用</li>
</ul>
<a id="more"></a>

<h3 id="1-权限校验-v-permission"><a href="#1-权限校验-v-permission" class="headerlink" title="1.权限校验 v-permission"></a>1.权限校验 v-permission</h3><p>权限校验一般分为页面级别和按钮级别，其两种思路基本一致</p>
<p>详细可以参考：<a href="https://juejin.cn/post/6844903478880370701">手摸手，带你用 vue 撸后台 系列二(登录权限篇)</a>，如下简单说一下</p>
<p><strong>页面级别：</strong></p>
<ol>
<li>最快想到的可能就是使用 beforeEach，首先把所有路由都注册，用户登录后拿到后端返回的权限信息，如果没有此权限统一个提示信息<br>不过大部分需求都不希望你这么做，没有权限就不显示</li>
<li>首先把所有路由都注册，不过上来给所有路由做一个标识（前后端约定一下），根据这个标识显示/隐藏</li>
<li>路由完全由后端负责，按照后端返回的信息生成最终用户可访问的路由表，最后通过 <code>router.addRoutes</code> 动态挂载</li>
</ol>
<p><strong>按钮级别：</strong></p>
<ol>
<li>逻辑比较简单，使用 v-if 根据权限显示/隐藏</li>
<li>逻辑稍微复杂一点，使用自定义指令显示/隐藏</li>
</ol>
<p><strong>思路：</strong></p>
<ol>
<li>自定义一个权限数组（这里我放到 vuex 中）</li>
<li>判断用户的权限是否在这个数组内，如果在就显示，不在就移除</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;@/store&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkPermission</span>(<span class="params">el, binding</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; value &#125; = binding</span><br><span class="line">  <span class="keyword">const</span> roles = store.getters &amp;&amp; store.getters.roles</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (value &amp;&amp; <span class="built_in">Array</span>.isArray(value)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (value.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> hasPermission = roles.some(<span class="function"><span class="params">role</span> =&gt;</span> value.includes(role))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!hasPermission) &#123;</span><br><span class="line">      el.parentNode &amp;&amp; el.parentNode.removeChild(el)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`please use such as v-permission=&quot;[&#x27;admin&#x27;, &#x27;editor&#x27;]&quot;`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Vue.directive(<span class="string">&#x27;permission&#x27;</span>, &#123;</span><br><span class="line">  <span class="function"><span class="title">inserted</span>(<span class="params">el, binding</span>)</span> &#123;</span><br><span class="line">    checkPermission(el, binding)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">update</span>(<span class="params">el, binding</span>)</span> &#123;</span><br><span class="line">    checkPermission(el, binding)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="2-复制指令"><a href="#2-复制指令" class="headerlink" title="2.复制指令"></a>2.复制指令</h3><p><strong>思路：</strong></p>
<ol>
<li>动态创建 <code>textarea</code> 标签，并设置 <code>readOnly</code> 属性，并将其移出可视区域</li>
<li>将要复制的值赋给 <code>textarea</code> 标签的 <code>value</code> 属性，并插入到 body</li>
<li>选中值 <code>textarea</code> 并复制</li>
<li>将 body 中插入的 <code>textarea</code> 移除</li>
<li>在第一次调用时绑定事件，在解绑时移除事件</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Message &#125; <span class="keyword">from</span> <span class="string">&#x27;element-ui&#x27;</span></span><br><span class="line"></span><br><span class="line">Vue.directive(<span class="string">&#x27;copy&#x27;</span>, &#123;</span><br><span class="line">  <span class="function"><span class="title">bind</span>(<span class="params">el, &#123; value &#125;</span>)</span> &#123;</span><br><span class="line">    el.$value = value</span><br><span class="line">    el.$handle = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">let</span> textValue = el.$value</span><br><span class="line">      <span class="keyword">if</span> (!text) &#123;</span><br><span class="line">        Message(&#123;</span><br><span class="line">          message: <span class="string">&#x27;复制内容不能为空&#x27;</span>,</span><br><span class="line">          type: <span class="string">&#x27;warning&#x27;</span>,</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 步骤1</span></span><br><span class="line">      <span class="keyword">const</span> textarea = <span class="built_in">document</span>.createElement(<span class="string">&#x27;textarea&#x27;</span>)</span><br><span class="line">      textarea.readOnly = <span class="string">&#x27;readonly&#x27;</span></span><br><span class="line">      textarea.style.cssText = <span class="string">&#x27;opacity:0;position:fixed;left:-9999px&#x27;</span></span><br><span class="line">      <span class="comment">// 步骤2</span></span><br><span class="line">      textarea.value = textValue</span><br><span class="line">      <span class="built_in">document</span>.body.appendChild(textarea)</span><br><span class="line">      <span class="comment">// 步骤3</span></span><br><span class="line">      textarea.select()</span><br><span class="line">      <span class="keyword">const</span> copyText = <span class="built_in">document</span>.execCommand(<span class="string">&#x27;copy&#x27;</span>)</span><br><span class="line">      <span class="keyword">if</span> (copyText) &#123;</span><br><span class="line">        Message(&#123;</span><br><span class="line">          message: <span class="string">&#x27;复制成功&#x27;</span>,</span><br><span class="line">          type: <span class="string">&#x27;success&#x27;</span>,</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 步骤4</span></span><br><span class="line">      <span class="built_in">document</span>.body.removeChild(textarea)</span><br><span class="line">    &#125;</span><br><span class="line">    el.addEventListener(<span class="string">&#x27;click&#x27;</span>, el.$handle)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 当传入进来的值更新的时候触发</span></span><br><span class="line">  <span class="function"><span class="title">componentUpdated</span>(<span class="params">el, &#123; value &#125;</span>)</span> &#123;</span><br><span class="line">    el.$value = value</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">unbind</span>(<span class="params">el</span>)</span> &#123;</span><br><span class="line">    el.removeEventListener(<span class="string">&#x27;click&#x27;</span>, el.$handle)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="3-防抖节流"><a href="#3-防抖节流" class="headerlink" title="3.防抖节流"></a>3.防抖节流</h3><p>钩子函数参数</p>
<ul>
<li><code>arg</code>：传给指令的参数，可选。例如 <code>v-my-directive:foo</code> 中，参数为 <code>&quot;foo&quot;</code></li>
<li><code>modifiers</code>：一个包含修饰符的对象。例如：<code>v-my-directive.foo.bar</code> 中，修饰符对象为 <code>&#123; foo: true, bar: true &#125;</code></li>
</ul>
<p><strong>思路：</strong></p>
<ul>
<li>通过 <code>addEventListener</code>监听事件</li>
<li>调用方式：<code>&lt;button v-debounce:300.immediate=&quot;fn&quot;&gt;click&lt;/button&gt;</code></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">func, wait, immediate</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> timer = <span class="literal">null</span>,</span><br><span class="line">        result;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">proxy</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> self = <span class="built_in">this</span>,</span><br><span class="line">            params = [].slice.call(<span class="built_in">arguments</span>),</span><br><span class="line">            callNow = !timer &amp;&amp; immediate;</span><br><span class="line">        <span class="keyword">if</span> (timer) <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">        timer = <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">            timer = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (!immediate) result = func.apply(self, params);</span><br><span class="line">        &#125;, wait);</span><br><span class="line">        <span class="keyword">if</span> (callNow) result = func.apply(self, params);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">func, wait</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> timer = <span class="literal">null</span>,</span><br><span class="line">        previous = <span class="number">0</span>,</span><br><span class="line">        result;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">proxy</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> self = <span class="built_in">this</span>,</span><br><span class="line">            params = [].slice.call(<span class="built_in">arguments</span>);</span><br><span class="line">        <span class="keyword">var</span> now = +<span class="keyword">new</span> <span class="built_in">Date</span>,</span><br><span class="line">            remaining = wait - (now - previous);</span><br><span class="line">        <span class="keyword">if</span> (remaining &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (timer) &#123;</span><br><span class="line">                <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">                timer = <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            previous = now;</span><br><span class="line">            result = func.apply(self, params);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!timer) &#123;</span><br><span class="line">            timer = <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">                timer = <span class="literal">null</span>;</span><br><span class="line">                previous = +<span class="keyword">new</span> <span class="built_in">Date</span>;</span><br><span class="line">                result = func.apply(self, params);</span><br><span class="line">            &#125;, remaining);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  <span class="function"><span class="title">bind</span>(<span class="params">el, binding</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> &#123; value &#125; = binding.value,</span><br><span class="line">      immediate = <span class="literal">false</span>,</span><br><span class="line">      wait = <span class="number">500</span>,</span><br><span class="line">      type = <span class="string">&#x27;click&#x27;</span>,</span><br><span class="line">      params = [],</span><br><span class="line">      func,</span><br><span class="line">      handle = binding.name === <span class="string">&#x27;debounce&#x27;</span> ? debounce : throttle</span><br><span class="line">    <span class="keyword">if</span> (value === <span class="literal">null</span>) <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> val !== <span class="string">&#x27;object&#x27;</span> &amp;&amp; <span class="keyword">typeof</span> value !== <span class="string">&#x27;function&#x27;</span>) <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">if</span> (binding.arg) wait = +binding.arg</span><br><span class="line">    <span class="keyword">if</span> (binding.modifiers &amp;&amp; binding.modifiers.immediate) immediate = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> value === <span class="string">&#x27;function&#x27;</span>) func = value</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> value === <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">      func = value.func || <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">      type = value.type || <span class="string">&#x27;click&#x27;</span></span><br><span class="line">      params = value.params || []</span><br><span class="line">    &#125;</span><br><span class="line">    el.$type = type</span><br><span class="line">    el.$handle = handle(</span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">proxy</span>(<span class="params">...arg</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> func.call(<span class="built_in">this</span>, ...params.concat(arg))</span><br><span class="line">      &#125;,</span><br><span class="line">      wait,</span><br><span class="line">      immediate</span><br><span class="line">    )</span><br><span class="line">    el.addEventListener(el.$type, el.$handle)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">unbind</span>(<span class="params">el</span>)</span> &#123;</span><br><span class="line">    el.removeEventListener(el.$type, el.$handle)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Vue.directive(<span class="string">&#x27;debounce&#x27;</span>, config)</span><br><span class="line">Vue.directive(<span class="string">&#x27;throttle&#x27;</span>, config)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>自定义指令</tag>
        <tag>权限校验</tag>
        <tag>复制</tag>
        <tag>防抖节流</tag>
      </tags>
  </entry>
  <entry>
    <title>免安装版 MySQL（附带 SQLyog 安装包）</title>
    <url>/posts/5a7a946b/</url>
    <content><![CDATA[<h2 id="MySQL-免安装包"><a href="#MySQL-免安装包" class="headerlink" title="MySQL 免安装包"></a>MySQL 免安装包</h2><p>链接：<a href="https://pan.baidu.com/s/1T0m9hKmVAfEBRpOTbfTTHg">https://pan.baidu.com/s/1T0m9hKmVAfEBRpOTbfTTHg</a><br>提取码：1234 </p>
<ul>
<li><p>里面有 32 位安装包和 64 位安装包</p>
<h2 id="SQLyog-免安装包"><a href="#SQLyog-免安装包" class="headerlink" title="SQLyog 免安装包"></a>SQLyog 免安装包</h2><p>链接：<a href="https://pan.baidu.com/s/1v6jNPZID2vlIfdUsRbR5rw">https://pan.baidu.com/s/1v6jNPZID2vlIfdUsRbR5rw</a><br>提取码：1234 </p>
</li>
<li><p>里面有 32 位安装包和 64 位安装包，直接点击exe文件安装，最后输入破解序列号即可永久使用</p>
</li>
</ul>
<a id="more"></a>
<h2 id="MySQL-配置"><a href="#MySQL-配置" class="headerlink" title="MySQL 配置"></a>MySQL 配置</h2><ol>
<li>以<strong>管理员身份</strong>打开命令行，否则后续命令行部分命令需要权限，出现错误</li>
</ol>
<p><img data-src="https://img-blog.csdnimg.cn/img_convert/ac5ca3564e090872c1f6603b2d77c741.png"></p>
<ol start="2">
<li>切换目录。切换到 MySQL 的 bin 目录下，我把 MySQL 放到 E 盘里了： <code>cd E:\mysql-5.7.15-winx64\bin &amp;&amp; e:</code></li>
</ol>
<p><img data-src="https://img-blog.csdnimg.cn/img_convert/6b0e8acb85a135e7a851332ebd4d7575.png"></p>
<ol start="3">
<li>安装 MySQL的服务：<code>mysqld --install</code></li>
</ol>
<p><img data-src="https://img-blog.csdnimg.cn/img_convert/0b71b2ba5aa1519011bc3813aa3fda03.png"></p>
<ol start="4">
<li>初始化 MySQL，初始化会产生一个随机密码，<strong>需要记住这个密码</strong>，后续会用到：<code>mysqld --initialize --console</code></li>
</ol>
<p><img data-src="https://img-blog.csdnimg.cn/img_convert/9679d8276c66f91db7c42fa185b37f75.png"></p>
<ol start="5">
<li>开启 MySQL 服务：<code>net start mysql</code></li>
</ol>
<p><img data-src="https://img-blog.csdnimg.cn/img_convert/bd059673886450637521774116d49b11.png"></p>
<ol start="6">
<li>登录验证。注意：这里的密码是初始化（步骤4）产生的随机密码；一定要先开启服务，再登录验证，不然会提示拒绝访问</li>
</ol>
<p><img data-src="https://img-blog.csdnimg.cn/img_convert/5b145a5f42335bf2b07604070ee93b79.png"></p>
<ol start="7">
<li><p>修改密码。由于初始化的随机密码太复杂，不便于我们登录（记得结尾加 <code>;</code> ）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SET PASSWORD = PASSWORD(<span class="string">&#x27;123456&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p><img data-src="https://img-blog.csdnimg.cn/img_convert/777541fe2e82111e0cf0a3ee999d6051.png"></p>
</li>
</ol>
<h2 id="环境变量设置"><a href="#环境变量设置" class="headerlink" title="环境变量设置"></a>环境变量设置</h2><p>点击 “我的电脑” –&gt; “属性” –&gt; ‘’高级系统设置’’ –&gt; ‘’环境变量’’</p>
<p><img data-src="https://img-blog.csdnimg.cn/img_convert/ba4c3eabda8a6f4f04de19904ae56d28.png"></p>
<p>配置完成之后，每当我们想要用命令行使用 mysql 时，只需要登录即可使用</p>
<p><img data-src="https://img-blog.csdnimg.cn/img_convert/ff609eee38ff3da7be13555747104899.png"></p>
<p>在 mysql 目录下新建一个 <code>my.init</code> 文件，在里面粘贴如下代码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">character-set-server=utf8mb4</span><br><span class="line">bind-address=0.0.0.0</span><br><span class="line">port=3306</span><br><span class="line">default-storage-engine=INNODB</span><br><span class="line">[mysql]</span><br><span class="line">default-character-set=utf8mb4</span><br><span class="line">[client]</span><br><span class="line">default-character-set=utf8mb4</span><br></pre></td></tr></table></figure>

<p>这样，免安装版的 MySQL 就安装并配置完成了</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>SQL</tag>
        <tag>SQLyog</tag>
        <tag>安装步骤</tag>
      </tags>
  </entry>
  <entry>
    <title>动态路由（前端后端控制）</title>
    <url>/posts/ff471169/</url>
    <content><![CDATA[<h2 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h2><p>后台管理系统，大部分都会涉及到权限控制这一项需求，即：根据不同登录角色渲染不同页面功能</p>
<p>现在主流有两种方式：</p>
<ol>
<li><p>前端控制</p>
<p>逻辑简单，上手快</p>
</li>
<li><p>后端控制</p>
<p>相对安全，需要后期改动</p>
</li>
</ol>
<a id="more"></a>

<h2 id="后端控制"><a href="#后端控制" class="headerlink" title="后端控制"></a>后端控制</h2><p>后端路由是大部分后台管理项目的解决方案</p>
<p>核心：用户登录以后，后端根据该角色生成可访问的路由数据，前端根据这个路由数据转换成自己需要的路由结构</p>
<p>具体代码结构：</p>
<ol>
<li><p>router 文件中，只放一些静态路由和公共路由</p>
<p>代码参考：<a href="https://github.com/PanJiaChen/vue-element-admin/blob/master/src/router/index.js">https://github.com/PanJiaChen/vue-element-admin/blob/master/src/router/index.js</a></p>
</li>
<li><p>在 vuex 中写一个 state，把路由和获取到的角色进行匹配，控制菜单栏的显示隐藏</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; constantRoutes &#125; <span class="keyword">from</span> <span class="string">&#x27;@/router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; getRoutes &#125; <span class="keyword">from</span> <span class="string">&#x27;@/api/menu&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Layout <span class="keyword">from</span> <span class="string">&#x27;@/layout/index&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历后台传来的路由字符串，转换为组件对象</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filterAsyncRoutes</span>(<span class="params">asyncRouterMap</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> asyncRouterMap.filter(<span class="function"><span class="params">route</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (route.component) &#123;</span><br><span class="line">      <span class="comment">// Layout组件特殊处理</span></span><br><span class="line">      <span class="keyword">if</span> (route.component === <span class="string">&#x27;Layout&#x27;</span>) &#123;</span><br><span class="line">        route.component = Layout</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        route.component = loadView(route.component)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (route.children &amp;&amp; route.children.length) &#123;</span><br><span class="line">      route.children = filterAsyncRoutes(route.children)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadView</span>(<span class="params">view</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 注意：webpack4动态import不支持变量方式，如下写法是不行的</span></span><br><span class="line">  <span class="comment">// return () =&gt; import(`@/views/$&#123;view&#125;`)</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">require</span>([<span class="string">`@/views/<span class="subst">$&#123;view&#125;</span>`</span>], resolve)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> permission = &#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    routes: [],</span><br><span class="line">    addRoutes: [],</span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    SET_ROUTES: <span class="function">(<span class="params">state, routes</span>) =&gt;</span> &#123;</span><br><span class="line">      state.addRoutes = routes</span><br><span class="line">      state.routes = constantRoutes.concat(routes)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  actions: &#123;</span><br><span class="line">    <span class="function"><span class="title">GenerateRoutes</span>(<span class="params">&#123; commit &#125;</span>)</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> Id = sessionStorage.getItem(<span class="string">&#x27;SESSION_KEY&#x27;</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">        getRoutes(Id).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> accessedRoutes = filterAsyncRoutes(res.data)</span><br><span class="line">          accessedRoutes.push(&#123; <span class="attr">path</span>: <span class="string">&#x27;*&#x27;</span>, <span class="attr">redirect</span>: <span class="string">&#x27;/404&#x27;</span>, <span class="attr">hidden</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">          commit(<span class="string">&#x27;SET_ROUTES&#x27;</span>, accessedRoutes)</span><br><span class="line">          resolve(accessedRoutes)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>给后端整理一份前端需要的 router 数据结构</p>
<p>一般必须有的参数：id、path、name、title、children</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">path: <span class="comment"># 路由地址</span></span><br><span class="line">name: <span class="comment"># 路由名称</span></span><br><span class="line">id: <span class="comment"># id</span></span><br><span class="line">component: <span class="comment"># 组件路径</span></span><br><span class="line">meta-&gt;title: <span class="comment"># 菜单名称(和path同级就可以)</span></span><br><span class="line">meta-&gt;icon: <span class="comment"># 菜单图标(和path同级就可以)</span></span><br><span class="line">meta-&gt;<span class="built_in">type</span>: <span class="comment"># 菜单类型，用于区分模块、目录、菜单、按钮</span></span><br><span class="line">meta-&gt;hidden: <span class="comment"># 是否全局隐藏此菜单</span></span><br><span class="line">children: <span class="comment"># 子集集合</span></span><br></pre></td></tr></table></figure>

<p>如果后端传的不是 children，是 parentId 那种类型，则需要写一个转换方法</p>
<p>方法可以参考这篇文章：<a href="https://blog.csdn.net/qq_38689395/article/details/116019842?spm=1001.2014.3001.5501">Vue 封装无限层级树形菜单组件（后台传的是扁平数组）</a></p>
</li>
<li><p>在导航守卫中，使用 <code>router.beforeEach</code> 进行拦截，可以动态添加可访问的路由表（使用 addRoutes 添加）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> NProgress <span class="keyword">from</span> <span class="string">&#x27;nprogress&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;nprogress/nprogress.css&#x27;</span></span><br><span class="line"></span><br><span class="line">NProgress.configure(&#123; <span class="attr">showSpinner</span>: <span class="literal">false</span> &#125;)</span><br><span class="line"><span class="keyword">const</span> whiteList = [<span class="string">&#x27;/login&#x27;</span>, <span class="string">&#x27;/auth-redirect&#x27;</span>, <span class="string">&#x27;/bind&#x27;</span>, <span class="string">&#x27;/register&#x27;</span>]</span><br><span class="line"></span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  NProgress.start()</span><br><span class="line">  <span class="comment">// 判断是否有token</span></span><br><span class="line">  <span class="keyword">if</span> (store.getters.token) &#123;</span><br><span class="line">    <span class="keyword">if</span> (to.path === <span class="string">&#x27;/login&#x27;</span>) &#123;</span><br><span class="line">      next(&#123; <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span> &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 判断当前用户是否已拉取完user_info信息</span></span><br><span class="line">      <span class="keyword">if</span> (store.getters.roles.length === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 获取info信息</span></span><br><span class="line">        store.dispatch(<span class="string">&#x27;GetInfo&#x27;</span>).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> roles = res.roles</span><br><span class="line">          store</span><br><span class="line">            .dispatch(<span class="string">&#x27;GenerateRoutes&#x27;</span>, &#123; roles &#125;)</span><br><span class="line">            .then(<span class="function"><span class="params">accessRoutes</span> =&gt;</span> &#123;</span><br><span class="line">              <span class="comment">// 动态添加可访问路由表</span></span><br><span class="line">              router.addRoutes(accessRoutes)</span><br><span class="line">              <span class="comment">// hack方法 确保addRoutes已完成</span></span><br><span class="line">              next(&#123; ...to, <span class="attr">replace</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">            &#125;)</span><br><span class="line">            .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">              <span class="built_in">console</span>.log(err)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 当有用户权限的时候，说明可访问路由表已生成</span></span><br><span class="line">        next()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (whiteList.includes(to.path)) &#123;</span><br><span class="line">      <span class="comment">// 在免登录白名单，直接进入</span></span><br><span class="line">      next()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 否则全部重定向到登录页</span></span><br><span class="line">      next(<span class="string">&#x27;/login&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>从 router 中取出可用的路由对象，来进行侧边栏的渲染</p>
</li>
</ol>
<p>也可以参考这篇文章：<a href="https://blog.csdn.net/weixin_46923775/article/details/108366807?utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~default-18.control&dist_request_id=1619664910213_44556&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~default-18.control">后端控制路由</a></p>
<h2 id="前端控制"><a href="#前端控制" class="headerlink" title="前端控制"></a>前端控制</h2><p>可以参考花裤衩的文章，<a href="https://segmentfault.com/a/1190000009506097">手摸手，带你用vue撸后台 系列二(登录权限篇)</a></p>
<p>核心：通过 token 获取用户的 role，根据 role 动态跟路由表 <code>meta.role</code> 进行匹配，形成可访问的路由再通过 <code>router.addRotes</code> 动态挂载路由</p>
<p>具体代码结构：</p>
<ul>
<li>可以参考：<a href="https://juejin.cn/post/6844904145267195917">动态路由前端控制还是后端控制？（附代码）</a></li>
</ul>
<ol>
<li><p>把动态路由和静态路由分别写在 router 文件中（<code>asyncRoutes/constantRoutes</code>）。在动态路由的 meta 元信息中添加 roles 权限</p>
<p>代码参考：<a href="https://github.com/PanJiaChen/vue-element-admin/blob/master/src/router/index.js">https://github.com/PanJiaChen/vue-element-admin/blob/master/src/router/index.js</a></p>
</li>
<li><p>在 vuex 中写一个 state，把路由和获取到的角色进行匹配，控制菜单栏的显示隐藏</p>
<p>代码参考：<a href="https://github.com/PanJiaChen/vue-element-admin/blob/master/src/store/modules/permission.js">https://github.com/PanJiaChen/vue-element-admin/blob/master/src/store/modules/permission.js</a></p>
</li>
<li><p>在导航守卫中，使用 <code>router.beforeEach</code> 进行拦截，可以动态添加可访问的路由表（使用 addRoutes 添加）</p>
<p><a href="https://github.com/PanJiaChen/vue-element-admin/blob/master/src/permission.js">https://github.com/PanJiaChen/vue-element-admin/blob/master/src/permission.js</a></p>
</li>
<li><p>从 router 中取出可用的路由对象，来进行侧边栏的渲染</p>
<p><a href="https://github.com/PanJiaChen/vue-element-admin/blob/master/src/layout/components/Sidebar/index.vue">https://github.com/PanJiaChen/vue-element-admin/blob/master/src/layout/components/Sidebar/index.vue</a></p>
<p><a href="https://github.com/PanJiaChen/vue-element-admin/blob/master/src/layout/components/Sidebar/SidebarItem.vue">https://github.com/PanJiaChen/vue-element-admin/blob/master/src/layout/components/Sidebar/SidebarItem.vue</a></p>
</li>
</ol>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>前端路由</tag>
        <tag>后端路由</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue 封装无限层级树形菜单组件（后台传的是扁平数组）</title>
    <url>/posts/9fef765/</url>
    <content><![CDATA[<p>项目原因，需要把一个扁平/线性数组转换成树形数组（符合 el-tree 数据要求）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> resData = [</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="string">&#x27;1&#x27;</span>, <span class="attr">label</span>: <span class="string">&#x27;动物&#x27;</span>, <span class="attr">parentId</span>: <span class="string">&#x27;&#x27;</span>, <span class="attr">icon</span>: <span class="string">&#x27;&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="string">&#x27;2&#x27;</span>, <span class="attr">label</span>: <span class="string">&#x27;狗&#x27;</span>, <span class="attr">parentId</span>: <span class="string">&#x27;1&#x27;</span>, <span class="attr">icon</span>: <span class="string">&#x27;icon-chongwutubiao13&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="string">&#x27;3&#x27;</span>, <span class="attr">label</span>: <span class="string">&#x27;哈士奇&#x27;</span>, <span class="attr">parentId</span>: <span class="string">&#x27;2&#x27;</span>, <span class="attr">icon</span>: <span class="string">&#x27;icon-hashiqi&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="string">&#x27;4&#x27;</span>, <span class="attr">label</span>: <span class="string">&#x27;柯基&#x27;</span>, <span class="attr">parentId</span>: <span class="string">&#x27;2&#x27;</span>, <span class="attr">icon</span>: <span class="string">&#x27;icon-keji-&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="string">&#x27;6&#x27;</span>, <span class="attr">label</span>: <span class="string">&#x27;猫&#x27;</span>, <span class="attr">parentId</span>: <span class="string">&#x27;1&#x27;</span>, <span class="attr">icon</span>: <span class="string">&#x27;icon-chongwutubiao04&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="string">&#x27;7&#x27;</span>, <span class="attr">label</span>: <span class="string">&#x27;植物&#x27;</span>, <span class="attr">parentId</span>: <span class="string">&#x27;&#x27;</span>, <span class="attr">icon</span>: <span class="string">&#x27;&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="string">&#x27;8&#x27;</span>, <span class="attr">label</span>: <span class="string">&#x27;微生物&#x27;</span>, <span class="attr">parentId</span>: <span class="string">&#x27;&#x27;</span>, <span class="attr">icon</span>: <span class="string">&#x27;&#x27;</span> &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h2 id="JS-代码：扁平数组转换成树形数组"><a href="#JS-代码：扁平数组转换成树形数组" class="headerlink" title="JS 代码：扁平数组转换成树形数组"></a>JS 代码：扁平数组转换成树形数组</h2><ul>
<li>直接上代码，不需要递归</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">transformData</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 深拷贝一份（以防连续调用出错）</span></span><br><span class="line">  <span class="keyword">const</span> cData = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(data))</span><br><span class="line">  <span class="keyword">const</span> map = &#123;&#125;</span><br><span class="line">  <span class="keyword">const</span> tData = []</span><br><span class="line">  <span class="comment">// 注意：这里item的引用地址指向cData</span></span><br><span class="line">  cData.forEach(<span class="function"><span class="params">item</span> =&gt;</span> (map[item.id] = item))</span><br><span class="line">  cData.forEach(<span class="function"><span class="params">child</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> mapItem = map[child.parentId]</span><br><span class="line">    <span class="keyword">if</span> (mapItem) &#123;</span><br><span class="line">      <span class="comment">// 注意：这里mapItem引用地址指向也是指向cData</span></span><br><span class="line">      <span class="keyword">if</span> (!mapItem.children) mapItem.children = []</span><br><span class="line">      mapItem.children.push(child)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 顶级节点</span></span><br><span class="line">      tData.push(child)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> tData</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="项目应用：el-tree-制作一个树形多级嵌套菜单栏"><a href="#项目应用：el-tree-制作一个树形多级嵌套菜单栏" class="headerlink" title="项目应用：el-tree 制作一个树形多级嵌套菜单栏"></a>项目应用：el-tree 制作一个树形多级嵌套菜单栏</h2><p>实现效果：</p>
<p><img data-src="https://img-blog.csdnimg.cn/img_convert/fd270ef62d9c02db91a340ae0b0a173f.png"></p>
<ul>
<li>Vue 代码</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-scrollbar</span> <span class="attr">wrap-class</span>=<span class="string">&quot;scrollbar-wrapper&quot;</span> <span class="attr">style</span>=<span class="string">&quot;height: 100%&quot;</span>&gt;</span></span><br><span class="line">    &lt;el-tree</span><br><span class="line">      ref=&quot;tree&quot;</span><br><span class="line">      v-loading=&quot;treeDataLoading&quot;</span><br><span class="line">      node-key=&quot;id&quot;</span><br><span class="line">      :data=&quot;treeData&quot;</span><br><span class="line">      :show-checkbox=&quot;showCheckBox&quot;</span><br><span class="line">      :default-expand-all=&quot;defaultExpandAll&quot;</span><br><span class="line">      style=&quot;height: 100%; padding-bottom: 20px&quot;</span><br><span class="line">    &gt;</span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">slot-scope</span>=<span class="string">&quot;&#123; node, data &#125;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;custom-tree-node&quot;</span>&gt;</span></span><br><span class="line">        &#123;&#123; node.label &#125;&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-if</span>=<span class="string">&quot;data.icon&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-tooltip</span> <span class="attr">effect</span>=<span class="string">&quot;dark&quot;</span> <span class="attr">:content</span>=<span class="string">&quot;data.label&quot;</span> <span class="attr">placement</span>=<span class="string">&quot;top-start&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">i</span> <span class="attr">:class</span>=<span class="string">&quot;[&#x27;iconfont&#x27;, data.icon]&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">el-tooltip</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-tree</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-scrollbar</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">  props: &#123;</span><br><span class="line"><span class="javascript">    <span class="comment">// 节点是否可被选择（显示前面的复选框）</span></span></span><br><span class="line">    showCheckBox: &#123;</span><br><span class="line"><span class="javascript">      type: <span class="built_in">Boolean</span>,</span></span><br><span class="line"><span class="javascript">      <span class="keyword">default</span>: <span class="literal">false</span>,</span></span><br><span class="line">    &#125;,</span><br><span class="line"><span class="javascript">    <span class="comment">// 是否默认展开所有节点</span></span></span><br><span class="line">    defaultExpandAll: &#123;</span><br><span class="line"><span class="javascript">      type: <span class="built_in">Boolean</span>,</span></span><br><span class="line"><span class="javascript">      <span class="keyword">default</span>: <span class="literal">false</span>,</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line">      treeData: [],</span><br><span class="line"><span class="javascript">      treeDataLoading: <span class="literal">false</span>,</span></span><br><span class="line">      resData: [</span><br><span class="line"><span class="javascript">        &#123; <span class="attr">id</span>: <span class="string">&#x27;1&#x27;</span>, <span class="attr">label</span>: <span class="string">&#x27;动物&#x27;</span>, <span class="attr">parentId</span>: <span class="string">&#x27;&#x27;</span>, <span class="attr">icon</span>: <span class="string">&#x27;&#x27;</span> &#125;,</span></span><br><span class="line"><span class="javascript">        &#123; <span class="attr">id</span>: <span class="string">&#x27;2&#x27;</span>, <span class="attr">label</span>: <span class="string">&#x27;狗&#x27;</span>, <span class="attr">parentId</span>: <span class="string">&#x27;1&#x27;</span>, <span class="attr">icon</span>: <span class="string">&#x27;icon-chongwutubiao13&#x27;</span> &#125;,</span></span><br><span class="line"><span class="javascript">        &#123; <span class="attr">id</span>: <span class="string">&#x27;3&#x27;</span>, <span class="attr">label</span>: <span class="string">&#x27;哈士奇&#x27;</span>, <span class="attr">parentId</span>: <span class="string">&#x27;2&#x27;</span>, <span class="attr">icon</span>: <span class="string">&#x27;icon-hashiqi&#x27;</span> &#125;,</span></span><br><span class="line"><span class="javascript">        &#123; <span class="attr">id</span>: <span class="string">&#x27;4&#x27;</span>, <span class="attr">label</span>: <span class="string">&#x27;柯基&#x27;</span>, <span class="attr">parentId</span>: <span class="string">&#x27;2&#x27;</span>, <span class="attr">icon</span>: <span class="string">&#x27;icon-keji-&#x27;</span> &#125;,</span></span><br><span class="line"><span class="javascript">        &#123; <span class="attr">id</span>: <span class="string">&#x27;6&#x27;</span>, <span class="attr">label</span>: <span class="string">&#x27;猫&#x27;</span>, <span class="attr">parentId</span>: <span class="string">&#x27;1&#x27;</span>, <span class="attr">icon</span>: <span class="string">&#x27;icon-chongwutubiao04&#x27;</span> &#125;,</span></span><br><span class="line"><span class="javascript">        &#123; <span class="attr">id</span>: <span class="string">&#x27;7&#x27;</span>, <span class="attr">label</span>: <span class="string">&#x27;植物&#x27;</span>, <span class="attr">parentId</span>: <span class="string">&#x27;&#x27;</span>, <span class="attr">icon</span>: <span class="string">&#x27;&#x27;</span> &#125;,</span></span><br><span class="line"><span class="javascript">        &#123; <span class="attr">id</span>: <span class="string">&#x27;8&#x27;</span>, <span class="attr">label</span>: <span class="string">&#x27;微生物&#x27;</span>, <span class="attr">parentId</span>: <span class="string">&#x27;&#x27;</span>, <span class="attr">icon</span>: <span class="string">&#x27;&#x27;</span> &#125;,</span></span><br><span class="line">      ],</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">init</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.treeDataLoading = <span class="literal">true</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// 发送数据请求（这里不发送请求以resData模拟）</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> tree = <span class="built_in">this</span>.resData</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.treeData = <span class="built_in">this</span>.transformData(tree)</span></span><br><span class="line">        res()</span><br><span class="line">      &#125;)</span><br><span class="line"><span class="javascript">        .catch(<span class="function">() =&gt;</span> &#123;&#125;)</span></span><br><span class="line"><span class="javascript">        .finally(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.treeDataLoading = <span class="literal">false</span></span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">transformData</span>(<span class="params">data, params = &#123;&#125;</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> cData = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(data))</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> map = &#123;&#125;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> tData = []</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> attr = &#123;</span></span><br><span class="line"><span class="javascript">        id: <span class="string">&#x27;id&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        parentId: <span class="string">&#x27;parentId&#x27;</span>,</span></span><br><span class="line">      &#125;</span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> arg = <span class="built_in">Object</span>.assign(&#123;&#125;, attr, params)</span></span><br><span class="line"><span class="javascript">      cData.forEach(<span class="function"><span class="params">item</span> =&gt;</span> (map[item[arg.id]] = item))</span></span><br><span class="line"><span class="javascript">      cData.forEach(<span class="function"><span class="params">child</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> mapItem = map[child[arg.parentId]]</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (mapItem) &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">if</span> (!mapItem.children) mapItem.children = []</span></span><br><span class="line">          mapItem.children.push(child)</span><br><span class="line"><span class="javascript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line">          tData.push(child)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> tData</span></span><br><span class="line">    &#125;,</span><br><span class="line"><span class="javascript">    <span class="comment">// 全选</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">checkAll</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.$refs.tree.setCheckedNodes(<span class="built_in">this</span>.treeData)</span></span><br><span class="line">    &#125;,</span><br><span class="line"><span class="javascript">    <span class="comment">// 取消全选</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">cancelAll</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.$refs.tree.setCheckedKeys([])</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;less&quot;</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-class">.scrollbar-wrapper</span> &#123;</span></span><br><span class="line">  overflow-x: hidden !important;</span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-class">.custom-tree-node</span> &#123;</span></span><br><span class="line">  font-size: 16px;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="父组件调用"><a href="#父组件调用" class="headerlink" title="父组件调用"></a>父组件调用</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tree-select</span> <span class="attr">ref</span>=<span class="string">&quot;tree&quot;</span> <span class="attr">defaultExpandAll</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> TreeSelect <span class="keyword">from</span> <span class="string">&#x27;./components/TreeSelect&#x27;</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">  components: &#123;</span><br><span class="line">    TreeSelect,</span><br><span class="line">  &#125;,</span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">this</span>.$refs[<span class="string">&#x27;tree&#x27;</span>].init()</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="还可以参考这篇文章，他使用的双-filter"><a href="#还可以参考这篇文章，他使用的双-filter" class="headerlink" title="还可以参考这篇文章，他使用的双 filter"></a>还可以参考这篇文章，他使用的双 filter</h2><p><a href="https://blog.csdn.net/Mr_JavaScript/article/details/82817177">js 实现无限层级树形数据结构（创新算法）</a></p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>Element</tag>
        <tag>树形菜单</tag>
        <tag>封装</tag>
      </tags>
  </entry>
  <entry>
    <title>Yapi安装部署（接口管理服务）</title>
    <url>/posts/bb3fd12a/</url>
    <content><![CDATA[<p><strong><code>Yapi</code></strong> 由 <code>YMFE</code>开源，旨在为开发、产品、测试人员提供更优雅的接口管理服务，可以帮助开发者轻松创建、发布、维护<code>API</code>。</p>
<p>官方文档：<a href="https://hellosean1025.github.io/yapi/devops/index.html">https://hellosean1025.github.io/yapi/devops/index.html</a></p>
<a id="more"></a>

<p><img data-src="https://gitee.com/lilyn/pic/raw/master/js-img/yapi%E7%95%8C%E9%9D%A2.jpg" alt="yapi界面"></p>
<h2 id="环境要求"><a href="#环境要求" class="headerlink" title="环境要求"></a>环境要求</h2><ul>
<li>nodejs（7.6+)</li>
<li>mongodb（2.6+）</li>
</ul>
<p><strong>安装Node注意：</strong> 最好安装14版本之前的，推荐12版本的，不然可能Node版本过高，导致无法成功部署</p>
<p>下载链接：<a href="https://nodejs.org/download/release/v12.12.0/">Node v12.12.0/ (nodejs.org)</a></p>
<p><strong>安装MongoDB注意：</strong> 选择 Custom：自定义安装路径。安装MongDB需要取消这个勾选，不然会死等…（剩下一路next）</p>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/js-img/install%20mongodb.png" alt="install mongodb"></p>
<p>下载链接：<a href="http://dl.mongodb.org/dl/win32/x86_64">Downloads for win32 (mongodb.org)</a></p>
<h3 id="配置Node淘宝源"><a href="#配置Node淘宝源" class="headerlink" title="配置Node淘宝源"></a>配置Node淘宝源</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>

<h3 id="配置MongoDB"><a href="#配置MongoDB" class="headerlink" title="配置MongoDB"></a>配置MongoDB</h3><p><img data-src="https://gitee.com/lilyn/pic/raw/master/js-img/mongodb%20config.jpg" alt="mongodb config"></p>
<p>在安装目录创建 <code>mongodb.config</code>，填入如下信息（需要修改安装目录：我安装在：<code>D:\MongoDB</code>）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改安装目录</span></span><br><span class="line">dbpath=D:\MongoDB\data\db <span class="comment"># 数据库路径</span></span><br><span class="line"><span class="comment"># 修改安装目录</span></span><br><span class="line">logpath=D:\MongoDB\<span class="built_in">log</span>\mongod.log <span class="comment">#日志输出文件路径</span></span><br><span class="line"></span><br><span class="line">logappend=<span class="literal">true</span> <span class="comment"># 错误日志采用追加模式</span></span><br><span class="line"></span><br><span class="line">journal=<span class="literal">true</span> <span class="comment">#启用日志文件，默认启用</span></span><br><span class="line"></span><br><span class="line">quiet=<span class="literal">true</span> <span class="comment">#过滤掉无用的日志信息，若需要调试使用请设置为false</span></span><br><span class="line"></span><br><span class="line">port=27017 <span class="comment">#端口号 默认为27017</span></span><br></pre></td></tr></table></figure>

<ul>
<li>在 data 文件夹中新建文件夹 db</li>
<li>在 log文 件夹中新建 logs文件夹，logs文件夹新建 log.txt</li>
</ul>
<p>在MongoDB文件夹的bin目录下，启动cmd命令窗口输入如下命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> D:/MongoDB</span><br><span class="line"><span class="comment"># 修改安装目录</span></span><br><span class="line">mongod --dbpath <span class="string">&quot;D:\MongoDB\data\db&quot;</span>  --logpath <span class="string">&quot;D:\MongoDB\logs\log.txt&quot;</span>  --install -serviceName <span class="string">&quot;MongoDB&quot;</span>  </span><br></pre></td></tr></table></figure>

<p>打开浏览器访问 <a href="http://localhost:27017/">http://localhost:27017/</a> 或者 <a href="http://127.0.0.1:27017/">http://127.0.0.1:27017/</a></p>
<p>显示如下信息：说明启动成功</p>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/js-img/mongodb%20success.jpg" alt="mongodb success"></p>
<ul>
<li>右击“我的电脑”-&gt;属性-&gt;高级系统设置-&gt;环境变量</li>
</ul>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/js-img/%E6%B7%BB%E5%8A%A0%E7%B3%BB%E7%BB%9F%E5%8F%98%E9%87%8F.jpg" alt="添加系统变量"></p>
<p>新增你的 MongoDB 的 bin 目录的路径-&gt;保存</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改安装目录，我的安装在D盘</span></span><br><span class="line">D:\MongoDB\bin</span><br></pre></td></tr></table></figure>

<ul>
<li>之后可以在cmd里输入mongo测试一下</li>
</ul>
<h2 id="安装yapi"><a href="#安装yapi" class="headerlink" title="安装yapi"></a>安装yapi</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g yapi-cli</span><br><span class="line"><span class="comment"># 或使用淘宝源安装</span></span><br><span class="line">npm install -g yapi-cli --registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>

<h3 id="启动yapi"><a href="#启动yapi" class="headerlink" title="启动yapi"></a>启动yapi</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动</span></span><br><span class="line">yapi server</span><br></pre></td></tr></table></figure>

<p>yapi server 执行后提示：在浏览器打开 <a href="http://0.0.0.0:9090/">http://0.0.0.0:9090</a> 访问。非本地服务器，请将 0.0.0.0 替换成指定的域名或你本机IP</p>
<p>在CMD中，可以用如下方法查询查询本机IP:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 找到无线局域网适配器 WLAN</span></span><br><span class="line">ipconfig</span><br></pre></td></tr></table></figure>

<ul>
<li>找到后，输入ip+:9090，进入网址即可，界面如下：</li>
</ul>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/js-img/yapi%E5%B9%B3%E5%8F%B0%E9%83%A8%E7%BD%B2.jpg" alt="yapi平台部署"></p>
<p>填写完信息后，点击开始部署。<strong>注意：</strong>需要记住这个<strong>部署路径</strong></p>
<p>成功部署后会显示如下：</p>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/js-img/%E9%83%A8%E7%BD%B2%E6%88%90%E5%8A%9F.jpg" alt="部署成功"></p>
<p>进入<strong>部署路径</strong>，输入如下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 切换到部署路径下启动</span></span><br><span class="line">node vendors/server/app.js</span><br></pre></td></tr></table></figure>

<ul>
<li><p>内网下可以通过本机IP+端口号，进行访问，界面如图：</p>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/js-img/yapi%E7%95%8C%E9%9D%A2.jpg" alt="yapi界面"></p>
</li>
</ul>
<h3 id="pm2方式管理进程"><a href="#pm2方式管理进程" class="headerlink" title="pm2方式管理进程"></a>pm2方式管理进程</h3><p>要保证后台保持进程，需要安装pm2，进入<strong>部署路径</strong>启动即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g pm2</span><br><span class="line"><span class="comment"># 切换到部署路径下启动</span></span><br><span class="line">pm2 start vendors/server/app.js --watch -i 1</span><br></pre></td></tr></table></figure>

<p><img data-src="https://gitee.com/lilyn/pic/raw/master/js-img/pm2%E5%90%AF%E5%8A%A8.jpg" alt="pm2启动"></p>
<p>这样以后就可以很方便的用pm2启动关闭就行了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动</span></span><br><span class="line">pm2 start vendors/server/app.js --watch -i 1</span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">pm2 list</span><br><span class="line"><span class="comment"># 停止</span></span><br><span class="line">pm2 stop vendors/server/app.js</span><br></pre></td></tr></table></figure>

<p>以后访问本机IP+端口号即可进入</p>
]]></content>
      <categories>
        <category>基础配置</category>
      </categories>
      <tags>
        <tag>Yapi</tag>
        <tag>接口服务</tag>
        <tag>环境部署</tag>
        <tag>pm2</tag>
      </tags>
  </entry>
  <entry>
    <title>检测公有属性的封装</title>
    <url>/posts/3c79077c/</url>
    <content><![CDATA[<h2 id="检测属性方法"><a href="#检测属性方法" class="headerlink" title="检测属性方法"></a>检测属性方法</h2><h3 id="in"><a href="#in" class="headerlink" title="in"></a>in</h3><ul>
<li><p>检测当前对象是否存在某个属性，不论是公有还是私有，只要有，返回 true</p>
<p><code>[attr] in [object]</code></p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.age = <span class="number">14</span>;</span><br><span class="line">    <span class="built_in">this</span>.name = <span class="string">&quot;lion&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">Fn.prototype.category = <span class="string">&quot;animal&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> f = <span class="keyword">new</span> Fn();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;name&quot;</span> <span class="keyword">in</span> f);     <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;category&quot;</span> <span class="keyword">in</span> f); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h3 id="hasOwnProperty-NaN"><a href="#hasOwnProperty-NaN" class="headerlink" title="hasOwnProperty"></a>hasOwnProperty</h3><ul>
<li><p>检测一个属性是不是这个对象的私有属性，如果是，返回true</p>
<p><code>[object].hasOwnProperty([attr])</code></p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.age = <span class="number">14</span>;</span><br><span class="line">    <span class="built_in">this</span>.name = <span class="string">&quot;lion&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">Fn.prototype.category = <span class="string">&quot;animal&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> f = <span class="keyword">new</span> Fn();</span><br><span class="line"><span class="built_in">console</span>.log(f.hasOwnProperty(<span class="string">&quot;name&quot;</span>));     <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(f.hasOwnProperty(<span class="string">&quot;category&quot;</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<h3 id="尝试封装检测公有属性"><a href="#尝试封装检测公有属性" class="headerlink" title="尝试封装检测公有属性"></a>尝试封装检测公有属性</h3><ul>
<li>了解了 <code>in</code> 和 <code>hasOwnProperty</code> 之后我们可以尝试封装检测公有属性的方法</li>
</ul>
<p>写出来大概是如下这样：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Object</span>.prototype.hasPubProperty = <span class="function"><span class="keyword">function</span> (<span class="params">attr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> attr <span class="keyword">in</span> obj &amp;&amp; !obj.hasOwnProperty(attr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>但是这个是有弊端的，比如：某个属性既是私有的，也是公有的，就检测不出来了</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Object</span>.prototype.hasPubProperty = <span class="function"><span class="keyword">function</span> (<span class="params">attr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> attr <span class="keyword">in</span> <span class="built_in">this</span> &amp;&amp; !<span class="built_in">this</span>.hasOwnProperty(attr);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.age = <span class="number">14</span>;</span><br><span class="line">    <span class="built_in">this</span>.name = <span class="string">&quot;lion&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">Fn.prototype.category = <span class="string">&quot;animal&quot;</span>;</span><br><span class="line">Fn.prototype.name = <span class="string">&quot;bird&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> f = <span class="keyword">new</span> Fn();</span><br><span class="line"><span class="comment">// name既是公有的也是私有的</span></span><br><span class="line"><span class="built_in">console</span>.log(f.hasPubProperty(<span class="string">&quot;name&quot;</span>));     <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(f.hasPubProperty(<span class="string">&quot;category&quot;</span>)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>这样肯定不行，有没有什么方法可以避免这个问题，接下来需要看一下 Object 的其它几个方法</p>
<h2 id="检测公有属性"><a href="#检测公有属性" class="headerlink" title="检测公有属性"></a>检测公有属性</h2><ul>
<li>期望结果如下：</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.age = <span class="number">14</span>;</span><br><span class="line">    <span class="built_in">this</span>[A] = <span class="number">100</span>;</span><br><span class="line">    <span class="built_in">this</span>.name = <span class="string">&quot;lion&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> A = <span class="built_in">Symbol</span>(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">Fn.prototype.name = <span class="string">&quot;bird&quot;</span>;</span><br><span class="line">Fn.prototype[A] = <span class="number">200</span>;</span><br><span class="line"><span class="keyword">let</span> f = <span class="keyword">new</span> Fn();</span><br><span class="line"></span><br><span class="line"><span class="comment">// age是私有方法</span></span><br><span class="line"><span class="built_in">console</span>.log(f.hasPubProperty(<span class="string">&quot;age&quot;</span>));      <span class="comment">// false</span></span><br><span class="line"><span class="comment">// name既是公有的也是私有的</span></span><br><span class="line"><span class="built_in">console</span>.log(f.hasPubProperty(<span class="string">&quot;name&quot;</span>));     <span class="comment">// true</span></span><br><span class="line"><span class="comment">// A(Symbol)既是公有的也是私有的</span></span><br><span class="line"><span class="built_in">console</span>.log(f.hasPubProperty(A));          <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h3 id="Object-getPrototypeOf"><a href="#Object-getPrototypeOf" class="headerlink" title="Object.getPrototypeOf"></a>Object.getPrototypeOf</h3><blockquote>
<p>如果了解前置知识，可直接跳到封装方法处</p>
</blockquote>
<h4 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h4><blockquote>
<p>ES5新增方法</p>
</blockquote>
<ul>
<li><code>Object.getPrototypeOf([object])</code> 方法返回指定<strong>对象自身的原型</strong></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Fn.prototype === <span class="built_in">Object</span>.getPrototypeOf(f); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h4 id="封装方法"><a href="#封装方法" class="headerlink" title="封装方法"></a>封装方法</h4><ul>
<li>借用原型链查找公有属性</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Object</span>.prototype.hasPubProperty = <span class="function"><span class="keyword">function</span> (<span class="params">attr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> self = <span class="built_in">this</span>,</span><br><span class="line">        prototype = <span class="built_in">Object</span>.getPrototypeOf(self);</span><br><span class="line">    <span class="keyword">while</span> (prototype) &#123;</span><br><span class="line">        <span class="comment">// 检测是否存在attr这个属性</span></span><br><span class="line">        <span class="keyword">if</span> (prototype.hasOwnProperty(attr)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">// 一直按照原型链查找</span></span><br><span class="line">        prototype = <span class="built_in">Object</span>.getPrototypeOf(prototype);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>因为用到了 <code>hasOwnProperty</code>，它不仅能检测可枚举属性还可以检测内置属性</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(f.hasPubProperty(<span class="string">&quot;toString&quot;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(f.hasPubProperty(<span class="string">&quot;valueOf&quot;</span>));  <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h3 id="Object-keys"><a href="#Object-keys" class="headerlink" title="Object.keys"></a>Object.keys</h3><blockquote>
<p>如果了解前置知识，可直接跳到封装方法处</p>
</blockquote>
<h4 id="前置知识-1"><a href="#前置知识-1" class="headerlink" title="前置知识"></a>前置知识</h4><blockquote>
<p>ES5新增方法</p>
</blockquote>
<ul>
<li><code>Object.keys([object])</code> 方法会返回一个数组，数组里面存放指定<strong>对象自身的可枚举属性</strong></li>
<li><code>Object.keys([object])</code> 方法返回<strong>非 Symbol 私有属性</strong>的数组</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Object</span>.prototype.xx = <span class="string">&quot;xx&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    name: <span class="string">&quot;lion&quot;</span>,</span><br><span class="line">    age: <span class="number">12</span>,</span><br><span class="line">    <span class="number">3</span>: <span class="number">200</span>,</span><br><span class="line">    <span class="number">0</span>: <span class="number">100</span>,</span><br><span class="line">    [<span class="built_in">Symbol</span>(<span class="string">&quot;a&quot;</span>)]: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.keys(obj)); <span class="comment">// [ &#x27;0&#x27;, &#x27;3&#x27;, &#x27;name&#x27;, &#x27;age&#x27; ]</span></span><br></pre></td></tr></table></figure>

<ul>
<li>如果想获取 Symbol 私有属性，可以使用 <code>Object.getOwnPropertySymbols(obj)</code></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getOwnPropertySymbols(obj)); <span class="comment">// [ Symbol(a) ]</span></span><br></pre></td></tr></table></figure>

<ul>
<li>如果想获取所有私有属性（包括Symbol）到一个数组中，可以这么写</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[...Object.keys(obj), ...Object.getOwnPropertySymbols(obj)];</span><br><span class="line"><span class="comment">// [&#x27;0&#x27;, &#x27;3&#x27;, &#x27;name&#x27;, &#x27;age&#x27;, Symbol(a)]</span></span><br></pre></td></tr></table></figure>

<h4 id="封装方法-1"><a href="#封装方法-1" class="headerlink" title="封装方法"></a>封装方法</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Object</span>.prototype.hasPubProperty = <span class="function"><span class="keyword">function</span> (<span class="params">attr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> self = <span class="built_in">this</span>,</span><br><span class="line">        prototype = <span class="built_in">Object</span>.getPrototypeOf(self);</span><br><span class="line">    <span class="keyword">while</span> (prototype) &#123;</span><br><span class="line">        <span class="comment">// 检测是否存在attr这个属性</span></span><br><span class="line">        <span class="keyword">var</span> keys = <span class="built_in">Object</span>.keys(prototype);</span><br><span class="line">        <span class="comment">// 检测浏览器是否支持Symbol</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">Symbol</span> !== <span class="string">&quot;undefined&quot;</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果支持，把Symbol属性合并到数组中</span></span><br><span class="line">            keys = keys.concat(<span class="built_in">Object</span>.getOwnPropertySymbols(prototype));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 一直按照原型链查找</span></span><br><span class="line">        prototype = <span class="built_in">Object</span>.getPrototypeOf(prototype);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>注意：内置属性不可以枚举，<code>Object.keys([object])</code> 方法检测不到内置属性</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(f.hasPubProperty(<span class="string">&quot;toString&quot;</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(f.hasPubProperty(<span class="string">&quot;valueOf&quot;</span>));  <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>封装</tag>
        <tag>公有属性</tag>
        <tag>私有属性</tag>
        <tag>Object方法</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 实现图片延迟加载（懒加载）</title>
    <url>/posts/399b5a63/</url>
    <content><![CDATA[<h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><ol>
<li>结构中，我们使用一个盒子包裹着图片（图片不显示的时候，可以先占据着这个位置，并且设置默认背景图或背景颜色）</li>
<li>最开始，img 的 src 设置默认背景图，并把图片真实地址放到自定义属性中（比如：data-src ）</li>
<li>当 JS 监听到该图片元素进入可视窗口时，将自定义属性中的地址放到 src 属性中，达到懒加载效果</li>
</ol>
<a id="more"></a>

<p><img data-src="https://img-blog.csdnimg.cn/20201220232703325.gif" alt="懒加载"></p>
<p><strong>作用：</strong></p>
<ol>
<li>防止页面一次性向服务器发送大量请求，导致页面卡顿</li>
<li>全部加载会耗费大量流量</li>
</ol>
<p><strong>预备知识：</strong></p>
<ol>
<li><code>clientHeight</code>：当前盒子可视区域的高度（height+上下padding）</li>
<li><code>offsetHeight</code>：获取当前盒子的总高度（height+上下padding+上下border）</li>
<li><code>offsetTop</code>：当前盒子距离父级参照物的上偏移量</li>
<li><code>offsetParent</code>：当前盒子的父级参照物</li>
<li><code>scrollTop</code>：获取和设置当前盒子纵向滚动条卷曲的高度</li>
</ol>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>为了显示更加明显，当图片的下边框 = 浏览器可视窗口的下边框时，显示图片真实路径</p>
<ul>
<li>图片下边框：图片距离 body 的上偏移量 + 图片自身的总高度</li>
<li>浏览器可视窗口下边框：浏览器滚动条卷曲高度 + 当前浏览器可视窗口的高度</li>
</ul>
<h3 id="单张图片懒加载"><a href="#单张图片懒加载" class="headerlink" title="单张图片懒加载"></a>单张图片懒加载</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>单张图片延时加载<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        * &#123;</span><br><span class="line">            margin: 0;</span><br><span class="line">            padding: 0;</span><br><span class="line">        &#125;</span><br><span class="line">        img &#123;</span><br><span class="line">            width: 100%;</span><br><span class="line">            height: 100%;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#box</span> &#123;</span></span><br><span class="line">            width: 300px;</span><br><span class="line">            height: 200px;</span><br><span class="line">            margin: 800px auto;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/default.jpg&quot;</span> <span class="attr">true-img</span>=<span class="string">&quot;img/1.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;utils.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> box = <span class="built_in">document</span>.getElementById(<span class="string">&quot;box&quot;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> img = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;img&quot;</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 让图片只加载一次</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (img.flag) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">        <span class="comment">// 当前图片盒子的总高度</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> boxH = box.offsetHeight;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 获取当前图片盒子距离 body 上偏移量</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> boxT = utils.offset(box).top;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 获取浏览器可视区域高度</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> winH = utils.win(<span class="string">&quot;clientHeight&quot;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 获取浏览器滚动条卷曲高度</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> winT = utils.win(<span class="string">&quot;scrollTop&quot;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (winH + winT &gt;= boxH + boxT) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 创建一个 img 标签</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> newImg = <span class="keyword">new</span> Image();</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> trueImg = img.getAttribute(<span class="string">&quot;true-img&quot;</span>);</span></span><br><span class="line">            newImg.src = trueImg;</span><br><span class="line"><span class="javascript">            <span class="comment">// 动态创建一个 img 标签用来检测当前的路径是否正确</span></span></span><br><span class="line"><span class="javascript">            newImg.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">// 如果路径正确，执行onload函数</span></span></span><br><span class="line">                img.src = trueImg;</span><br><span class="line"><span class="javascript">                img.flag = <span class="literal">true</span>;</span></span><br><span class="line"><span class="javascript">                newImg = <span class="literal">null</span>;</span></span><br><span class="line">            &#125;;</span><br><span class="line"><span class="javascript">            newImg.onerror = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">// 如果路径错误，执行onerror函数</span></span></span><br><span class="line"><span class="javascript">                img.src = <span class="string">&quot;img/2.jpg&quot;</span>;</span></span><br><span class="line"><span class="javascript">                img.flag = <span class="literal">true</span>;</span></span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onscroll = check;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="多张图片懒加载"><a href="#多张图片懒加载" class="headerlink" title="多张图片懒加载"></a>多张图片懒加载</h3><p>这里使用 <code>getElementsByClassName</code> ，这个具有映射关系，下面简单介绍一下这个映射关系：</p>
<blockquote>
<p><code>getElementsByClassName</code> 返回对象是动态的 HTMLCollection</p>
<ul>
<li><p>动态 添加/删除 元素 HTMLCollection 的长度会产生变化</p>
</li>
<li><ul>
<li>把最后一个 li，从 ul 中删除，lis的长度 -1</li>
</ul>
</li>
<li><ul>
<li>删除的属性，lis 中访问不到</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;lists&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;bg&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;end&quot;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> lis = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;li&quot;</span>);</span></span><br><span class="line"><span class="javascript">    lis[<span class="number">0</span>].classList.remove(<span class="string">&quot;bg&quot;</span>);</span></span><br><span class="line">    lists.removeChild(end);</span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(lis.length); <span class="comment">// 3</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(lis[<span class="number">0</span>].classList); <span class="comment">// DOMTokenList [value: &quot;&quot;]</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>uerySelectorAll</code> 返回对象是静态 NodeList</p>
<ul>
<li><p>动态 添加/删除 元素 NodeList 的长度不会产生变化</p>
</li>
<li><ul>
<li>把最后一个 li，从 ul 中删除，lis的长度并没有 -1</li>
</ul>
</li>
<li><ul>
<li>删除的属性，lis 中访问不到</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;lists&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;bg&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;end&quot;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> lis = <span class="built_in">document</span>.querySelectorAll(<span class="string">&quot;li&quot;</span>);</span></span><br><span class="line"><span class="javascript">    lis[<span class="number">0</span>].classList.remove(<span class="string">&quot;bg&quot;</span>);</span></span><br><span class="line">    lists.removeChild(end);</span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(lis.length); <span class="comment">// 4</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(lis[<span class="number">0</span>].classList); <span class="comment">// DOMTokenList [value: &quot;&quot;]</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        * &#123;</span><br><span class="line">            margin: 0;</span><br><span class="line">            padding: 0;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.box</span> &#123;</span></span><br><span class="line">            margin: 500px auto;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.box</span> <span class="selector-tag">img</span> &#123;</span></span><br><span class="line">            display: block;</span><br><span class="line">            margin: auto;</span><br><span class="line">            margin-bottom: 10px;</span><br><span class="line">            height: 200px;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/default.jpg&quot;</span> <span class="attr">class</span>=<span class="string">&quot;bg&quot;</span> <span class="attr">true-img</span>=<span class="string">&quot;img/1.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/default.jpg&quot;</span> <span class="attr">class</span>=<span class="string">&quot;bg&quot;</span> <span class="attr">true-img</span>=<span class="string">&quot;img/2.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/default.jpg&quot;</span> <span class="attr">class</span>=<span class="string">&quot;bg&quot;</span> <span class="attr">true-img</span>=<span class="string">&quot;img/3.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/default.jpg&quot;</span> <span class="attr">class</span>=<span class="string">&quot;bg&quot;</span> <span class="attr">true-img</span>=<span class="string">&quot;img/4.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/default.jpg&quot;</span> <span class="attr">class</span>=<span class="string">&quot;bg&quot;</span> <span class="attr">true-img</span>=<span class="string">&quot;img/5.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;utils.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 动态的 HTMLCollection 具有映射关系</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> imgs = <span class="built_in">document</span>.getElementsByClassName(<span class="string">&quot;bg&quot;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 判断每一张图片是否要加载</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">delay</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 当函数执行的时候，循环每一张图片，然后判断每一张图片是否需要加载</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; imgs.length; i++) &#123;</span></span><br><span class="line">            delayImg(imgs[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">delayImg</span>(<span class="params">img</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> imgH = img.offsetHeight;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> winH = utils.win(<span class="string">&quot;clientHeight&quot;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> imgT = utils.offset(img).top;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> winT = utils.win(<span class="string">&quot;scrollTop&quot;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (winT + winH &gt; imgH + imgT) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> trueSrc = img.getAttribute(<span class="string">&quot;true-img&quot;</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> newImg = <span class="keyword">new</span> Image();</span></span><br><span class="line">            newImg.src = trueSrc;</span><br><span class="line"><span class="javascript">            newImg.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line">                img.src = trueSrc;</span><br><span class="line"><span class="javascript">                img.className = <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="javascript">                newImg = <span class="literal">null</span>;</span></span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="comment">// 刚进界面把已经符合的图片显示出来</span></span></span><br><span class="line">    delay();</span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onscroll = delay;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;pratice2.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="utils"><a href="#utils" class="headerlink" title="utils"></a>utils</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> utils = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 获取盒子距离body的偏移量</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">offset</span>(<span class="params">el</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> left = el.offsetLeft;</span><br><span class="line">        <span class="keyword">let</span> top = el.offsetTop;</span><br><span class="line">        <span class="keyword">let</span> parent = el.offsetParent;</span><br><span class="line">        <span class="keyword">while</span> (parent !== <span class="built_in">document</span>.body) &#123;</span><br><span class="line">            left += parent.offsetLeft + parent.clientLeft;</span><br><span class="line">            top += parent.offsetTop + parent.clientTop;</span><br><span class="line">            parent = parent.offsetParent;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            left,</span><br><span class="line">            top,</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置或者获取浏览器的某些属性</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">win</span>(<span class="params">attr, val</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (val == <span class="literal">undefined</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">document</span>.documentElement[attr] || <span class="built_in">document</span>.body[attr];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">document</span>.documentElement[attr] = val;</span><br><span class="line">        <span class="built_in">document</span>.body[attr] = val;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        offset,</span><br><span class="line">        win,</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>延迟加载</tag>
        <tag>懒加载</tag>
      </tags>
  </entry>
  <entry>
    <title>JS实现商城排序</title>
    <url>/posts/d2addf30/</url>
    <content><![CDATA[<h2 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h2><ul>
<li>根据上架时间/热度/价格进行升序/降序排序</li>
<li>上箭头亮代表升序，下箭头亮代表降序</li>
</ul>
<a id="more"></a>

<p><img data-src="https://img-blog.csdnimg.cn/20201220203345422.gif" alt="商城排序"></p>
<h3 id="渲染-li-标签"><a href="#渲染-li-标签" class="headerlink" title="渲染 li 标签"></a>渲染 li 标签</h3><ul>
<li>获取 ul 以便让每一个 li 渲染到页面</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> lists = <span class="built_in">document</span>.querySelector(<span class="string">&quot;.lists&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> lis = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>把每一个 li 渲染到页面上</p>
<p>这里为了操作方便，给每一个 li 绑定自定义属性，之后根据属性值获取其中内容 <code>li.getAttribute(...)</code> 即可</p>
<p>如果不这样做，则需要通过 <code>li.querySelector(...).innerText</code> 获取</p>
<p><strong>注意：</strong><code>querySelectorAll</code> 获取到的是类数组，因为需要进行排序，使用数组的 sort() 方法，所以需要用 <code>[].slice.call()</code> 或 <code>Array.from</code> 转换成数组</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Init</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> str = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; data.length; i++) &#123;</span><br><span class="line">        <span class="keyword">const</span> el = data[i];</span><br><span class="line">        str += <span class="string">`&lt;li time=&quot;<span class="subst">$&#123;el.time&#125;</span>&quot; hot=&quot;<span class="subst">$&#123;el.hot&#125;</span>&quot; price=&quot;<span class="subst">$&#123;el.price&#125;</span>&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;img src=&quot;<span class="subst">$&#123;el.img&#125;</span>&quot; alt=&quot;&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;p class=&quot;title&quot;&gt;<span class="subst">$&#123;el.title&#125;</span>&lt;/p&gt;</span></span><br><span class="line"><span class="string">        &lt;p class=&quot;time&quot;&gt;<span class="subst">$&#123;el.time&#125;</span>&lt;/p&gt;</span></span><br><span class="line"><span class="string">        &lt;p class=&quot;info&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;span class=&quot;price&quot;&gt;<span class="subst">$&#123;el.price&#125;</span>&lt;/span&gt;</span></span><br><span class="line"><span class="string">            &lt;span class=&quot;hot&quot;&gt;<span class="subst">$&#123;el.hot&#125;</span>&lt;/span&gt;</span></span><br><span class="line"><span class="string">        &lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;/li&gt;`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    lists.innerHTML = str;</span><br><span class="line">    lis = [].slice.call(lists.querySelectorAll(<span class="string">&quot;li&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="点击-a-标签进行排序"><a href="#点击-a-标签进行排序" class="headerlink" title="点击 a 标签进行排序"></a>点击 a 标签进行排序</h3><ul>
<li>获取 a 标签</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> links = <span class="built_in">document</span>.querySelectorAll(<span class="string">&quot;.top a&quot;</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li><p>给 a 标签添加鼠标点击事件</p>
<p>为实现每次排序都是上一次的倒序，需要给每一个 a 标签添加一个自定义属性作为标志 <code>links[i].flag = -1</code> ，flag 值为1代表升序，每次点击事件只需 flag 取反即可 <code>this.flag *= -1</code></p>
<p><strong>注意：</strong> sort() 方法中回调函数 this 指向 window，所以需要用一个变量存储 this <code>let that = this;</code></p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; links.length; i++) &#123;</span><br><span class="line">    links[i].flag = -<span class="number">1</span>;</span><br><span class="line">    links[i].onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.flag *= -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">let</span> that = <span class="built_in">this</span>;</span><br><span class="line">        <span class="keyword">let</span> sortFlag = <span class="built_in">this</span>.getAttribute(<span class="string">&quot;sortFlag&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (sortFlag == <span class="string">&quot;time&quot;</span>) &#123;</span><br><span class="line">            lis.sort(<span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> (a.getAttribute(sortFlag).replace(<span class="regexp">/-/g</span>, <span class="string">&quot;&quot;</span>) - b.getAttribute(sortFlag).replace(<span class="regexp">/-/g</span>, <span class="string">&quot;&quot;</span>)) * that.flag;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            lis.sort(<span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> (a.getAttribute(sortFlag) - b.getAttribute(sortFlag)) * that.flag;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; lis.length; i++) &#123;</span><br><span class="line">            lists.appendChild(lis[i])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="点击-a-标签点亮排序箭头"><a href="#点击-a-标签点亮排序箭头" class="headerlink" title="点击 a 标签点亮排序箭头"></a>点击 a 标签点亮排序箭头</h3><ul>
<li>升/降序高亮对应箭头字体图标</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arrows = <span class="built_in">this</span>.querySelectorAll(<span class="string">&quot;b&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> arrCur = <span class="built_in">document</span>.querySelectorAll(<span class="string">&quot;.top b.current&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arrCur.length; i++) &#123;</span><br><span class="line">    arrCur[i].classList.remove(<span class="string">&quot;current&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.flag == <span class="number">1</span>) &#123;</span><br><span class="line">    arrows[<span class="number">0</span>].classList.add(<span class="string">&quot;current&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    arrows[<span class="number">1</span>].classList.add(<span class="string">&quot;current&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><ul>
<li>for 每进行一次循环都会引起浏览器的回流，非常耗性能</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; lis.length; i++) &#123;</span><br><span class="line">    lists.appendChild(lis[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>可以使用 <code>DocumentFragment</code> 来创建一个新的空白的文档片段，把元素附加到这个文档片段中，之后通过这个文档片段附加到 DOM 树</p>
<p>因为<strong>文档片段存在内存中</strong>，并不在 DOM 树中，所以将子元素插入到文档片段时不会引起页面回流。因此，使用文档片段会带来更好的性能</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> frg = <span class="built_in">document</span>.createDocumentFragment();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; lis.length; i++) &#123;</span><br><span class="line">    frg.appendChild(lis[i]);</span><br><span class="line">&#125;</span><br><span class="line">lists.appendChild(frg)</span><br></pre></td></tr></table></figure>

<ul>
<li>如果希望点击完当前a标签，再点击其他a标签时都是升序排列的话，需要每次都将其他标签的flag设置为 -1</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; links.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (links[i] != <span class="built_in">this</span>) &#123;</span><br><span class="line">        links[i].flag = -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><h3 id="index-html（html-css）"><a href="#index-html（html-css）" class="headerlink" title="index.html（html+css）"></a>index.html（html+css）</h3><ul>
<li>创建 <code>index.html</code> 文件，粘贴如下代码</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>商城排序<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        * &#123;</span><br><span class="line">            margin: 0;</span><br><span class="line">            padding: 0;</span><br><span class="line">        &#125;</span><br><span class="line">        ul &#123;</span><br><span class="line">            list-style: none;</span><br><span class="line">        &#125;</span><br><span class="line">        a &#123;</span><br><span class="line">            text-decoration: none;</span><br><span class="line">        &#125;</span><br><span class="line">        body, html &#123;</span><br><span class="line">            background: lavender;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.main</span> &#123;</span></span><br><span class="line">            width: 1185px;</span><br><span class="line">            margin: 0 auto;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.main</span> <span class="selector-class">.topBar</span> &#123;</span></span><br><span class="line">            height: 50px;</span><br><span class="line"><span class="css">            <span class="selector-tag">background</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line">            display: flex;</span><br><span class="line">            align-items: center;</span><br><span class="line">            padding-left: 20px;</span><br><span class="line">            box-sizing: border-box;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.main</span> <span class="selector-class">.shortBtn</span> &#123;</span></span><br><span class="line">            display: flex;</span><br><span class="line">            align-items: center;</span><br><span class="line">            margin: 0 10px;</span><br><span class="line">            color: blue;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.main</span> <span class="selector-class">.shortBtn</span> <span class="selector-class">.arrows</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">color</span>: <span class="selector-id">#333</span>;</span></span><br><span class="line">            display: flex;</span><br><span class="line">            flex-direction: column;</span><br><span class="line">            margin-left: 10px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.main</span> <span class="selector-class">.shortBtn</span> <span class="selector-class">.iconfont</span> &#123;</span></span><br><span class="line">            font-size: 14px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.shortBtn</span><span class="selector-pseudo">:hover</span>&gt;<span class="selector-tag">span</span> &#123;</span></span><br><span class="line">            color: red;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.lists</span> &#123;</span></span><br><span class="line">            display: flex;</span><br><span class="line">            flex-wrap: wrap;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.lists</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line">            margin-top: 20px;</span><br><span class="line">            width: 225px;</span><br><span class="line"><span class="css">            <span class="selector-tag">background</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line">            padding: 20px;</span><br><span class="line">            box-sizing: border-box;</span><br><span class="line">            font-size: 14px;</span><br><span class="line">            margin-right: 15px;</span><br><span class="line">            line-height: 30px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.lists</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child(5n)</span>&#123;</span></span><br><span class="line">            margin-right: 0;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.lists</span> <span class="selector-tag">li</span> <span class="selector-tag">img</span> &#123;</span></span><br><span class="line">            width: 140px;</span><br><span class="line">            display: block;</span><br><span class="line">            margin: 0 auto;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.lists</span> <span class="selector-tag">li</span> <span class="selector-class">.numInfo</span> &#123;</span></span><br><span class="line">            display: flex;</span><br><span class="line">            justify-content: space-between;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.arrowUp</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">border</span>: 5<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#333</span>;</span></span><br><span class="line">            margin-bottom: 10px;</span><br><span class="line"><span class="css">            <span class="selector-tag">border-color</span>: <span class="selector-tag">transparent</span> <span class="selector-tag">transparent</span> <span class="selector-id">#333</span> <span class="selector-tag">transparent</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.arrowUp</span><span class="selector-class">.current</span> &#123;</span></span><br><span class="line">            border-color: transparent transparent red transparent;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.arrowDown</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">border</span>: 5<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#333</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">border-color</span>: <span class="selector-id">#333</span> <span class="selector-tag">transparent</span> <span class="selector-tag">transparent</span> <span class="selector-tag">transparent</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.arrowDown</span><span class="selector-class">.current</span> &#123;</span></span><br><span class="line">            border-color: red transparent transparent transparent;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;topBar&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>排序<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;shortBtn&quot;</span> <span class="attr">sortFlag</span>=<span class="string">&quot;time&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span>&gt;</span>上架时间<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;arrows&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">b</span> <span class="attr">class</span>=<span class="string">&quot;arrowUp&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">b</span> <span class="attr">class</span>=<span class="string">&quot;arrowDown&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;shortBtn&quot;</span> <span class="attr">sortFlag</span>=<span class="string">&quot;hot&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span>&gt;</span>热度<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;arrows&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">b</span> <span class="attr">class</span>=<span class="string">&quot;arrowUp&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">b</span> <span class="attr">class</span>=<span class="string">&quot;arrowDown&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;shortBtn&quot;</span> <span class="attr">sortFlag</span>=<span class="string">&quot;price&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span>&gt;</span>价格<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;arrows&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">b</span> <span class="attr">class</span>=<span class="string">&quot;arrowUp&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">b</span> <span class="attr">class</span>=<span class="string">&quot;arrowDown&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 图片列表 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;lists&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;index.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="data-json"><a href="#data-json" class="headerlink" title="data.json"></a>data.json</h3><ul>
<li>这里需要用 Ajax 请求一下如下 json 数据</li>
<li>创建 <code>data.json</code> ，粘贴如下数据</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;id&quot;</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="string">&quot;title&quot;</span>: <span class="string">&quot;HUAWEI全网通版（亮黑色）&quot;</span>,</span><br><span class="line">        <span class="string">&quot;price&quot;</span>: <span class="number">499</span>,</span><br><span class="line">        <span class="string">&quot;time&quot;</span>: <span class="string">&quot;2017-03-15&quot;</span>,</span><br><span class="line">        <span class="string">&quot;hot&quot;</span>: <span class="number">198</span>,</span><br><span class="line">        <span class="string">&quot;img&quot;</span>: <span class="string">&quot;img/1.jpg&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;id&quot;</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="string">&quot;title&quot;</span>: <span class="string">&quot;HUAWEI（曜石黑）&quot;</span>,</span><br><span class="line">        <span class="string">&quot;price&quot;</span>: <span class="number">129</span>,</span><br><span class="line">        <span class="string">&quot;time&quot;</span>: <span class="string">&quot;2017-02-08&quot;</span>,</span><br><span class="line">        <span class="string">&quot;hot&quot;</span>: <span class="number">25</span>,</span><br><span class="line">        <span class="string">&quot;img&quot;</span>: <span class="string">&quot;img/2.jpg&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;id&quot;</span>: <span class="number">3</span>,</span><br><span class="line">        <span class="string">&quot;title&quot;</span>: <span class="string">&quot;华为畅享7（香槟金）&quot;</span>,</span><br><span class="line">        <span class="string">&quot;price&quot;</span>: <span class="number">895</span>,</span><br><span class="line">        <span class="string">&quot;time&quot;</span>: <span class="string">&quot;2017-01-25&quot;</span>,</span><br><span class="line">        <span class="string">&quot;hot&quot;</span>: <span class="number">568</span>,</span><br><span class="line">        <span class="string">&quot;img&quot;</span>: <span class="string">&quot;img/3.jpg&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;id&quot;</span>: <span class="number">4</span>,</span><br><span class="line">        <span class="string">&quot;title&quot;</span>: <span class="string">&quot;HUAWEI全网通版（曜石黑）&quot;</span>,</span><br><span class="line">        <span class="string">&quot;price&quot;</span>: <span class="number">1895</span>,</span><br><span class="line">        <span class="string">&quot;time&quot;</span>: <span class="string">&quot;2016-12-30&quot;</span>,</span><br><span class="line">        <span class="string">&quot;hot&quot;</span>: <span class="number">20000</span>,</span><br><span class="line">        <span class="string">&quot;img&quot;</span>: <span class="string">&quot;img/4.jpg&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;id&quot;</span>: <span class="number">5</span>,</span><br><span class="line">        <span class="string">&quot;title&quot;</span>: <span class="string">&quot;HUAWEI全网通版（玫瑰金）&quot;</span>,</span><br><span class="line">        <span class="string">&quot;price&quot;</span>: <span class="number">3587</span>,</span><br><span class="line">        <span class="string">&quot;time&quot;</span>: <span class="string">&quot;2016-01-30&quot;</span>,</span><br><span class="line">        <span class="string">&quot;hot&quot;</span>: <span class="number">1032654</span>,</span><br><span class="line">        <span class="string">&quot;img&quot;</span>: <span class="string">&quot;img/5.jpg&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;id&quot;</span>: <span class="number">6</span>,</span><br><span class="line">        <span class="string">&quot;title&quot;</span>: <span class="string">&quot;华为畅享7（香槟金）&quot;</span>,</span><br><span class="line">        <span class="string">&quot;price&quot;</span>: <span class="number">992</span>,</span><br><span class="line">        <span class="string">&quot;time&quot;</span>: <span class="string">&quot;2018-01-01&quot;</span>,</span><br><span class="line">        <span class="string">&quot;hot&quot;</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="string">&quot;img&quot;</span>: <span class="string">&quot;img/6.jpg&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;id&quot;</span>: <span class="number">7</span>,</span><br><span class="line">        <span class="string">&quot;title&quot;</span>: <span class="string">&quot;HUAWEI全网通版（樱语粉）&quot;</span>,</span><br><span class="line">        <span class="string">&quot;price&quot;</span>: <span class="number">564</span>,</span><br><span class="line">        <span class="string">&quot;time&quot;</span>: <span class="string">&quot;2017-02-19&quot;</span>,</span><br><span class="line">        <span class="string">&quot;hot&quot;</span>: <span class="number">400</span>,</span><br><span class="line">        <span class="string">&quot;img&quot;</span>: <span class="string">&quot;img/7.jpg&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;id&quot;</span>: <span class="number">8</span>,</span><br><span class="line">        <span class="string">&quot;title&quot;</span>: <span class="string">&quot;HUAWEI全网通版（曜石黑）&quot;</span>,</span><br><span class="line">        <span class="string">&quot;price&quot;</span>: <span class="number">420</span>,</span><br><span class="line">        <span class="string">&quot;time&quot;</span>: <span class="string">&quot;2017-01-25&quot;</span>,</span><br><span class="line">        <span class="string">&quot;hot&quot;</span>: <span class="number">240</span>,</span><br><span class="line">        <span class="string">&quot;img&quot;</span>: <span class="string">&quot;img/8.jpg&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;id&quot;</span>: <span class="number">9</span>,</span><br><span class="line">        <span class="string">&quot;title&quot;</span>: <span class="string">&quot;HUAWEI P10（钻雕金）&quot;</span>,</span><br><span class="line">        <span class="string">&quot;price&quot;</span>: <span class="number">12</span>,</span><br><span class="line">        <span class="string">&quot;time&quot;</span>: <span class="string">&quot;2014-01-01&quot;</span>,</span><br><span class="line">        <span class="string">&quot;hot&quot;</span>: <span class="number">12345678</span>,</span><br><span class="line">        <span class="string">&quot;img&quot;</span>: <span class="string">&quot;img/9.jpg&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;id&quot;</span>: <span class="number">10</span>,</span><br><span class="line">        <span class="string">&quot;title&quot;</span>: <span class="string">&quot;HUAWEI全网通版（曜石黑）&quot;</span>,</span><br><span class="line">        <span class="string">&quot;price&quot;</span>: <span class="number">420</span>,</span><br><span class="line">        <span class="string">&quot;time&quot;</span>: <span class="string">&quot;2017-01-25&quot;</span>,</span><br><span class="line">        <span class="string">&quot;hot&quot;</span>: <span class="number">240</span>,</span><br><span class="line">        <span class="string">&quot;img&quot;</span>: <span class="string">&quot;img/8.jpg&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h3 id="index-js"><a href="#index-js" class="headerlink" title="index.js"></a>index.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取页面元素</span></span><br><span class="line"><span class="keyword">let</span> lists = <span class="built_in">document</span>.querySelector(<span class="string">&quot;.lists&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> links = <span class="built_in">document</span>.querySelectorAll(<span class="string">&quot;.topBar a&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> lis = lists.getElementsByTagName(<span class="string">&quot;li&quot;</span>);</span><br><span class="line"><span class="comment">// Ajax 请求数据</span></span><br><span class="line"><span class="keyword">let</span> data = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.数据请求 Ajax四部曲</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getData</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    xhr.open(<span class="string">&quot;get&quot;</span>, url);</span><br><span class="line">    xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (xhr.readyState == <span class="number">4</span> &amp;&amp; xhr.status == <span class="number">200</span>) &#123;</span><br><span class="line">            data = <span class="built_in">JSON</span>.parse(xhr.responseText);</span><br><span class="line">            BindHtml(data);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    xhr.send();</span><br><span class="line">&#125;</span><br><span class="line">getData(<span class="string">&quot;data/data.json&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.渲染li</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">BindHtml</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> str = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; data.length; i++) &#123;</span><br><span class="line">        <span class="keyword">const</span> el = data[i];</span><br><span class="line">        str += <span class="string">`&lt;li time=&quot;<span class="subst">$&#123;el.time&#125;</span>&quot; price=&quot;<span class="subst">$&#123;el.price&#125;</span>&quot; hot=&quot;<span class="subst">$&#123;el.hot&#125;</span>&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;img src=&quot;<span class="subst">$&#123;el.img&#125;</span>&quot; alt=&quot;&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;p class=&quot;title&quot;&gt;<span class="subst">$&#123;el.title&#125;</span>&lt;/p&gt;</span></span><br><span class="line"><span class="string">        &lt;p class=&quot;time&quot;&gt;<span class="subst">$&#123;el.time&#125;</span>&lt;/p&gt;</span></span><br><span class="line"><span class="string">        &lt;p class=&quot;numInfo&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;span class=&quot;price&quot;&gt;<span class="subst">$&#123;el.price&#125;</span>&lt;/span&gt;</span></span><br><span class="line"><span class="string">            &lt;span class=&quot;hot&quot;&gt;<span class="subst">$&#123;el.hot&#125;</span>&lt;/span&gt;</span></span><br><span class="line"><span class="string">        &lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;/li&gt;`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    lists.innerHTML = str;</span><br><span class="line">    lis = [].slice.call(lis);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 3.给link绑定事件</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; links.length; i++) &#123;</span><br><span class="line">    links[i].flag = -<span class="number">1</span>;</span><br><span class="line">    links[i].onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> that = <span class="built_in">this</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; links.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (links[i] != <span class="built_in">this</span>) &#123;</span><br><span class="line">                links[i].flag = -<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.flag *= -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">let</span> sortFlag = <span class="built_in">this</span>.getAttribute(<span class="string">&quot;sortFlag&quot;</span>);</span><br><span class="line">        <span class="keyword">let</span> arrows = <span class="built_in">this</span>.querySelectorAll(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">        <span class="keyword">let</span> arrCur = <span class="built_in">document</span>.querySelectorAll(<span class="string">&quot;b.current&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arrCur.length; i++) &#123;</span><br><span class="line">            arrCur[i].classList.remove(<span class="string">&quot;current&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.flag == <span class="number">1</span>) &#123;</span><br><span class="line">            arrows[<span class="number">0</span>].classList.add(<span class="string">&quot;current&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            arrows[<span class="number">1</span>].classList.add(<span class="string">&quot;current&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> frg = <span class="built_in">document</span>.createDocumentFragment();</span><br><span class="line">        <span class="keyword">if</span> (sortFlag == <span class="string">&quot;time&quot;</span>) &#123;</span><br><span class="line">            lis.sort(<span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> (a.getAttribute(sortFlag).replace(<span class="regexp">/-/g</span>, <span class="string">&quot;&quot;</span>) - b.getAttribute(sortFlag).replace(<span class="regexp">/-/g</span>, <span class="string">&quot;&quot;</span>)) * that.flag;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            lis.sort(<span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> (a.getAttribute(sortFlag) - b.getAttribute(sortFlag)) * that.flag;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; lis.length; i++) &#123;</span><br><span class="line">            frg.appendChild(lis[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        lists.appendChild(frg);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>DocumentFragment</tag>
        <tag>排序</tag>
      </tags>
  </entry>
  <entry>
    <title>JS中出现undefined和null情况</title>
    <url>/posts/ea5004b1/</url>
    <content><![CDATA[<p>undefined：未定义</p>
<p>null：空值</p>
<a id="more"></a>

<h2 id="undefined"><a href="#undefined" class="headerlink" title="undefined"></a>undefined</h2><ul>
<li>变量提升阶段，只声明未定义，返回 undefined</li>
<li>函数没设置返回值（return），返回 undefined</li>
<li>函数有形参但没传实参，返回 undefined</li>
<li>获取对象不存在的属性，返回 undefined</li>
<li>typeof 一个不存在的变量，返回 undefined</li>
<li>JS 严格模式，调用函数但函数前面没有<code>.</code>（排除显示绑定），this 是 undefined</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="built_in">console</span>.log(fn1()); <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn2</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(name); <span class="comment">// undefined</span></span><br><span class="line">&#125;</span><br><span class="line">fn2()</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(obj.a); <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> b); <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&quot;use strict&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn3</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>); <span class="comment">// undefined</span></span><br><span class="line">&#125;</span><br><span class="line">fn3()</span><br></pre></td></tr></table></figure>



<h2 id="null"><a href="#null" class="headerlink" title="null"></a>null</h2><ul>
<li>手动设置变量的值或某一个属性值为 null</li>
<li>JS 获取 DOM 元素，如果没有获取到指定的元素对象，返回 null</li>
<li>正则捕获时，如果没有捕获到，返回 null</li>
<li><code>Object.prototype.__proto__</code> 的值是 null</li>
<li>document 和 body 很多属性都是 null，这里就不列举了</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="literal">null</span></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// null</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 页面中没有#box的元素</span></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&quot;box&quot;</span>) <span class="comment">// null</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;hello&quot;</span>.match(<span class="regexp">/\d/g</span>) <span class="comment">// null</span></span><br><span class="line">/\d/g.exec(<span class="string">&quot;hello&quot;</span>)  <span class="comment">// null</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.prototype.__proto__ <span class="comment">// null</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.body.offsetParent <span class="comment">// null</span></span><br><span class="line"><span class="built_in">document</span>.parentNode        <span class="comment">// null</span></span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>undefined</tag>
      </tags>
  </entry>
  <entry>
    <title>jQuery 源码浅析</title>
    <url>/posts/6362a5/</url>
    <content><![CDATA[<p>JS 代码执行的环境：</p>
<ul>
<li>浏览器：PC端、移动端【webkit、gecko、trident、blink…】</li>
<li>Hybrid 混合APP开发，把H5页面嵌入native app（IOS/安卓）的webview中【webkit】</li>
<li>node，一个基于V8引擎，渲染和解析JS的环境。没有window，全局对象global</li>
<li>小程序</li>
</ul>
<h3 id="判断环境（闭包应用）"><a href="#判断环境（闭包应用）" class="headerlink" title="判断环境（闭包应用）"></a>判断环境（闭包应用）</h3><blockquote>
<p>为什么 jQuery 即能在浏览器中运行也能在 webpack 下运行</p>
</blockquote>
<ul>
<li><p>形参 A 检测大概是什么环境执行</p>
<p>如果 <code>A===window</code> 说明：浏览器、webview中运行</p>
<p>如果 <code>A!==window</code>  说明：在Node环境下运行，不过 A 可能是Global，也可能是当前模块</p>
</li>
<li><p>形参 B 返回 jQuery</p>
</li>
</ul>
<p>什么时候执行 B 函数呢？检测环境的时候执行函数 B（浏览器/Node环境）</p>
<ul>
<li><p><strong>Node</strong> 应用由模块组成，采用 CommonJS 模块规范，可以用 <code>module &amp;&amp; module.exports</code> 来检测</p>
<ul>
<li><p>如果支持 CommonJS 规范，需要再检测一下是否有 <code>window.document</code> ，比如：webpack 工程化环境</p>
</li>
<li><p>webpack 可能通过 import 导入，也可能通过 require 导入</p>
<p><code>import $ from &#39;jquery&#39;</code> <code>let $ = require(&#39;jquery&#39;)</code> </p>
</li>
<li><p><code>module.exports</code> 导出的是 <code>factory(global, true)</code>（函数 B）</p>
<p>所以：$-&gt;jQuery </p>
</li>
</ul>
</li>
<li><p>else 那一块，返回 window</p>
<p>浏览器导入jQuery：<code>&lt;script src=&#39;jquery.min.js&#39;&gt;&lt;/script&gt;</code> ，执行 <code>factory(global)</code> （函数 B），因为 <code>noGlobal === &quot;undefined&quot;</code> ，执行 <code>window.jQuery = window.$ = jQuery</code> ，所以在 window 下可以使用 jQuery 和 $</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> A = <span class="keyword">typeof</span> <span class="built_in">window</span> !== <span class="string">&quot;undefined&quot;</span> ? <span class="built_in">window</span> : <span class="built_in">this</span>;</span><br><span class="line"><span class="keyword">var</span> B = <span class="function"><span class="keyword">function</span> (<span class="params"><span class="built_in">window</span>, noGlobal</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 浏览器环境下执行这个函数</span></span><br><span class="line">    <span class="comment">//  window -&gt; window    noGlobal -&gt; undefined</span></span><br><span class="line">    <span class="comment">// webpack环境下导入执行</span></span><br><span class="line">    <span class="comment">//  window -&gt; window    noGlobal -&gt; true</span></span><br><span class="line"><span class="meta">    &quot;use strict&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> version = <span class="string">&quot;3.5.1&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> jQuery = <span class="function"><span class="keyword">function</span> (<span class="params">selector, context</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> jQuery.fn.init(selector, context);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> noGlobal === <span class="string">&quot;undefined&quot;</span>) &#123;</span><br><span class="line">        <span class="comment">// 浏览器直接导入</span></span><br><span class="line">        <span class="built_in">window</span>.jQuery = <span class="built_in">window</span>.$ = jQuery;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">return</span> jQuery;</span><br><span class="line">&#125;;</span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"><span class="built_in">global</span>, factory</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 支持 CommonJS 模块规范[node环境]</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">module</span> === <span class="string">&quot;object&quot;</span> &amp;&amp; <span class="keyword">typeof</span> <span class="built_in">module</span>.exports === <span class="string">&quot;object&quot;</span>) &#123;</span><br><span class="line">        <span class="built_in">module</span>.exports = <span class="built_in">global</span>.document ?</span><br><span class="line">            <span class="comment">// 有 window</span></span><br><span class="line">            factory(<span class="built_in">global</span>, <span class="literal">true</span>) :</span><br><span class="line">            <span class="comment">// 没有 window</span></span><br><span class="line">            <span class="function"><span class="keyword">function</span> (<span class="params">w</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (!w.document) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;jQuery requires a window with a document&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> factory(w);</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 不支持 CommonJS 规范的[浏览器环境]</span></span><br><span class="line">        <span class="comment">// global-&gt;window</span></span><br><span class="line">        factory(<span class="built_in">global</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;)(A, B);</span><br></pre></td></tr></table></figure>

<ul>
<li><p><strong>应用：暴露API</strong>（支持浏览器直接导入也支持webpack CommonJS模块导入）</p>
<p>如果你写了一个很好的库，既想在浏览器中使用，还想在 Node 中支持导入</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">window</span> !== <span class="string">&quot;undefined&quot;</span>) &#123;</span><br><span class="line">    <span class="built_in">window</span>.utils = utils;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">module</span> === <span class="string">&quot;object&quot;</span> &amp;&amp; <span class="keyword">typeof</span> <span class="built_in">module</span>.exports === <span class="string">&quot;object&quot;</span>) &#123;</span><br><span class="line">    <span class="built_in">module</span>.exports = utils;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="冲突处理"><a href="#冲突处理" class="headerlink" title="冲突处理"></a>冲突处理</h3><blockquote>
<p>有些 JavaScript 的库会使用 <code>$</code> 作为变量名（Zepto/jQuery），如果我们同时引用两个使用 <code>$</code> 作为变量名，或者引入两个不同版本的 jQuery 时，就可能会出现 <code>$</code> 冲突问题</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;node_modules/zepto/dist/zepto.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">    $ -&gt; Zepto</span></span><br><span class="line"><span class="comment">    Zepto -&gt; Zepto</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;node_modules/jquery/dist/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">    $ -&gt; jQuery</span></span><br><span class="line"><span class="comment">    jQuery -&gt; jQuery</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>先看一下 Zepto 的冲突处理，先看一下全局 <code>$</code> 有没有被占用，如果没有被占用 <code>window.$ = Zepto</code></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.Zepto = Zepto</span><br><span class="line"><span class="built_in">window</span>.$ === <span class="literal">undefined</span> &amp;&amp; (<span class="built_in">window</span>.$ = Zepto)</span><br></pre></td></tr></table></figure>

<ul>
<li>jQuery 可以使用 <code>jQuery.noConflict()</code> 来解决</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">factory</span>(<span class="params"><span class="built_in">window</span>, noGlobal</span>) </span>&#123;</span><br><span class="line"><span class="meta">    &quot;use strict&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> jQuery;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="comment">// 在没有暴露给 window之前，把当前 window的$存一下</span></span><br><span class="line">    <span class="keyword">var</span> _jQuery = <span class="built_in">window</span>.jQuery,</span><br><span class="line">        _$ = <span class="built_in">window</span>.$;</span><br><span class="line"></span><br><span class="line">    jQuery.noConflict = <span class="function"><span class="keyword">function</span> (<span class="params">deep</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">window</span>.$ === jQuery) &#123;</span><br><span class="line">            <span class="comment">// 转让使用权给 Zepto</span></span><br><span class="line">            <span class="built_in">window</span>.$ = _$;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (deep &amp;&amp; <span class="built_in">window</span>.jQuery === jQuery) &#123;</span><br><span class="line">            <span class="built_in">window</span>.jQuery = _jQuery;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> jQuery;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> noGlobal === <span class="string">&quot;undefined&quot;</span>) &#123;</span><br><span class="line">        <span class="comment">// 暴露给 window</span></span><br><span class="line">        <span class="built_in">window</span>.jQuery = <span class="built_in">window</span>.$ = jQuery;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> jQuery;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>源码分析</tag>
        <tag>JavaScript</tag>
        <tag>jQuery</tag>
        <tag>闭包应用</tag>
        <tag>冲突处理</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 实现轮播图（附jQuery版本）</title>
    <url>/posts/17652c6a/</url>
    <content><![CDATA[<h3 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h3><ul>
<li>多张图片自动轮播展示，对应分页器（小圆点）高亮显示</li>
<li>点击分页器（小圆点）切换对应图片</li>
<li>点击前进/后退按钮切换当前图片的前一张/后一张图片</li>
<li>图片无缝切换，第一张图片和最后一张图片无缝切换</li>
<li>鼠标滑入停止图片切换，鼠标移出开始图片切换</li>
<li>前进后退按钮防抖</li>
</ul>
<a id="more"></a>

<p><img data-src="https://img-blog.csdnimg.cn/20201219104627257.gif" alt="轮播图切换"></p>
<h3 id="index-html（html-css）"><a href="#index-html（html-css）" class="headerlink" title="index.html（html+css）"></a>index.html（html+css）</h3><ul>
<li>创建 <code>index.html</code> 文件，粘贴如下代码</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>轮播图<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        * &#123;</span><br><span class="line">            margin: 0;</span><br><span class="line">            padding: 0;</span><br><span class="line">        &#125;</span><br><span class="line">        ul &#123;</span><br><span class="line">            list-style: none;</span><br><span class="line">        &#125;</span><br><span class="line">        a &#123;</span><br><span class="line">            text-decoration: none;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#banner</span> &#123;</span></span><br><span class="line">            width: 1226px;</span><br><span class="line">            height: 460px;</span><br><span class="line">            margin: 100px auto;</span><br><span class="line">            overflow: hidden;</span><br><span class="line">            position: relative;</span><br><span class="line">            cursor: pointer;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#wrapper</span> &#123;</span></span><br><span class="line">            display: flex;</span><br><span class="line">            position: absolute;</span><br><span class="line">            left: 0;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#wrapper</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line">            width: 1226px;</span><br><span class="line">            height: 460px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#wrapper</span> <span class="selector-tag">li</span> <span class="selector-tag">img</span> &#123;</span></span><br><span class="line">            display: block;</span><br><span class="line">            width: 100%;</span><br><span class="line">            height: 100%;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#list</span> &#123;</span></span><br><span class="line">            position: absolute;</span><br><span class="line">            left: 50%;</span><br><span class="line">            display: flex;</span><br><span class="line">            align-items: center;</span><br><span class="line">            transform: translate(-50%, -50%);</span><br><span class="line">            bottom: 10px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#list</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line">            width: 10px;</span><br><span class="line">            height: 10px;</span><br><span class="line">            background: rgba(0, 0, 0, 0.4);</span><br><span class="line">            border: 3px solid rgba(255, 255, 255, 0.1);</span><br><span class="line">            border-radius: 50%;</span><br><span class="line">            margin: 0 5px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#list</span> <span class="selector-tag">li</span><span class="selector-class">.active</span> &#123;</span></span><br><span class="line">            background: rgba(255, 255, 255, 0.3);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#left</span>, <span class="selector-id">#right</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background</span>: <span class="selector-tag">url</span>(&quot;<span class="selector-tag">https</span>://<span class="selector-tag">i1</span><span class="selector-class">.mifile</span><span class="selector-class">.cn</span>/<span class="selector-tag">f</span>/<span class="selector-tag">i</span>/2014/<span class="selector-tag">cn</span>/<span class="selector-tag">icon</span>/<span class="selector-tag">icon-slides</span><span class="selector-class">.png</span>&quot;) <span class="selector-tag">no-repeat</span>;</span></span><br><span class="line">            width: 41px;</span><br><span class="line">            height: 69px;</span><br><span class="line">            position: absolute;</span><br><span class="line">            top: 50%;</span><br><span class="line">            transform: translate(0, -50%);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#left</span> &#123;</span></span><br><span class="line">            left: 0;</span><br><span class="line">            background-position: -84px 0;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#right</span> &#123;</span></span><br><span class="line">            right: 0;</span><br><span class="line">            background-position: -125px 0;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#left</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line">            background-position: 0 0;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#right</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line">            background-position: -42px 0;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;banner&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 图片 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.cnbj1.fds.api.mi-img.com/mi-mall/9ebff5f5c1f52f2dbdd611897adbefd4.jpg?thumb=1&amp;w=1226&amp;h=460&amp;f=webp&amp;q=90&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 分页器（小圆点） --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;active&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 前进按钮 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;left&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 后退按钮 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;right&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;index.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>不加 JS，静态界面应该是下图这样的</p>
<ul>
<li>如果图片没有请求到，可以换一个图片链接</li>
</ul>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/js-img/%E8%BD%AE%E6%92%AD%E5%9B%BE-mi-%E9%9D%99%E6%80%81%E7%95%8C%E9%9D%A2.jpg" alt="轮播图-mi-静态界面"></p>
<h3 id="banner-json"><a href="#banner-json" class="headerlink" title="banner.json"></a>banner.json</h3><ul>
<li>这里需要用 Ajax 请求一下如下 json 数据</li>
<li>创建 <code>banner.json</code> ，粘贴如下数据</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">&quot;id&quot;</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">&quot;img&quot;</span>: <span class="string">&quot;https://cdn.cnbj1.fds.api.mi-img.com/mi-mall/9ebff5f5c1f52f2dbdd611897adbefd4.jpg?thumb=1&amp;w=1226&amp;h=460&amp;f=webp&amp;q=90&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;desc&quot;</span>: <span class="string">&quot;banner1&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">&quot;id&quot;</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="attr">&quot;img&quot;</span>: <span class="string">&quot;https://cdn.cnbj1.fds.api.mi-img.com/mi-mall/0ef4160c861b998239bce9adb82341e7.jpg?thumb=1&amp;w=1226&amp;h=460&amp;f=webp&amp;q=90&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;desc&quot;</span>: <span class="string">&quot;banner2&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">&quot;id&quot;</span>: <span class="number">3</span>,</span><br><span class="line">        <span class="attr">&quot;img&quot;</span>: <span class="string">&quot;https://cdn.cnbj1.fds.api.mi-img.com/mi-mall/0e4acf11840c1d9600c34c46ffa73ec8.jpg?thumb=1&amp;w=1226&amp;h=460&amp;f=webp&amp;q=90&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;desc&quot;</span>: <span class="string">&quot;banner3&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">&quot;id&quot;</span>: <span class="number">4</span>,</span><br><span class="line">        <span class="attr">&quot;img&quot;</span>: <span class="string">&quot;https://cdn.cnbj1.fds.api.mi-img.com/mi-mall/d65e7bc110ca74b9d7fa7ce53a841971.jpg?w=2452&amp;h=920&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;desc&quot;</span>: <span class="string">&quot;banner4&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h3 id="index-js-（原生jS-）"><a href="#index-js-（原生jS-）" class="headerlink" title="index.js （原生jS ）"></a>index.js （原生jS ）</h3><ul>
<li>原理：图片平铺在一行，然后利用定时器计算偏移量实现定时轮播</li>
<li>切换动画效果函数可以使用正则把有效数组匹配出来 <code>/[+-]?(0|([1-9]\d+))(\.\d+)?/g</code> 或 把单位匹配出来 <code>/[^+-.\d]+/g</code>（还不太完善）</li>
<li><strong>注意：</strong>需要使用 live-server 启动</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取页面元素</span></span><br><span class="line"><span class="keyword">let</span> banner = <span class="built_in">document</span>.getElementById(<span class="string">&quot;banner&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> wrapper = <span class="built_in">document</span>.getElementById(<span class="string">&quot;wrapper&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> list = <span class="built_in">document</span>.getElementById(<span class="string">&quot;list&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> lis = list.getElementsByTagName(<span class="string">&quot;li&quot;</span>);</span><br><span class="line"><span class="comment">// Ajax 请求数据</span></span><br><span class="line"><span class="keyword">let</span> data = <span class="literal">null</span>;</span><br><span class="line"><span class="comment">// 接收定时器的返回值</span></span><br><span class="line"><span class="keyword">let</span> timer = <span class="literal">null</span>;</span><br><span class="line"><span class="comment">// 当前展示图片的索引</span></span><br><span class="line"><span class="keyword">let</span> step = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 0.切换动画效果（简单实现jQuery animate切换效果）</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">animate</span>(<span class="params">ele, target, duration</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> begin = &#123;&#125;</span><br><span class="line">    <span class="keyword">let</span> change = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> target) &#123;</span><br><span class="line">        begin[key] = <span class="built_in">parseFloat</span>(<span class="built_in">window</span>.getComputedStyle(ele)[key])</span><br><span class="line">        change[key] = target[key] - begin[key]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> time = <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> timers = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        time += <span class="number">20</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> target) &#123;</span><br><span class="line">            ele.style[key] = time / duration * change[key] + begin[key] + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (time &gt;= duration) &#123;</span><br><span class="line">            <span class="built_in">clearInterval</span>(timers);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="number">20</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.数据请求 Ajax四部曲</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getData</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    xhr.open(<span class="string">&quot;get&quot;</span>, url, <span class="literal">false</span>);</span><br><span class="line">    xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (xhr.readyState === <span class="number">4</span> &amp;&amp; xhr.status === <span class="number">200</span>) &#123;</span><br><span class="line">            data = <span class="built_in">JSON</span>.parse(xhr.responseText);</span><br><span class="line">            renderHtml(data);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    xhr.send();</span><br><span class="line">&#125;</span><br><span class="line">getData(<span class="string">&quot;./banner.json&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.渲染图片</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">renderHtml</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> imgs = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">let</span> lis = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    data.forEach(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">        imgs += <span class="string">`&lt;li&gt;&lt;img src=&quot;<span class="subst">$&#123;item.img&#125;</span>&quot; alt=&quot;&quot;&gt;&lt;/li&gt;`</span>;</span><br><span class="line">        lis += <span class="string">&quot;&lt;li&gt;&lt;/li&gt;&quot;</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 要实现无缝滚动，需要克隆第一张图片，放到最后一张的后面</span></span><br><span class="line">    imgs += <span class="string">`&lt;li&gt;&lt;img src=&quot;<span class="subst">$&#123;data[<span class="number">0</span>].img&#125;</span>&quot; alt=&quot;&quot;&gt;&lt;/li&gt;`</span>;</span><br><span class="line">    wrapper.innerHTML = imgs;</span><br><span class="line">    list.innerHTML = lis;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.实现自动轮播，每隔2000ms执行一次</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">autoMove</span>(<span class="params">index</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 图片索引自增（切换下一张图片）</span></span><br><span class="line">    step++;</span><br><span class="line">    <span class="comment">// 如果当前函数执行时没有传形参index，那就什么都不做，如果形参index有值，就把index赋值给step即可</span></span><br><span class="line">    <span class="keyword">typeof</span> index == <span class="string">&quot;undefined&quot;</span> ? <span class="literal">null</span> : step = index;</span><br><span class="line">    <span class="comment">// 如果当前的step&gt;=5说明已经运动到最后一张图片了，这时候需要马上把wrapper的left值改为0</span></span><br><span class="line">    <span class="keyword">if</span> (step &gt;= data.length + <span class="number">1</span>) &#123;</span><br><span class="line">        wrapper.style.left = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 这时step改为1，可以正常显示第二张</span></span><br><span class="line">        step = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    animate(wrapper, &#123;</span><br><span class="line">        left: -<span class="number">1226</span> * step</span><br><span class="line">    &#125;, <span class="number">500</span>);</span><br><span class="line">    changeFocus();</span><br><span class="line">&#125;</span><br><span class="line">timer = <span class="built_in">setInterval</span>(autoMove, <span class="number">2000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.鼠标划上图片停止轮播 鼠标离开继续轮播</span></span><br><span class="line">banner.onmouseover = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">clearInterval</span>(timer);</span><br><span class="line">&#125;</span><br><span class="line">banner.onmouseout = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">clearInterval</span>(timer);</span><br><span class="line">    timer = <span class="built_in">setInterval</span>(autoMove, <span class="number">2000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5.实现焦点跟随，显示哪一张图片，就给对应的焦点li加上类名active</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">changeFocus</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 循环所有的焦点，判断一下当前的step和哪个焦点的索引相等，和谁相等就给谁加上active类名，其余的清除active类名</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; lis.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i == step) &#123;</span><br><span class="line">            lis[i].classList.add(<span class="string">&quot;active&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            lis[i].classList.remove(<span class="string">&quot;active&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果当前的step是data.length，说明当前页面显示的是最后一张图片，它和第一张图公用一个焦点，这时让第一个焦点高亮即可</span></span><br><span class="line">    <span class="keyword">if</span> (step == data.length) &#123;</span><br><span class="line">        lis[<span class="number">0</span>].classList.add(<span class="string">&quot;active&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">changeFocus();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 6.点击分页器（小圆点），实现切换对应图片</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bindClick</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; lis.length; i++) &#123;</span><br><span class="line">        lis[i].onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            autoMove(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">bindClick();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 7.控制前进/后退按钮</span></span><br><span class="line">right.onclick = debounce(autoMove, <span class="number">300</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">lClick</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (step == <span class="number">0</span>) &#123;</span><br><span class="line">        step = data.length;</span><br><span class="line">        wrapper.style.left = (data.length) * -<span class="number">1226</span> + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    step--;</span><br><span class="line">    autoMove(step)</span><br><span class="line">&#125;</span><br><span class="line">left.onclick = debounce(lClick, <span class="number">300</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 8.防抖</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">fn, wait</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> timers = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">...args</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (timers) <span class="built_in">clearTimeout</span>(timers);</span><br><span class="line">        timers = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            result = fn.apply(<span class="built_in">this</span>, ...args);</span><br><span class="line">        &#125;, wait)</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="jQuery版本"><a href="#jQuery版本" class="headerlink" title="jQuery版本"></a>jQuery版本</h3><ul>
<li>只需替换JS部分即可</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://libs.baidu.com/jquery/1.11.3/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> timer = <span class="literal">null</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> url = <span class="string">&quot;./banner.json&quot;</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> step = <span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> lens = <span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 1.数据请求</span></span></span><br><span class="line"><span class="javascript">    $.ajax(&#123;</span></span><br><span class="line">        url: url,</span><br><span class="line"><span class="javascript">        <span class="keyword">async</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="javascript">        success: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span></span><br><span class="line">            bindHtml(res);</span><br><span class="line">            lens = res.length;</span><br><span class="line"><span class="javascript">            timer = <span class="built_in">setInterval</span>(autoMove, <span class="number">2000</span>);</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    <span class="comment">// 2.渲染图片</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">bindHtml</span>(<span class="params">data</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> imgs = <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> lis = <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="javascript">        $.each(data, <span class="function">(<span class="params">index, item</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">            imgs += `<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;$&#123;item.img&#125;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span>`;</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            lis += &quot;<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span>&quot;;</span></span></span><br><span class="line">        &#125;);</span><br><span class="line"><span class="handlebars"><span class="xml">        imgs += `<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;$&#123;data[0].img&#125;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span>`;</span></span></span><br><span class="line"><span class="javascript">        $(<span class="string">&quot;#wrapper&quot;</span>).html(imgs);</span></span><br><span class="line"><span class="javascript">        $(<span class="string">&quot;#list&quot;</span>).html(lis);</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="comment">// 3.实现自动轮播，每隔1000ms执行一次</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">autoMove</span>(<span class="params">index</span>) </span>&#123;</span></span><br><span class="line">        step++;</span><br><span class="line"><span class="javascript">        <span class="keyword">typeof</span> index == <span class="string">&quot;undefined&quot;</span> ? <span class="literal">null</span> : step = index;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (step &gt;= <span class="number">5</span>) &#123;</span></span><br><span class="line">            step = 1;</span><br><span class="line"><span class="javascript">            $(<span class="string">&quot;#wrapper&quot;</span>).animate(&#123;</span></span><br><span class="line"><span class="javascript">                left: <span class="string">&quot;0px&quot;</span></span></span><br><span class="line">            &#125;, 0)</span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">        $(<span class="string">&quot;#wrapper&quot;</span>).animate(&#123;</span></span><br><span class="line"><span class="javascript">            left: -$(<span class="string">&quot;#outer&quot;</span>).width() * step + <span class="string">&quot;px&quot;</span>,</span></span><br><span class="line">        &#125;, 1000)</span><br><span class="line">        changeFocus();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="comment">// 4.鼠标划上图片停止轮播 鼠标离开继续轮播</span></span></span><br><span class="line"><span class="javascript">    $(<span class="string">&quot;#outer&quot;</span>).hover(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">clearInterval</span>(timer);</span></span><br><span class="line"><span class="javascript">    &#125;, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        timer = <span class="built_in">setInterval</span>(autoMove, <span class="number">2000</span>);</span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    <span class="comment">// 5.实现焦点跟随，显示哪一张图片，就给对应的焦点li加上类名active</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">changeFocus</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">&quot;#list li&quot;</span>).eq(step).addClass(<span class="string">&quot;active&quot;</span>).siblings().removeClass(<span class="string">&quot;active&quot;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (step == lens) &#123;</span></span><br><span class="line"><span class="javascript">            $(<span class="string">&quot;#list li&quot;</span>).eq(<span class="number">0</span>).addClass(<span class="string">&quot;active&quot;</span>).siblings().removeClass(<span class="string">&quot;active&quot;</span>);</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    changeFocus();</span><br><span class="line"><span class="javascript">    <span class="comment">// 6.点击焦点，实现切换对应图片</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">bindClick</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">&quot;#list li&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            autoMove($(<span class="built_in">this</span>).index());</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    bindClick();</span><br><span class="line"><span class="javascript">    <span class="comment">// 7.控制箭头</span></span></span><br><span class="line"><span class="javascript">    $(<span class="string">&quot;#right&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line">        autoMove();</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    $(<span class="string">&quot;#left&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (step == <span class="number">0</span>) &#123;</span></span><br><span class="line">            step = lens;</span><br><span class="line"><span class="javascript">            $(<span class="string">&quot;#wrapper&quot;</span>).animate(&#123;</span></span><br><span class="line"><span class="javascript">                left: lens * -<span class="number">800</span> + <span class="string">&quot;px&quot;</span></span></span><br><span class="line">            &#125;, 0)</span><br><span class="line">        &#125;</span><br><span class="line">        step--;</span><br><span class="line">        autoMove(step);</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>jQuery</tag>
        <tag>防抖</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 类数组转数组的四种方法</title>
    <url>/posts/f0469b23/</url>
    <content><![CDATA[<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol>
<li>for 循环</li>
<li>[].slice.call() （calll方法：[].map.call()）</li>
<li>ES6语法：Array.from()</li>
<li>ES6语法：展开运算符</li>
</ol>
<a id="more"></a>

<p>原生 js 获取 DOM 元素集合是一个类数组对象，所以不能直接利用数组对象（比如：sort、forEach），需要转换为数组后，才可以使用</p>
<p>下述方法使用 arguments 当伪数组</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> res = toArr(<span class="built_in">arguments</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line">&#125;</span><br><span class="line">fn(<span class="string">&quot;A&quot;</span>, <span class="number">3</span>, <span class="number">5</span>); <span class="comment">// 返回 [ &#x27;A&#x27;, 3, 5 ]</span></span><br></pre></td></tr></table></figure>

<h3 id="1-for-循环"><a href="#1-for-循环" class="headerlink" title="1.for 循环"></a>1.for 循环</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toArr</span>(<span class="params">cArr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> arr = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; cArr.length; i++) &#123;</span><br><span class="line">        arr.push(cArr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-slice-call-call-方法"><a href="#2-slice-call-call-方法" class="headerlink" title="2.[].slice.call() call() 方法"></a>2.[].slice.call() <code>call() 方法</code></h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toArr</span>(<span class="params">cArr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [].slice.call(cArr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>arr.slice(start, end)</code> ：提取索引 start 复制到索引 end 的部分（不包括 end</li>
<li><code>Array.prototype.slice.call(arguments, 0)</code>，就是把 <code>arguments</code> 当做当前对象，要调用 <code>arguments</code> 的 <code>slice</code> 方法，<code>slice(0)</code>  获取所有项（不包含索引）</li>
<li>[] 是一个数组对象，会去原型链上找 <code>slice</code> 这个方法，所以可以简写成 <code>[].slice.call()</code></li>
</ul>
<p><code>call() </code> 方法可以搭配的比较广，这里再举个例子：可以用 map 方法，返回遍历的 item 即可</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toArr</span>(<span class="params">cArr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [].map.call(cArr, <span class="function">(<span class="params">item</span>) =&gt;</span> item);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-ES6语法：Array-from"><a href="#3-ES6语法：Array-from" class="headerlink" title="3.ES6语法：Array.from()"></a>3.ES6语法：Array.from()</h3><p>只要有 length 属性的对象，都可以用此方法转换成数组</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toArr</span>(<span class="params">cArr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Array</span>.from(cArr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-ES6语法：展开运算符"><a href="#4-ES6语法：展开运算符" class="headerlink" title="4.ES6语法：展开运算符"></a>4.ES6语法：展开运算符</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toArr</span>(<span class="params">cArr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [...cArr];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>数组</tag>
      </tags>
  </entry>
  <entry>
    <title>原生 JS 封装数组方法</title>
    <url>/posts/995105eb/</url>
    <content><![CDATA[<h2 id="数组基本操作方法"><a href="#数组基本操作方法" class="headerlink" title="数组基本操作方法"></a>数组基本操作方法</h2><blockquote>
<p>以下方法<strong>均改变原数组</strong>，需要操作数组的 length 属性</p>
</blockquote>
<h3 id="Push"><a href="#Push" class="headerlink" title="Push"></a>Push</h3><ul>
<li>返回值：新数组的长度</li>
<li>思路：数组的长度等于 <code>arguments[i]</code></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.myPush = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">arguments</span>.length; i++) &#123;</span><br><span class="line">        <span class="built_in">this</span>[<span class="built_in">this</span>.length] = <span class="built_in">arguments</span>[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.length;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="Pop"><a href="#Pop" class="headerlink" title="Pop"></a>Pop</h3><ul>
<li>返回值：删除的项（如果空数组，返回 undefined）</li>
<li>思路：让数组长度 -1</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.myPop = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.length==<span class="number">0</span>?<span class="literal">undefined</span>:(<span class="built_in">this</span>[<span class="built_in">this</span>.length - <span class="number">1</span>],<span class="built_in">this</span>.length--);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="Shift"><a href="#Shift" class="headerlink" title="Shift"></a>Shift</h3><ul>
<li>返回值：删除的项</li>
<li>思路：让数组前一个值 <code>this[i]</code> 等于后一个值 <code>this[i + 1]</code> ，之后把数组长度 -1</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.myShift = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.length == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> del = <span class="built_in">this</span>[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">this</span>.length; i++) &#123;</span><br><span class="line">        <span class="built_in">this</span>[i] = <span class="built_in">this</span>[i + <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.length--;</span><br><span class="line">    <span class="keyword">return</span> del;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="Unshift"><a href="#Unshift" class="headerlink" title="Unshift"></a>Unshift</h3><ul>
<li>返回值：新数组的长度</li>
<li>思路：让数组后一个值 <code>this[i]</code> 等于前 n（<code>n=arguments.length</code>）个值 <code>this[i - arguments.length]</code> ，之后把前 n 个值填为 <code>arguments[i]</code></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.myUnshift = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.length += <span class="built_in">arguments</span>.length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="built_in">this</span>.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= <span class="built_in">arguments</span>.length) &#123;</span><br><span class="line">            <span class="built_in">this</span>[i] = <span class="built_in">this</span>[i - <span class="built_in">arguments</span>.length];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>[i] = <span class="built_in">arguments</span>[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.length;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li>ES6 方法实现能简单一些。其实就是拼接数组，之后把拼接的数组一项一项赋值给原数组</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.myUnshift = <span class="function"><span class="keyword">function</span> (<span class="params">...arg</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> newArr = [...arg, ...this];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; newArr.length; i++) &#123;</span><br><span class="line">        <span class="built_in">this</span>[i] = newArr[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.length;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="数组操作方法"><a href="#数组操作方法" class="headerlink" title="数组操作方法"></a>数组操作方法</h2><blockquote>
<p>以下方法除splice（改变原数组）<strong>均不改变原数组</strong></p>
</blockquote>
<h3 id="splice（特殊）"><a href="#splice（特殊）" class="headerlink" title="splice（特殊）"></a>splice（特殊）</h3><blockquote>
<p>因为 push 实现比较简单，这里用到了 push 方法，能简写一两行</p>
</blockquote>
<ul>
<li><p>返回值：删除的项（数组）</p>
</li>
<li><p>思路：按参数数量分别进行判定</p>
<ul>
<li>参数小于等于1个，从 start 开始添加到新数组，并把添加那项删除（数组长度也减少）</li>
<li>参数大于1个，先进行删除（跟上一步相同）再把数组分成三份，左边+中间被替换的项+右边，合并数组</li>
</ul>
<p>注意：</p>
<ol>
<li>第一个参数为负数：如果转换为正数，大于数组长度，直接转换为0；小于等于数组长度，需加上数组长度</li>
<li>第二个参数：如果小于0，直接转换为0</li>
<li>第三个参数起：要添加的项</li>
</ol>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.mySplice = <span class="function"><span class="keyword">function</span> (<span class="params">start, del</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> arr = [];</span><br><span class="line">    <span class="keyword">if</span> (start &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        start = -start &gt; <span class="built_in">this</span>.length ? <span class="number">0</span> : <span class="built_in">this</span>.length + start;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">arguments</span>.length &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = start; i &lt; <span class="built_in">this</span>.length; i++) &#123;</span><br><span class="line">            arr.push(<span class="built_in">this</span>[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.length = start;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        del = del &lt; <span class="number">0</span> ? <span class="number">0</span> : del;</span><br><span class="line">        <span class="comment">// 删除数组这一步</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; del; i++) &#123;</span><br><span class="line">            arr.push(<span class="built_in">this</span>[start + i]);</span><br><span class="line">            <span class="built_in">this</span>[start + i] = <span class="built_in">this</span>[start + i + del];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.length -= del;</span><br><span class="line">        <span class="keyword">let</span> lArr = [];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; start; i++) &#123;</span><br><span class="line">            lArr.push(<span class="built_in">this</span>[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">arguments</span>.length - <span class="number">2</span>; i++) &#123;</span><br><span class="line">            lArr.push(<span class="built_in">arguments</span>[i + <span class="number">2</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = start; i &lt; <span class="built_in">this</span>.length; i++) &#123;</span><br><span class="line">            lArr.push(<span class="built_in">this</span>[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; lArr.length; i++) &#123;</span><br><span class="line">            <span class="built_in">this</span>[i] = lArr[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li>删除数组那一步，我第一时间想到的是冒泡（把删除项一次一次冒到最后一位），最后出来的代码是下面这样（非常麻烦）</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> that = del;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = that; i &gt; <span class="number">0</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (that &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = start; j &lt; <span class="built_in">this</span>.length - <span class="number">1</span>; j++) &#123;</span><br><span class="line">        [<span class="built_in">this</span>[j], <span class="built_in">this</span>[j + <span class="number">1</span>]] = [<span class="built_in">this</span>[j + <span class="number">1</span>], <span class="built_in">this</span>[j]];</span><br><span class="line">    &#125;</span><br><span class="line">    arr.push(<span class="built_in">this</span>[<span class="built_in">this</span>.length - <span class="number">1</span>]);</span><br><span class="line">    <span class="built_in">this</span>.length--;</span><br><span class="line">    that--;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>大可不必这样，把删除项的下一位（不删除）往前挪一个一个覆盖要删除的项即可</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; del; i++) &#123;</span><br><span class="line">    arr.push(<span class="built_in">this</span>[start + i]);</span><br><span class="line">    <span class="built_in">this</span>[start + i] = <span class="built_in">this</span>[start + i + del];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">this</span>.length -= del;</span><br></pre></td></tr></table></figure>

<h3 id="concat"><a href="#concat" class="headerlink" title="concat"></a>concat</h3><ul>
<li>返回值：拼接后的新数组</li>
<li>思路：如果参数是数组需遍历后一个一个添加到新数组</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.myConcat = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> arr = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">this</span>.length; i++) &#123;</span><br><span class="line">        arr[i] = <span class="built_in">this</span>[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">arguments</span>.length; i++) &#123;</span><br><span class="line">        <span class="keyword">const</span> el = <span class="built_in">arguments</span>[i];</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(el)) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; el.length; i++) &#123;</span><br><span class="line">                arr[arr.length] = el[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            arr[arr.length] = el;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="slice"><a href="#slice" class="headerlink" title="slice"></a>slice</h3><ul>
<li>返回值：复制后的新数组</li>
<li>思路：如果传参是负数索引，需对其长度进行判定。如果大于数组长度，将其改为0；小于数组长度，将其改为<code>arr.length+(负数索引)</code></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.mySlice = <span class="function"><span class="keyword">function</span> (<span class="params">start = <span class="number">0</span>, end = <span class="built_in">this</span>.length</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> arr = [];</span><br><span class="line">    <span class="keyword">if</span> (start &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        start = -start &gt; <span class="built_in">this</span>.length ? <span class="number">0</span> : <span class="built_in">this</span>.length + start;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (end &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        end = -end &gt; <span class="built_in">this</span>.length ? <span class="number">0</span> : <span class="built_in">this</span>.length + end;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = start; i &lt; end; i++) &#123;</span><br><span class="line">        arr.push(<span class="built_in">this</span>[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="flat"><a href="#flat" class="headerlink" title="flat"></a>flat</h3><ul>
<li>返回值：扁平后的新数组</li>
<li>思路：递归（下面实现没有加上可以指定递归深度的参数，类似<code>arr.flat(Infinity)</code>）</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.myFlat = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> arr = [];</span><br><span class="line">    fn(<span class="built_in">this</span>);</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">ary</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; ary.length; i++) &#123;</span><br><span class="line">            <span class="keyword">const</span> item = ary[i];</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(item)) &#123;</span><br><span class="line">                fn(item);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                arr.push(item);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>.prototype.myFlat = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.toString().split(<span class="string">&quot;,&quot;</span>).map(<span class="function">(<span class="params">item</span>) =&gt;</span> <span class="built_in">Number</span>(item));</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h2 id="数组重排方法"><a href="#数组重排方法" class="headerlink" title="数组重排方法"></a>数组重排方法</h2><h3 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h3><ul>
<li>返回值：倒序后的数组</li>
<li>思路：第n个数和倒数第n个数两两对换</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.myReverse = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, j = <span class="built_in">this</span>.length - <span class="number">1</span>; j &gt; i; i++, j--) &#123;</span><br><span class="line">        <span class="keyword">var</span> temp = <span class="built_in">this</span>[i];</span><br><span class="line">        <span class="built_in">this</span>[i] = <span class="built_in">this</span>[j];</span><br><span class="line">        <span class="built_in">this</span>[j] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h3><ul>
<li>返回值：排序后的数组</li>
<li>思路：不传参的时候，两两比较 String(xxx) 的值；传参的时候判断 <code>callBack(a-b)</code> 是否大于 0 即可</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.mySort = <span class="function"><span class="keyword">function</span> (<span class="params">callBack</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.length &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> callBack === <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">this</span>.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; <span class="built_in">this</span>.length - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (callBack(<span class="built_in">this</span>[j], <span class="built_in">this</span>[j + <span class="number">1</span>]) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    [<span class="built_in">this</span>[j], <span class="built_in">this</span>[j + <span class="number">1</span>]] = [<span class="built_in">this</span>[j + <span class="number">1</span>], <span class="built_in">this</span>[j]];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> callBack === <span class="string">&quot;undefined&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">this</span>.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; <span class="built_in">this</span>.length - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">String</span>(<span class="built_in">this</span>[j]) &gt; <span class="built_in">String</span>(<span class="built_in">this</span>[j + <span class="number">1</span>])) &#123;</span><br><span class="line">                    [<span class="built_in">this</span>[j], <span class="built_in">this</span>[j + <span class="number">1</span>]] = [<span class="built_in">this</span>[j + <span class="number">1</span>], <span class="built_in">this</span>[j]];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;参数异常&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="数组位置方法"><a href="#数组位置方法" class="headerlink" title="数组位置方法"></a>数组位置方法</h2><blockquote>
<p>以下方法均<strong>不改变原数组</strong></p>
</blockquote>
<h3 id="indexOf"><a href="#indexOf" class="headerlink" title="indexOf"></a>indexOf</h3><ul>
<li>返回值：索引/-1</li>
<li>思路：遍历数组，第二个参数是从哪个索引开始。如果不传参，从头查到尾部</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.myIndexOf = <span class="function"><span class="keyword">function</span> (<span class="params">val, index = <span class="number">0</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (index &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        index = -index &gt; <span class="built_in">this</span>.length ? <span class="number">0</span> : index + <span class="built_in">this</span>.length;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = index; i &lt; <span class="built_in">this</span>.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>[i] === val) &#123;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="lastIndexOf"><a href="#lastIndexOf" class="headerlink" title="lastIndexOf"></a>lastIndexOf</h3><ul>
<li>返回值：索引/-1</li>
<li>思路：遍历数组，第二个参数是到哪个索引结束（从0开始到这个索引结束）。如果不传参，从头查到尾部</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.myLastIndexOf = <span class="function"><span class="keyword">function</span> (<span class="params">val, index = <span class="built_in">this</span>.length</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (index &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        index = -index &gt;= <span class="built_in">this</span>.length ? <span class="number">0</span> : index + <span class="built_in">this</span>.length;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = index; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>[i] === val) &#123;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="includes"><a href="#includes" class="headerlink" title="includes"></a>includes</h3><ul>
<li>返回值：true/false</li>
<li>思路：遍历数组</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.myIncludes = <span class="function"><span class="keyword">function</span> (<span class="params">val</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">this</span>.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>[i] === val) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="数组迭代方法"><a href="#数组迭代方法" class="headerlink" title="数组迭代方法"></a>数组迭代方法</h2><blockquote>
<p>以下方法均<strong>不改变原数组</strong></p>
</blockquote>
<h3 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h3><blockquote>
<p>回调函数内部 this 一般指向 window</p>
</blockquote>
<ul>
<li>返回值：undefined</li>
<li>思路：遍历数组</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.myForEach = <span class="function"><span class="keyword">function</span> (<span class="params">callBack</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">this</span>.length; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> index = i, item = <span class="built_in">this</span>[i];</span><br><span class="line">        callBack(item, index);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><ul>
<li>返回值：映射后的新数组</li>
<li>思路：遍历数组，把数组每以项经过运算后赋值给新数组</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.myMap = <span class="function"><span class="keyword">function</span> (<span class="params">callBack</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> arr = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">this</span>.length; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> index = i, item = <span class="built_in">this</span>[i];</span><br><span class="line">        arr[i] = callBack(item, index);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h3><ul>
<li>返回值：函数累计处理的结果</li>
<li>思路：initial 返回值在数组的每次迭代中被记住，最后成为最终的结果值</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.myReduce = <span class="function"><span class="keyword">function</span> (<span class="params">callBack, initial</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> callBack !== <span class="string">&quot;function&quot;</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">&quot;callBack must be function&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> initial === <span class="string">&quot;undefined&quot;</span>) &#123;</span><br><span class="line">        initial = <span class="built_in">this</span>[<span class="number">0</span>];</span><br><span class="line">        i = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (; i &lt; <span class="built_in">this</span>.length; i++) &#123;</span><br><span class="line">        initial = callBack(initial, <span class="built_in">this</span>[i], i)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> initial;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="find"><a href="#find" class="headerlink" title="find"></a>find</h3><ul>
<li>返回值：找到就返回符合的元素，没有返回 undefined</li>
<li>思路：遍历数组</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.myFind = <span class="function"><span class="keyword">function</span> (<span class="params">callBack</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">this</span>.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (callBack(<span class="built_in">this</span>[i], i)) <span class="keyword">return</span> <span class="built_in">this</span>[i]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="every"><a href="#every" class="headerlink" title="every"></a>every</h3><ul>
<li>返回值：只要有一个不符合返回false，如果都符合返回 true</li>
<li>思路：遍历数组，一假即假</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.myEvery = <span class="function"><span class="keyword">function</span> (<span class="params">callBack</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">this</span>.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!callBack(<span class="built_in">this</span>[i], i)) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="some"><a href="#some" class="headerlink" title="some"></a>some</h3><ul>
<li>返回值：只要有一个符合就返回 true，如果都符合返回 false</li>
<li>思路：遍历数组，一真即真</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.mySome = <span class="function"><span class="keyword">function</span> (<span class="params">callBack</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">this</span>.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (callBack(<span class="built_in">this</span>[i], i)) <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h3><ul>
<li>返回值：一个新数组，数组里面是符合条件的所有元素</li>
<li>思路：遍历数组</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.myFilter = <span class="function"><span class="keyword">function</span> (<span class="params">callBack</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">Array</span>.isArray(<span class="built_in">this</span>) || !<span class="built_in">this</span>.length || <span class="keyword">typeof</span> callback !== <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> arr = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">this</span>.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!callBack(<span class="built_in">this</span>[i], i)) &#123;</span><br><span class="line">            arr.push(<span class="built_in">this</span>[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>数组</tag>
        <tag>封装</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 深浅拷贝</title>
    <url>/posts/6362a5/</url>
    <content><![CDATA[<h2 id="JS基本数据类型"><a href="#JS基本数据类型" class="headerlink" title="JS基本数据类型"></a>JS基本数据类型</h2><ul>
<li>基础数据类型按值进行访问的，可以操作保存在变量中的实际值</li>
<li>引用数据类型，不允许直接访问值，不能直接操作对象的内存空间，在操作对象时，实际操作的是引用</li>
</ul>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/js-img/JS%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.jpg" alt="JS数据类型"></p>
<br>

<h2 id="存储方式"><a href="#存储方式" class="headerlink" title="存储方式"></a>存储方式</h2><p>再看一下存储方式，结合深浅拷贝的定义就会理解一些了</p>
<ul>
<li>基础类型存在栈中</li>
<li>引用类型同时保存在栈内存和堆内存</li>
</ul>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/js-img/JS%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%AD%98%E5%82%A8%E6%96%B9%E5%BC%8F.jpg" alt="存储方式"></p>
<br>

<h2 id="深拷贝和浅拷贝"><a href="#深拷贝和浅拷贝" class="headerlink" title="深拷贝和浅拷贝"></a>深拷贝和浅拷贝</h2><h3 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h3><ol>
<li><p>直接进行赋值</p>
<p>赋值引用 a 和 b 都指向同一个对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> b = a;</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果拷贝的是普通对象</p>
<p><code>Object.assign(target, source)</code></p>
<p>ES6 新增的对象方法，它可以实现第一层的“深拷贝”，但无法实现多层深拷贝</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123; <span class="attr">name</span>: <span class="string">&quot;lion&quot;</span>, <span class="attr">age</span>: <span class="number">6</span> &#125;</span><br><span class="line"><span class="keyword">var</span> c = &#123;&#125;;</span><br><span class="line"><span class="built_in">Object</span>.assign(c, a);</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果拷贝的是数组</p>
<ul>
<li><code>Array.prototype.concat()</code></li>
<li>ES6 扩展运算符</li>
<li><code>Array.prototype.slice()</code></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> b = a.concat();</span><br><span class="line"><span class="keyword">var</span> [...c] = a;</span><br><span class="line"><span class="keyword">var</span> d = a.slice();</span><br></pre></td></tr></table></figure>
</li>
<li><p>没有递归的 for 循环</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  name: <span class="string">&#x27;bird&#x27;</span>,</span><br><span class="line">  age: <span class="number">12</span>,</span><br><span class="line">  arr: [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj2 = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!obj.hasOwnProperty(key)) <span class="keyword">break</span></span><br><span class="line">  obj2[key] = obj[key]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h3><ol>
<li><p><code>JSON.parse() 和 JSON.stringify</code></p>
<p>只能转换 JSON 支持的数据类型，可以参考 <a href="https://www.json.org/json-en.html">JSON 数据类型</a></p>
<ul>
<li><code>bigint</code> 不能直接转换为字符串</li>
<li>对于 <code>symbol/undefined/function</code> 转换为字符串的时候就丢失了</li>
<li>正则对象、Error 错误对象会变为空对象，Date日期对象会变为字符串</li>
<li>无法处理 “套娃” 操作</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="comment">// num: 10n, // Uncaught TypeError: Do not know how to serialize a BigInt</span></span><br><span class="line">  sy: <span class="built_in">Symbol</span>(<span class="string">&#x27;AA&#x27;</span>),</span><br><span class="line">  un: <span class="literal">undefined</span>,</span><br><span class="line">  fn: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">  reg: <span class="regexp">/\d+/</span>,</span><br><span class="line">  err: <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;error&#x27;</span>),</span><br><span class="line">  time: <span class="keyword">new</span> <span class="built_in">Date</span>(),</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// obj.obj = obj // Uncaught TypeError: Converting circular structure to JSON</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj2 = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(obj))</span><br><span class="line"><span class="built_in">console</span>.log(obj2)</span><br><span class="line"><span class="comment">// &#123; err: &#123;&#125;, reg: &#123;&#125;, time: &quot;2020-07-10T01:43:11.344Z&quot; &#125;</span></span><br></pre></td></tr></table></figure>

<p>只能处理数字、字符串、布尔、null、object（普通对象/数组对象）…</p>
</li>
<li><p>递归赋值</p>
<p>Lodash/underscore 类库有 clone/deepClone</p>
<p>如下方法写是不行的，比如正则、错误对象、日期对象会变为普通对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  name: <span class="string">&#x27;bird&#x27;</span>,</span><br><span class="line">  age: <span class="number">12</span>,</span><br><span class="line">  arr: [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>],</span><br><span class="line">  child: &#123;</span><br><span class="line">    chinese: <span class="number">90</span>,</span><br><span class="line">    math: <span class="number">100</span>,</span><br><span class="line">    english: <span class="number">80</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  num: <span class="number">10n</span>,</span><br><span class="line">  sy: <span class="built_in">Symbol</span>(<span class="string">&#x27;AA&#x27;</span>),</span><br><span class="line">  un: <span class="literal">undefined</span>,</span><br><span class="line">  ul: <span class="literal">null</span>,</span><br><span class="line">  fn: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">  reg: <span class="regexp">/\d+/</span>,</span><br><span class="line">  err: <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;error&#x27;</span>),</span><br><span class="line">  time: <span class="keyword">new</span> <span class="built_in">Date</span>(),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepClone</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> objClone = <span class="built_in">Array</span>.isArray(obj) ? [] : &#123;&#125;</span><br><span class="line">  <span class="keyword">if</span> (obj &amp;&amp; <span class="keyword">typeof</span> obj === <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!obj.hasOwnProperty(key)) <span class="keyword">return</span></span><br><span class="line">      <span class="keyword">if</span> (obj[key] &amp;&amp; <span class="keyword">typeof</span> obj[key] === <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">        objClone[key] = <span class="built_in">this</span>.deepClone(obj[key])</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        objClone[key] = obj[key]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> objClone</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj2 = deepClone(obj)</span><br><span class="line"><span class="built_in">console</span>.log(obj2)</span><br></pre></td></tr></table></figure>



</li>
</ol>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>数组</tag>
        <tag>深拷贝</tag>
        <tag>浅拷贝</tag>
        <tag>ES6方法</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 继承的四种方式</title>
    <url>/posts/3792d7db/</url>
    <content><![CDATA[<h2 id="类三大特性"><a href="#类三大特性" class="headerlink" title="类三大特性"></a>类三大特性</h2><p>JS 本身是基于面向对象开发的编程语言。类：封装、继承、多态</p>
<ul>
<li><p>封装：类是一个函数，把实现一个功能的代码进行封装，以此实现 “低耦合高内聚”</p>
</li>
<li><p>多态：主要就是重载、重写两点</p>
<p>重写：子类重写父类上的方法（伴随着继承运行）</p>
<p>重载：相同的方法，由于参数或返回值不同，具备了不同的功能（JS 中不具备严格意义的重载；JS 中的重载，同一个方法内，根据传参不同实现不同的功能）</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 函数重载（两个函数名称相同，参数个数/类型不同）</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">...rest: <span class="built_in">number</span>[]</span>): <span class="title">number</span></span></span><br><span class="line"><span class="function"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">...rest: <span class="built_in">string</span>[]</span>): <span class="title">string</span></span></span></span><br><span class="line"><span class="function"><span class="function"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">...rest: <span class="built_in">any</span>[]</span>): <span class="title">any</span> </span>&#123;</span></span></span><br><span class="line"><span class="function"><span class="function">  <span class="title">let</span> <span class="title">first</span> = <span class="title">rest</span>[0]</span></span></span><br><span class="line"><span class="function"><span class="function">  <span class="title">if</span> (<span class="params"><span class="keyword">typeof</span> first === <span class="string">&#x27;string&#x27;</span></span>) </span>&#123;</span></span><br><span class="line"><span class="function">    <span class="title">return</span> <span class="title">rest</span>.<span class="title">join</span>(<span class="params"><span class="string">&#x27;&#x27;</span></span>)</span></span><br><span class="line"><span class="function">  &#125;</span></span><br><span class="line"><span class="function">  <span class="title">if</span> (<span class="params"><span class="keyword">typeof</span> first === <span class="string">&#x27;number&#x27;</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> rest.reduce(<span class="function">(<span class="params">pre, cur</span>) =&gt;</span> pre + cur)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>继承：子类继承父类的方法</p>
<p>其它语言的继承跟生活中的继承很相似，子基因修改了但不会影响父（单独拷贝一份）</p>
</li>
</ul>
<a id="more"></a>

<h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>继承机制使得不同的实例可以共享构造函数的原型对象的属性和方法</p>
<p>以下情况都是 B 为子类，A 为父类</p>
<h3 id="原型链继承"><a href="#原型链继承" class="headerlink" title="原型链继承"></a>原型链继承</h3><blockquote>
<p>基本思想是利用原型让一个引用类型继承另一个引用类型的属性和方法。我们知道每个构造函数都有一个原型对象（<code>prototype</code>），原型对象都包含一个指向构造函数的指针（<code>constructor</code>），而实例都包含一个指向原型对象的内部指针（<code>__proto__</code>）</p>
<p>那么，如果让一个构造函数的原型对象等于另一个类型的实例，此时的原型对象将包含一个指向另一个原型的指针，相应地，另一个原型中也包含着一个指向另一个构造函数的指针</p>
</blockquote>
<p>原型继承：</p>
<ol>
<li>父类中私有和公有的属性方法，最后都变为子类实例公有的</li>
<li>和其它语言不同的是，原型链并不会把父类的属性方法，”拷贝”给子类，而是让子类实例基于 <code>__proto__</code> 原型链找到自己定义的属性和方法（”指向/查找”）</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.a = <span class="string">&quot;a&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">A.prototype.getA = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.a);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">B</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.b = <span class="string">&quot;b&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">B.prototype = <span class="keyword">new</span> A(); <span class="comment">// 让 B 类的原型指向 A 类的实例</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="keyword">new</span> B();</span><br></pre></td></tr></table></figure>

<ul>
<li>让 B 类的原型（prototype）指向 A 类的实例，此时 B 类的原型是 A 类的实例（继承 A 类私有属性），同时 B 类的原型的 <code>__proto__</code> 指向 A 类的原型（继承 A 的公有属性）</li>
</ul>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/js-img/%E5%8E%9F%E5%9E%8B%E7%BB%A7%E6%89%BF.png" alt="原型继承"></p>
<p><strong>原型链继承的问题：</strong> 通过原型链继承后，B 的原型继承了 A 的实例属性变成了 B 的原型属性，若继承 A 的实例属性里面有引用数据类型，更改 B 的实例属性 colors，后续 B 的实例的实例属性 colors 都会被修改（并不是拷贝，而是指向）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.colors = [<span class="string">&quot;red&quot;</span>, <span class="string">&quot;green&quot;</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">B</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="comment">// new A()创建实例，实例拥有 colors 属性</span></span><br><span class="line"><span class="comment">// B 的原型改为该实例，则 B 的原型中添加 colors 属性</span></span><br><span class="line">B.prototype = <span class="keyword">new</span> A();</span><br><span class="line"><span class="keyword">let</span> arr1 = <span class="keyword">new</span> B();</span><br><span class="line">arr1.colors.push(<span class="string">&quot;yellow&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr1.colors); <span class="comment">// [ &#x27;red&#x27;, &#x27;green&#x27;, &#x27;yellow&#x27; ]</span></span><br><span class="line"><span class="keyword">let</span> arr2 = <span class="keyword">new</span> B();</span><br><span class="line"><span class="built_in">console</span>.log(arr2.colors); <span class="comment">// [ &#x27;red&#x27;, &#x27;green&#x27;, &#x27;yellow&#x27; ]</span></span><br></pre></td></tr></table></figure>

<p><strong>原型链继承的另一个问题：</strong> 在创建子类型的实例时，不能向父类型的构造函数中传递参数。所以实践中很少会单独使用原型链继承</p>
<p>应用：</p>
<ul>
<li>某些实例不属于某些类，但是想要用这个类原型上的方法，可以手动的去更改实例的 <code>__proto__</code> ，让它指向这个类的原型，这样这个实例就可以使用这个类的原型上的方法</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">arguments</span>.__proto__ = <span class="built_in">Array</span>.prototype;</span><br><span class="line">    <span class="comment">// arguments 是一个对象，对象上没有 sort 方法会报错</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">arguments</span>.sort(<span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a - b;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(fn(<span class="number">5</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">4</span>)); <span class="comment">// Array &#123; &#x27;0&#x27;: 3, &#x27;1&#x27;: 4, &#x27;2&#x27;: 5, &#x27;3&#x27;: 6 &#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="借用构造函数（call-继承）"><a href="#借用构造函数（call-继承）" class="headerlink" title="借用构造函数（call 继承）"></a>借用构造函数（call 继承）</h3><blockquote>
<p>基本思想：在子类型构造函数的内部调用超类型构造函数，通过 apply() 和 call() 方法可以在新创建的对象上执行构造函数</p>
</blockquote>
<p>call 继承：</p>
<ul>
<li>只能继承父类中私有的，不能继承父类中公有的</li>
<li>B 类和 A 类，想要让 B 类的实例拥有 A 类的私有属性（但不拥有公有属性），我们可以让 A 当成普通函数执行，把里面的 this 指向改成 B 类的实例（往 B 的实例中添加属性）</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.a = <span class="string">&quot;a&quot;</span>;</span><br><span class="line">    <span class="built_in">this</span>.x = <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">B</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// this -&gt; 实例B</span></span><br><span class="line">    A.call(<span class="built_in">this</span>)</span><br><span class="line">    <span class="built_in">this</span>.b = <span class="string">&quot;b&quot;</span>;</span><br><span class="line">    <span class="built_in">this</span>.y = <span class="number">200</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> b = <span class="keyword">new</span> B();</span><br></pre></td></tr></table></figure>

<p><strong>借用构造函数问题：</strong> 因为方法都是在构造函数中定义，因此就没有函数复用。而且，超类型的原型中定义的方法，对子类型来说是不可见的（只能添加私有属性）。实践中很少会单独使用借用构造函数</p>
<h3 id="寄生组合式继承"><a href="#寄生组合式继承" class="headerlink" title="寄生组合式继承"></a>寄生组合式继承</h3><blockquote>
<p>基本思想：借用原型链实现对原型属性和方法的继承，通过借用构造函数来实现实例属性的继承。这样既通过原型上定义方法实现了函数的复用，又保证每个实例都有自己的属性</p>
</blockquote>
<p>需求：B 类要继承 A 类的私有属性和公有属性</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.a = <span class="string">&quot;a&quot;</span>;</span><br><span class="line">    <span class="built_in">this</span>.x = <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line">A.prototype.getA = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">B</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.b = <span class="string">&quot;b&quot;</span>;</span><br><span class="line">    <span class="built_in">this</span>.y = <span class="number">200</span>;</span><br><span class="line">&#125;</span><br><span class="line">B.prototype.getB = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>我们很容易就能想到最简单的方法：A、B类的原型指向同一个堆内存地址。但修改时会相互影响，耦合性高，不推荐这么做</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">B.prototype = A.prototype;</span><br><span class="line">B.prototype.getB = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>解决方法：</strong></p>
<ol>
<li>我们可以先用借用 call 继承获取 A 类的私有属性</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">B</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    A.call(<span class="built_in">this</span>);</span><br><span class="line">    <span class="built_in">this</span>.b = <span class="string">&quot;b&quot;</span>;</span><br><span class="line">    <span class="built_in">this</span>.y = <span class="number">200</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>再用原型链继承获取 A 类公有属性（需要写在 <code>B.prototype.getB</code>）</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.可以考虑用普通对象做中间件</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;&#125;;</span><br><span class="line">obj.__proto__ = A.prototype;</span><br><span class="line">B.prototype = obj;</span><br><span class="line">B.prototype.constructor = B;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.可以考虑用函数做中间件</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">F</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">F.prototype = A.prototype;</span><br><span class="line">B.prototype = <span class="keyword">new</span> F();</span><br><span class="line">B.prototype.constructor = B;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.使用Object.create()方法</span></span><br><span class="line">B.prototype = <span class="built_in">Object</span>.create(A.prototype);</span><br><span class="line">B.prototype.constructor = B;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.借用实例</span></span><br><span class="line">B.prototype = <span class="keyword">new</span> A();</span><br><span class="line">B.prototype.constructor = B;</span><br></pre></td></tr></table></figure>

<ul>
<li>整理一下上述思路，合并一下代码</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.a = <span class="string">&quot;a&quot;</span>;</span><br><span class="line">    <span class="built_in">this</span>.x = <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line">A.prototype.getA = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">B</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 1.获取私有属性</span></span><br><span class="line">    A.call(<span class="built_in">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.b = <span class="string">&quot;b&quot;</span>;</span><br><span class="line">    <span class="built_in">this</span>.y = <span class="number">200</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2.B.prototype.__proto__ = A.prototype</span></span><br><span class="line">B.prototype = <span class="built_in">Object</span>.create(A.prototype);</span><br><span class="line">B.prototype.constructor = B;</span><br><span class="line"></span><br><span class="line">B.prototype.getB = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> b = <span class="keyword">new</span> B();</span><br></pre></td></tr></table></figure>

<p>组合继承融合了原型链和借用构造函数的优点，而且 instanceof 也能用于识别基于组合继承创建的对象，所以实践中最常用组合式继承</p>
<h3 id="类继承"><a href="#类继承" class="headerlink" title="类继承"></a>类继承</h3><p><strong>注意：</strong></p>
<ol>
<li><p>ES6 创造的就是类，不能当做普通函数执行，只能 new 执行</p>
</li>
<li><p>如果继承写 constructor 一定要写 super</p>
<p>其实静态属性不比写在 constructor 里面，使用 static 声明也可以</p>
</li>
<li><p>如果添加公有属性，只能通过 <code>prototype</code> 上添加，不能直接写在 class 里面</p>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.x = <span class="number">100</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// A.prototype.getX=function()&#123;&#125;</span></span><br><span class="line">  <span class="function"><span class="title">getX</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.x</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意：继承后一定要在constructor加上super</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>() <span class="comment">// 类似call继承</span></span><br><span class="line">    <span class="built_in">this</span>.y = <span class="number">200</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">getY</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.y</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> b = <span class="keyword">new</span> B()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>原型链继承</tag>
        <tag>call继承</tag>
        <tag>寄生组合式继承</tag>
        <tag>类继承</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 检测数据类型的四种方式</title>
    <url>/posts/5d2789f/</url>
    <content><![CDATA[<p>JavaScript 有八种数据类型：</p>
<p>基本数据类型：Boolean、Number、String、null、undefined、Symbol(ES6新增)、BigInt（ES2020引入）</p>
<p>引用数据类型：Object</p>
<blockquote>
<p>Symbol：表示独一无二的值</p>
<p>BigInt：用来解决 JavaScript 中数字只能到 53 个二进制位，大于这个范围的整数，无法精确表示</p>
</blockquote>
<a id="more"></a>

<h3 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a>typeof</h3><blockquote>
<p>底层原理：typeof 是按照”值”在计算机存储的”二进制”值来检测的，凡是以 000 开始的都认为是对象</p>
</blockquote>
<p>返回结果是一个字符串（全小写字母），可返回的类型有：</p>
<ul>
<li>“number”</li>
<li>“string”</li>
<li>“boolean”</li>
<li>“undefined”</li>
<li>“object”</li>
<li>“function”</li>
<li>“symbol”</li>
<li>“bigint”</li>
</ul>
<p><strong>注意：</strong> <code>typeof null</code> 返回的是 “object”，<code>typeof 变量（不存在）</code> 返回的是 “undefined”</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="literal">null</span>;  <span class="comment">// &quot;object&quot;</span></span><br><span class="line"><span class="keyword">typeof</span> say;   <span class="comment">// &quot;undefined&quot;（上下文没有定义）</span></span><br></pre></td></tr></table></figure>

<p>ECMAScript 提供的内置类型在计算机底层是按照二进制存储的</p>
<ul>
<li>1：数字 010：浮点数</li>
<li>100：字符串</li>
<li>-2^30：undefined</li>
<li>000000：null</li>
<li>000：对象</li>
</ul>
<p>JS 最初为了性能考虑使用低位存储变量信息，000 开头代表对象，然而 null 表示全 0，所以将它错误的判断为 object</p>
<h3 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h3><blockquote>
<p>底层原理：首先查找 <code>Symbol.hasInstance</code>，如果存在，基于这个检测。如果没有，则基于原型链<code>__proto__</code>查找，只要出现这个类的原型，结果就是 true</p>
</blockquote>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/js-img/dir(Function.prototype).jpg" alt="dir(Function.prototype)"></p>
<p>基于ES6 class 方式设置静态私有属性构建 <code>Symbol.hasInstance</code> 才会生效</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fn</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> [<span class="built_in">Symbol</span>.hasInstance]() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;OK&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> f = <span class="keyword">new</span> Fn()</span><br><span class="line"><span class="built_in">console</span>.log(f <span class="keyword">instanceof</span> Fn) <span class="comment">// OK false</span></span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong></p>
<ul>
<li>instanceof 不能正确判断基本数据类型</li>
<li>原型链可以重构，导致结果可能不准确</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[] <span class="keyword">instanceof</span> <span class="built_in">Array</span>      <span class="comment">// true</span></span><br><span class="line">[] <span class="keyword">instanceof</span> <span class="built_in">RegExp</span>     <span class="comment">// false</span></span><br><span class="line">[] <span class="keyword">instanceof</span> <span class="built_in">Object</span>     <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="literal">null</span> <span class="keyword">instanceof</span> <span class="built_in">Object</span>   <span class="comment">// false</span></span><br><span class="line"><span class="string">&quot;&quot;</span> <span class="keyword">instanceof</span> <span class="built_in">String</span>     <span class="comment">// false</span></span><br><span class="line"><span class="literal">true</span> <span class="keyword">instanceof</span> <span class="built_in">Boolean</span>  <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="number">123</span> <span class="keyword">instanceof</span> <span class="built_in">Number</span>;   <span class="comment">// false</span></span><br><span class="line">(<span class="number">1</span>).toFixed(<span class="number">2</span>)           <span class="comment">// &#x27;1.00&#x27; 浏览器有一个把1转换为对象格式1的操作 Object(1) 装箱</span></span><br></pre></td></tr></table></figure>

<h4 id="封装-instanceOf"><a href="#封装-instanceOf" class="headerlink" title="封装 instanceOf"></a>封装 instanceOf</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">instance_of</span>(<span class="params">obj, Ctor</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 数据格式准确性校验</span></span><br><span class="line">  <span class="keyword">if</span> (Ctor === <span class="literal">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">&quot;Right-hand side of &#x27;instanceof&#x27; is not callable&quot;</span>)</span><br><span class="line">  <span class="keyword">if</span> (!Ctor.prototype) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">&quot;Function has non-object prototype &#x27;undefined&#x27; in instanceof check&quot;</span>)</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> Ctor !== <span class="string">&#x27;function&#x27;</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">&quot;Right-hand side of &#x27;instanceof&#x27; is not callable&quot;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 原始值类型直接忽略</span></span><br><span class="line">  <span class="keyword">if</span> (obj === <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  <span class="keyword">if</span> (!<span class="regexp">/^(object|function)$/</span>.test(<span class="keyword">typeof</span> obj)) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 先检测是否有Symbol.hasInstance这个属性</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> Ctor[<span class="built_in">Symbol</span>.hasInstance] === <span class="string">&#x27;function&#x27;</span>) <span class="keyword">return</span> Ctor[<span class="built_in">Symbol</span>.hasInstance](obj)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 最后才会按照原型链进行处理</span></span><br><span class="line">  <span class="keyword">let</span> prototype = <span class="built_in">Object</span>.getPrototypeOf(obj)</span><br><span class="line">  <span class="keyword">while</span> (prototype) &#123;</span><br><span class="line">    <span class="keyword">if</span> (prototype === Ctor.prototype) <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    prototype = <span class="built_in">Object</span>.getPrototypeOf(prototype)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(instance_of([<span class="number">12</span>, <span class="number">23</span>], <span class="built_in">Array</span>)) <span class="comment">// true</span></span><br><span class="line"><span class="comment">// console.log(instance_of(null, null))</span></span><br><span class="line"><span class="comment">// console.log(instance_of(null, () =&gt; &#123;&#125;))</span></span><br><span class="line"><span class="comment">// console.log(instance_of(null, &#123;&#125;))</span></span><br></pre></td></tr></table></figure>



<h3 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor"></a>constructor</h3><p>constructor 可以得知某个实例对象，到底是哪一个构造函数产生的</p>
<p><strong>注意：</strong>constructor 可以手动更改（如果手动更改原型指向，检测就不准确了）；如果修改了原型对象，一般也会同时修改 constructor。null 和 undefined 是无效的对象，所以不存在 constructor </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="literal">true</span>.constructor === <span class="built_in">Boolean</span>; <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = &#123;&#125;;</span><br><span class="line">a.constructor; <span class="comment">// Object()</span></span><br><span class="line">a.constructor = <span class="number">3</span>;</span><br><span class="line">a.constructor; <span class="comment">// 3</span></span><br></pre></td></tr></table></figure>

<h3 id="Object-prototype-toString-call"><a href="#Object-prototype-toString-call" class="headerlink" title="Object.prototype.toString.call()"></a>Object.prototype.toString.call()</h3><blockquote>
<p>底层原理：除了 null/undefined，大部分数据类型所属类的原型上，都有toString方法；但是除了 <code>Object.prototype.toString</code> 用来检测数据类型，其余的都是转换为字符串的</p>
<ul>
<li>返回值：”[object ?]”<ul>
<li>先查找 [val] 的 <code>Symbol.toStringTag</code> （先找私有的，私有没有则向所属类原型上找），属性值就是”?”的值</li>
<li>没有，则内部是返回当前实例所属构造函数的名字 <code>“[object Number/String/Null/Undefined/Object/Array/Function/GeneratorFunction...]”</code></li>
</ul>
</li>
</ul>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> class2type = &#123;&#125;,</span><br><span class="line">  toString = class2type.toString</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.x = <span class="number">100</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Fn.prototype = &#123;</span><br><span class="line">  <span class="title">constructor</span>: <span class="title">Fn</span>,</span><br><span class="line">  <span class="title">getX</span>(<span class="params"></span>) &#123;&#125;,</span><br><span class="line">  [<span class="built_in">Symbol</span>.toStringTag]: <span class="string">&#x27;Fn&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> f = <span class="keyword">new</span> Fn()</span><br><span class="line"><span class="built_in">console</span>.log(toString.call(f)) <span class="comment">// &quot;[object Fn]&quot; 默认是&quot;[object Object]&quot;</span></span><br></pre></td></tr></table></figure>



<p>我们可以封装一个 isType 方法对类型进行判断</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> isType = <span class="function">(<span class="params">type, obj</span>) =&gt;</span></span><br><span class="line">    <span class="built_in">Object</span>.prototype.toString.call(obj) === <span class="string">`[object <span class="subst">$&#123;type&#125;</span>]`</span>;</span><br><span class="line"><span class="built_in">console</span>.log(isType(<span class="string">&quot;Number&quot;</span>, <span class="number">12</span>)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>



<p>思考：每次都写 <code>Object.prototype.toString</code> 是否可以简写？</p>
<ul>
<li>如果调用 toString 方法，obj 首先会在自己私有方法里找，如果没有则顺着原型链往上找，所以 prototype 可以省略</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line">obj.toString.call(<span class="literal">null</span>); <span class="comment">// &quot;[object Null]&quot;</span></span><br></pre></td></tr></table></figure>

<p>不过上面还是不够简洁，可否把 obj 直接省去？</p>
<ul>
<li>浏览器全局环境：window（是一个对象）</li>
<li>node全局环境：global（是一个对象）</li>
</ul>
<p>obj 省去的话，则默认是 window 调用 toString，我们来看一下 window 的原型链，最终指向 Object</p>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/js-img/window%E5%8E%9F%E5%9E%8B.jpg" alt="window原型"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">toString.call(<span class="literal">null</span>); <span class="comment">// 浏览器：&quot;[object Null]&quot;</span></span><br><span class="line">toString.call(<span class="literal">null</span>); <span class="comment">// node：[object Null]</span></span><br></pre></td></tr></table></figure>

<p>进一步验证一下，window 原型链上的 toString 是否和 Object.prototype 上的 toString 一致</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.toString === <span class="built_in">Object</span>.prototype.toString; <span class="comment">// 浏览器：true</span></span><br><span class="line"><span class="built_in">global</span>.toString === <span class="built_in">Object</span>.prototype.toString; <span class="comment">// node：true</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>typeof</tag>
        <tag>instanceof</tag>
        <tag>constructor</tag>
        <tag>toString.call</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 设计模式浅析</title>
    <url>/posts/f356c3f6/</url>
    <content><![CDATA[<blockquote>
<p>设计模式：在面向对象软件设计过程中针对特定问题的简洁而优雅的解决方案</p>
</blockquote>
<p>一般来说，设计模式（Pattern Design）就是<strong>创建不同类型的对象的套路</strong></p>
<a id="more"></a>

<p>常见设计模式：</p>
<ul>
<li>单例设计模式：一个类仅有一个一个实例</li>
<li>工厂模式：批量生产出具有相似属性和方法的对象</li>
<li>构造函数模式：可以理解为是工厂模式的另一种写法</li>
<li>发布订阅模式：定义对象间的一对多的关系</li>
</ul>
<h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><blockquote>
<p>单例模式：保证一个类仅有一个实例，并提供一个访问它的全局访问点</p>
</blockquote>
<p>简单来说：单例模式就是一个对象</p>
<h3 id="极简写法"><a href="#极简写法" class="headerlink" title="极简写法"></a>极简写法</h3><ul>
<li>成员暴露出来，初始化占用资源</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> utils = &#123;</span><br><span class="line">    num: <span class="number">6</span>,</span><br><span class="line">    method: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.num;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> obj = utils;</span><br><span class="line"><span class="built_in">console</span>.log(obj.method());</span><br></pre></td></tr></table></figure>

<h3 id="闭包方式"><a href="#闭包方式" class="headerlink" title="闭包方式"></a>闭包方式</h3><ul>
<li>解决成员暴露和初始化占用资源问题</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> utils = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">6</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.num;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        num: num,</span><br><span class="line">        method: fn,</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="keyword">var</span> obj = utils;</span><br><span class="line"><span class="built_in">console</span>.log(obj.method());</span><br></pre></td></tr></table></figure>

<p>应用：弹窗，无论点击多长次，弹窗只应该创建一次</p>
<h2 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h2><blockquote>
<p>工厂模式：像工厂一样批量生产相似属性和方法的对象。减少页面冗余代码，实现了“高耦合低内聚”</p>
</blockquote>
<p>简单来说，工厂模式就是函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        name: name,</span><br><span class="line">        age: age,</span><br><span class="line">        say: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p = Person(<span class="string">&quot;lion&quot;</span>, <span class="number">13</span>);</span><br><span class="line">p.say();</span><br></pre></td></tr></table></figure>

<h2 id="构造函数模式"><a href="#构造函数模式" class="headerlink" title="构造函数模式"></a>构造函数模式</h2><blockquote>
<p>构造函数模式：利用构造函数的方式创建对象。函数执行是，前面一旦加了 new，就变成构造函数</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> f = <span class="keyword">new</span> Person(<span class="string">&quot;cat&quot;</span>, <span class="number">17</span>);</span><br><span class="line">f.sayName();</span><br></pre></td></tr></table></figure>

<h2 id="发布订阅"><a href="#发布订阅" class="headerlink" title="发布订阅"></a>发布订阅</h2><p>DOM 0级事件和DOM 2级事件区别：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">box.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line">box.addEventListener(<span class="string">&quot;click&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li>DOM 0级就是给元素的某个属性绑定方法（有效绑定的方法只有一个）</li>
<li>DOM 2级是基于事件池机制完成，每增加一个绑定的方法，都会往事件池中存放一个…当事件池触发会依次执行事件池的事情（发布订阅其实就是模拟事件池机制）</li>
</ul>
<p>DOM 2级事件池机制：</p>
<ol>
<li>基于addEventListener/attachEvent（IE6<del>8）向事件池中追加方法 ：新版浏览器会根据元素和事件类型对新增的方法做重复校验，但是IE6</del>8不可以</li>
<li>当事件行为触发，会把事件池中的方法按照增加的顺序依次执行，但是IE6~8中执行的顺序是不固定的</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> _subscribe = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Sub：发布订阅类</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Sub</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="comment">// 创建一个事件池，用来存储后期需要的方法</span></span><br><span class="line">            <span class="built_in">this</span>.$pond = [];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 向事件池中追加方法（重复校验）</span></span><br><span class="line">        <span class="function"><span class="title">add</span>(<span class="params">func</span>)</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> flag = <span class="built_in">this</span>.$pond.some(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> item === func;</span><br><span class="line">            &#125;);</span><br><span class="line">            !flag ? <span class="built_in">this</span>.$pond.push(func) : <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 从事件池中移除方法</span></span><br><span class="line">        <span class="function"><span class="title">remove</span>(<span class="params">func</span>)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.$pond = <span class="built_in">this</span>.$pond.filter(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> item !== func;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 通知事件池中的方法，按照顺序依次执行</span></span><br><span class="line">        <span class="function"><span class="title">fire</span>(<span class="params">...args</span>)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.$pond.forEach(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="comment">// 在三个参数以上，call性能略优于apply</span></span><br><span class="line">                item.call(<span class="built_in">this</span>, ...args);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">subscribe</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Sub();</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>

<ul>
<li>如果要使用for循环，需要考虑数组塌陷问题</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 从事件池中移除方法</span></span><br><span class="line"><span class="function"><span class="title">remove</span>(<span class="params">func</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> $pond = <span class="built_in">this</span>.$pond;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; $pond.length; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> item = $pond[i];</span><br><span class="line">        <span class="keyword">if</span> (item === func) &#123;</span><br><span class="line">            $pond[i] = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 通知事件池中的方法，按照顺序依次执行</span></span><br><span class="line"><span class="function"><span class="title">fire</span>(<span class="params">...args</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> $pond = <span class="built_in">this</span>.$pond;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; $pond.length; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> item = $pond[i];</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> item !== <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">            $pond.splice(i, <span class="number">1</span>);</span><br><span class="line">            i--;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        item.call(<span class="built_in">this</span>, ...args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>JS this指向问题</title>
    <url>/posts/ea5004b1/</url>
    <content><![CDATA[<p>在绝大多数情况下，函数的调用方式决定了 <code>this</code> 的值。<code>this</code> 不能在执行期间被赋值，并且在每次函数被调用时 <code>this</code> 的值也可能会不同，所以总结 <code>this</code> 值的规律是有必要的</p>
<a id="more"></a>

<h2 id="全局作用域-this-指向"><a href="#全局作用域-this-指向" class="headerlink" title="全局作用域 this 指向"></a>全局作用域 this 指向</h2><p>无论是否在严格模式下，在<strong>全局作用域中 <code>this</code> 都指向全局对象</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">this</span>); <span class="comment">// Window </span></span><br><span class="line"></span><br><span class="line"><span class="meta">&quot;use strict&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">this</span>); <span class="comment">// Window </span></span><br></pre></td></tr></table></figure>

<h2 id="私有作用域-this-指向"><a href="#私有作用域-this-指向" class="headerlink" title="私有作用域 this 指向"></a>私有作用域 this 指向</h2><p>在函数内部，<code>this</code> 的值取决于函数调用的方式</p>
<p>通俗的来说，就是函数执行的时候，看函数名前面有没有 <code>.</code>：</p>
<ul>
<li>如果函数调用时在某个对象上触发的（典型：<code>xxx.fun()</code>），会触发<strong>隐式绑定</strong>，<strong>this 就是该对象</strong>，即 <code>xxx</code></li>
<li>如果函数调用时前面没有 <code>.</code> ，会触发<strong>默认绑定</strong><ul>
<li>浏览器环境：Window</li>
<li>严格模式：undefined</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    fn: fn,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj.fn(); <span class="comment">// obj</span></span><br><span class="line">fn(); <span class="comment">// Window</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&quot;use strict&quot;</span></span><br><span class="line">obj.fn(); <span class="comment">// obj</span></span><br><span class="line">fn(); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>

<h2 id="构造函数-this-指向（new绑定）"><a href="#构造函数-this-指向（new绑定）" class="headerlink" title="构造函数 this 指向（new绑定）"></a>构造函数 this 指向（new绑定）</h2><p>通过构造函数创建的实例，<strong>构造函数中的 this 指的就是当前类的实例</strong></p>
<ul>
<li>new 运算符做了这样一件事：将新对象和函数调用的 this 绑定起来</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = <span class="string">&quot;lion&quot;</span>;</span><br><span class="line">    <span class="built_in">this</span>.age = <span class="number">13</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>); <span class="comment">// fn</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> f = <span class="keyword">new</span> fn();</span><br><span class="line"></span><br><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = <span class="string">&quot;lion&quot;</span>;</span><br><span class="line">    <span class="built_in">this</span>.age = <span class="number">13</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>); <span class="comment">// fn</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> f = <span class="keyword">new</span> fn();</span><br></pre></td></tr></table></figure>

<h2 id="显示绑定-this-指向"><a href="#显示绑定-this-指向" class="headerlink" title="显示绑定 this 指向"></a>显示绑定 this 指向</h2><p><strong>通过 <code>call</code> 、 <code>apply</code> 、 <code>bind</code> 的方式，显示的指定 this 所指向的值</strong></p>
<p><code>call</code> 方法第一个参数是要绑定 this 的值，后面传入的是一个参数列表</p>
<ul>
<li>浏览器环境：不传参或传 null、undefined，this 都是 Window</li>
<li>严格模式：不传参或传 undefined，this 都是 undefined，传 null，this 是 null</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    name: <span class="string">&#x27;bird&#x27;</span>,</span><br><span class="line">    Fn: Fn</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;dog&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> Hi = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 触发默认绑定，this 为 winodw</span></span><br><span class="line">    fn(); <span class="comment">// dog</span></span><br><span class="line">    <span class="comment">// 如果不希望绑定丢失</span></span><br><span class="line">    fn.call(<span class="built_in">this</span>); <span class="comment">// bird</span></span><br><span class="line">&#125;</span><br><span class="line">Hi.call(person, person.Fn);</span><br></pre></td></tr></table></figure>

<p><strong>call 硬绑定情况</strong></p>
<p>强制把 foo 的 this 绑定到了 obj，无论之后如何调用 bar 之前的操作都不会被覆盖，它总会在 obj 上调用 foo</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    a: <span class="number">2</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> bar = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    foo.call(obj);</span><br><span class="line">&#125;;</span><br><span class="line">bar(); <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">setTimeout</span>(bar, <span class="number">100</span>); <span class="comment">// 2</span></span><br><span class="line">bar.call(<span class="built_in">window</span>); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>

<h2 id="自执行-回调函数-this-指向"><a href="#自执行-回调函数-this-指向" class="headerlink" title="自执行/回调函数 this 指向"></a>自执行/回调函数 this 指向</h2><p>其实和 私有作用域 this 指向 里的默认绑定是一个道理，<strong>与函数定义地方无关，取决于函数在哪调用</strong></p>
<ul>
<li>浏览器环境：Window</li>
<li>严格模式：undefined</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">~(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>);</span><br><span class="line">&#125;)(); <span class="comment">// Window</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line">~(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>);</span><br><span class="line">&#125;)(); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>

<p>回调函数：一个函数作为参数传递给另一函数</p>
<ul>
<li>浏览器环境：Window</li>
<li>严格模式：Window</li>
</ul>
<p>这里需要注意：<strong>如果是 JS 内置方法，如 <code>setTimeout</code> ，回调函数内部 this 都会指向 Window</strong>，非内置方法严格模式下为 undefined</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>);</span><br><span class="line">&#125;, <span class="number">100</span>); <span class="comment">// Window</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>);</span><br><span class="line">&#125;, <span class="number">100</span>); <span class="comment">// Window</span></span><br></pre></td></tr></table></figure>

<h2 id="元素绑定事件-this-指向"><a href="#元素绑定事件-this-指向" class="headerlink" title="元素绑定事件 this 指向"></a>元素绑定事件 this 指向</h2><p>给元素绑定事件，当事件触发，函数执行的时候，里面的 this 就是当前绑定的元素</p>
<ul>
<li>浏览器环境：当前绑定事件的元素</li>
<li>严格模式：当前绑定事件的元素</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">el.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>);</span><br><span class="line">&#125;; <span class="comment">// el</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line">el.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>);</span><br><span class="line">&#125;; <span class="comment">// el</span></span><br></pre></td></tr></table></figure>

<h2 id="箭头函数-this"><a href="#箭头函数-this" class="headerlink" title="箭头函数 this"></a>箭头函数 this</h2><p><strong>箭头函数中没有 this</strong>，也没有 this 绑定机制，还没有 arguments</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.a = <span class="number">55</span>;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        a: <span class="number">10</span>,</span><br><span class="line">        b: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> f1 = <span class="keyword">new</span> fn1();</span><br><span class="line"><span class="built_in">console</span>.log(f1.b()); <span class="comment">// &#123;a: 10, b: ƒ&#125;</span></span><br></pre></td></tr></table></figure>

<p><strong>如果在箭头函数中用 this，this 仅仅相当于一个变量，会向上级作用域去找</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.a = <span class="number">55</span>;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        a: <span class="number">10</span>,</span><br><span class="line">        b: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> f2 = <span class="keyword">new</span> fn2();</span><br><span class="line"><span class="built_in">console</span>.log(f2.b()); <span class="comment">// fn2 &#123; a: 55 &#125;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>默认绑定</tag>
        <tag>隐式绑定</tag>
        <tag>new绑定</tag>
        <tag>箭头函数</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 垃圾回收与性能优化</title>
    <url>/posts/3344fd09/</url>
    <content><![CDATA[<h2 id="JavaScript-内存管理"><a href="#JavaScript-内存管理" class="headerlink" title="JavaScript 内存管理"></a>JavaScript 内存管理</h2><p><img data-src="https://gitee.com/lilyn/pic/raw/master/lagoulearn-img/%E4%B8%80%E6%AE%B5%E4%BB%A3%E7%A0%81%E7%9A%84%E6%80%A7%E8%83%BD.png" alt="一段代码的性能"></p>
<p><strong>内存管理</strong></p>
<ul>
<li>内存：由可读写单元组成，表示一片可操作性空间</li>
<li>管理：人为的去操作一片空间的申请、使用和释放</li>
<li>内存管理：开发者主动申请空间、使用空间、释放空间</li>
<li>管理流程：申请-使用-释放</li>
</ul>
<p><strong>JS 内存管理</strong></p>
<ul>
<li>申请内存空间</li>
<li>使用内存空间</li>
<li>释放内存空间</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 申请空间</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;&#125;</span><br><span class="line"><span class="comment">// 使用空间</span></span><br><span class="line">obj.name = <span class="string">&#x27;jack&#x27;</span></span><br><span class="line"><span class="comment">// 释放空间</span></span><br><span class="line">obj = <span class="literal">null</span></span><br></pre></td></tr></table></figure>

<h2 id="垃圾回收与常见-GC-算法"><a href="#垃圾回收与常见-GC-算法" class="headerlink" title="垃圾回收与常见 GC 算法"></a>垃圾回收与常见 GC 算法</h2><h3 id="JavaScript-中的垃圾回收"><a href="#JavaScript-中的垃圾回收" class="headerlink" title="JavaScript 中的垃圾回收"></a>JavaScript 中的垃圾回收</h3><ul>
<li>JavaScript 中内存管理是自动的</li>
<li>对象不再被 <strong>引用</strong> 时是垃圾</li>
<li>对象不能 <strong>从根上访问到</strong> 时是垃圾</li>
</ul>
<p><strong>JavaScript 中的可达对象</strong></p>
<ul>
<li>可以访问到的对象就是可达对象（引用、作用域链）</li>
<li>可达的标准就是从根出发是否能够被找到</li>
<li>JavaScript 中的根可以理解为 <strong>全局变量</strong></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">name</span>: <span class="string">&#x27;bird&#x27;</span> &#125;</span><br><span class="line"><span class="keyword">let</span> dog = obj</span><br><span class="line"><span class="comment">// 虽然被清理了，但是dog还在引用着，还是可达的</span></span><br><span class="line">obj = <span class="literal">null</span></span><br></pre></td></tr></table></figure>

<p><img data-src="https://gitee.com/lilyn/pic/raw/master/lagoulearn-img/%E5%8F%AF%E8%BE%BE%E5%AF%B9%E8%B1%A1%E5%9B%BE%E7%A4%BA.png" alt="可达对象图示"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">objGroup</span>(<span class="params">obj1, obj2</span>) </span>&#123;</span><br><span class="line">  obj1.next = obj2</span><br><span class="line">  obj2.prev = obj1</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    o1: obj1,</span><br><span class="line">    o2: obj2,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj = objGroup(&#123; <span class="attr">name</span>: <span class="string">&#x27;obj1&#x27;</span> &#125;, &#123; <span class="attr">name</span>: <span class="string">&#x27;obj2&#x27;</span> &#125;)</span><br></pre></td></tr></table></figure>

<p>现在通过 delete 语句，把 obj 中对 o1 的引用（<code>delete obj.o1</code>）以及 obj2 对 obj1 的引用（<code>delete obj2.prev</code>）都 delete 掉，因为没有办法通过某些方式找到 o1，所以 o1 会被垃圾回收</p>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/lagoulearn-img/%E5%8F%AF%E8%BE%BE%E5%AF%B9%E8%B1%A1%E8%BF%9B%E8%A1%8Cdelete.png" alt="可达对象进行delete"></p>
<h3 id="GC-算法"><a href="#GC-算法" class="headerlink" title="GC 算法"></a>GC 算法</h3><p><strong>GC 定义与作用</strong></p>
<ul>
<li>GC 就是垃圾回收机制的简写（Garbage Collection）</li>
<li>GC 可以找到内存中的垃圾、并释放和回收空间</li>
</ul>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/lagoulearn-img/GC%E9%87%8C%E7%9A%84%E5%9E%83%E5%9C%BE%E6%98%AF%E4%BB%80%E4%B9%88.png" alt="GC里的垃圾是什么"></p>
<p><strong>GC 算法是什么</strong></p>
<ul>
<li>GC 是一种机制，垃圾回收器完成具体的工作</li>
<li>工作的内容就是查找垃圾释放空间、回收空间</li>
<li>算法就是工作时查找和回收所遵循的规则</li>
</ul>
<p><strong>常见 GC 算法</strong></p>
<ul>
<li>引用计数</li>
<li>标记清除</li>
<li>标记整理</li>
<li>分代回收</li>
</ul>
<h4 id="引用计数"><a href="#引用计数" class="headerlink" title="引用计数"></a>引用计数</h4><ul>
<li>核心思想：设置引用数，判断当前引用数是否为 0</li>
<li>引用计数器，引用关系改变时修改引用数字</li>
<li>引用数字为 0 时立即回收</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> user1 = &#123; <span class="attr">age</span>: <span class="number">11</span> &#125;</span><br><span class="line"><span class="keyword">const</span> user2 = &#123; <span class="attr">age</span>: <span class="number">22</span> &#125;</span><br><span class="line"><span class="comment">// 即使脚本执行完，因为在全局还是找到到，所以不会被回收</span></span><br><span class="line"><span class="keyword">const</span> nameList = [user1.age, user2.age]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 因为挂载在window上，即使fn执行完毕，计数也不是0</span></span><br><span class="line">  num1 = <span class="number">1</span></span><br><span class="line">  <span class="comment">// 加上const后只在作用域内起作用，从全局是找不到的，计数为0</span></span><br><span class="line">  <span class="keyword">const</span> num2 = <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line">fn()</span><br></pre></td></tr></table></figure>

<p><strong>引用计数算法优缺点</strong></p>
<ul>
<li><p>优点：发现垃圾时立即回收；最大限度减少程序卡顿时间</p>
</li>
<li><p>缺点：无法回收循环引用的对象；资源消耗较大、时间开销较大（需要监控对象数值变化）</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> obj1 = &#123;&#125;</span><br><span class="line">  <span class="keyword">const</span> obj2 = &#123;&#125;</span><br><span class="line">	<span class="comment">// obj1引用obj2，obj2引用obj1</span></span><br><span class="line">  obj1.name = obj2</span><br><span class="line">  obj2.name = obj1</span><br><span class="line">&#125;</span><br><span class="line">fn()</span><br></pre></td></tr></table></figure>

<h4 id="标记清除"><a href="#标记清除" class="headerlink" title="标记清除"></a>标记清除</h4><ul>
<li>核心思想：分标记和清除两个阶段完成</li>
<li>遍历所有对象找到标记活动对象</li>
<li>遍历所有对象清除没有标记对象</li>
<li>回收相应的空间</li>
</ul>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/lagoulearn-img/%E6%A0%87%E8%AE%B0%E6%B8%85%E9%99%A4.png" alt="标记清除"></p>
<p><strong>标记清除算法优缺点</strong></p>
<ul>
<li><p>优点：相对引用计数来说，解决了对象循环引用无法回收问题</p>
</li>
<li><p>缺点：容易产生空间碎片化、浪费空间（当前回收的对象在地址上是不连续的）；不会立即回收垃圾对象</p>
<p>任何空间都会有两部分组成，一个是存储空间的头元信息（大小、地址），另一个是存放数据的域</p>
</li>
</ul>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/lagoulearn-img/%E6%A0%87%E8%AE%B0%E6%B8%85%E9%99%A4%E7%AE%97%E6%B3%95%E7%BC%BA%E7%82%B9%E5%9B%BE%E8%A7%A3.png" alt="标记清除算法缺点图解"></p>
<h4 id="标记整理"><a href="#标记整理" class="headerlink" title="标记整理"></a>标记整理</h4><ul>
<li>标记整理可以看做是标记清除的增强</li>
<li>标记阶段的操作和标记清除一致</li>
<li>清除阶段会先执行整理，移动对象位置</li>
</ul>
<p>有很多活动对象、非活动对象、空闲空间</p>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/lagoulearn-img/%E6%95%B4%E7%90%86%E6%B8%85%E9%99%A4%E5%9B%9E%E6%94%B6%E5%89%8D.png" alt="整理清除回收前"></p>
<p>执行标记整理，会将活动对象进行整理，地址变为连续</p>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/lagoulearn-img/%E6%95%B4%E7%90%86%E6%B8%85%E9%99%A4%E6%95%B4%E7%90%86%E5%90%8E.png" alt="整理清除整理后"></p>
<p>这样回收后就可以最大化利用空间</p>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/lagoulearn-img/%E6%95%B4%E7%90%86%E6%B8%85%E9%99%A4%E5%9B%9E%E6%94%B6%E5%90%8E.png" alt="整理清除回收后"></p>
<p><strong>标记清除算法优缺点</strong></p>
<ul>
<li>优点：减少碎片化空间</li>
<li>缺点：不会立即回收垃圾对象</li>
</ul>
<h2 id="V8-引擎的垃圾回收"><a href="#V8-引擎的垃圾回收" class="headerlink" title="V8 引擎的垃圾回收"></a>V8 引擎的垃圾回收</h2><ul>
<li><p>V8 是一款主流 JavaScript 执行引擎</p>
</li>
<li><p>V8 采用即时编译</p>
<p>之前很多 JavaScript 引擎都需要将代码先转换成字节码，然后去执行。V8 可以直接将源码翻译成可执行的机器码，所以速度非常快</p>
</li>
<li><p>V8 内存设限</p>
<p>64位不超过 1.5G，32位不超过 800M</p>
<p>当垃圾回收达到 1.5G 时，采用增量标记进行垃圾回收，只需消耗 50ms，如果采用非增量标记去进行垃圾回收，需要 1s</p>
</li>
<li><p>V8 采用基于分代回收思想实现垃圾回收</p>
<p>V8 内存分为新生代（复制 + 标记整理）和老生代（标记清除 + 标记整理 + 增量标记）</p>
</li>
</ul>
<h3 id="V8-垃圾回收策略"><a href="#V8-垃圾回收策略" class="headerlink" title="V8 垃圾回收策略"></a>V8 垃圾回收策略</h3><ul>
<li>采用分代回收的思想</li>
<li>内存分为新生代、老生代</li>
<li>针对不同对象采用不同算法</li>
</ul>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/lagoulearn-img/V8%E5%86%85%E5%AD%98%E7%AD%96%E7%95%A5.png" alt="V8内存策略"></p>
<p><strong>V8 中常用 GC 算法</strong></p>
<ul>
<li>分代回收</li>
<li>空间复制</li>
<li>标记清除</li>
<li>标记整理</li>
<li>增量标记</li>
</ul>
<h3 id="V8-回收新老生代对象"><a href="#V8-回收新老生代对象" class="headerlink" title="V8 回收新老生代对象"></a>V8 回收新老生代对象</h3><p><img data-src="https://gitee.com/lilyn/pic/raw/master/lagoulearn-img/V8%E6%96%B0%E8%80%81%E7%94%9F%E4%BB%A3%E5%AD%98%E5%82%A8.png" alt="V8新老生代存储"></p>
<ul>
<li><p><strong>V8 内存空间一分为二</strong>（左侧-&gt;新生代；右侧-&gt;老生代）</p>
</li>
<li><p>左侧小空间用于存储新生代对象（64位32M | 32位16M）</p>
<p>新生代指的是存活时间较短的对象</p>
</li>
<li><p>右侧大空间用于存储老生代对象（64位1.4G | 32位700M）</p>
<p>老生代对象就是指存活时间较长的对象（Global、Closure）</p>
</li>
</ul>
<p><strong>新生代回收实现</strong></p>
<ul>
<li><p>回收过程采用复制算法 + 标记整理</p>
</li>
<li><p><strong>新生代内存区分为两个等大小空间</strong></p>
</li>
<li><p>使用空间为 From，空闲空间为 To</p>
</li>
<li><p>活动对象存储于 From 空间</p>
<p>如果要申请空间来会用，首先会所有变量对象都分配到 From 空间</p>
<p>一旦 From 空间达到一定存储量后，就会触发 GC 操作</p>
</li>
<li><p>标记整理后将活动对象拷贝至 To</p>
<p>这时候位置连续，没有碎片化空间</p>
</li>
<li><p>From 与 To 交换空间完成释放</p>
</li>
</ul>
<p><strong>新生代回收细节说明</strong></p>
<ul>
<li><p>拷贝过程中可能出现晋升（晋升就是将新生代对象移动至老生代）</p>
<p>一轮 GC 还活的新生代需要晋升</p>
<p>To 空间的使用率超过 25%</p>
</li>
</ul>
<p><strong>老生代回收实现</strong></p>
<ul>
<li>主要采用标记清除、标记整理、增量标记算法</li>
<li>首先使用标记清除完成垃圾空间的回收</li>
<li>采用标记整理进行空间优化</li>
<li>采用增量标记进行效率优化</li>
</ul>
<p><strong>细节对比</strong></p>
<ul>
<li>新生代区域垃圾回收使用空间换时间</li>
<li>老生代区域垃圾回收不适合复制算法</li>
</ul>
<p><strong>标记增量如何优化垃圾回收</strong></p>
<ul>
<li>当进行垃圾回收时会阻塞 JavaScript 执行</li>
<li>标记增量就是将一整段垃圾回收操作拆分成多个小步组合完成回收，这样执行程序和垃圾回收交替进行</li>
</ul>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/lagoulearn-img/%E6%A0%87%E8%AE%B0%E5%A2%9E%E9%87%8F.png" alt="标记增量"></p>
<h2 id="Performance-工具"><a href="#Performance-工具" class="headerlink" title="Performance 工具"></a>Performance 工具</h2><p>GC 的目的是为了实现内存空间的良性循环</p>
<ul>
<li>良性循环的基石是合理使用，时刻关注才能确定是否合理</li>
<li>通过 Performance 时刻监控内存</li>
</ul>
<p><strong>内存问题的外在表现</strong></p>
<ul>
<li><p>页面出现延迟加载或经常性暂停</p>
<p>频繁垃圾回收，某一块代码瞬间让内存爆掉（通过内存变化图进行分析）</p>
</li>
<li><p>页面持续性出现糟糕的性能</p>
<p>内存膨胀，当前界面为了达到最佳使用速度会申请内存空间，但这个内存空间远超当前设备所能提供的大小</p>
</li>
<li><p>页面的性能随时间越长越来越差</p>
<p>出现内存泄露，内存使用持续升高</p>
</li>
</ul>
<p><strong>监控内存的几种方式</strong></p>
<ul>
<li>浏览器任务管理器</li>
<li>TimeLine 时序图记录</li>
<li>堆快照查找分离 DOM</li>
<li>判断是否存在频繁的垃圾回收</li>
</ul>
<p><strong>为什么要确定频繁垃圾回收</strong></p>
<ul>
<li>GC 工作时应用程序是停止的</li>
<li>频繁且过长的 GC 会导致应用假死</li>
<li>用户使用中感知应用卡顿</li>
</ul>
<p><strong>确定频繁的垃圾回收</strong></p>
<ul>
<li>Timeline 中频繁的上升下降</li>
<li>任务管理器中数据频繁的增加减少</li>
</ul>
<h3 id="任务管理器监控内存"><a href="#任务管理器监控内存" class="headerlink" title="任务管理器监控内存"></a>任务管理器监控内存</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>任务管理器监控内存变化<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>Add<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;btn&#x27;</span>)</span></span><br><span class="line"><span class="javascript">      btn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> arrList = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1000000</span>)</span></span><br><span class="line">      &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>Shift + Esc</code> 打开浏览器的任务管理器（右键把 JavaScript 内存勾上）</li>
<li>主要看当前 DOM 所占用的内存变化、JavaScript 堆所占内存变化</li>
</ul>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/lagoulearn-img/%E6%B5%8F%E8%A7%88%E5%99%A8%E4%BB%BB%E5%8A%A1%E7%AE%A1%E7%90%86%E5%99%A8.png" alt="浏览器任务管理器"></p>
<h3 id="Timeline-记录内存"><a href="#Timeline-记录内存" class="headerlink" title="Timeline 记录内存"></a>Timeline 记录内存</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>时间线记录内存变化<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>Add<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> arr = []</span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">document</span>.body.appendChild(<span class="built_in">document</span>.createElement(<span class="string">&#x27;p&#x27;</span>))</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">        arr.push(<span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1000000</span>).join(<span class="string">&#x27;x&#x27;</span>))</span></span><br><span class="line">      &#125;</span><br><span class="line"><span class="javascript">      <span class="built_in">document</span>.getElementById(<span class="string">&#x27;btn&#x27;</span>).addEventListener(<span class="string">&#x27;click&#x27;</span>, test)</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img data-src="https://gitee.com/lilyn/pic/raw/master/lagoulearn-img/Timeline%E8%AE%B0%E5%BD%95%E5%86%85%E5%AD%98.png" alt="Timeline记录内存"></p>
<h3 id="堆快照查询分离-DOM"><a href="#堆快照查询分离-DOM" class="headerlink" title="堆快照查询分离 DOM"></a>堆快照查询分离 DOM</h3><ul>
<li><p>页面元素存活在 DOM 树上</p>
</li>
<li><p>垃圾对象时的 DOM 节点</p>
<p>脱离 DOM 树就是垃圾，而且 JS 没有引用这个 DOM </p>
</li>
<li><p>分离状态的 DOM 节点</p>
<p>当前 DOM 节点只是从 DOM 树上脱离了，但是在 JS 代码中还在引用着，这种 DOM 称为分离 DOM</p>
<p>分离 DOM 是看不见的，但是在内存中却占据空间（内存泄露），可以通过堆快照功能把它从这里都找出来</p>
</li>
</ul>
<p><strong>注意：</strong> 如果 <code>console.log</code> 也打印了 ul，那么 ul 也是被引用的，搜索 <code>Detached</code> 也会有分离 DOM</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>堆快照监控内存<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;id&quot;</span>&gt;</span>Add<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> temEle</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;id&#x27;</span>)</span></span><br><span class="line"><span class="javascript">      btn.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> ul = <span class="built_in">document</span>.createElement(<span class="string">&#x27;ul&#x27;</span>)</span></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">var</span> li = <span class="built_in">document</span>.createElement(<span class="string">&#x27;li&#x27;</span>)</span></span><br><span class="line">          ul.appendChild(li)</span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(ul) <span class="comment">// console.log也被引用记得注释</span></span></span><br><span class="line">        temEle = ul</span><br><span class="line"><span class="javascript">  			temEle = <span class="literal">null</span></span></span><br><span class="line">      &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="V8-引擎工作流程"><a href="#V8-引擎工作流程" class="headerlink" title="V8 引擎工作流程"></a>V8 引擎工作流程</h2><ul>
<li><p>V8 引擎只是浏览器渲染引擎的 JS 执行代码的组成部分</p>
</li>
<li><p><code>Scanner</code> 是一个扫描器，对于纯文本 JS 代码进行词法分析，把代码分析成不同 tokens</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> username = <span class="string">&#x27;alishi&#x27;</span></span><br><span class="line"></span><br><span class="line">[</span><br><span class="line">  &#123; <span class="attr">type</span>: <span class="string">&#x27;Keyword&#x27;</span>, <span class="attr">value</span>: <span class="string">&#x27;const&#x27;</span> &#125;, <span class="comment">// 关键词</span></span><br><span class="line">  &#123; <span class="attr">type</span>: <span class="string">&#x27;Identifier&#x27;</span>, <span class="attr">value</span>: <span class="string">&#x27;username&#x27;</span> &#125;, <span class="comment">// 标识符</span></span><br><span class="line">  &#123; <span class="attr">type</span>: <span class="string">&#x27;Punctuator&#x27;</span>, <span class="attr">value</span>: <span class="string">&#x27;=&#x27;</span> &#125;, <span class="comment">// 标点符号</span></span><br><span class="line">  &#123; <span class="attr">type</span>: <span class="string">&#x27;String&#x27;</span>, <span class="attr">value</span>: <span class="string">&#x27;alishi&#x27;</span> &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>Parser</code> 是一个解析器（全量解析），解析的过程就是语法分析过程，把词法分析 tokens 转换成抽象语法树（AST）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  type: <span class="string">&#x27;Program&#x27;</span>,</span><br><span class="line">  body: [</span><br><span class="line">    &#123;</span><br><span class="line">      type: <span class="string">&#x27;VariableDeclaration&#x27;</span>,</span><br><span class="line">      declaration: [</span><br><span class="line">        &#123;</span><br><span class="line">          type: <span class="string">&#x27;VariableDeclarator&#x27;</span>,</span><br><span class="line">          id: &#123;</span><br><span class="line">            type: <span class="string">&#x27;Identifier&#x27;</span>,</span><br><span class="line">            name: <span class="string">&#x27;username&#x27;</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">          init: &#123;</span><br><span class="line">            type: <span class="string">&#x27;Literal&#x27;</span>,</span><br><span class="line">            value: <span class="string">&#x27;alishi&#x27;</span>,</span><br><span class="line">            raw: <span class="string">&#x27;alishi&#x27;</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">      kind: <span class="string">&#x27;const&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">  sourceType: <span class="string">&#x27;script&#x27;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>PreParser</code> 是预解析，比如：定义一个函数但没有立即对它进行调用，使用全量解析就有很多无用功</p>
</li>
<li><p><code>Ignition</code> 是解释器，把抽象语法树（AST）转换成字节码（bytecode），并收集下一个编译阶段的信息</p>
</li>
<li><p><code>TurboFan</code> 是编译器模块，把字节码转换成汇编代码</p>
</li>
</ul>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/lagoulearn-img/V8%E5%BC%95%E6%93%8E.png" alt="V8引擎"></p>
<p><strong>预解析</strong></p>
<ul>
<li>跳过未被使用的代码</li>
<li>不生成 AST，创建无变量引用和声明的 scopes</li>
<li>依据规范抛出特定错误</li>
<li>解析速度更快</li>
</ul>
<p><strong>全量解析</strong></p>
<ul>
<li>解析被使用的代码</li>
<li>生成 AST</li>
<li>构建具体 scopes 信息，变量引用、声明等</li>
<li>抛出所有语法错误</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 声明时未调用，因此会被认为是不被执行的代码，进行预解析</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;foo&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 声明时未调用，因此会被认为是不被执行的代码，进行预解析</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="comment">// 函数立即执行，只进行一次全量解析</span></span><br><span class="line">;(<span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;&#125;)()</span><br><span class="line"><span class="comment">// 执行 foo，那么需要重新对 foo 函数进行全量解析，此时 foo 函数被解析了两次</span></span><br></pre></td></tr></table></figure>

<h2 id="堆栈内存处理"><a href="#堆栈内存处理" class="headerlink" title="堆栈内存处理"></a>堆栈内存处理</h2><ul>
<li><p><strong>执行环境栈（ECStack，Execution Context Stack）</strong></p>
<p>浏览器想要执行代码，首先需要从内存中分配出一块内存，用来执行代码（栈内存）</p>
</li>
<li><p>执行上下文</p>
<p>不能将所有代码都放在执行环境栈，需要执行上下文管理在不同区域</p>
<p>包括：<strong>全局执行上下文（EC(G)，Execution Context Global）</strong>、函数上下文、块级上下文</p>
</li>
<li><p><strong>全局对象（GO，Global Object）</strong> 堆</p>
<p>存储浏览器内部的 API（<code>window.setTimeout...</code>），也是一个对象，它会有一个内存地址，有地址就可以对其进行访问</p>
</li>
<li><p><strong>全局变量对象（VO(G)，Variable Object Global）</strong> 栈</p>
<p>存储当前上下文中生成的变量（块级上下文也是 VO）</p>
<p>为了方便我们使用 GO 对象里面的属性（<code>setTimeout</code>），所以 VO(G) 里有 window 变量</p>
</li>
<li><p>活动对象（AO，Active Object）</p>
<p>存储函数中的变量对象（私有），可以理解为是 VO 的分支</p>
</li>
</ul>
<h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><p><img data-src="https://gitee.com/lilyn/pic/raw/master/lagoulearn-img/%E5%A0%86%E6%A0%88%E6%9C%BA%E5%88%B6.png" alt="堆栈机制"></p>
<ol>
<li>基本数据类型是按值进行操作</li>
<li>基本数据类型是存放在栈区的</li>
<li>无论我们当前看到的栈内存，还是后续引用数据类型会使用的堆内存都属于计算机内存</li>
<li>GO 它不是 VO(G)，但是它也是一个对象，因此它会有一个内存的空间地址</li>
</ol>
<h3 id="引用数据类型"><a href="#引用数据类型" class="headerlink" title="引用数据类型"></a>引用数据类型</h3><p><img data-src="https://gitee.com/lilyn/pic/raw/master/lagoulearn-img/%E5%AF%B9%E8%B1%A1%E5%A0%86%E6%A0%88%E6%89%A7%E8%A1%8C%E6%9C%BA%E5%88%B6.png" alt="对象堆栈执行机制"></p>
<h3 id="函数堆栈处理"><a href="#函数堆栈处理" class="headerlink" title="函数堆栈处理"></a>函数堆栈处理</h3><ol>
<li><p>创建函数和创建变量类似，函数名此时就可以看做是一个变量名</p>
</li>
<li><p>单独开辟一个堆内存用于存放函数的体（字符串形式代码）</p>
<p>当前内存地址也会有一个 16 进制数值地址</p>
</li>
<li><p>创建函数的时候，它的作用域 <code>[[scope]]</code> 就已经确定了（创建函数时所在的执行上下文）</p>
</li>
<li><p>创建函数之后会将它的内存地址存放在栈区与对应的函数名进行关联</p>
</li>
</ol>
<p>函数执行，目的就是为了将函数数据对应的堆内存里的字符串形式代码进行执行，代码在执行时肯定需要有一个环境，此时就意味着函数在执行的时候会生成一个新的执行上下文来管理函数体中的代码</p>
<p><strong>函数执行时做的事情</strong></p>
<ol>
<li>确定作用域链 <code>&lt;当前执行上下文, 上级执行上下文&gt;</code></li>
<li>确定 this</li>
<li>初始化 arguments 对象</li>
<li>形参赋值：相当于变量声明，然后将声明变化放置于 AO</li>
<li>变量提升</li>
<li>执行代码</li>
</ol>
<h3 id="闭包堆栈处理"><a href="#闭包堆栈处理" class="headerlink" title="闭包堆栈处理"></a>闭包堆栈处理</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> b = <span class="number">2</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">c</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(c + b++)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> f = foo()</span><br><span class="line">f(<span class="number">5</span>) <span class="comment">// 7 b-&gt;3</span></span><br><span class="line">f(<span class="number">10</span>) <span class="comment">// 13 b-&gt;4</span></span><br></pre></td></tr></table></figure>

<ol>
<li><p>闭包是一种机制，通过私有上下文来保护当中变量的机制</p>
</li>
<li><p>我们也可以认为当我们创建的某一个执行上下文不被释放的时候就形成了闭包（临时不被释放）</p>
<p>保护：当前上下文中的变量与其它上下文中的变量互不干扰</p>
<p>保存：当前上下文的数据（堆内存）被当前上下文以外的上下文中的变量所引用，这个数据就保存下来了</p>
</li>
</ol>
<h2 id="代码优化"><a href="#代码优化" class="headerlink" title="代码优化"></a>代码优化</h2><h3 id="闭包与垃圾回收"><a href="#闭包与垃圾回收" class="headerlink" title="闭包与垃圾回收"></a>闭包与垃圾回收</h3><ol>
<li>浏览器都自有垃圾回收（内存管理，V8 为例）</li>
<li>栈空间、堆空间</li>
<li>堆：当前堆内存如果被占用，就不能被释放掉，但是我们如果确认后续不再使用这个内存的数据，也可以自己主动置空，然后浏览器会对其进行回收</li>
<li>栈：当前上下文中是否有内容，被其上下文的变量所占用，如果有则无法释放（闭包）</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">10</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">b</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(b + ++a)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> fn = foo(<span class="number">10</span>)</span><br><span class="line">fn(<span class="number">5</span>) <span class="comment">// 16 私有a-&gt;11</span></span><br><span class="line">foo(<span class="number">6</span>)(<span class="number">7</span>) <span class="comment">// 14</span></span><br><span class="line">fn(<span class="number">20</span>) <span class="comment">// 32 私有a-&gt;12</span></span><br><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">// 10</span></span><br><span class="line"></span><br><span class="line">fn = <span class="literal">null</span></span><br><span class="line">foo = <span class="literal">null</span></span><br></pre></td></tr></table></figure>

<h3 id="循环添加事件"><a href="#循环添加事件" class="headerlink" title="循环添加事件"></a>循环添加事件</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮3<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> aButtons = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;button&#x27;</span>)</span></span><br><span class="line"><span class="javascript">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; aButtons.length; i++) &#123;</span></span><br><span class="line"><span class="javascript">    aButtons[i].onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">`当前索引值为<span class="subst">$&#123;i&#125;</span>`</span>)</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="comment">// 闭包</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; aButtons.length; i++) &#123;</span></span><br><span class="line"><span class="javascript">    aButtons[i].onclick = (<span class="function"><span class="keyword">function</span> (<span class="params">i</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">`当前索引值为<span class="subst">$&#123;i&#125;</span>`</span>)</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)(i)</span><br><span class="line">  &#125;</span><br><span class="line"><span class="javascript">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; aButtons.length; i++) &#123;</span></span><br><span class="line"><span class="javascript">    aButtons[i].onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">`当前索引值为<span class="subst">$&#123;i&#125;</span>`</span>)</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="javascript">  <span class="comment">// 添加自定义属性</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; aButtons.length; i++) &#123;</span></span><br><span class="line">    aButtons[i].myIndex = i</span><br><span class="line"><span class="javascript">    aButtons[i].onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">`当前索引值为<span class="subst">$&#123;<span class="built_in">this</span>.myIndex&#125;</span>`</span>)</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="事件委托"><a href="#事件委托" class="headerlink" title="事件委托"></a>事件委托</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">index</span>=<span class="string">&quot;1&quot;</span>&gt;</span>按钮1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">index</span>=<span class="string">&quot;2&quot;</span>&gt;</span>按钮2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">index</span>=<span class="string">&quot;3&quot;</span>&gt;</span>按钮3<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="built_in">document</span>.body.onclick = <span class="function"><span class="keyword">function</span> (<span class="params">ev</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> target = ev.target,</span></span><br><span class="line">      targetDom = target.tagName</span><br><span class="line"><span class="javascript">    <span class="keyword">if</span> (targetDom === <span class="string">&#x27;BUTTON&#x27;</span>) &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> index = target.getAttribute(<span class="string">&#x27;index&#x27;</span>)</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">`当前点击的是第 <span class="subst">$&#123;index&#125;</span> 个`</span>)</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="JSBench"><a href="#JSBench" class="headerlink" title="JSBench"></a>JSBench</h2><blockquote>
<p><a href="https://jsbench.me/">https://jsbench.me/</a></p>
<p><a href="https://jsperf.com/">https://jsperf.com/</a></p>
</blockquote>
<p>高性能的背后是数据快速存取，也是优秀内存管理的体现</p>
<ul>
<li><code>Setup HTML</code>：初始化 HTML 元素</li>
<li><code>Setup JS</code>：初始化 JS 代码</li>
<li><code>Teardown JS</code>：一些收尾的统一操作</li>
</ul>
<h3 id="减少判断层级"><a href="#减少判断层级" class="headerlink" title="减少判断层级"></a>减少判断层级</h3><ul>
<li><p>对于判断条件嵌套的场景，可以提前 return 那些无效条件</p>
</li>
<li><p>如果条件判断是明确条件的枚举值，一般使用 <code>switch...case</code> 来做，代码更加清晰、易于维护</p>
<p><code>if...else</code> 主要是区间判断</p>
</li>
</ul>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/lagoulearn-img/%E4%BC%98%E5%8C%96%E5%87%8F%E5%B0%91%E5%88%A4%E6%96%AD%E5%B1%82%E7%BA%A7.png" alt="优化减少判断层级"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params">part, chapter</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> parts = [<span class="string">&#x27;ES2015&#x27;</span>, <span class="string">&#x27;ES2016&#x27;</span>, <span class="string">&#x27;工程化&#x27;</span>, <span class="string">&#x27;Vue&#x27;</span>, <span class="string">&#x27;React&#x27;</span>, <span class="string">&#x27;Node&#x27;</span>]</span><br><span class="line">  <span class="keyword">if</span> (part) &#123;</span><br><span class="line">    <span class="keyword">if</span> (parts.includes(part)) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;属于当前的前端课程&#x27;</span>)</span><br><span class="line">      <span class="keyword">if</span> (chapter &gt; <span class="number">5</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;您需要提供 VIP 身份&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;请确认模块信息&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 提前 return</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params">part, chapter</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> parts = [<span class="string">&#x27;ES2015&#x27;</span>, <span class="string">&#x27;ES2016&#x27;</span>, <span class="string">&#x27;工程化&#x27;</span>, <span class="string">&#x27;Vue&#x27;</span>, <span class="string">&#x27;React&#x27;</span>, <span class="string">&#x27;Node&#x27;</span>]</span><br><span class="line">  <span class="keyword">if</span> (!part) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;请确认模块信息&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (!parts.includes(part)) <span class="keyword">return</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;属于当前的前端课程&#x27;</span>)</span><br><span class="line">  <span class="keyword">if</span> (chapter &gt; <span class="number">5</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;您需要提供 VIP 身份&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">doSomething2(<span class="string">&#x27;ES2016&#x27;</span>, <span class="number">6</span>)</span><br></pre></td></tr></table></figure>

<h3 id="慎用全局变量"><a href="#慎用全局变量" class="headerlink" title="慎用全局变量"></a>慎用全局变量</h3><ul>
<li>全局变量定义在全局执行上下文，是所有作用域链的顶端</li>
<li>全局执行上下文一直存在于上下文执行栈，直到程序退出</li>
<li>如果某个局部作用域出现了同名变量则会遮蔽或污染全局</li>
</ul>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/lagoulearn-img/%E4%BC%98%E5%8C%96%E6%85%8E%E7%94%A8%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F.png" alt="优化慎用全局变量"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 全局变量</span></span><br><span class="line"><span class="keyword">var</span> i,</span><br><span class="line">  str = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">packageDom1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">    str += i</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">packageDom1()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 局部变量</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">packageDom2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> str = <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">    str += i</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">packageDom2()</span><br></pre></td></tr></table></figure>

<h3 id="缓存数据"><a href="#缓存数据" class="headerlink" title="缓存数据"></a>缓存数据</h3><ul>
<li>减少声明和语句数（词法、语法）</li>
<li>缓存数据（作用域链查找变快）</li>
</ul>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/lagoulearn-img/%E4%BC%98%E5%8C%96%E7%BC%93%E5%AD%98%E6%95%B0%E6%8D%AE.png" alt="优化缓存数据"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;skip&quot;</span> <span class="attr">class</span>=<span class="string">&quot;skip&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="comment">// 缓存数据：对于需要多次使用的数据进行提前保存，后续进行使用</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> oBox = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;skip&#x27;</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">hasClassName1</span>(<span class="params">ele, cls</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(ele.className)</span></span><br><span class="line"><span class="javascript">  <span class="keyword">return</span> ele.className === cls</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="javascript">hasClassName1(oBox, <span class="string">&#x27;skip&#x27;</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">hasClassName2</span>(<span class="params">ele, cls</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> clsName = ele.className</span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(clsName)</span></span><br><span class="line"><span class="javascript">  <span class="keyword">return</span> clsName === cls</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="javascript">hasClassName2(oBox, <span class="string">&#x27;skip&#x27;</span>)</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="减少访问层级"><a href="#减少访问层级" class="headerlink" title="减少访问层级"></a>减少访问层级</h3><p><img data-src="https://gitee.com/lilyn/pic/raw/master/lagoulearn-img/%E4%BC%98%E5%8C%96%E5%87%8F%E5%B0%91%E8%AE%BF%E9%97%AE%E5%B1%82%E7%BA%A7.png" alt="优化减少访问层级"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = <span class="string">&#x27;bird&#x27;</span></span><br><span class="line">  <span class="built_in">this</span>.age = <span class="number">14</span></span><br><span class="line">  <span class="built_in">this</span>.getAge = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.age</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> Person1()</span><br><span class="line"><span class="built_in">console</span>.log(p1.getAge())</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = <span class="string">&#x27;bird&#x27;</span></span><br><span class="line">  <span class="built_in">this</span>.age = <span class="number">14</span></span><br><span class="line">  <span class="built_in">this</span>.getAge = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.age</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> p2 = <span class="keyword">new</span> Person2()</span><br><span class="line"><span class="built_in">console</span>.log(p2.age)</span><br></pre></td></tr></table></figure>

<h3 id="字面量与构造式"><a href="#字面量与构造式" class="headerlink" title="字面量与构造式"></a>字面量与构造式</h3><p>直接通过字面量来创建的执行速度远比 new 关键字创建的速度快</p>
<ul>
<li>因为 new 相当于调用一个函数</li>
<li>字面量是直接开辟一个空间往里存</li>
</ul>
<p>引用数据类型，字面量与构造式方式没有太大区别。基本数据类型，字面量与构造式方式差别就很大了</p>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/lagoulearn-img/%E4%BC%98%E5%8C%96%E5%AD%97%E9%9D%A2%E9%87%8F%E4%B8%8E%E6%9E%84%E9%80%A0%E5%BC%8F.png" alt="优化字面量与构造式"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> test = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>()</span><br><span class="line">  obj.name = <span class="string">&#x27;zce&#x27;</span></span><br><span class="line">  obj.age = <span class="number">38</span></span><br><span class="line">  obj.slogan = <span class="string">&#x27;声明一个 obj&#x27;</span></span><br><span class="line">  <span class="keyword">return</span> obj</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> test = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> obj = &#123;</span><br><span class="line">    name: <span class="string">&#x27;zce&#x27;</span>,</span><br><span class="line">    age: <span class="number">38</span>,</span><br><span class="line">    slogan: <span class="string">&#x27;声明一个 obj&#x27;</span>,</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> obj</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(test())</span><br></pre></td></tr></table></figure>

<h3 id="减少循环体活动"><a href="#减少循环体活动" class="headerlink" title="减少循环体活动"></a>减少循环体活动</h3><ul>
<li>把循环体里边重复的事情，如果说值不变，没必要每次都重新获取一遍</li>
<li>采用另一种从后往前遍历思路，可以少做一些条件判断</li>
</ul>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/lagoulearn-img/%E4%BC%98%E5%8C%96%E5%87%8F%E5%B0%91%E5%BE%AA%E7%8E%AF%E4%BD%93%E6%B4%BB%E5%8A%A8.png" alt="优化减少循环体活动"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> test = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> i</span><br><span class="line">  <span class="keyword">var</span> arr = [<span class="string">&#x27;bird&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;bird can fly&#x27;</span>]</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对不经常发生改变的数据进行缓存</span></span><br><span class="line"><span class="keyword">var</span> test = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> i</span><br><span class="line">  <span class="keyword">var</span> arr = [<span class="string">&#x27;bird&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;bird can fly&#x27;</span>]</span><br><span class="line">  <span class="keyword">var</span> len = arr.length</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 while 循环</span></span><br><span class="line"><span class="keyword">var</span> test = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> arr = [<span class="string">&#x27;bird&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;bird can fly&#x27;</span>]</span><br><span class="line">  <span class="keyword">var</span> i = arr.length</span><br><span class="line">  <span class="keyword">while</span> (i--) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test()</span><br></pre></td></tr></table></figure>

<h3 id="防抖和节流"><a href="#防抖和节流" class="headerlink" title="防抖和节流"></a>防抖和节流</h3><p>在一些高频率事件触发的场景下，我们不希望对应的事件函数多次执行</p>
<ul>
<li>场景：滚动事件、输入的模糊匹配、轮播图切换、点击操作</li>
<li>浏览器默认都会有自己的监听事件间隔（4~6ms），如果检测到多次事件的监听执行，那么就会造成不必要的资源浪费</li>
</ul>
<p>防抖：对于高频操作，我们只希望识别一次点击，可以人为是第一次或者最后一次</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;btn&#x27;</span>)</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="keyword">function</span> <span class="title">btnClick</span>(<span class="params">ev</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">&#x27;点击了&#x27;</span>, <span class="built_in">this</span>, ev)</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line">   * handle 最终需要执行的事件监听</span><br><span class="line">   * wait 事件触发之后多久开始执行</span><br><span class="line">   * immediate 控制执行第一次还是最后一次</span><br><span class="line">   */</span><br><span class="line"><span class="javascript">  <span class="function"><span class="keyword">function</span> <span class="title">myDebounce</span>(<span class="params">handle, wait, immediate</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 参数类型判断及默认值处理</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">if</span> (<span class="keyword">typeof</span> handle !== <span class="string">&#x27;function&#x27;</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;handle must be a function&#x27;</span>)</span></span><br><span class="line"><span class="javascript">    <span class="keyword">if</span> (<span class="keyword">typeof</span> wait === <span class="string">&#x27;undefined&#x27;</span>) wait = <span class="number">300</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">if</span> (<span class="keyword">typeof</span> wait === <span class="string">&#x27;boolean&#x27;</span>) &#123;</span></span><br><span class="line">      immediate = wait</span><br><span class="line">      wait = 300</span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="keyword">if</span> (<span class="keyword">typeof</span> immediate !== <span class="string">&#x27;boolean&#x27;</span>) immediate = <span class="literal">false</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">// 如果我们想要执行最后一次，那么就意味着无论我们点击了多少次，前面N-1次都无用</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> timer = <span class="literal">null</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">proxy</span>(<span class="params">...args</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 如果要向实现第一次执行，那么可以添加 timer 为 null 的判断</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> init = immediate &amp;&amp; !timer</span></span><br><span class="line"><span class="javascript">      <span class="built_in">clearTimeout</span>(timer)</span></span><br><span class="line"><span class="javascript">      timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        timer = <span class="literal">null</span></span></span><br><span class="line"><span class="javascript">        !immediate ? handle.apply(<span class="built_in">this</span>, args) : <span class="literal">null</span></span></span><br><span class="line">      &#125;, wait)</span><br><span class="line"><span class="javascript">      <span class="comment">// 如果当前传递进行的是 true（立即执行）</span></span></span><br><span class="line"><span class="javascript">      init ? handle.apply(<span class="built_in">this</span>, args) : <span class="literal">null</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="javascript">  <span class="comment">// 当我们执行了按钮点击就会执行...返回的proxy</span></span></span><br><span class="line"><span class="javascript">  btn.onclick = myDebounce(btnClick, <span class="number">1000</span>, <span class="literal">true</span>)</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>节流：对于高频操作，我们可以自己设置频率，让本来会执行很多次的事件触发，按我们定义的频率减少触发的次数</p>
<ol>
<li>假设当前在 5ms 时间点上执行一次 proxy，我们就可以用这个时间减去上次执行的时间，此时就会有一个时间差</li>
<li>前置条件：我们自己定义了一个 wait，比如定义的是 500ms</li>
<li><code>wait - (now - previous)</code></li>
<li>此时如果上如结果是大于 0，就意味着当次的操作是一个高频触发，我们想法让它不要去执行 handle，如果这个结果小于等于 0，就意味着当次不是一个高频操作，那么我们就可以执行 handle</li>
<li>此时我们就可以在 500ms 内想办法让所有的高频操作在将来都有一次执行就可以，不需要给每个高频操作添加一个定时器</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">  body &#123;</span><br><span class="line">    height: 5000px;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="keyword">function</span> <span class="title">scrollFn</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">&#x27;滚动了&#x27;</span>)</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="javascript">  <span class="function"><span class="keyword">function</span> <span class="title">myThrottle</span>(<span class="params">handle, wait</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">if</span> (<span class="keyword">typeof</span> handle !== <span class="string">&#x27;function&#x27;</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;handle must be a function&#x27;</span>)</span></span><br><span class="line"><span class="javascript">    <span class="keyword">if</span> (<span class="keyword">typeof</span> wait === <span class="string">&#x27;undefined&#x27;</span>) wait = <span class="number">300</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> previous = <span class="number">0</span> <span class="comment">// 上一次执行的时间</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> timer = <span class="literal">null</span> <span class="comment">// 用它来管理定时器</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">proxy</span>(<span class="params">...args</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 此时说明是一个非高频操作，可以执行 handle</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>() <span class="comment">// 当前执行的时刻时间点</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> interval = wait - (now - previous)</span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (interval &lt;= <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">clearTimeout</span>(timer)</span></span><br><span class="line"><span class="javascript">        timer = <span class="literal">null</span></span></span><br><span class="line"><span class="javascript">        handle.apply(<span class="built_in">this</span>, args)</span></span><br><span class="line"><span class="javascript">        previous = +<span class="keyword">new</span> <span class="built_in">Date</span>()</span></span><br><span class="line">      &#125;</span><br><span class="line"><span class="javascript">      <span class="comment">// 当我们发现当前系统有一个定时器，就意味着我们不需要再开启定时器</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (!timer) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 此时说明这次操作发生在我们定义的频次时间范围内，那就不执行 handle</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 这时候我们可以定义一个定时器，让 handle 在 interval 之后去执行</span></span></span><br><span class="line"><span class="javascript">        timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">clearTimeout</span>(timer) <span class="comment">// 这个操作只是将系统中的定时器清除了，但是 timer 中的值还在</span></span></span><br><span class="line"><span class="javascript">          timer = <span class="literal">null</span></span></span><br><span class="line"><span class="javascript">          handle.apply(<span class="built_in">this</span>, args)</span></span><br><span class="line"><span class="javascript">          previous = +<span class="keyword">new</span> <span class="built_in">Date</span>()</span></span><br><span class="line">        &#125;, interval)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="javascript">  <span class="built_in">window</span>.onscroll = myThrottle(scrollFn, <span class="number">1000</span>)</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>垃圾回收</tag>
        <tag>性能优化</tag>
        <tag>Performance</tag>
        <tag>代码优化</tag>
      </tags>
  </entry>
  <entry>
    <title>圣杯布局和双飞翼布局</title>
    <url>/posts/6669e648/</url>
    <content><![CDATA[<p>圣杯布局和双飞翼布局，虽然两者的实现方法略有差异，不过都遵循了以下要点：</p>
<ul>
<li>两侧宽度固定，中间宽度自适应</li>
<li>中间部分在 DOM 结构上优先，以便先行渲染</li>
<li>允许三列中的任意一列成为最高列</li>
</ul>
<a id="more"></a>

<h2 id="圣杯布局"><a href="#圣杯布局" class="headerlink" title="圣杯布局"></a>圣杯布局</h2><ul>
<li>页面分为左中右3个部分，其中左右两侧固定宽度，而中间部分自适应</li>
</ul>
<p>html结构</p>
<ul>
<li>这里把 center 部分放在最前面，然后是 left、right</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;center&quot;</span>&gt;</span>中间自适应<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span>左侧固定宽度<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span>右侧固定宽度<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="左右浮动-中间-100-宽度"><a href="#左右浮动-中间-100-宽度" class="headerlink" title="左右浮动 + 中间 100% 宽度"></a>左右浮动 + 中间 100% 宽度</h3><ul>
<li>将三列都设置 <code>float: left</code> 使其在同一排显示</li>
<li>left 和 right 设置固定宽度</li>
<li>由于 center 宽度为 100% 将父元素占满了，因此 left 和 right 只能换行显示</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.container</span> &#123;</span></span><br><span class="line">    	padding: 0 150px 0 200px;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.container</span>&gt;<span class="selector-tag">div</span> &#123;</span></span><br><span class="line">        height: 200px;</span><br><span class="line">        float: left;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.center</span> &#123;</span></span><br><span class="line">        background: aqua;</span><br><span class="line">        width: 100%;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.left</span> &#123;</span></span><br><span class="line">        width: 200px;</span><br><span class="line">        background: lightblue;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.right</span> &#123;</span></span><br><span class="line">        width: 150px;</span><br><span class="line">        background: lightgreen;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img data-src="https://gitee.com/lilyn/pic/raw/master/css-img/%E5%9C%A3%E6%9D%AF%E5%B8%83%E5%B1%80-%E9%83%BD%E8%AE%BE%E4%B8%BA%E6%B5%AE%E5%8A%A8,%E4%B8%AD%E9%97%B4%E5%AE%BD%E8%AE%BE%E4%B8%BA100%.jpg" alt="圣杯布局-都设为浮动,中间宽设为100%"></p>
<ul>
<li>设置 left <code>margin-left: -100%</code>，使其上移到 center 一行，并与 center 重叠  </li>
<li>设置 right <code>margin-right: -150px</code>，使其上移到 center 一行，并与 center 重叠</li>
</ul>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/css-img/%E5%9C%A3%E6%9D%AF%E5%B8%83%E5%B1%80-%E8%AE%BE%E7%BD%AEmargin-left.jpg" alt="圣杯布局-设置margin-left"></p>
<ul>
<li>设置 left <code>position: relative; left: -200px</code></li>
<li>设置 left <code>position: relative; left: 150px</code></li>
</ul>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/css-img/%E5%9C%A3%E6%9D%AF%E5%B8%83%E5%B1%80-%E8%AE%BE%E7%BD%AE%E5%AE%9A%E4%BD%8D.jpg" alt="圣杯布局-设置定位"></p>
<ul>
<li>如果宽度无法容下3个盒子会换行显示，设置 <code>min-width: 600px</code>，可以解决</li>
</ul>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/css-img/%E5%9C%A3%E6%9D%AF%E5%B8%83%E5%B1%80-%E5%B0%BA%E5%AF%B8%E4%B8%8D%E5%A4%9F%E6%97%B6%E4%BC%9A%E6%8D%A2%E8%A1%8C%E6%98%BE%E7%A4%BA.jpg" alt="圣杯布局-尺寸不够时会换行显示"></p>
<h3 id="flex"><a href="#flex" class="headerlink" title="flex"></a>flex</h3><ul>
<li>将 container 设置为弹性布局，container 变为了 flex 容器，子元素 center、left、right 变为了 flex 项目</li>
<li>设置 left 的 order 属性来调整位置，默认为0，值越小越靠前</li>
<li>left 和 right 设置为固定宽度，使用 width 或 flex-basis</li>
<li>让 center 自动填充剩余空间，使用 flex-grow（默认为0） 或 flex 即可</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">media</span>=<span class="string">&quot;screen&quot;</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.container</span> &#123;</span></span><br><span class="line">        display: flex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.container</span>&gt;<span class="selector-tag">div</span> &#123;</span></span><br><span class="line">        height: 200px;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.center</span> &#123;</span></span><br><span class="line">        background: aqua;</span><br><span class="line"><span class="css">        <span class="selector-tag">flex-grow</span><span class="selector-pseudo">:1</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.left</span> &#123;</span></span><br><span class="line">        flex-basis: 200px;</span><br><span class="line">        background: lightblue;</span><br><span class="line">        order: -1;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.right</span> &#123;</span></span><br><span class="line">        flex-basis: 150px;</span><br><span class="line">        background: lightgreen;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="双飞翼布局"><a href="#双飞翼布局" class="headerlink" title="双飞翼布局"></a>双飞翼布局</h2><p>html结构</p>
<ul>
<li>center 是鸟的身体，left 和 right 是鸟的翅膀，先把 center 放好，再将翅膀移动到合适的位置</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;inner&quot;</span>&gt;</span>中间自适应<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span>左侧固定宽度<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span>右侧固定宽度<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>把之前给 container 的 padding 加给 center，并把它转换成 IE 盒模型</li>
<li>再给 left 和 right <code>margin-left</code> 即可</li>
</ul>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>圣杯布局</tag>
        <tag>双飞翼布局</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 获取文件夹下所有图片尺寸</title>
    <url>/posts/5a7a946b/</url>
    <content><![CDATA[<p>有时候我们爬取了一堆图片，需要知道这些图片尺寸大小或名字以便日后处理。一个一个弄很是费劲，我们可以用 python 批量获取一下并生成 csv</p>
<ul>
<li>如果图片后缀比较多（png jpg jpeg bmp），可以在 suffix里进行添加</li>
</ul>
<a id="more"></a>

<p>用法：输入文件夹地址即可生成 csv，不过需要预先安装一些环境，已经安好跳过即可</p>
<ul>
<li>PIL库python3.7版本前： <code>pip install PIL</code>  python3.7版本之后改名为 pillow <code>pip install pillow</code></li>
<li>openpyxl库 <code>pip install openpyxl</code></li>
</ul>
<h3 id="代码如下："><a href="#代码如下：" class="headerlink" title="代码如下："></a>代码如下：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">file_list = []</span><br><span class="line">width_list = []</span><br><span class="line">height_list = []</span><br><span class="line">root_path = <span class="built_in">input</span>(<span class="string">&#x27;请输入 图片 所在地址:&#x27;</span>)</span><br><span class="line">suffix = [<span class="string">&#x27;.jpg&#x27;</span>, <span class="string">&#x27;.png&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> dirpath, dirnames, files <span class="keyword">in</span> os.walk(root_path):</span><br><span class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">        file_path = os.path.join(dirpath, file)</span><br><span class="line">        <span class="keyword">for</span> suf <span class="keyword">in</span> suffix:</span><br><span class="line">            <span class="keyword">if</span> file.endswith(suf):</span><br><span class="line">                img = Image.<span class="built_in">open</span>(file_path)</span><br><span class="line">                file_list.append(file)</span><br><span class="line">                width_list.append(img.size[<span class="number">0</span>])</span><br><span class="line">                height_list.append(img.size[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">content_dict = &#123;</span><br><span class="line">    <span class="string">&#x27;dir_name&#x27;</span>:file_list,</span><br><span class="line">    <span class="string">&#x27;width&#x27;</span>:width_list,</span><br><span class="line">    <span class="string">&#x27;height&#x27;</span>:height_list</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(content_dict)</span><br><span class="line">csv_path = os.path.join(root_path,<span class="string">&#x27;image_size.csv&#x27;</span>)</span><br><span class="line">df.to_csv(csv_path, encoding=<span class="string">&#x27;utf_8_sig&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="生成-csv-效果图："><a href="#生成-csv-效果图：" class="headerlink" title="生成 csv 效果图："></a>生成 csv 效果图：</h3><p><img data-src="https://gitee.com/lilyn/pic/raw/master/python-img/%E8%8E%B7%E5%8F%96%E6%96%87%E4%BB%B6%E5%A4%B9%E6%89%80%E6%9C%89%E5%9B%BE%E7%89%87%E5%B0%BA%E5%AF%B8.jpg" alt="获取文件夹所有图片尺寸"></p>
<h3 id="生成Excel"><a href="#生成Excel" class="headerlink" title="生成Excel"></a>生成Excel</h3><p>如果要生成 Excel，可以使用 openpyxl 读一下生成的 csv，之后用<code>,</code> 分割转存为Excel，封装后的代码如下：</p>
<ul>
<li>不过所有数字类型数据都会转换成字符串类型，不希望这个可以写了 is_number 方法，在 append 之前修改数据类型</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> openpyxl <span class="keyword">import</span> Workbook</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">xls</span>(<span class="params">path</span>):</span></span><br><span class="line">    <span class="comment">#生成Excel文件</span></span><br><span class="line">    wb = Workbook()</span><br><span class="line">    ws = wb.active</span><br><span class="line">    first_row = []</span><br><span class="line">    datas = []</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(path,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        is_first_row = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">            line = line[:-<span class="number">1</span>]</span><br><span class="line">            <span class="comment">#存储第一行</span></span><br><span class="line">            <span class="keyword">if</span> is_first_row:</span><br><span class="line">                is_first_row = <span class="literal">False</span></span><br><span class="line">                first_row = line.split(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="comment">#存储第二行至max_row</span></span><br><span class="line">            datas.append(line.split(<span class="string">&#x27;,&#x27;</span>))</span><br><span class="line">    ws.append(first_row)</span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span> datas:</span><br><span class="line">        ws.append(data)</span><br><span class="line">    wb.save(xls_path)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>获取图片尺寸</tag>
        <tag>批处理</tag>
        <tag>导出Excel</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 变量提升</title>
    <url>/posts/ea26882a/</url>
    <content><![CDATA[<p>当浏览器开辟出供 js 执行的栈内存之后，代码并不是立即自上而下执行，而是需要先做一些事情：把当前作用域中带 var 和 function 的关键字进行提前的声明和定义（变量提升）</p>
<ul>
<li>var：只声明，未定义（不赋值）</li>
<li>function：声明和定义（赋值）一起完成</li>
</ul>
<a id="more"></a>

<h2 id="匿名函数具名化"><a href="#匿名函数具名化" class="headerlink" title="匿名函数具名化"></a>匿名函数具名化</h2><p>匿名函数具名化【规范函数执行的顺序】</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;ok&#x27;</span>)</span><br><span class="line">  sum = <span class="number">100</span> <span class="comment">// 默认情况下，其值是不能修改的</span></span><br><span class="line">  <span class="built_in">console</span>.log(sum) <span class="comment">// 函数本身 // 具名话的名字可以在函数内部的上下文中使用【代表函数本身】</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(sum) <span class="comment">// undefined // 虽然具名化的名字会在当前函数的私有上下文中被声明，当做私有变量处理，但是它的优先级是比较低的</span></span><br><span class="line">  <span class="keyword">var</span> sum</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sum() <span class="comment">// 具名化设置的函数名不能在函数以外使用【因为没有在当前上下文中声明这个变量】</span></span><br></pre></td></tr></table></figure>

<p>匿名函数具名化可以让匿名函数实现递归调用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span></span><br><span class="line">;(<span class="function"><span class="keyword">function</span> <span class="title">anonymous</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (x &lt; <span class="number">0</span>) <span class="keyword">return</span></span><br><span class="line">  anonymous(x - <span class="number">1</span>)</span><br><span class="line">  <span class="comment">// arguments.callee(x - 1) // 开启严格模式则会报错</span></span><br><span class="line">&#125;)(<span class="number">100</span>)</span><br></pre></td></tr></table></figure>



<h2 id="作用域中的变量提升"><a href="#作用域中的变量提升" class="headerlink" title="作用域中的变量提升"></a>作用域中的变量提升</h2><p>作用域链查找原则：首先会在当前作用域中查找，如果没有的话会沿着作用域链向上查找， 直至全局作用域</p>
<ol>
<li>在全局作用域获取不到，报错：<code> ... is not defined</code></li>
<li>如果是赋值语句，就相当于给全局作用域添加了这样一个属性名和属性值</li>
</ol>
<h3 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h3><blockquote>
<p>在全局作用域（默认会提供一个最大的 window 对象）中声明的变量</p>
</blockquote>
<ul>
<li>函数没有形参，且函数体里没有 var 声明</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">6</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">    a = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">fn();</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br></pre></td></tr></table></figure>

<p>答案：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 6</span></span><br><span class="line"><span class="comment">// 1</span></span><br></pre></td></tr></table></figure>

<h3 id="私有变量"><a href="#私有变量" class="headerlink" title="私有变量"></a>私有变量</h3><blockquote>
<p>函数执行的时候形成的作用域是私有的，保护里面的变量不受外界干扰</p>
</blockquote>
<ul>
<li><p>形参</p>
<p>函数有形参，但没有传实参，且打印在赋值之前</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">6</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">    a = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">fn();</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br></pre></td></tr></table></figure>

<p>答案：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// undefined</span></span><br><span class="line"><span class="comment">// 6</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在私有作用域中声明的变量</p>
<p>函数没有形参，函数体里有 var 声明</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">  <span class="built_in">console</span>.log(a, b);</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">12</span>,</span><br><span class="line">      b = <span class="number">12</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 变量提升 var a；a 是私有的， b是 windows 全局作用域</span></span><br><span class="line">      <span class="built_in">console</span>.log(a, b);</span><br><span class="line">      <span class="comment">// 下面语句相当于 b=13; var a=b</span></span><br><span class="line">      <span class="keyword">var</span> a = b = <span class="number">13</span>;</span><br><span class="line">      <span class="built_in">console</span>.log(a, b);</span><br><span class="line">  &#125;</span><br><span class="line">  fn();</span><br><span class="line"><span class="built_in">console</span>.log(a, b);</span><br></pre></td></tr></table></figure>

<p>答案：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// undefined undefined</span></span><br><span class="line"><span class="comment">// undefined 12</span></span><br><span class="line"><span class="comment">// 13 13</span></span><br><span class="line"><span class="comment">// 12 13</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>复合（形参 + 私有作用域中声明变量）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    私有作用域 fn(a)</span></span><br><span class="line"><span class="comment">    1.形参赋值 a=12; a是私有的</span></span><br><span class="line"><span class="comment">    2.变量提升 var b; b是私有的</span></span><br><span class="line"><span class="comment">        只有 c 是全局作用域的</span></span><br><span class="line"><span class="comment">    3.代码自上而下执行</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">12</span>,</span><br><span class="line">    b = <span class="number">13</span>,</span><br><span class="line">    c = <span class="number">14</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a, b, c);</span><br><span class="line">    <span class="keyword">var</span> b = c = a = <span class="number">20</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(a, b, c);</span><br><span class="line">&#125;</span><br><span class="line">fn(a);</span><br><span class="line"><span class="built_in">console</span>.log(a, b, c);</span><br></pre></td></tr></table></figure>

<p>答案：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 12 undefined 14</span></span><br><span class="line"><span class="comment">// 20 20 20</span></span><br><span class="line"><span class="comment">// 12 13 20</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="块级作用域"><a href="#块级作用域" class="headerlink" title="块级作用域"></a>块级作用域</h3><ul>
<li>let 声明的变量不进行变量提升不能重复声明</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">10</span>,</span><br><span class="line">    b = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">let</span> fn = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// a 变成私有变量，这个私有作用域没有 b，需要向上级查找</span></span><br><span class="line">    <span class="keyword">let</span> a = b = <span class="number">20</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(a, b);</span><br><span class="line">&#125;;</span><br><span class="line">fn();</span><br><span class="line"><span class="built_in">console</span>.log(a, b);</span><br></pre></td></tr></table></figure>

<p>答案：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 20 20</span></span><br><span class="line"><span class="comment">// 10 20</span></span><br></pre></td></tr></table></figure>

<h3 id="引用类型数据问题"><a href="#引用类型数据问题" class="headerlink" title="引用类型数据问题"></a>引用类型数据问题</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    1.变量提升：fn -&gt; 0x111(全局)；arr -&gt; 0x222(全局)</span></span><br><span class="line"><span class="comment">    2.代码自上而下执行，执行 fn(arr)</span></span><br><span class="line"><span class="comment">        1.形参赋值 arr -&gt; 0x222[12, 13]</span></span><br><span class="line"><span class="comment">        2.重新赋值 arr[0]=100 -&gt; 0x222[100, 13]</span></span><br><span class="line"><span class="comment">        3.arr=[100] -&gt; 0x333[100](函数fn中)</span></span><br><span class="line"><span class="comment">        4.arr[0]=0 -&gt; 0x333[0]</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">12</span>, <span class="number">13</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(arr);</span><br><span class="line">    arr[<span class="number">0</span>] = <span class="number">100</span>;</span><br><span class="line">    arr = [<span class="number">100</span>];</span><br><span class="line">    arr[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(arr);</span><br><span class="line">&#125;</span><br><span class="line">fn(arr);</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br></pre></td></tr></table></figure>

<p>答案：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// [12,13]</span></span><br><span class="line"><span class="comment">// [0]</span></span><br><span class="line"><span class="comment">// [100,13]</span></span><br></pre></td></tr></table></figure>



<h2 id="变量提升特殊性"><a href="#变量提升特殊性" class="headerlink" title="* 变量提升特殊性"></a>* 变量提升特殊性</h2><h3 id="判断条件"><a href="#判断条件" class="headerlink" title="* 判断条件"></a>* 判断条件</h3><blockquote>
<p><strong>不论判断条件是否成立，都会进行变量提升</strong></p>
</blockquote>
<h4 id="条件不成立"><a href="#条件不成立" class="headerlink" title="* 条件不成立"></a>* 条件不成立</h4><p>var：<strong>只声明不定义</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 不管条件是否成立，都会进行变量提升，var a</span></span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">false</span>) &#123;</span><br><span class="line">    <span class="comment">// 条件不成立，无法赋值</span></span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br></pre></td></tr></table></figure>

<p>答案：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// undefined</span></span><br><span class="line"><span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>

<p>function：</p>
<ul>
<li><p>在老版本浏览器中：声明+定义</p>
</li>
<li><p>在新版本浏览器中：<strong>只声明不定义</strong></p>
<p>可以把它理解成函数表达式 <code>var fn = function()&#123;&#125;</code> ，只声明 <code>var fn</code> </p>
<p><code>delete fn</code> 返回 false（<code>var 变量</code> 无法使用 delete 删除）</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在新版本浏览器中，判断条件中的function相当于只声明未定义，所以undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(fn);</span><br><span class="line"><span class="built_in">console</span>.log(fn());</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">false</span>) &#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;lion&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(fn);</span><br></pre></td></tr></table></figure>

<p>答案：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// undefined</span></span><br><span class="line"><span class="comment">// TypeError: fn is not a function</span></span><br></pre></td></tr></table></figure>

<h4 id="条件成立"><a href="#条件成立" class="headerlink" title="条件成立"></a>条件成立</h4><ul>
<li><strong>判断条件成立，会对执行体中的 fn 进行变量提升</strong>（声明+赋值）</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(fn);</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(fn);</span><br><span class="line">    <span class="comment">// 全局作用域没有 fn ，给 fn 进行赋值</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(fn);</span><br></pre></td></tr></table></figure>

<p>答案：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// undefined</span></span><br><span class="line"><span class="comment">// [Function: fn]</span></span><br><span class="line"><span class="comment">// [Function: fn]</span></span><br></pre></td></tr></table></figure>

<h4 id="特殊情况"><a href="#特殊情况" class="headerlink" title="特殊情况"></a>特殊情况</h4><ul>
<li><p><strong>判断条件成立，如果有 function 定义的变量，在这个 function 函数后面更改变量的值，更改的都是私有变量</strong></p>
<p>可以把<code>if()&#123;&#125; 的 </code> <code>&#123; &#125;</code> 理解成块级作用域（特例： function(){} 的 <code>&#123; &#125;</code>是私有作用域）</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a);  <span class="comment">// [Function: a]</span></span><br><span class="line">    a = <span class="number">5</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">    a = <span class="number">7</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(a);  <span class="comment">// 7</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a);  <span class="comment">// 5</span></span><br></pre></td></tr></table></figure>

<h3 id="自执行函数"><a href="#自执行函数" class="headerlink" title="自执行函数"></a>自执行函数</h3><ul>
<li><strong>自执行函数在当前作用域下不进行变量提升</strong></li>
</ul>
<p>新版浏览器：</p>
<blockquote>
<ol>
<li>在全局作用域中，没有变量提升</li>
<li>代码自上而下执行，<code>window.f = function()&#123;&#125;</code> 和 <code>window.g = function()&#123;&#125;</code></li>
<li>进入自执行函数，走到 if 语句中，函数 g 声明提升，此时 g 只声明未定义，相当于 undefined，所以 g() 会报类型错误</li>
</ol>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">f = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br><span class="line">g = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br><span class="line">~(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (g() &amp;&amp; [] == ![]) &#123;</span><br><span class="line">        f = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">g</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="built_in">console</span>.log(f());</span><br><span class="line"><span class="built_in">console</span>.log(g());</span><br></pre></td></tr></table></figure>

<p>答案：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// TypeError: g is not a function</span></span><br></pre></td></tr></table></figure>

<p>老版浏览器：</p>
<blockquote>
<ol>
<li><p>在全局作用域中，没有变量提升</p>
</li>
<li><p>代码自上而下执行，<code>window.f = function()&#123;&#125;</code> 和 <code>window.g = function()&#123;&#125;</code></p>
</li>
<li><p>进入自执行函数，走到 if 语句中，函数 g 声明提升并定义，</p>
<p>g() 为 true，参考下图优先级顺序， <code>==</code> 优先级高于 <code>&amp;&amp;</code> </p>
<p><code>g() &amp;&amp; [] ==  ![]</code> ，![] 转换为 false，再转换为0；[] 转换为 0；<code>[] == ![]</code> 返回 true</p>
<p><code>true &amp;&amp; true</code> 返回 true，进入循环</p>
</li>
<li><p>f 进行重新赋值，f 指向 <code>function()&#123;return false&#125;</code>，g 已经声明，不会再重复声明， g没有被修改</p>
</li>
<li><p>答案：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// false</span></span><br><span class="line"><span class="comment">// false</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
</blockquote>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/js-img/JavaScript%E8%BF%90%E7%AE%97%E7%AC%A6%E4%BC%98%E5%85%88%E7%BA%A7.jpg" alt="JavaScript运算符优先级"></p>
<h3 id="赋值运算"><a href="#赋值运算" class="headerlink" title="赋值运算"></a>赋值运算</h3><ul>
<li><strong>只对等号左边进行变量提升</strong>（函数表达式）</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(fn);</span><br><span class="line"><span class="built_in">console</span>.log(fn(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line"><span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span> (<span class="params">n, m</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> n + m;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(fn(<span class="number">3</span>, <span class="number">4</span>));</span><br></pre></td></tr></table></figure>

<p>答案：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// undefined</span></span><br><span class="line"><span class="comment">// TypeError: fn is not a function</span></span><br></pre></td></tr></table></figure>

<h3 id="return-语句"><a href="#return-语句" class="headerlink" title="return 语句"></a>return 语句</h3><ul>
<li>return 下面的代码虽然不能执行，但是可以进行变量提升（f2 进行变量提升）</li>
<li>return 后面的代码不能进行变量提升（f1 不进行变量提升）</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(f2);</span><br><span class="line">    <span class="built_in">console</span>.log(f1);</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;bird&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">fn();</span><br></pre></td></tr></table></figure>

<p>答案：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// [Function: f2]</span></span><br><span class="line"><span class="comment">// ReferenceError: f1 is not defined</span></span><br></pre></td></tr></table></figure>

<h3 id="重复变量名"><a href="#重复变量名" class="headerlink" title="重复变量名"></a>重复变量名</h3><ul>
<li>var 不会进行重复声明，但会重新赋值</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">var</span> num = <span class="number">5</span>;</span><br><span class="line"><span class="built_in">console</span>.log(num); <span class="comment">// 5</span></span><br></pre></td></tr></table></figure>

<ul>
<li>function 在变量提升阶段 声明和定义是一同完成的，如果遇到重复声明定义的，会重新进行赋值</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1.变量提升：</span></span><br><span class="line"><span class="comment">    function fn = 0x111</span></span><br><span class="line"><span class="comment">                = 0x222</span></span><br><span class="line"><span class="comment">                = 0x333</span></span><br><span class="line"><span class="comment">                = 0x444</span></span><br><span class="line"><span class="comment">2.代码从上到下执行</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">fn();</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line">fn();</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">3</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// fn=100 给fn重新赋值</span></span><br><span class="line">fn = <span class="number">100</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">4</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// function 声明和定义早已完成， 100()则会报错</span></span><br><span class="line">fn();</span><br></pre></td></tr></table></figure>

<p>答案：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 4</span></span><br><span class="line"><span class="comment">// 4</span></span><br><span class="line"><span class="comment">// TypeError: fn is not a function</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>前端</tag>
        <tag>作用域</tag>
        <tag>变量提升特殊性</tag>
      </tags>
  </entry>
  <entry>
    <title>牛客网本地刷题环境部署</title>
    <url>/posts/bf596df5/</url>
    <content><![CDATA[<p>牛客网在线判题系统使用帮助：<a href="https://www.nowcoder.com/discuss/276">https://www.nowcoder.com/discuss/276</a></p>
<a id="more"></a>

<h2 id="JavaScript输入"><a href="#JavaScript输入" class="headerlink" title="JavaScript输入"></a>JavaScript输入</h2><p>【node.js】readline (逐行读取)：<a href="https://www.cnblogs.com/yujihang/p/7414169.html">https://www.cnblogs.com/yujihang/p/7414169.html</a></p>
<p>Javascript本地测试/笔试环境搭建：<a href="https://react.ctolib.com/wuyve-Javascript-test.html">https://react.ctolib.com/wuyve-Javascript-test.html</a></p>
<h3 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h3><ol>
<li><p>在代码处的文件夹 输入  <code>cnpm install readline-sync</code></p>
</li>
<li><p>在代码处的文件夹 添加一个JS文件，文件头部输入以下代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> __readline = <span class="built_in">require</span>(<span class="string">&#x27;readline-sync&#x27;</span>);</span><br><span class="line">__readline.setDefaultOptions(&#123;</span><br><span class="line">    prompt: <span class="string">&#x27;&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> read_line = __readline.prompt;</span><br><span class="line"><span class="keyword">var</span> print = <span class="built_in">console</span>.log;</span><br></pre></td></tr></table></figure>
</li>
<li><p>这样子，JS带输入输出就OK了</p>
</li>
</ol>
<h3 id="JavaScript-V8"><a href="#JavaScript-V8" class="headerlink" title="JavaScript(V8)"></a>JavaScript(V8)</h3><p>单行输入</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> __readline = <span class="built_in">require</span>(<span class="string">&#x27;readline-sync&#x27;</span>);</span><br><span class="line">__readline.setDefaultOptions(&#123;</span><br><span class="line">    prompt: <span class="string">&#x27;&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> read_line = __readline.prompt;</span><br><span class="line"><span class="keyword">var</span> print = <span class="built_in">console</span>.log;</span><br><span class="line"></span><br><span class="line"><span class="comment">//牛客网：readline</span></span><br><span class="line"><span class="comment">//赛码：read_line</span></span><br><span class="line"><span class="keyword">while</span>(line=read_line())&#123;</span><br><span class="line">    <span class="keyword">var</span> lines = line.split(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> a = <span class="built_in">parseInt</span>(lines[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">var</span> b = <span class="built_in">parseInt</span>(lines[<span class="number">1</span>]);</span><br><span class="line">    print(a+b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>多行输入</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> __readline = <span class="built_in">require</span>(<span class="string">&#x27;readline-sync&#x27;</span>);</span><br><span class="line">__readline.setDefaultOptions(&#123;</span><br><span class="line">    prompt: <span class="string">&#x27;&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> read_line = __readline.prompt;</span><br><span class="line"><span class="keyword">var</span> print = <span class="built_in">console</span>.log;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> countLine = <span class="built_in">parseInt</span>(read_line());</span><br><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; countLine; i++) &#123;</span><br><span class="line">    lines = read_line().split(<span class="string">&quot; &quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; lines.length; j++) &#123;</span><br><span class="line">        sum += <span class="built_in">parseInt</span>(lines[j]);</span><br><span class="line">    &#125;</span><br><span class="line">    print(sum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="JavaScript-Node"><a href="#JavaScript-Node" class="headerlink" title="JavaScript(Node)"></a>JavaScript(Node)</h3><p>单行输入</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> readline = <span class="built_in">require</span>(<span class="string">&#x27;readline&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> rl = readline.createInterface(&#123;</span><br><span class="line">    input: process.stdin,</span><br><span class="line">    output: process.stdout</span><br><span class="line">&#125;);</span><br><span class="line">rl.on(<span class="string">&#x27;line&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">line</span>) </span>&#123;</span><br><span class="line"> 	<span class="comment">// 注意：这里的line不论在shell中输入的是数字还是字符串，获取到的始终是字符串</span></span><br><span class="line">    <span class="keyword">var</span> tokens = line.split(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(tokens[<span class="number">0</span>]) + <span class="built_in">parseInt</span>(tokens[<span class="number">1</span>]));</span><br><span class="line">    <span class="comment">// 关闭node输入环境</span></span><br><span class="line">    rl.close();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>多行输入</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> print = <span class="built_in">console</span>.log;</span><br><span class="line"><span class="keyword">var</span> readline = <span class="built_in">require</span>(<span class="string">&#x27;readline&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> rl = readline.createInterface(&#123;</span><br><span class="line">    input: process.stdin,</span><br><span class="line">    output: process.stdout</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> countLine = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">var</span> index = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">rl.on(<span class="string">&#x27;line&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">line</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> lines = line.split(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; lines.length; i++) &#123;</span><br><span class="line">        sum += <span class="built_in">parseInt</span>(lines[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    index++;</span><br><span class="line">    <span class="keyword">if</span> (index == countLine) &#123;</span><br><span class="line">        print(sum);</span><br><span class="line">        <span class="comment">// 关闭node输入环境</span></span><br><span class="line">        rl.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">rl.on(<span class="string">&#x27;close&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    process.exit(<span class="number">0</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<h2 id="Python输入"><a href="#Python输入" class="headerlink" title="Python输入"></a>Python输入</h2><p>Python常用标准库之sys：<a href="https://www.jianshu.com/p/c1831232c391">https://www.jianshu.com/p/c1831232c391</a></p>
<h3 id="python-2"><a href="#python-2" class="headerlink" title="python 2+"></a>python 2+</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        line = sys.stdin.readline().strip()</span><br><span class="line">        <span class="keyword">if</span> line == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        lines = line.split()</span><br><span class="line">        <span class="built_in">print</span> <span class="built_in">int</span>(lines[<span class="number">0</span>]) + <span class="built_in">int</span>(lines[<span class="number">1</span>])</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>



<h3 id="python-3"><a href="#python-3" class="headerlink" title="python 3+"></a>python 3+</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys </span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> sys.stdin:</span><br><span class="line">    a = line.split()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> a:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    print(<span class="built_in">int</span>(a[<span class="number">0</span>]) + <span class="built_in">int</span>(a[<span class="number">1</span>]))</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>基础配置</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Python</tag>
        <tag>牛客网</tag>
      </tags>
  </entry>
  <entry>
    <title>VScode造成电脑卡顿</title>
    <url>/posts/fc53734b/</url>
    <content><![CDATA[<h3 id="主流解决方案"><a href="#主流解决方案" class="headerlink" title="主流解决方案"></a>主流解决方案</h3><p>最近使用 Vscode 总是特别卡顿，网上大部分的解决方案如下（但是没有什么效果）</p>
<ul>
<li>search.followSymlinksd: false （控制是否在搜索中跟踪符号链接）</li>
<li>git.enabled: false （是否启用Git）</li>
<li>git.autorefresh: false （是否启用自动刷新）</li>
</ul>
<a id="more"></a>

<h3 id="语言设置问题"><a href="#语言设置问题" class="headerlink" title="语言设置问题"></a>语言设置问题</h3><p>都设置后还是很卡，很是头疼。去查看一下资源管理器，看一下哪个占用较多的cpu资源，发现是一个 Microsoft.Python.LanguageServer 的进程占用</p>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/Basics/python%E5%8D%A0%E7%94%A8%E8%BF%87%E9%AB%98.png" alt="cpu-python"></p>
<p>勾选 Jedi 不使用 Microsoft</p>
<ul>
<li>Python: Language Server: jedi</li>
</ul>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/Basics/%E4%BF%AE%E6%94%B9python%E8%AF%AD%E8%A8%80.png" alt="修改python语言"></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 最好在 settings.json 中加上这个，要不然可能随时变回 Microsoft</span></span><br><span class="line">&quot;python.languageServer&quot;: &quot;Jedi&quot;,</span><br></pre></td></tr></table></figure>

<p>同样， cpptools.exe 的进程占用也很高</p>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/Basics/C%E5%8D%A0%E7%94%A8%E8%BF%87%E9%AB%98.png" alt="cpu-c"></p>
<ul>
<li>C_Cpp: Intelli Sense Engine: disabled</li>
</ul>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/Basics/%E4%BF%AE%E6%94%B9c%E8%AF%AD%E8%A8%80.png" alt="修改c语言"></p>
<h3 id="插件问题"><a href="#插件问题" class="headerlink" title="插件问题"></a>插件问题</h3><p>都设置后，还是会时不时卡顿，再去查看资源管理器，发现有一些插件也会导致 CPU 过高</p>
<ul>
<li>Auto Rename Tag （其实按F2重构即可）</li>
</ul>
<p>你可以在命令面板（Ctrl + Shift + P）输入 <code>Developer: Startup Performance</code> 查看各个插件启动时间</p>
<p>可以参考 <a href="https://juejin.cn/post/6844904115798016008">那些你应该考虑卸载的 VSCode 扩展</a></p>
]]></content>
      <categories>
        <category>基础配置</category>
      </categories>
      <tags>
        <tag>问题</tag>
        <tag>电脑卡顿</tag>
        <tag>Vscode</tag>
      </tags>
  </entry>
  <entry>
    <title>Swiper使用案例</title>
    <url>/posts/47fd9c19/</url>
    <content><![CDATA[<p>官网链接：<a href="https://www.swiper.com.cn/">https://www.swiper.com.cn/</a></p>
<p>文档链接：<a href="https://www.swiper.com.cn/usage/index.html">Swiper使用方法</a> 、<a href="https://www.swiper.com.cn/api/index.html">Swiper的API文档</a></p>
<a id="more"></a>

<h3 id="引用Swiper"><a href="#引用Swiper" class="headerlink" title="引用Swiper"></a>引用Swiper</h3><p><a href="https://www.swiper.com.cn/download/index.html">下载 swiper</a> 或 <a href="https://www.swiper.com.cn/cdn/index.html">使用CDN</a></p>
<p>下面演示的案例使用的是 swiper4.3.3</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./swiper/css/swiper.css&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./swiper/js/swiper.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- swiper6 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://unpkg.com/swiper/swiper-bundle.min.css&quot;</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/swiper/swiper-bundle.min.js&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- swiper4.3.3 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/Swiper/4.3.3/css/swiper.min.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/Swiper/4.3.3/js/swiper.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>几点说明：</p>
<ul>
<li><p>为了让CSS代码层级关系更加明显，下面代码案例使用的是 Less</p>
</li>
<li><p>如果想清除浏览器默认效果，可以使用 <a href="https://sourl.cn/MiNzfr">CSS Tools: Reset CSS</a></p>
<p>但是这个可能并不太好，可以参考 <a href="http://www.zhangxinxu.com/wordpress/?p=758">CSS reset的重新审视 – 避免样式重置</a></p>
</li>
</ul>
<h3 id="轮播图"><a href="#轮播图" class="headerlink" title="轮播图"></a>轮播图</h3><ul>
<li><p><a href="https://sourl.cn/qSAcHh">图片下载链接（觅元素）</a></p>
</li>
<li><p>HTML 代码</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-banner&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-wrapper&quot;</span> <span class="attr">id</span>=<span class="string">&quot;swiper-1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-slide&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/1.jpg&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-slide&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/2.jpg&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-slide&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/3.jpg&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>Less 代码</li>
</ul>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@imgBannerWidth:</span> <span class="number">1920px</span>;</span><br><span class="line"><span class="variable">@imgBannerHeight:</span> <span class="number">600px</span>;</span><br><span class="line"><span class="selector-class">.img-banner</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="variable">@imgBannerWidth</span> / <span class="number">2</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="variable">@imgBannerHeight</span> / <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.swiper-banner</span> &#123;</span><br><span class="line">    <span class="selector-tag">&amp;</span><span class="selector-pseudo">:extend(.img-banner)</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="selector-id">#swiper-1</span> &#123;</span><br><span class="line">        <span class="selector-tag">img</span> &#123;</span><br><span class="line">            <span class="selector-tag">&amp;</span><span class="selector-pseudo">:extend(.img-banner)</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>JS 代码</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//初始化一个Swiper</span></span><br><span class="line"><span class="keyword">new</span> Swiper(<span class="string">&quot;.swiper-banner&quot;</span>, &#123;</span><br><span class="line">    speed: <span class="number">600</span>, <span class="comment">//切换速度</span></span><br><span class="line">    loop: <span class="literal">true</span>, <span class="comment">//循环模式</span></span><br><span class="line">    effect: <span class="string">&quot;cube&quot;</span>, <span class="comment">//切换效果：方块</span></span><br><span class="line">    autoplay: &#123;</span><br><span class="line">        delay: <span class="number">1000</span>, <span class="comment">//自动播放</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li>效果如下：</li>
</ul>
<p><img data-src="https://img-blog.csdnimg.cn/20200826152012303.gif#pic_center" alt="效果1"></p>
<h3 id="横屏滑动"><a href="#横屏滑动" class="headerlink" title="横屏滑动"></a>横屏滑动</h3><ul>
<li><p><a href="https://sourl.cn/L8Vem4">图片下载链接（iconfont）</a></p>
</li>
<li><p>HTML 代码</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-nav&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-wrapper&quot;</span> <span class="attr">id</span>=<span class="string">&quot;swiper-2&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-slide&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./img/凯旋门.png&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>凯旋门<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-slide&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./img/古罗马斗兽场.png&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>古罗马斗兽场<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-slide&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./img/大本钟.png&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>大本钟<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-slide&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./img/天坛.png&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>天坛<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-slide&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./img/巴黎圣母院.png&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>巴黎圣母院<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-slide&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./img/悉尼歌剧院.png&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>悉尼歌剧院<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-slide&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./img/比萨斜塔.png&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>比萨斜塔<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-slide&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./img/泰姬陵.png&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>泰姬陵<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>Less 代码</li>
</ul>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.flex-center</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.swiper-nav</span> &#123;</span><br><span class="line">    <span class="selector-id">#swiper-2</span> &#123;</span><br><span class="line">        <span class="selector-class">.swiper-slide</span> &#123;</span><br><span class="line">            <span class="selector-tag">&amp;</span><span class="selector-pseudo">:extend(.flex-center)</span>;</span><br><span class="line">            <span class="attribute">flex-direction</span>: column;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-tag">p</span> &#123;</span><br><span class="line">            <span class="attribute">text-align</span>: center;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>JS 代码</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Swiper(<span class="string">&quot;.swiper-nav&quot;</span>, &#123;</span><br><span class="line">	slidesPerView: <span class="number">4</span>, <span class="comment">//设置slider容器能够同时显示的slides数量</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li>效果如下：</li>
</ul>
<p><img data-src="https://img-blog.csdnimg.cn/20200826153547747.gif#pic_center" alt="效果2"></p>
<h3 id="数字下标（两种形式）"><a href="#数字下标（两种形式）" class="headerlink" title="数字下标（两种形式）"></a>数字下标（两种形式）</h3><ul>
<li>HTML 代码</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-img&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-wrapper&quot;</span> <span class="attr">id</span>=<span class="string">&quot;swiper-3&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-slide&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./img/凯旋门.png&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-slide&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./img/泰姬陵.png&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-slide&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./img/大本钟.png&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-slide&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./img/天坛.png&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 分页器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-pagination&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-img-click&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-wrapper&quot;</span> <span class="attr">id</span>=<span class="string">&quot;swiper-3&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-slide&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./img/凯旋门.png&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-slide&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./img/泰姬陵.png&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-slide&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./img/大本钟.png&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-slide&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./img/天坛.png&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 分页器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-pagination&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>Less 代码</li>
</ul>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@bgColorHover:</span> <span class="number">#ff2832</span>;</span><br><span class="line"><span class="variable">@bgColor:</span> <span class="number">#646464</span>;</span><br><span class="line"><span class="variable">@bgColorFont:</span> <span class="number">#fff</span>;</span><br><span class="line"><span class="variable">@imgIconWidth:</span> <span class="number">200px</span>;</span><br><span class="line"><span class="variable">@imgIconHeight:</span> <span class="number">200px</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.img-icon</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="variable">@imgIconWidth</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="variable">@imgIconHeight</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.swiper-img</span>,</span><br><span class="line"><span class="selector-class">.swiper-img-click</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="variable">@imgIconWidth</span> + <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="variable">@imgIconHeight</span> + <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">background</span>: lighten(<span class="variable">@bgColor</span>, <span class="number">40%</span>);</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="selector-id">#swiper-3</span> &#123;</span><br><span class="line">        <span class="selector-class">.swiper-slide</span> &#123;</span><br><span class="line">            <span class="selector-tag">&amp;</span><span class="selector-pseudo">:extend(.flex-center)</span>;</span><br><span class="line">            <span class="selector-tag">&amp;</span><span class="selector-pseudo">:extend(.img-icon)</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.swiper-pagination</span> &#123;</span><br><span class="line">        <span class="attribute">position</span>: relative;</span><br><span class="line">        <span class="attribute">bottom</span>: <span class="number">40px</span>;</span><br><span class="line">        <span class="selector-class">.swiper-pagination-bullet</span> &#123;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">20px</span>;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">20px</span>;</span><br><span class="line">            <span class="attribute">line-height</span>: <span class="number">20px</span>;</span><br><span class="line">            <span class="attribute">color</span>: <span class="variable">@bgColor</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-class">.swiper-pagination-bullet-active</span> &#123;</span><br><span class="line">            <span class="attribute">background</span>: <span class="variable">@bgColorHover</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>JS 代码</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Swiper(<span class="string">&quot;.swiper-img&quot;</span>, &#123;</span><br><span class="line">    loop: <span class="literal">true</span>,</span><br><span class="line">    autoplay: &#123;</span><br><span class="line">        delay: <span class="number">1000</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    pagination: &#123;</span><br><span class="line">        el: <span class="string">&quot;.swiper-pagination&quot;</span>,</span><br><span class="line">        type: <span class="string">&quot;fraction&quot;</span>, <span class="comment">//分式</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">new</span> Swiper(<span class="string">&quot;.swiper-img-click&quot;</span>, &#123;</span><br><span class="line">    loop: <span class="literal">true</span>,</span><br><span class="line">    autoplay: &#123;</span><br><span class="line">        delay: <span class="number">1000</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    pagination: &#123;</span><br><span class="line">        el: <span class="string">&quot;.swiper-pagination&quot;</span>,</span><br><span class="line">        clickable: <span class="literal">true</span>, <span class="comment">//点击分页器的指示点分页器会控制Swiper切换</span></span><br><span class="line">        renderBullet: <span class="function"><span class="keyword">function</span>(<span class="params">index, className</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;&lt;span class=&quot;&#x27;</span> + className + <span class="string">&#x27;&quot;&gt;&#x27;</span> + (index + <span class="number">1</span>) + <span class="string">&#x27;&lt;/span&gt;&#x27;</span>;</span><br><span class="line">        &#125;, <span class="comment">//渲染分页器小点</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li>效果如下：</li>
</ul>
<p><img data-src="https://img-blog.csdnimg.cn/20200826155510164.gif#pic_center" alt="效果三"></p>
<h3 id="缩略图显示（开启焦距功能）"><a href="#缩略图显示（开启焦距功能）" class="headerlink" title="缩略图显示（开启焦距功能）"></a>缩略图显示（开启焦距功能）</h3><ul>
<li><p><a href="https://sourl.cn/APX8pS">图片下载链接（官网案例）</a></p>
</li>
<li><p>HTML 代码</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;banner&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-focus&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-wrapper&quot;</span> <span class="attr">id</span>=<span class="string">&quot;swiper-4&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-slide&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-zoom-container&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/01.jpg&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-slide&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-zoom-container&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/02.jpg&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-slide&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-zoom-container&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/03.jpg&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-slide&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-zoom-container&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/04.jpg&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-pagination&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>Less 代码</li>
</ul>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#banner</span> &#123;</span><br><span class="line">    <span class="attribute">max-width</span>: <span class="number">1200px</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="selector-class">.swiper-focus</span>&#123;</span><br><span class="line">        <span class="selector-class">.swiper-slide</span> &#123;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">            <span class="selector-tag">img</span> &#123;</span><br><span class="line">                <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.swiper-pagination</span> &#123;</span><br><span class="line">        <span class="attribute">position</span>: relative;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="selector-class">.swiper-pagination-bullet</span> &#123;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">25%</span>;</span><br><span class="line">            <span class="attribute">height</span>: auto;</span><br><span class="line">            <span class="attribute">background</span>: none;</span><br><span class="line">            <span class="selector-tag">img</span> &#123;</span><br><span class="line">                <span class="attribute">font-size</span>: <span class="number">0</span>;</span><br><span class="line">                <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>JS 代码</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Swiper(<span class="string">&#x27;.swiper-focus&#x27;</span>, &#123;</span><br><span class="line">    loop: <span class="literal">true</span>,</span><br><span class="line">    pagination: &#123;</span><br><span class="line">        el: <span class="string">&#x27;.swiper-pagination&#x27;</span>,</span><br><span class="line">        clickable: <span class="literal">true</span>,</span><br><span class="line">        renderBullet: <span class="function"><span class="keyword">function</span>(<span class="params">index, className</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;&lt;span class=&quot;&#x27;</span> + className + <span class="string">&#x27;&quot;&gt;&lt;image src=&quot;img/0&#x27;</span> + (index + <span class="number">1</span>) + <span class="string">&#x27;.jpg&quot;&gt;&lt;/span&gt;&#x27;</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    zoom: <span class="literal">true</span>, <span class="comment">// 开启焦距功能：双击slide会放大/缩小</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li>效果如下：</li>
</ul>
<p><img data-src="https://img-blog.csdnimg.cn/2020082616193980.gif#pic_center" alt="效果4"></p>
]]></content>
      <categories>
        <category>前端插件</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>Swiper</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 不同数据类型的相互转换规则</title>
    <url>/posts/8a7b4226/</url>
    <content><![CDATA[<p><strong>对象和对象进行比较的时候：比较的是空间地址</strong>，如果空间地址相同就是 true，不同就是 false</p>
<ul>
<li><code>&#123;&#125;==&#123;&#125;(false)</code></li>
</ul>
<p>不同的数据类型再进行比较的时候，<strong>除了以下的，剩下的都是先转换为数字在比较</strong>：</p>
<ul>
<li><p>对象和字符串进行比较的时候，把对象转换为字符串，再进行比较</p>
</li>
<li><p>null 和 undefined 永远不等于任何一种数据类型，但是 <code>null==undefined(true)</code> <code>null===undefined(false)</code></p>
</li>
<li><p><strong>NaN 永远不等于任何一种数据类型，包括它自己</strong></p>
<p>可以使用 <code>Object.is(NaN, NaN)-&gt;true</code> 检测</p>
</li>
</ul>
<a id="more"></a>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">![] == <span class="literal">true</span>       <span class="comment">// false ![]=&gt;false转为布尔取反</span></span><br><span class="line">![] == []         <span class="comment">// true  ![]=&gt;false=&gt;Number(false)=&gt;0 Number([].toString())=&gt;0</span></span><br><span class="line">[] = <span class="literal">false</span>        <span class="comment">// true</span></span><br><span class="line">![] == <span class="literal">false</span>      <span class="comment">// true</span></span><br><span class="line"><span class="literal">NaN</span> == <span class="literal">NaN</span>        <span class="comment">// false</span></span><br><span class="line"><span class="literal">null</span> == <span class="literal">undefined</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure>



<h2 id="对象数据转换规则"><a href="#对象数据转换规则" class="headerlink" title="对象数据转换规则"></a>对象数据转换规则</h2><blockquote>
<p>原始值：number string boolean null undefined symbol bigint</p>
</blockquote>
<p><strong>对象数据转换规则：</strong></p>
<ol>
<li>首先检测对象 <code>Symbol.toPrimitive</code> 这个属性，获取其原始值</li>
<li>如果没有这个属性，继续调用它的 <code>valueOf</code>，也是获取原始值</li>
<li>如果值不是原始值，则继续调用 <code>toString</code> 转换字符串</li>
<li>如果需要转换数字，再把字符串基于 Number 转换为数字</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    name: <span class="string">&quot;lion&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(obj - <span class="number">10</span>);</span><br><span class="line">obj[<span class="built_in">Symbol</span>.toPrimitive]; <span class="comment">// undefined</span></span><br><span class="line">obj.valueOf(); <span class="comment">// &#123;name: &quot;lion&quot;&#125; 不是原始值</span></span><br><span class="line">obj.toString(); <span class="comment">//&quot;[object Object]&quot;</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="string">&quot;[object Object]&quot;</span>); <span class="comment">// NaN</span></span><br><span class="line"><span class="literal">NaN</span> - <span class="number">10</span>; <span class="comment">// NaN</span></span><br></pre></td></tr></table></figure>

<ul>
<li>了解数据转换规则后，来看一道题</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = ?</span><br><span class="line"><span class="keyword">if</span> (a == <span class="number">1</span> &amp;&amp; a == <span class="number">2</span> &amp;&amp; a == <span class="number">3</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;OK&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>第一类方法：隐式进行数据类型转换</p>
<p>修改 <code>Symbol.toPrimitive</code>、 <code>valueOf</code>、  <code>toString</code>任意一个即可 </p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 通过 ++i 改值</span></span><br><span class="line"><span class="keyword">var</span> a = &#123;</span><br><span class="line">    i: <span class="number">0</span>,</span><br><span class="line">    [<span class="built_in">Symbol</span>.toPrimitive]: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ++<span class="built_in">this</span>.i;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">if</span> (a == <span class="number">1</span> &amp;&amp; a == <span class="number">2</span> &amp;&amp; a == <span class="number">3</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;OK&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过调用函数，删除值</span></span><br><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">a.valueOf = a.shift;</span><br><span class="line"><span class="keyword">if</span> (a == <span class="number">1</span> &amp;&amp; a == <span class="number">2</span> &amp;&amp; a == <span class="number">3</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;OK&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>第二类方法：ES6 数据劫持</p>
<p>用 <code>defineProperty</code> 定义</p>
<ul>
<li>第一个参数是对象</li>
<li>第二个参数是属性名</li>
<li>第三个参数是特征值</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(<span class="built_in">global</span>, <span class="string">&quot;a&quot;</span>, &#123;</span><br><span class="line">    <span class="function"><span class="title">get</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ++i;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">if</span> (a == <span class="number">1</span> &amp;&amp; a == <span class="number">2</span> &amp;&amp; a == <span class="number">3</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;OK&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="其他类型转换为数字"><a href="#其他类型转换为数字" class="headerlink" title="其他类型转换为数字"></a>其他类型转换为数字</h2><h3 id="Number"><a href="#Number" class="headerlink" title="Number"></a>Number</h3><p>一般用于隐式转换【数学运算、isNaN、==比较…】</p>
<ul>
<li>字符串：<ul>
<li>如果是空字符穿，转换结果 0</li>
<li>如果说字符串中包含非有效数字，转换结果就是 NaN</li>
</ul>
</li>
<li>布尔类型<ul>
<li>true：转换为1</li>
<li>false：转换为0</li>
</ul>
</li>
<li><strong>null：转换为0</strong></li>
<li><strong>undefined：NaN</strong></li>
<li>Symbol：报错</li>
<li>BigInt ：正常转换</li>
<li>对象：<strong>遵循对象数据转换规则</strong></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Number</span>(<span class="string">&quot;123px&quot;</span>)     <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="literal">undefined</span>)   <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="literal">false</span>)       <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="literal">true</span>)        <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="literal">null</span>)        <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="string">&quot;&quot;</span>)          <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Number</span>([])          <span class="comment">// 0  Number([]) ==&gt; [].toString() ==&gt; &quot;&quot; ==&gt; Number(&quot;&quot;) ==&gt; 0</span></span><br></pre></td></tr></table></figure>

<h3 id="parseInt"><a href="#parseInt" class="headerlink" title="parseInt"></a>parseInt</h3><p><code>parseInt([val], [radix])</code></p>
<ul>
<li>[val] <strong>必须是一个字符串，如果不是，也要默认转换为字符串</strong></li>
<li>[radix] 不设置（写零）：按十进制处理，如果字符串以<code>0x</code>开头，默认是16进制</li>
</ul>
<p><strong>从左往右查找 [val] 中，找到所有符合 [radix] 进制的内容，直到遇到不符合的停止查找</strong>（不论后面是否还有符合的）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">parseInt</span>(<span class="string">&#x27;12px&#x27;</span>)    <span class="comment">// 12</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&#x27;12px&#x27;</span>, <span class="number">1</span>) <span class="comment">// NaN</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Number</span>(<span class="literal">null</span>) <span class="comment">//0</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="literal">null</span>))     <span class="comment">// NaN -&gt;parseInt(&#x27;null&#x27;, 10)</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="string">&#x27;&#x27;</span>) <span class="comment">//0</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&#x27;&#x27;</span>) <span class="comment">//NaN</span></span><br></pre></td></tr></table></figure>

<ul>
<li>radix 2-36 之间</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">27.2</span>, <span class="number">0</span>, <span class="string">&quot;0013&quot;</span>, <span class="string">&quot;14px&quot;</span>, <span class="number">123</span>];</span><br><span class="line">arr = arr.map(<span class="built_in">parseInt</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// [ 27, NaN, 1, 1, 27 ]</span></span><br></pre></td></tr></table></figure>



<h2 id="其他类型转换为字符串"><a href="#其他类型转换为字符串" class="headerlink" title="其他类型转换为字符串"></a>其他类型转换为字符串</h2><ul>
<li><p><code>toString()</code><br><strong>null、undefined 没有 <code>toString()</code> 这个方法</strong>，用了会报错，可以使用 <code>String()</code></p>
<p>需要排除 <code>Object.prototype.toString</code> 检测数据类型</p>
</li>
<li><p>字符串/模板字符串拼接（<code>+</code> 除了数学运算还有字符串拼接）</p>
</li>
</ul>
<h3 id="字符串拼接"><a href="#字符串拼接" class="headerlink" title="+ 字符串拼接"></a>+ 字符串拼接</h3><p><strong>情况1：</strong><code>+</code> 左右两边有一边出现字符串或部分对象，则按照字符串拼接处理</p>
<ul>
<li>特殊：<code>&#123;&#125; + 10 -&gt; 10</code> {} 看做代码块（ES6块级上下文）</li>
</ul>
<p><strong>注意：不是所有对象都是字符串拼接</strong></p>
<ul>
<li>先去调取对象的 <code>Symbol.toPrimitive</code> 属性值，如果没有这个属性</li>
<li>再去调取对象的 <code>valueOf</code> 获取原始值，如果不是原始值</li>
<li>再去调用对象的 <code>toString</code> 转换为字符串（如果是想转换为数字，则还会调用 Number 处理）</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">10</span> + <span class="string">&quot;10&quot;</span> <span class="comment">// &quot;1010&quot;</span></span><br><span class="line"><span class="number">10</span> + [<span class="number">10</span>] <span class="comment">// 1010; [10].toString() = &#x27;10&#x27;</span></span><br><span class="line"><span class="number">10</span> + <span class="keyword">new</span> <span class="built_in">Number</span>(<span class="number">10</span>) <span class="comment">// 20; new Number(10).valueOf() = 10</span></span><br><span class="line">&#123;&#125; + <span class="number">10</span>   <span class="comment">// 10</span></span><br><span class="line"><span class="number">10</span> + &#123;&#125;   <span class="comment">// &quot;10[object Object]&quot;; &#123;&#125;.toString() = [object Object]</span></span><br><span class="line">(&#123;&#125; + <span class="number">10</span>) <span class="comment">// &quot;[object Object]10&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  x: <span class="number">10</span>,</span><br><span class="line">  <span class="comment">// obj[Symbol.toPrimitive valueOf toString]</span></span><br><span class="line">  [<span class="built_in">Symbol</span>.toPrimitive](hint) &#123;</span><br><span class="line">    <span class="comment">// console.log(hint) // default string number</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.x</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">10</span> + obj) <span class="comment">// 20</span></span><br></pre></td></tr></table></figure>

<p><strong>情况2：</strong>只有一边有 <code>+</code> </p>
<ul>
<li><p><code>+</code> 只有一边或<code>++x</code>或<code>x++</code> ，都是数学运算</p>
<p><code>10+(++x) </code>先把x累加1，然后和10运算</p>
<p><code>10+(x++)</code> 先把x的值和10运算，然后x累加1</p>
</li>
<li><p>注意：<code>x++ </code>只会进行数学运算，<code>x+=1</code> 和 <code>x=x+1</code> 不仅会进行数学运算还可能进行字符串拼接</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">+<span class="string">&quot;10&quot;</span> <span class="comment">// 10</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="string">&quot;10&quot;</span></span><br><span class="line"><span class="number">10</span>+(x++) <span class="comment">// 20</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> x = <span class="string">&quot;10&quot;</span></span><br><span class="line"><span class="number">10</span>+(++x) <span class="comment">// 21</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> x = <span class="string">&quot;10&quot;</span></span><br><span class="line">x+=<span class="number">1</span>    <span class="comment">// &quot;101&quot;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>了解数据转换规则和字符串拼接后，来看一道题</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> result = <span class="number">100</span> + <span class="literal">true</span> + <span class="number">21.2</span> + <span class="literal">null</span> + <span class="literal">undefined</span> + <span class="string">&quot;Tencent&quot;</span> + [] + <span class="literal">null</span> + <span class="number">9</span> + <span class="literal">false</span>;</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// NaNTencentnull9false</span></span><br></pre></td></tr></table></figure>



<h2 id="其他类型转换为布尔"><a href="#其他类型转换为布尔" class="headerlink" title="其他类型转换为布尔"></a>其他类型转换为布尔</h2><ul>
<li><p>![值]  转换为布尔并取反</p>
</li>
<li><p>!![值]  转换为布尔</p>
</li>
</ul>
<p><strong>除了以下几种结果都是false，剩余的都是true</strong></p>
<ul>
<li>NaN</li>
<li>0</li>
<li>“”</li>
<li>null</li>
<li>undefined</li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>数据类型转换</tag>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 数组去重的四种方法</title>
    <url>/posts/908d091d/</url>
    <content><![CDATA[<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol>
<li>双 for 循环去重</li>
<li>借用对象属性不能相同特点去重</li>
<li>新建数组去存储不同值（includes 与 indexOf 的区别）</li>
<li>ES6 Set去重</li>
</ol>
<a id="more"></a>

<h3 id="方法一：双-for-循环"><a href="#方法一：双-for-循环" class="headerlink" title="方法一：双 for 循环"></a>方法一：双 for 循环</h3><ul>
<li>原理：依次拿出数组中的每一项，和它后面的所有剩余项进行比较，如果有相同的就删除</li>
<li>NaN 与任何值都不相等，包括 NaN 本身</li>
<li><code>null==undefined(true)</code> </li>
<li>对象和对象比较的是空间地址：<code>&#123;&#125;==&#123;&#125;(false)</code></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, &#123;&#125;, &#123;&#125;, <span class="literal">NaN</span>, <span class="literal">NaN</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">undefined</span>, <span class="literal">undefined</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique1</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> el1 = arr[i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = i + <span class="number">1</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line">            <span class="keyword">var</span> el2 = arr[j];</span><br><span class="line">            <span class="keyword">if</span> (el1 == el2) &#123;</span><br><span class="line">                arr.splice(j, <span class="number">1</span>);</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(unique1(arr)); <span class="comment">// [ 1, 2, &#123;&#125;, &#123;&#125;, NaN, null]</span></span><br></pre></td></tr></table></figure>

<h3 id="方法二：借用对象属性不能相同特点去重"><a href="#方法二：借用对象属性不能相同特点去重" class="headerlink" title="方法二：借用对象属性不能相同特点去重"></a>方法二：借用对象属性不能相同特点去重</h3><ul>
<li>原理：创建一个空对象，去遍历数组中的每一项，把数组中的每项当成属性名和属性值，给此对象添加，在添加的过程中，如果此对象已经有此项，说明重复，在数组中删除此项</li>
<li>访问对象的属性如果属性不存在返回 undefined，<code>obj[null]</code> 返回 undefined</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, &#123;&#125;, &#123;&#125;, <span class="literal">NaN</span>, <span class="literal">NaN</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">undefined</span>, <span class="literal">undefined</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique2</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> el = arr[i];</span><br><span class="line">        <span class="comment">// typeof (obj[el]) != &quot;undefined&quot;</span></span><br><span class="line">        <span class="keyword">if</span> (obj[el] == el) &#123;</span><br><span class="line">            arr.splice(i, <span class="number">1</span>);</span><br><span class="line">            i--;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        obj[el] = el;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(unique2(arr)); <span class="comment">// [ 1, 2, &#123;&#125;, &#123;&#125;, NaN, NaN ]</span></span><br></pre></td></tr></table></figure>

<h3 id="方法三：新建数组去存储不同值"><a href="#方法三：新建数组去存储不同值" class="headerlink" title="方法三：新建数组去存储不同值"></a>方法三：新建数组去存储不同值</h3><ul>
<li>原理：创建一个新数组，去遍历数组中的每一项，如果新数组没有这个（利用 indexOf） push 进新数组</li>
<li>indexOf 比较参数与数组中的每一项时，会使用全等操作符（===）</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, &#123;&#125;, &#123;&#125;, <span class="literal">NaN</span>, <span class="literal">NaN</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">undefined</span>, <span class="literal">undefined</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique3</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> newArr = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> el = arr[i];</span><br><span class="line">        <span class="comment">// newArr.indexOf(el) &lt; 0 说明没有</span></span><br><span class="line">        <span class="keyword">if</span> (newArr.indexOf(el) == -<span class="number">1</span>) &#123;</span><br><span class="line">            newArr.push(el);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newArr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(unique3(arr)); <span class="comment">// [ 1, 2, &#123;&#125;, &#123;&#125;, NaN, NaN, null, undefined ]</span></span><br></pre></td></tr></table></figure>

<ul>
<li>原理：与上面那个同理</li>
<li>includes 可以去重 NaN</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, &#123;&#125;, &#123;&#125;, <span class="literal">NaN</span>, <span class="literal">NaN</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">undefined</span>, <span class="literal">undefined</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique4</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> newArr = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> el = arr[i];</span><br><span class="line">        <span class="keyword">if</span> (!newArr.includes(el)) &#123;</span><br><span class="line">            newArr.push(el);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newArr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(unique4(arr)); <span class="comment">// [ 1, 2, &#123;&#125;, &#123;&#125;, NaN, null, undefined ]</span></span><br></pre></td></tr></table></figure>

<p><strong>includes 与 indexOf 的区别</strong></p>
<ul>
<li>如果数组里只有 NaN，利用 indexOf 是无法判断的，必须使用 includes 方法</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="literal">NaN</span>]</span><br><span class="line">arr.indexOf(<span class="literal">NaN</span>)   <span class="comment">// -1</span></span><br><span class="line">arr.includes(<span class="literal">NaN</span>)  <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr1 = [<span class="literal">undefined</span>]</span><br><span class="line">arr1.indexOf(<span class="literal">undefined</span>)  <span class="comment">// 0</span></span><br><span class="line">arr1.includes(<span class="literal">undefined</span>) <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr2 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1</span>)</span><br><span class="line">arr2.indexOf(<span class="literal">undefined</span>)  <span class="comment">// -1</span></span><br><span class="line">arr2.includes(<span class="literal">undefined</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h3 id="方法四：ES6-Set去重"><a href="#方法四：ES6-Set去重" class="headerlink" title="方法四：ES6 Set去重"></a>方法四：ES6 Set去重</h3><ul>
<li>这种方法无法去掉 “{}” 空对象</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, &#123;&#125;, &#123;&#125;, <span class="literal">NaN</span>, <span class="literal">NaN</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">undefined</span>, <span class="literal">undefined</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique5</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Array</span>.from(<span class="keyword">new</span> <span class="built_in">Set</span>(arr));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(unique5(arr)); <span class="comment">// [ 1, 2, &#123;&#125;, &#123;&#125;, NaN, null, undefined ]</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>基础</tag>
        <tag>前端</tag>
        <tag>数组</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 实现奇偶行变色</title>
    <url>/posts/97acee74/</url>
    <content><![CDATA[<h1 id="JS实现奇偶行变色，鼠标滑上改变颜色，离开恢复颜色"><a href="#JS实现奇偶行变色，鼠标滑上改变颜色，离开恢复颜色" class="headerlink" title="JS实现奇偶行变色，鼠标滑上改变颜色，离开恢复颜色"></a>JS实现奇偶行变色，鼠标滑上改变颜色，离开恢复颜色</h1><blockquote>
<p>css 奇偶行变色是通过 <code>li:nth(odd)</code> 和 <code>li:nth(even)</code> 实现的，鼠标滑上改变颜色，离开恢复颜色是通过 <code>:hover</code> 实现的</p>
</blockquote>
<a id="more"></a>

<ul>
<li>首先搭一下基本结构</li>
</ul>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/js-img/%E9%9A%94%E8%A1%8C%E5%8F%98%E8%89%B2-%E5%9F%BA%E6%9C%AC%E6%A0%B7%E5%BC%8F.jpg" alt="隔行变色-基本样式"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;main&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span>走在前方不迷路，迷路就去找麋鹿<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span>走在前方不迷路，迷路就去找麋鹿<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span>走在前方不迷路，迷路就去找麋鹿<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span>走在前方不迷路，迷路就去找麋鹿<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> main = <span class="built_in">document</span>.getElementById(<span class="string">&quot;main&quot;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> lst = main.getElementsByTagName(<span class="string">&quot;li&quot;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; lst.length; i++) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> el = lst[i];</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="javascript">            el.style.background = <span class="string">&quot;lightblue&quot;</span>;</span></span><br><span class="line"><span class="javascript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">            el.style.background = <span class="string">&quot;lightgreen&quot;</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="错误示范"><a href="#错误示范" class="headerlink" title="错误示范"></a>错误示范</h2><ul>
<li><p>在 for 循环里添加如下代码（添加在尾部）</p>
<p>这里希望 <code>oldColor</code> 保存每一个 li 鼠标滑上之前的颜色</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> oldColor = el.style.background;</span><br><span class="line">el.onmouseover = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 鼠标滑上变色</span></span><br><span class="line">    <span class="built_in">this</span>.style.background = <span class="string">&quot;green&quot;</span>;</span><br><span class="line">&#125;;</span><br><span class="line">el.onmouseout = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 鼠标离开之后恢复原色</span></span><br><span class="line">    <span class="built_in">this</span>.style.background = oldColor;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li>测试一下效果，发现出现如下问题：鼠标滑过，所有 li 都变成最后一行 li 的颜色</li>
</ul>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/js-img/%E9%9A%94%E8%A1%8C%E5%8F%98%E8%89%B2-%E5%87%BA%E7%8E%B0%E9%97%AE%E9%A2%98.gif" alt="隔行变色-出现问题"></p>
<ul>
<li><p>剖析一下问题所在</p>
<p><strong>首先 for 循环会先执行一遍，并给每一个 li 添加鼠标滑上和离开事件，当鼠标滑上或离开时，此时 for 循环已经结束，此时调用的是每一个 li 已经添加上的事件</strong>。循环结束后 oldColor 已经变成最后一个 li 的颜色，所以触发离开事件更改的颜色永远是最后一个 li 的颜色，因此会出现如上问题</p>
</li>
</ul>
<h2 id="问题示范"><a href="#问题示范" class="headerlink" title="问题示范"></a>问题示范</h2><ul>
<li>与上面的问题，区别只在于奇偶行在赋值颜色时，是通过类添加的</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">	<span class="selector-class">.color1</span> &#123;</span></span><br><span class="line">        background: lightblue;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.color2</span> &#123;</span></span><br><span class="line">        background: lightgreen;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> main = <span class="built_in">document</span>.getElementById(<span class="string">&quot;main&quot;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> lst = main.getElementsByTagName(<span class="string">&quot;li&quot;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; lst.length; i++) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="javascript">            lst[i].style.background = <span class="string">&quot;lightblue&quot;</span>;</span></span><br><span class="line"><span class="javascript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">            lst[i].style.background = <span class="string">&quot;lightgreen&quot;</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>在 for 循环里添加如下代码（添加在尾部），发现这个效果是正常的</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> oldColor = lst[i].style.background;</span><br><span class="line">lst[i].onmouseover = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.style.background = <span class="string">&quot;green&quot;</span>;</span><br><span class="line">&#125;;</span><br><span class="line">lst[i].onmouseout = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.style.background = oldColor;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><img data-src="https://gitee.com/lilyn/pic/raw/master/js-img/%E9%9A%94%E8%A1%8C%E5%8F%98%E8%89%B2-%E6%AD%A3%E7%A1%AE%E6%98%BE%E7%A4%BA.gif" alt="隔行变色-正确显示"></p>
<ul>
<li><p>但是有一些问题</p>
<p><code>var oldColor = el.style.background</code> 这个只能获取行内样式</p>
<p>但是如上代码是<strong>通过添加类的方法去设置 li 的颜色，使用 style 属性没办法获取，所以 oldColor 实际存储的是一个空字符串</strong>。因此，鼠标滑上实际上是给 li 添加行内式代码，鼠标离开后，把行内代码变为 “” 去掉，就相当于没添加效果，此时采用的是内嵌样式（也是就通过类名添加的样式）</p>
</li>
</ul>
<h2 id="正确方法"><a href="#正确方法" class="headerlink" title="正确方法"></a>正确方法</h2><h3 id="方法一：给-this-添加新属性"><a href="#方法一：给-this-添加新属性" class="headerlink" title="方法一：给 this 添加新属性"></a>方法一：给 this 添加新属性</h3><p>给每个 li 上添加一个 bgColor 属性，鼠标离开时，只需访问这个 bgColor 查到值，恢复原有颜色即可</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 鼠标滑上li的时候，改变那个li的背景颜色</span></span><br><span class="line">lst[i].onmouseover = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 把原有的颜色绑定上去</span></span><br><span class="line">    <span class="built_in">this</span>.bgColor = <span class="built_in">this</span>.style.backgroundColor;</span><br><span class="line">    <span class="built_in">this</span>.style.background = <span class="string">&quot;green&quot;</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 鼠标离开的时候，恢复原有的颜色</span></span><br><span class="line">lst[i].onmouseout = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.style.background = <span class="built_in">this</span>.bgColor;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="方法二：闭包"><a href="#方法二：闭包" class="headerlink" title="方法二：闭包"></a>方法二：闭包</h3><p>手动添加一层作用域（用闭包形式），里面把鼠标事件赋值给 li 标签，被占用形成不销毁的作用域，x 是私有变量（形参），之后把私有变量 oldColor 存到闭包作用域中，当鼠标事件发生在 li 标签时，就会找到闭包作用域中的私有变量 oldColor</p>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/js-img/%E9%97%AD%E5%8C%85-%E9%9A%94%E8%A1%8C%E5%8F%98%E8%89%B2lst%5B1%5D.jpg" alt="闭包-隔行变色lst[1]"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> oldColor = lst[x].style.background;</span><br><span class="line">    lst[x].onmouseover = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.style.background = <span class="string">&quot;green&quot;</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    lst[x].onmouseout = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.style.background = oldColor;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;)(i);</span><br></pre></td></tr></table></figure>

<h3 id="方法三：let"><a href="#方法三：let" class="headerlink" title="方法三：let"></a>方法三：let</h3><ul>
<li>其实跟方法二是一样的，原理在剖析处</li>
</ul>
<p>在 for 循环里添加如下代码（添加在尾部），这里只需把 oldColor 前面的 var 改成 let 即可</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> oldColor = lst[i].style.background;</span><br><span class="line">lst[i].onmouseover = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.style.background = <span class="string">&quot;green&quot;</span>;</span><br><span class="line">&#125;;</span><br><span class="line">lst[i].onmouseout = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.style.background = oldColor;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>接下来<strong>剖析</strong>一下这个为什么会成功</p>
<p>在 for 循环中，<strong>变量 oldColor 是用 var 声明的，在全局范围都有效，所以全局只有一个变量 oldColor。每一次循环，变量 oldColor 的值都发生改变</strong>。也就是说，所有 li 的鼠标离开事件绑定的颜色都是最后一个 li 的颜色。我们可以小试验验证一下</p>
<p>方法：在 for 循环外面添加 <code>oldColor = &quot;red&quot;</code> ，发现鼠标离开后所有 li 都变成红色，证明每一次循环 oldColor 被改变后，前面几次循环， li 离开事件绑定的颜色也都发生了改变</p>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/js-img/%E9%9A%94%E8%A1%8C%E5%8F%98%E8%89%B2-%E5%B0%8F%E8%AF%95%E9%AA%8C.gif" alt="隔行变色-小试验"></p>
</li>
</ul>
<p>  而 <strong>let 声明的 oldColor 只在本轮循环中有效，所以每一次循环的 oldColor 其实都是一个新的变量</strong>，因此所有 li 的鼠标离开事件绑定的颜色都是当前 li 的颜色，所以效果会成功</p>
<p>  可以去 <a href="babeljs.cn/repl">babel</a> 网站，看一下 let 都做了什么</p>
<p>  <img data-src="https://gitee.com/lilyn/pic/raw/master/js-img/%E9%97%AD%E5%8C%85-%E9%9A%94%E8%A1%8C%E5%8F%98%E8%89%B2let.png" alt="闭包-隔行变色let"></p>
<hr>

<h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">            * &#123;</span><br><span class="line">                margin: 0;</span><br><span class="line">                padding: 0;</span><br><span class="line">            &#125;</span><br><span class="line">            body &#123;</span><br><span class="line">                background: darkturquoise;</span><br><span class="line">            &#125;</span><br><span class="line">            ul &#123;</span><br><span class="line">                list-style: none;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="css">            <span class="selector-id">#main</span> &#123;</span></span><br><span class="line">                width: 500px;</span><br><span class="line">                margin: auto;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="css">            <span class="selector-id">#main</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line">                height: 50px;</span><br><span class="line">                line-height: 50px;</span><br><span class="line">                text-align: center;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;main&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>走在前方不迷路，迷路就去找麋鹿<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>走在前方不迷路，迷路就去找麋鹿<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>走在前方不迷路，迷路就去找麋鹿<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>走在前方不迷路，迷路就去找麋鹿<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> main = <span class="built_in">document</span>.getElementById(<span class="string">&quot;main&quot;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> lst = main.getElementsByTagName(<span class="string">&quot;li&quot;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; lst.length; i++) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> el = lst[i];</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="javascript">            el.style.background = <span class="string">&quot;lightblue&quot;</span>;</span></span><br><span class="line"><span class="javascript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">            el.style.background = <span class="string">&quot;lightgreen&quot;</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> oldColor = el.style.background;</span></span><br><span class="line"><span class="javascript">        el.onmouseover = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.bgColor = <span class="built_in">this</span>.style.backgroundColor;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.style.background = <span class="string">&quot;green&quot;</span>;</span></span><br><span class="line">        &#125;;</span><br><span class="line"><span class="javascript">        el.onmouseout = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.style.background = <span class="built_in">this</span>.bgColor;</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img data-src="https://gitee.com/lilyn/pic/raw/master/js-img/%E9%9A%94%E8%A1%8C%E5%8F%98%E8%89%B2-%E6%AD%A3%E7%A1%AE%E6%98%BE%E7%A4%BA.gif" alt="隔行变色-正确显示"></p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>问题</tag>
        <tag>闭包</tag>
        <tag>this</tag>
      </tags>
  </entry>
</search>
