<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Axios 二次封装</title>
    <url>/posts/84a23fec/</url>
    <content><![CDATA[<blockquote>
<p>目的：把当前项目中，所有请求的公共部分进行统一处理</p>
</blockquote>
<ul>
<li><code>axios.defaults</code> 设置公共的配置项</li>
<li><code>axios.interceptors</code> 基于拦截器做统一处理</li>
</ul>
<a id="more"></a>

<p>配置请求接口的统一前缀</p>
<ul>
<li>开发 <code>development</code></li>
<li>测试 <code>test</code></li>
<li>灰度 <code>grayscale</code></li>
<li>生成 <code>production</code></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Qs <span class="keyword">from</span> <span class="string">&#x27;qs&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;@/router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; Message &#125; <span class="keyword">from</span> <span class="string">&#x27;element-ui&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Cookies <span class="keyword">from</span> <span class="string">&#x27;js-cookie&#x27;</span></span><br><span class="line"></span><br><span class="line">axios.defaults.baseURL =</span><br><span class="line">  process.env.NODE_ENV === <span class="string">&#x27;development&#x27;</span> ? <span class="string">&#x27;&#x27;</span> : <span class="string">&#x27;http://127.0.0.1:9999&#x27;</span></span><br><span class="line">axios.defaults.withCredentials = <span class="literal">true</span> <span class="comment">// 设置跨域请求中是否携带资源凭证</span></span><br><span class="line">axios.defaults.timeout = <span class="number">1000</span></span><br><span class="line">axios.defaults.headers.post[<span class="string">&#x27;Content-Type&#x27;</span>] =</span><br><span class="line">  <span class="string">&#x27;application/x-www-form-urlencoded;charset=UTF-8&#x27;</span> <span class="comment">// 配置公共的自定义请求头信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// POST系列请求对于请求主体信息的统一格式化</span></span><br><span class="line">axios.defaults.transformRequest = <span class="function"><span class="keyword">function</span> (<span class="params">data, headers</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (data === <span class="literal">null</span> || <span class="keyword">typeof</span> data !== <span class="string">&#x27;object&#x27;</span>) <span class="keyword">return</span> data</span><br><span class="line">  <span class="keyword">let</span> contentType = headers[<span class="string">&#x27;Content-Type&#x27;</span>] || headers.post[<span class="string">&#x27;Content-Type&#x27;</span>]</span><br><span class="line">  <span class="keyword">if</span> (contentType.includes(<span class="string">&#x27;urlencoded&#x27;</span>)) <span class="keyword">return</span> Qs.stringify(data)</span><br><span class="line">  <span class="keyword">if</span> (contentType.includes(<span class="string">&#x27;json&#x27;</span>)) <span class="keyword">return</span> <span class="built_in">JSON</span>.stringify(data)</span><br><span class="line">  <span class="keyword">return</span> data</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 设置响应状态码的校验处理&#123;状态码哪些是算请求成功，哪些算失败&#125;</span></span><br><span class="line">axios.defaults.validateStatus = <span class="function"><span class="keyword">function</span> (<span class="params">status</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> status &gt;= <span class="number">200</span> &amp;&amp; status &lt; <span class="number">400</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 请求拦截器，在向服务器发送请求之前，拦截到现有的配置，再去做一些统一修改</span></span><br><span class="line">axios.interceptors.request.use(</span><br><span class="line">  config =&gt; &#123;</span><br><span class="line">    <span class="comment">// 是否需要设置 token</span></span><br><span class="line">    <span class="keyword">const</span> token = Cookies.get(<span class="string">&#x27;token&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> (token) &#123;</span><br><span class="line">      config.headers[<span class="string">&#x27;Authorization&#x27;</span>] = token</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> config</span><br><span class="line">  &#125;,</span><br><span class="line">  error =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error) <span class="comment">// for debug</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 响应拦截器，当前请求有结果之后，做一些成功或者失败的统一提示处理等...</span></span><br><span class="line">axios.interceptors.response.use(</span><br><span class="line">  response =&gt; &#123;</span><br><span class="line">    <span class="comment">// 服务器正常返回结果 &amp; validateStatus状态码校验成功</span></span><br><span class="line">    <span class="keyword">return</span> response.data</span><br><span class="line">  &#125;,</span><br><span class="line">  error =&gt; &#123;</span><br><span class="line">    <span class="comment">// 取消请求也会在这里拦截到</span></span><br><span class="line">    <span class="keyword">if</span> (error.message === <span class="string">&#x27;取消请求&#x27;</span>) <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(<span class="string">&#x27;取消请求&#x27;</span>)</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    失败情况：</span></span><br><span class="line"><span class="comment">    1.服务器返回了结果但是状态码没有经过validateStatus校验</span></span><br><span class="line"><span class="comment">    2.服务器压根没有返回任何的结果</span></span><br><span class="line"><span class="comment">    3.请求中断或者超时</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">let</span> response = error.response</span><br><span class="line">    <span class="keyword">if</span> (response) &#123;</span><br><span class="line">      <span class="comment">// @1</span></span><br><span class="line">      <span class="keyword">switch</span> (response.status) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">401</span>:</span><br><span class="line">          router.push(&#123; <span class="attr">path</span>: <span class="string">&#x27;/login&#x27;</span> &#125;)</span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">500</span>:</span><br><span class="line">          router.push(&#123; <span class="attr">path</span>: <span class="string">&#x27;/login&#x27;</span> &#125;)</span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">      &#125;</span><br><span class="line">      Message(&#123;</span><br><span class="line">        message: <span class="string">&#x27;访问失败，请联系系统管理员&#x27;</span>,</span><br><span class="line">        type: <span class="string">&#x27;warning&#x27;</span>,</span><br><span class="line">        duration: <span class="number">3</span> * <span class="number">1000</span>,</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (error &amp;&amp; error.code === <span class="string">&#x27;ECONNABORTED&#x27;</span>) &#123;</span><br><span class="line">        Message(&#123;</span><br><span class="line">          message: <span class="string">&#x27;服务器拒绝了您的请求&#x27;</span>,</span><br><span class="line">          type: <span class="string">&#x27;warning&#x27;</span>,</span><br><span class="line">          duration: <span class="number">3</span> * <span class="number">1000</span>,</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (!navigator.onLine) &#123;</span><br><span class="line">        Message(&#123;</span><br><span class="line">          message: <span class="string">&#x27;设备已离线&#x27;</span>,</span><br><span class="line">          type: <span class="string">&#x27;warning&#x27;</span>,</span><br><span class="line">          duration: <span class="number">3</span> * <span class="number">1000</span>,</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> axios</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>Axios</tag>
        <tag>封装</tag>
      </tags>
  </entry>
  <entry>
    <title>Axios 取消请求</title>
    <url>/posts/a688a8da/</url>
    <content><![CDATA[<h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p>取消请求偶尔会用到，以下是两个工作中可能用到的场景</p>
<ol>
<li>如果一个数据请求量比较大（可能会请求错误），还没请求完就切换路由，可能会出现错误的提示框（响应拦截器中配置错误提示）</li>
<li>导出文件或下载文件时，中途取消</li>
<li>一个请求请求量比较大，发送新请求时需要取消上一个请求</li>
</ol>
<a id="more"></a>

<h3 id="取消单个请求（结合生命周期使用）"><a href="#取消单个请求（结合生命周期使用）" class="headerlink" title="取消单个请求（结合生命周期使用）"></a>取消单个请求（结合生命周期使用）</h3><ul>
<li>页面销毁时取消请求</li>
<li>重复发送请求取消上一次请求</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; generatePlan &#125; <span class="keyword">from</span> <span class="string">&#x27;@/api&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">destroyed</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.cancelPost()</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    <span class="function"><span class="title">generateList</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.$confirm(<span class="string">&#x27;生成时间比较长，您是否确定生成？&#x27;</span>, <span class="string">&#x27;警告&#x27;</span>, &#123;</span><br><span class="line">        confirmButtonText: <span class="string">&#x27;确定&#x27;</span>,</span><br><span class="line">        cancaelButtonText: <span class="string">&#x27;取消&#x27;</span>,</span><br><span class="line">      &#125;)</span><br><span class="line">        .then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> self = <span class="built_in">this</span></span><br><span class="line">          <span class="built_in">this</span>.cancelPost()</span><br><span class="line">          <span class="comment">// post请求</span></span><br><span class="line">          <span class="keyword">return</span> generatePlan(&#123;</span><br><span class="line">            params: <span class="built_in">this</span>.listQuery,</span><br><span class="line">            cancelToken: <span class="keyword">new</span> axios.CancelToken(<span class="function"><span class="keyword">function</span> <span class="title">exector</span>(<span class="params">c</span>) </span>&#123;</span><br><span class="line">              self.$cancel = c</span><br><span class="line">            &#125;),</span><br><span class="line">          &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (res.code === <span class="number">200</span>) <span class="built_in">this</span>.list = res.data.result</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">        .catch(<span class="function">() =&gt;</span> &#123;&#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">cancelPost</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">typeof</span> <span class="built_in">this</span>.$cancel === <span class="string">&#x27;function&#x27;</span> ? <span class="built_in">this</span>.$cancel(<span class="string">&#x27;取消请求&#x27;</span>) : <span class="literal">null</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="取消所有请求（结合导航守卫）"><a href="#取消所有请求（结合导航守卫）" class="headerlink" title="取消所有请求（结合导航守卫）"></a>取消所有请求（结合导航守卫）</h3><p>思路：在请求拦截器中，给所有请求加一个 token，设置全局变量 source 控制 cancel token，在路由变化时调用 cancel 方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">http.interceptors.request.use(</span><br><span class="line">  config =&gt; &#123;</span><br><span class="line">    config.cancelToken = store.source.token</span><br><span class="line">    <span class="keyword">return</span> config</span><br><span class="line">  &#125;,</span><br><span class="line">  error =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> CancelToken = axios.CancelToken</span><br><span class="line">  store.source.cancel &amp;&amp; store.source.cancel()</span><br><span class="line">  store.source = CancelToken.source()</span><br><span class="line">  next()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="axios-取消请求原理"><a href="#axios-取消请求原理" class="headerlink" title="axios 取消请求原理"></a>axios 取消请求原理</h3><p>axios 是对 XMLHttpRequest 的封装，使用 XMLHttpRequest 实例的 abort()方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// https://github.com/axios/axios/blob/master/lib/adapters/xhr.js</span></span><br><span class="line"><span class="keyword">if</span> (config.cancelToken) &#123;</span><br><span class="line">  <span class="comment">// Handle cancellation</span></span><br><span class="line">  config.cancelToken.promise.then(<span class="function"><span class="keyword">function</span> <span class="title">onCanceled</span>(<span class="params">cancel</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!request) &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    request.abort()</span><br><span class="line">    reject(cancel)</span><br><span class="line">    <span class="comment">// Clean up request</span></span><br><span class="line">    request = <span class="literal">null</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>Axios</tag>
        <tag>二次封装</tag>
      </tags>
  </entry>
  <entry>
    <title>圣杯布局和双飞翼布局</title>
    <url>/posts/6669e648/</url>
    <content><![CDATA[<p>圣杯布局和双飞翼布局，虽然两者的实现方法略有差异，不过都遵循了以下要点：</p>
<ul>
<li>两侧宽度固定，中间宽度自适应</li>
<li>中间部分在 DOM 结构上优先，以便先行渲染</li>
<li>允许三列中的任意一列成为最高列</li>
</ul>
<a id="more"></a>

<h2 id="圣杯布局"><a href="#圣杯布局" class="headerlink" title="圣杯布局"></a>圣杯布局</h2><ul>
<li>页面分为左中右3个部分，其中左右两侧固定宽度，而中间部分自适应</li>
</ul>
<p>html结构</p>
<ul>
<li>这里把 center 部分放在最前面，然后是 left、right</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;center&quot;</span>&gt;</span>中间自适应<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span>左侧固定宽度<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span>右侧固定宽度<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="左右浮动-中间-100-宽度"><a href="#左右浮动-中间-100-宽度" class="headerlink" title="左右浮动 + 中间 100% 宽度"></a>左右浮动 + 中间 100% 宽度</h3><ul>
<li>将三列都设置 <code>float: left</code> 使其在同一排显示</li>
<li>left 和 right 设置固定宽度</li>
<li>由于 center 宽度为 100% 将父元素占满了，因此 left 和 right 只能换行显示</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.container</span> &#123;</span></span><br><span class="line">    	padding: 0 150px 0 200px;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.container</span>&gt;<span class="selector-tag">div</span> &#123;</span></span><br><span class="line">        height: 200px;</span><br><span class="line">        float: left;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.center</span> &#123;</span></span><br><span class="line">        background: aqua;</span><br><span class="line">        width: 100%;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.left</span> &#123;</span></span><br><span class="line">        width: 200px;</span><br><span class="line">        background: lightblue;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.right</span> &#123;</span></span><br><span class="line">        width: 150px;</span><br><span class="line">        background: lightgreen;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img data-src="https://gitee.com/lilyn/pic/raw/master/css-img/%E5%9C%A3%E6%9D%AF%E5%B8%83%E5%B1%80-%E9%83%BD%E8%AE%BE%E4%B8%BA%E6%B5%AE%E5%8A%A8,%E4%B8%AD%E9%97%B4%E5%AE%BD%E8%AE%BE%E4%B8%BA100%.jpg" alt="圣杯布局-都设为浮动,中间宽设为100%"></p>
<ul>
<li>设置 left <code>margin-left: -100%</code>，使其上移到 center 一行，并与 center 重叠  </li>
<li>设置 right <code>margin-right: -150px</code>，使其上移到 center 一行，并与 center 重叠</li>
</ul>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/css-img/%E5%9C%A3%E6%9D%AF%E5%B8%83%E5%B1%80-%E8%AE%BE%E7%BD%AEmargin-left.jpg" alt="圣杯布局-设置margin-left"></p>
<ul>
<li>设置 left <code>position: relative; left: -200px</code></li>
<li>设置 left <code>position: relative; left: 150px</code></li>
</ul>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/css-img/%E5%9C%A3%E6%9D%AF%E5%B8%83%E5%B1%80-%E8%AE%BE%E7%BD%AE%E5%AE%9A%E4%BD%8D.jpg" alt="圣杯布局-设置定位"></p>
<ul>
<li>如果宽度无法容下3个盒子会换行显示，设置 <code>min-width: 600px</code>，可以解决</li>
</ul>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/css-img/%E5%9C%A3%E6%9D%AF%E5%B8%83%E5%B1%80-%E5%B0%BA%E5%AF%B8%E4%B8%8D%E5%A4%9F%E6%97%B6%E4%BC%9A%E6%8D%A2%E8%A1%8C%E6%98%BE%E7%A4%BA.jpg" alt="圣杯布局-尺寸不够时会换行显示"></p>
<h3 id="flex"><a href="#flex" class="headerlink" title="flex"></a>flex</h3><ul>
<li>将 container 设置为弹性布局，container 变为了 flex 容器，子元素 center、left、right 变为了 flex 项目</li>
<li>设置 left 的 order 属性来调整位置，默认为0，值越小越靠前</li>
<li>left 和 right 设置为固定宽度，使用 width 或 flex-basis</li>
<li>让 center 自动填充剩余空间，使用 flex-grow（默认为0） 或 flex 即可</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">media</span>=<span class="string">&quot;screen&quot;</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.container</span> &#123;</span></span><br><span class="line">        display: flex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.container</span>&gt;<span class="selector-tag">div</span> &#123;</span></span><br><span class="line">        height: 200px;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.center</span> &#123;</span></span><br><span class="line">        background: aqua;</span><br><span class="line"><span class="css">        <span class="selector-tag">flex-grow</span><span class="selector-pseudo">:1</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.left</span> &#123;</span></span><br><span class="line">        flex-basis: 200px;</span><br><span class="line">        background: lightblue;</span><br><span class="line">        order: -1;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.right</span> &#123;</span></span><br><span class="line">        flex-basis: 150px;</span><br><span class="line">        background: lightgreen;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="双飞翼布局"><a href="#双飞翼布局" class="headerlink" title="双飞翼布局"></a>双飞翼布局</h2><p>html结构</p>
<ul>
<li>center 是鸟的身体，left 和 right 是鸟的翅膀，先把 center 放好，再将翅膀移动到合适的位置</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;inner&quot;</span>&gt;</span>中间自适应<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span>左侧固定宽度<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span>右侧固定宽度<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>把之前给 container 的 padding 加给 center，并把它转换成 IE 盒模型</li>
<li>再给 left 和 right <code>margin-left</code> 即可</li>
</ul>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>圣杯布局</tag>
        <tag>双飞翼布局</tag>
      </tags>
  </entry>
  <entry>
    <title>Element 二次封装——select选择框</title>
    <url>/posts/8bcae64c/</url>
    <content><![CDATA[<p>项目中出现多个地方使用相同的 <code>&lt;el-select&gt;</code> 标签，且更改的时候，下面的数据会自动发生改变。为减少代码对其进行二次封装是很有必要的，一般可以考虑如下几点：</p>
<ol>
<li>在封装的组件里发送数据请求，这样能降低耦合性（解耦）</li>
<li>可以使用 <code>v-bind=&quot;$attrs&quot;</code> 将父组件调用子组件时传入的属性展开（排除被 prop 注册、class、style）</li>
<li>可以使用 <code>v-on=&quot;$listeners&quot;</code> 将父组件调用子组件时传入的方法展开</li>
<li>可以使用 <code>v-model</code> 当子组件的值发生变化，自动修改父组件的传入的值</li>
</ol>
<a id="more"></a>

<ul>
<li>父组件</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;train-select v-model&#x3D;&quot;listQuery.name&quot; &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>子组件</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;el-select</span><br><span class="line">    :value&#x3D;&quot;selected&quot;</span><br><span class="line">    placeholder&#x3D;&quot;请选择信息&quot;</span><br><span class="line">    clearable</span><br><span class="line">    filterable</span><br><span class="line">    class&#x3D;&quot;select-option_table&quot;</span><br><span class="line">    @change&#x3D;&quot;selectChange&quot;</span><br><span class="line">  &gt;</span><br><span class="line">    &lt;template&gt;</span><br><span class="line">      &lt;li&gt;</span><br><span class="line">        &lt;span&gt;姓名&lt;&#x2F;span&gt;</span><br><span class="line">        &lt;span&gt;年龄&lt;&#x2F;span&gt;</span><br><span class="line">      &lt;&#x2F;li&gt;</span><br><span class="line">    &lt;&#x2F;template&gt;</span><br><span class="line">    &lt;el-option</span><br><span class="line">      v-for&#x3D;&quot;(item, i) in infoList&quot;</span><br><span class="line">      :key&#x3D;&quot;i&quot;</span><br><span class="line">      :label&#x3D;&quot;item.label&quot;</span><br><span class="line">      :value&#x3D;&quot;item.name&quot;</span><br><span class="line">      class&#x3D;&quot;select-option_li&quot;</span><br><span class="line">    &gt;</span><br><span class="line">      &lt;span&gt;&#123;&#123; item.name &#125;&#125;&lt;&#x2F;span&gt;</span><br><span class="line">      &lt;span&gt;&#123;&#123; item.age &#125;&#125;&lt;&#x2F;span&gt;</span><br><span class="line">    &lt;&#x2F;el-option&gt;</span><br><span class="line">  &lt;&#x2F;el-select&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; API_Info &#125; from &#39;@&#x2F;api&#x2F;common&#39;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#39;Select&#39;,</span><br><span class="line">  model: &#123;</span><br><span class="line">    prop: &#39;selected&#39;,</span><br><span class="line">    event: &#39;parent-event&#39;,</span><br><span class="line">  &#125;,</span><br><span class="line">  props: [&#39;selected&#39;],</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      infoList: [],</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  created() &#123;</span><br><span class="line">    this.getSelect()</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    getSelect() &#123;</span><br><span class="line">      API_Info().then(res &#x3D;&gt; &#123;</span><br><span class="line">        this.infoList &#x3D; res.data</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    selectChange(val) &#123;</span><br><span class="line">      this.$emit(&#39;parent-event&#39;, val)</span><br><span class="line">      this.$emit(</span><br><span class="line">        &#39;change&#39;,</span><br><span class="line">        this.infoList.find(item &#x3D;&gt; item.name &#x3D;&#x3D;&#x3D; val)</span><br><span class="line">      )</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="使用-attrs-和-listeners"><a href="#使用-attrs-和-listeners" class="headerlink" title="使用 $attrs 和 $listeners"></a>使用 <code>$attrs</code> 和 <code>$listeners</code></h3><ul>
<li><code>$attrs</code> 包含了父作用域中不作为 prop 被识别 (且获取) 的 attribute 绑定 (class 和 style 除外)</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">fu-input</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入&quot;</span> <span class="attr">maxlength</span>=<span class="string">&quot;50&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- fu-input组件内部实现 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-bind</span>=<span class="string">&quot;$attrs&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 上面代码渲染出的效果如下--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入&quot;</span> <span class="attr">maxlength</span>=<span class="string">&quot;50&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>$listeners</code> 包含了父作用域中的（不含 .native 修饰器的）v-on 事件监听器</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">fu-input</span> @<span class="attr">focus</span>=<span class="string">&quot;focus&quot;</span> @<span class="attr">input</span>=<span class="string">&quot;xxx&quot;</span> @<span class="attr">change</span>=<span class="string">&quot;xxx&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- fu-input组件内部实现 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-on</span>=<span class="string">&quot;$listeners&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 上面代码渲染出的效果如下--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> @<span class="attr">focus</span>=<span class="string">&quot;focus&quot;</span> @<span class="attr">input</span>=<span class="string">&quot;xxx&quot;</span> @<span class="attr">change</span>=<span class="string">&quot;xxx&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="使用-v-model"><a href="#使用-v-model" class="headerlink" title="使用 v-model"></a>使用 <code>v-model</code></h3><ul>
<li>自定义组件上，使用 v-model 指令，默认会向子组件传递一个字段名为 value 的 prop 属性，以及绑定一个名为 input 的事件</li>
<li>model 选项，允许一个自定义组件在使用 v-model 时定制 prop 和 event，可以回避一些冲突</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">my-div</span> <span class="attr">v-model</span>=<span class="string">&quot;someValue&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">my-div</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 等价于 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">my-div</span> <span class="attr">:value</span>=<span class="string">&quot;someValue&quot;</span> @<span class="attr">input</span>=<span class="string">&quot;someValue = $event&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">my-div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    props: &#123;</span><br><span class="line">      value: &#123;</span><br><span class="line"><span class="javascript">        type: <span class="built_in">String</span>,</span></span><br><span class="line"><span class="javascript">        required: <span class="literal">true</span>,</span></span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">modifyParentCompsValue</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.$emit(<span class="string">&#x27;input&#x27;</span>, <span class="string">&#x27;要设置的值&#x27;</span>)</span></span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>Element</tag>
        <tag>v-model</tag>
        <tag>$attr $listeners</tag>
        <tag>封装</tag>
      </tags>
  </entry>
  <entry>
    <title>Element 日期选择器清除问题（Axios get请求问题）</title>
    <url>/posts/379f43e/</url>
    <content><![CDATA[<h2 id="Element-日期选择器问题"><a href="#Element-日期选择器问题" class="headerlink" title="Element 日期选择器问题"></a>Element 日期选择器问题</h2><p>条件查询中需要根据日期进行筛选，为了用户便利性展示清除按钮</p>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/company-img/%E6%98%BE%E7%A4%BA%E6%B8%85%E9%99%A4%E6%8C%89%E9%92%AE.jpg"></p>
<ul>
<li>当点击清除按钮后进行查询（<strong>get 请求</strong>），报 500 了，看一下 Network，并<strong>没有进行 url 拼接</strong>（startDate 没有拼接到 url）</li>
<li>检查 api 文件的 params 参数，发现 params 中的 startDate 值为 null</li>
</ul>
<a id="more"></a>

<p><img data-src="https://gitee.com/lilyn/pic/raw/master/company-img/headersget%E8%AF%B7%E6%B1%82500.jpg"></p>
<p>到这里就出现了两个问题：</p>
<ol>
<li><strong>startDate 为什么赋值为 null 了</strong>（input 清除之后值变为空字符）</li>
<li>我使用的是 Axios 为什么，<strong>值为 null 没有进行 url 拼接</strong>（空字符串的就可以进行拼接）</li>
</ol>
<p>接下来先看先一下业务代码长什么样，之后就是 Axios 和 Element 源码分析</p>
<h3 id="vue-代码如下："><a href="#vue-代码如下：" class="headerlink" title="vue 代码如下："></a>vue 代码如下：</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-form</span> <span class="attr">ref</span>=<span class="string">&quot;queryForm&quot;</span> <span class="attr">label-width</span>=<span class="string">&quot;110px&quot;</span> <span class="attr">:model</span>=<span class="string">&quot;listQuery&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;开车日期：&quot;</span>&gt;</span></span><br><span class="line">        &lt;el-date-picker</span><br><span class="line">          v-model=&quot;listQuery.startDate&quot;</span><br><span class="line">          value-format=&quot;yyyy-MM-dd&quot;</span><br><span class="line">          type=&quot;date&quot;</span><br><span class="line">          clearable</span><br><span class="line">          placeholder=&quot;选择开车日期&quot;</span><br><span class="line">          style=&quot;width: 100%&quot;</span><br><span class="line">        /&gt;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">icon</span>=<span class="string">&quot;el-icon-search&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;getList&quot;</span></span></span><br><span class="line"><span class="tag">      &gt;</span>查 询&lt;/el-button</span><br><span class="line">    &gt;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> &#123; getStationBus &#125; <span class="keyword">from</span> <span class="string">&#x27;@/api/station-bus&#x27;</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line">        listQuery: &#123;</span><br><span class="line">          pageNumber: 1,</span><br><span class="line">          pageSize: 20,</span><br><span class="line"><span class="javascript">          startDate: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line">        &#125;,</span><br><span class="line">        list: [],</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">created</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.getList()</span></span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">getList</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        getStationBus(<span class="built_in">this</span>.listQuery).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.list = res.data</span></span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="api-代码如下："><a href="#api-代码如下：" class="headerlink" title="api 代码如下："></a>api 代码如下：</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">&#x27;@/utils/request&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getStationBus = <span class="function"><span class="params">params</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> request(&#123;</span><br><span class="line">    method: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">    url: <span class="string">&#x27;/stationBus/list&#x27;</span>,</span><br><span class="line">    params,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Axios-源码分析"><a href="#Axios-源码分析" class="headerlink" title="Axios 源码分析"></a>Axios 源码分析</h2><p><a href="https://github.com/axios/axios/blob/master/dist/axios.js">https://github.com/axios/axios/blob/master/dist/axios.js</a> 622 行左右（搜素 buildURL）</p>
<ul>
<li>当请是 get 系列请求时，如果 params 对象里面有值为 null/undefined，不会进行 url 拼接，直接 return 出去了</li>
</ul>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/company-img/get%E7%B3%BB%E5%88%97%E8%AF%B7%E6%B1%82.png"></p>
<h2 id="Element-源码分析-TimePicker组件"><a href="#Element-源码分析-TimePicker组件" class="headerlink" title="Element 源码分析[TimePicker组件]"></a>Element 源码分析[TimePicker组件]</h2><p><a href="https://github.com/ElemeFE/element/blob/dev/packages/date-picker/src/picker.vue">https://github.com/ElemeFE/element/blob/dev/packages/date-picker/src/picker.vue</a> ，搜 handleClickIcon</p>
<p><strong>点击清除按钮后，把值赋值为 null</strong>。这里需要注意！！！与 Input 组件不同</p>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/company-img/%E7%82%B9%E5%87%BB%E6%B8%85%E9%99%A4%E6%8C%89%E9%92%AE%E5%90%8E%E8%B5%8B%E5%80%BC%E4%B8%BAnull%E6%97%A5%E6%9C%9F%E7%BB%84%E4%BB%B6.jpg"></p>
<h2 id="Element-源码分析-Input组件"><a href="#Element-源码分析-Input组件" class="headerlink" title="Element 源码分析[Input组件]"></a>Element 源码分析[Input组件]</h2><p><a href="https://github.com/ElemeFE/element/blob/dev/packages/input/src/input.vue">https://github.com/ElemeFE/element/blob/dev/packages/input/src/input.vue</a>，搜 clear</p>
<p><strong>点击清除按钮后，把值赋值为 空字符串</strong></p>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/company-img/%E7%82%B9%E5%87%BB%E6%B8%85%E9%99%A4%E6%8C%89%E9%92%AE%E5%90%8E%E8%B5%8B%E5%80%BC%E4%B8%BAnull%E8%BE%93%E5%85%A5%E6%A1%86%E7%BB%84%E4%BB%B6.jpg"></p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>Axios</tag>
        <tag>Element</tag>
        <tag>源码分析</tag>
        <tag>问题</tag>
      </tags>
  </entry>
  <entry>
    <title>JS this指向问题</title>
    <url>/posts/ea5004b1/</url>
    <content><![CDATA[<p>在绝大多数情况下，函数的调用方式决定了 <code>this</code> 的值。<code>this</code> 不能在执行期间被赋值，并且在每次函数被调用时 <code>this</code> 的值也可能会不同，所以总结 <code>this</code> 值的规律是有必要的</p>
<a id="more"></a>

<h2 id="全局作用域-this-指向"><a href="#全局作用域-this-指向" class="headerlink" title="全局作用域 this 指向"></a>全局作用域 this 指向</h2><p>无论是否在严格模式下，在<strong>全局作用域中 <code>this</code> 都指向全局对象</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">this</span>); <span class="comment">// Window </span></span><br><span class="line"></span><br><span class="line"><span class="meta">&quot;use strict&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">this</span>); <span class="comment">// Window </span></span><br></pre></td></tr></table></figure>

<h2 id="私有作用域-this-指向"><a href="#私有作用域-this-指向" class="headerlink" title="私有作用域 this 指向"></a>私有作用域 this 指向</h2><p>在函数内部，<code>this</code> 的值取决于函数调用的方式</p>
<p>通俗的来说，就是函数执行的时候，看函数名前面有没有 <code>.</code>：</p>
<ul>
<li>如果函数调用时在某个对象上触发的（典型：<code>xxx.fun()</code>），会触发<strong>隐式绑定</strong>，<strong>this 就是该对象</strong>，即 <code>xxx</code></li>
<li>如果函数调用时前面没有 <code>.</code> ，会触发<strong>默认绑定</strong><ul>
<li>浏览器环境：Window</li>
<li>严格模式：undefined</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    fn: fn,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj.fn(); <span class="comment">// obj</span></span><br><span class="line">fn(); <span class="comment">// Window</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&quot;use strict&quot;</span></span><br><span class="line">obj.fn(); <span class="comment">// obj</span></span><br><span class="line">fn(); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>

<h2 id="构造函数-this-指向（new绑定）"><a href="#构造函数-this-指向（new绑定）" class="headerlink" title="构造函数 this 指向（new绑定）"></a>构造函数 this 指向（new绑定）</h2><p>通过构造函数创建的实例，<strong>构造函数中的 this 指的就是当前类的实例</strong></p>
<ul>
<li>new 运算符做了这样一件事：将新对象和函数调用的 this 绑定起来</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = <span class="string">&quot;lion&quot;</span>;</span><br><span class="line">    <span class="built_in">this</span>.age = <span class="number">13</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>); <span class="comment">// fn</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> f = <span class="keyword">new</span> fn();</span><br><span class="line"></span><br><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = <span class="string">&quot;lion&quot;</span>;</span><br><span class="line">    <span class="built_in">this</span>.age = <span class="number">13</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>); <span class="comment">// fn</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> f = <span class="keyword">new</span> fn();</span><br></pre></td></tr></table></figure>

<h2 id="显示绑定-this-指向"><a href="#显示绑定-this-指向" class="headerlink" title="显示绑定 this 指向"></a>显示绑定 this 指向</h2><p><strong>通过 <code>call</code> 、 <code>apply</code> 、 <code>bind</code> 的方式，显示的指定 this 所指向的值</strong></p>
<p><code>call</code> 方法第一个参数是要绑定 this 的值，后面传入的是一个参数列表</p>
<ul>
<li>浏览器环境：不传参或传 null、undefined，this 都是 Window</li>
<li>严格模式：不传参或传 undefined，this 都是 undefined，传 null，this 是 null</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    name: <span class="string">&#x27;bird&#x27;</span>,</span><br><span class="line">    Fn: Fn</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;dog&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> Hi = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 触发默认绑定，this 为 winodw</span></span><br><span class="line">    fn(); <span class="comment">// dog</span></span><br><span class="line">    <span class="comment">// 如果不希望绑定丢失</span></span><br><span class="line">    fn.call(<span class="built_in">this</span>); <span class="comment">// bird</span></span><br><span class="line">&#125;</span><br><span class="line">Hi.call(person, person.Fn);</span><br></pre></td></tr></table></figure>

<p><strong>call 硬绑定情况</strong></p>
<p>强制把 foo 的 this 绑定到了 obj，无论之后如何调用 bar 之前的操作都不会被覆盖，它总会在 obj 上调用 foo</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    a: <span class="number">2</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> bar = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    foo.call(obj);</span><br><span class="line">&#125;;</span><br><span class="line">bar(); <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">setTimeout</span>(bar, <span class="number">100</span>); <span class="comment">// 2</span></span><br><span class="line">bar.call(<span class="built_in">window</span>); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>

<h2 id="自执行-回调函数-this-指向"><a href="#自执行-回调函数-this-指向" class="headerlink" title="自执行/回调函数 this 指向"></a>自执行/回调函数 this 指向</h2><p>其实和 私有作用域 this 指向 里的默认绑定是一个道理，<strong>与函数定义地方无关，取决于函数在哪调用</strong></p>
<ul>
<li>浏览器环境：Window</li>
<li>严格模式：undefined</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">~(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>);</span><br><span class="line">&#125;)(); <span class="comment">// Window</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line">~(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>);</span><br><span class="line">&#125;)(); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>

<p>回调函数：一个函数作为参数传递给另一函数</p>
<ul>
<li>浏览器环境：Window</li>
<li>严格模式：Window</li>
</ul>
<p>这里需要注意：<strong>如果是 JS 内置方法，如 <code>setTimeout</code> ，回调函数内部 this 都会指向 Window</strong>，非内置方法严格模式下为 undefined</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>);</span><br><span class="line">&#125;, <span class="number">100</span>); <span class="comment">// Window</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>);</span><br><span class="line">&#125;, <span class="number">100</span>); <span class="comment">// Window</span></span><br></pre></td></tr></table></figure>

<h2 id="元素绑定事件-this-指向"><a href="#元素绑定事件-this-指向" class="headerlink" title="元素绑定事件 this 指向"></a>元素绑定事件 this 指向</h2><p>给元素绑定事件，当事件触发，函数执行的时候，里面的 this 就是当前绑定的元素</p>
<ul>
<li>浏览器环境：当前绑定事件的元素</li>
<li>严格模式：当前绑定事件的元素</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">el.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>);</span><br><span class="line">&#125;; <span class="comment">// el</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line">el.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>);</span><br><span class="line">&#125;; <span class="comment">// el</span></span><br></pre></td></tr></table></figure>

<h2 id="箭头函数-this"><a href="#箭头函数-this" class="headerlink" title="箭头函数 this"></a>箭头函数 this</h2><p><strong>箭头函数中没有 this</strong>，也没有 this 绑定机制，还没有 arguments</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.a = <span class="number">55</span>;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        a: <span class="number">10</span>,</span><br><span class="line">        b: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> f1 = <span class="keyword">new</span> fn1();</span><br><span class="line"><span class="built_in">console</span>.log(f1.b()); <span class="comment">// &#123;a: 10, b: ƒ&#125;</span></span><br></pre></td></tr></table></figure>

<p><strong>如果在箭头函数中用 this，this 仅仅相当于一个变量，会向上级作用域去找</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.a = <span class="number">55</span>;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        a: <span class="number">10</span>,</span><br><span class="line">        b: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> f2 = <span class="keyword">new</span> fn2();</span><br><span class="line"><span class="built_in">console</span>.log(f2.b()); <span class="comment">// fn2 &#123; a: 55 &#125;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>默认绑定</tag>
        <tag>隐式绑定</tag>
        <tag>new绑定</tag>
        <tag>箭头函数</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 不同数据类型的相互转换规则</title>
    <url>/posts/8a7b4226/</url>
    <content><![CDATA[<p><strong>对象和对象进行比较的时候：比较的是空间地址</strong>，如果空间地址相同就是 true，不同就是 false</p>
<ul>
<li><code>&#123;&#125;==&#123;&#125;(false)</code></li>
</ul>
<p>不同的数据类型再进行比较的时候，<strong>除了以下的，剩下的都是先转换为数字在比较</strong>：</p>
<ul>
<li><p>对象和字符串进行比较的时候，把对象转换为字符串，再进行比较</p>
</li>
<li><p>null 和 undefined 永远不等于任何一种数据类型，但是 <code>null==undefined(true)</code> <code>null===undefined(false)</code></p>
</li>
<li><p><strong>NaN 永远不等于任何一种数据类型，包括它自己</strong></p>
<p>可以使用 <code>Object.is(NaN, NaN)-&gt;true</code> 检测</p>
</li>
</ul>
<a id="more"></a>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">![] == <span class="literal">true</span>       <span class="comment">// false ![]=&gt;false转为布尔取反</span></span><br><span class="line">![] == []         <span class="comment">// true  ![]=&gt;false=&gt;Number(false)=&gt;0 Number([].toString())=&gt;0</span></span><br><span class="line">[] = <span class="literal">false</span>        <span class="comment">// true</span></span><br><span class="line">![] == <span class="literal">false</span>      <span class="comment">// true</span></span><br><span class="line"><span class="literal">NaN</span> == <span class="literal">NaN</span>        <span class="comment">// false</span></span><br><span class="line"><span class="literal">null</span> == <span class="literal">undefined</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure>



<h2 id="对象数据转换规则"><a href="#对象数据转换规则" class="headerlink" title="对象数据转换规则"></a>对象数据转换规则</h2><blockquote>
<p>原始值：number string boolean null undefined symbol bigint</p>
</blockquote>
<p><strong>对象数据转换规则：</strong></p>
<ol>
<li>首先检测对象 <code>Symbol.toPrimitive</code> 这个属性，获取其原始值</li>
<li>如果没有这个属性，继续调用它的 <code>valueOf</code>，也是获取原始值</li>
<li>如果值不是原始值，则继续调用 <code>toString</code> 转换字符串</li>
<li>如果需要转换数字，再把字符串基于 Number 转换为数字</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    name: <span class="string">&quot;lion&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(obj - <span class="number">10</span>);</span><br><span class="line">obj[<span class="built_in">Symbol</span>.toPrimitive]; <span class="comment">// undefined</span></span><br><span class="line">obj.valueOf(); <span class="comment">// &#123;name: &quot;lion&quot;&#125; 不是原始值</span></span><br><span class="line">obj.toString(); <span class="comment">//&quot;[object Object]&quot;</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="string">&quot;[object Object]&quot;</span>); <span class="comment">// NaN</span></span><br><span class="line"><span class="literal">NaN</span> - <span class="number">10</span>; <span class="comment">// NaN</span></span><br></pre></td></tr></table></figure>

<ul>
<li>了解数据转换规则后，来看一道题</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = ?</span><br><span class="line"><span class="keyword">if</span> (a == <span class="number">1</span> &amp;&amp; a == <span class="number">2</span> &amp;&amp; a == <span class="number">3</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;OK&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>第一类方法：隐式进行数据类型转换</p>
<p>修改 <code>Symbol.toPrimitive</code>、 <code>valueOf</code>、  <code>toString</code>任意一个即可 </p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 通过 ++i 改值</span></span><br><span class="line"><span class="keyword">var</span> a = &#123;</span><br><span class="line">    i: <span class="number">0</span>,</span><br><span class="line">    [<span class="built_in">Symbol</span>.toPrimitive]: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ++<span class="built_in">this</span>.i;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">if</span> (a == <span class="number">1</span> &amp;&amp; a == <span class="number">2</span> &amp;&amp; a == <span class="number">3</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;OK&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过调用函数，删除值</span></span><br><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">a.valueOf = a.shift;</span><br><span class="line"><span class="keyword">if</span> (a == <span class="number">1</span> &amp;&amp; a == <span class="number">2</span> &amp;&amp; a == <span class="number">3</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;OK&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>第二类方法：ES6 数据劫持</p>
<p>用 <code>defineProperty</code> 定义</p>
<ul>
<li>第一个参数是对象</li>
<li>第二个参数是属性名</li>
<li>第三个参数是特征值</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(<span class="built_in">global</span>, <span class="string">&quot;a&quot;</span>, &#123;</span><br><span class="line">    <span class="function"><span class="title">get</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ++i;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">if</span> (a == <span class="number">1</span> &amp;&amp; a == <span class="number">2</span> &amp;&amp; a == <span class="number">3</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;OK&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="其他类型转换为数字"><a href="#其他类型转换为数字" class="headerlink" title="其他类型转换为数字"></a>其他类型转换为数字</h2><h3 id="Number"><a href="#Number" class="headerlink" title="Number"></a>Number</h3><p>一般用于隐式转换【数学运算、isNaN、==比较…】</p>
<ul>
<li>字符串：<ul>
<li>如果是空字符穿，转换结果 0</li>
<li>如果说字符串中包含非有效数字，转换结果就是 NaN</li>
</ul>
</li>
<li>布尔类型<ul>
<li>true：转换为1</li>
<li>false：转换为0</li>
</ul>
</li>
<li><strong>null：转换为0</strong></li>
<li><strong>undefined：NaN</strong></li>
<li>Symbol：报错</li>
<li>BigInt ：正常转换</li>
<li>对象：<strong>遵循对象数据转换规则</strong></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Number</span>(<span class="string">&quot;123px&quot;</span>)     <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="literal">undefined</span>)   <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="literal">false</span>)       <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="literal">true</span>)        <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="literal">null</span>)        <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="string">&quot;&quot;</span>)          <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Number</span>([])          <span class="comment">// 0  Number([]) ==&gt; [].toString() ==&gt; &quot;&quot; ==&gt; Number(&quot;&quot;) ==&gt; 0</span></span><br></pre></td></tr></table></figure>

<h3 id="parseInt"><a href="#parseInt" class="headerlink" title="parseInt"></a>parseInt</h3><p><code>parseInt([val], [radix])</code></p>
<ul>
<li>[val] <strong>必须是一个字符串，如果不是，也要默认转换为字符串</strong></li>
<li>[radix] 不设置（写零）：按十进制处理，如果字符串以<code>0x</code>开头，默认是16进制</li>
</ul>
<p><strong>从左往右查找 [val] 中，找到所有符合 [radix] 进制的内容，直到遇到不符合的停止查找</strong>（不论后面是否还有符合的）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">parseInt</span>(<span class="string">&#x27;12px&#x27;</span>)    <span class="comment">// 12</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&#x27;12px&#x27;</span>, <span class="number">1</span>) <span class="comment">// NaN</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Number</span>(<span class="literal">null</span>) <span class="comment">//0</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="literal">null</span>))     <span class="comment">// NaN -&gt;parseInt(&#x27;null&#x27;, 10)</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="string">&#x27;&#x27;</span>) <span class="comment">//0</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&#x27;&#x27;</span>) <span class="comment">//NaN</span></span><br></pre></td></tr></table></figure>

<ul>
<li>radix 2-36 之间</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">27.2</span>, <span class="number">0</span>, <span class="string">&quot;0013&quot;</span>, <span class="string">&quot;14px&quot;</span>, <span class="number">123</span>];</span><br><span class="line">arr = arr.map(<span class="built_in">parseInt</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// [ 27, NaN, 1, 1, 27 ]</span></span><br></pre></td></tr></table></figure>



<h2 id="其他类型转换为字符串"><a href="#其他类型转换为字符串" class="headerlink" title="其他类型转换为字符串"></a>其他类型转换为字符串</h2><ul>
<li><p><code>toString()</code><br><strong>null、undefined 没有 <code>toString()</code> 这个方法</strong>，用了会报错，可以使用 <code>String()</code></p>
<p>需要排除 <code>Object.prototype.toString</code> 检测数据类型</p>
</li>
<li><p>字符串/模板字符串拼接（<code>+</code> 除了数学运算还有字符串拼接）</p>
</li>
</ul>
<h3 id="字符串拼接"><a href="#字符串拼接" class="headerlink" title="+ 字符串拼接"></a>+ 字符串拼接</h3><p><strong>情况1：</strong><code>+</code> 左右两边有一边出现字符串或部分对象，则按照字符串拼接处理</p>
<ul>
<li>特殊：<code>&#123;&#125; + 10 -&gt; 10</code> {} 看做代码块（ES6块级上下文）</li>
</ul>
<p><strong>注意：不是所有对象都是字符串拼接</strong></p>
<ul>
<li>先去调取对象的 <code>Symbol.toPrimitive</code> 属性值，如果没有这个属性</li>
<li>再去调取对象的 <code>valueOf</code> 获取原始值，如果不是原始值</li>
<li>再去调用对象的 <code>toString</code> 转换为字符串（如果是想转换为数字，则还会调用 Number 处理）</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">10</span> + <span class="string">&quot;10&quot;</span> <span class="comment">// &quot;1010&quot;</span></span><br><span class="line"><span class="number">10</span> + [<span class="number">10</span>] <span class="comment">// 1010; [10].toString() = &#x27;10&#x27;</span></span><br><span class="line"><span class="number">10</span> + <span class="keyword">new</span> <span class="built_in">Number</span>(<span class="number">10</span>) <span class="comment">// 20; new Number(10).valueOf() = 10</span></span><br><span class="line">&#123;&#125; + <span class="number">10</span>   <span class="comment">// 10</span></span><br><span class="line"><span class="number">10</span> + &#123;&#125;   <span class="comment">// &quot;10[object Object]&quot;; &#123;&#125;.toString() = [object Object]</span></span><br><span class="line">(&#123;&#125; + <span class="number">10</span>) <span class="comment">// &quot;[object Object]10&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  x: <span class="number">10</span>,</span><br><span class="line">  <span class="comment">// obj[Symbol.toPrimitive valueOf toString]</span></span><br><span class="line">  [<span class="built_in">Symbol</span>.toPrimitive](hint) &#123;</span><br><span class="line">    <span class="comment">// console.log(hint) // default string number</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.x</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">10</span> + obj) <span class="comment">// 20</span></span><br></pre></td></tr></table></figure>

<p><strong>情况2：</strong>只有一边有 <code>+</code> </p>
<ul>
<li><p><code>+</code> 只有一边或<code>++x</code>或<code>x++</code> ，都是数学运算</p>
<p><code>10+(++x) </code>先把x累加1，然后和10运算</p>
<p><code>10+(x++)</code> 先把x的值和10运算，然后x累加1</p>
</li>
<li><p>注意：<code>x++ </code>只会进行数学运算，<code>x+=1</code> 和 <code>x=x+1</code> 不仅会进行数学运算还可能进行字符串拼接</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">+<span class="string">&quot;10&quot;</span> <span class="comment">// 10</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="string">&quot;10&quot;</span></span><br><span class="line"><span class="number">10</span>+(x++) <span class="comment">// 20</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> x = <span class="string">&quot;10&quot;</span></span><br><span class="line"><span class="number">10</span>+(++x) <span class="comment">// 21</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> x = <span class="string">&quot;10&quot;</span></span><br><span class="line">x+=<span class="number">1</span>    <span class="comment">// &quot;101&quot;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>了解数据转换规则和字符串拼接后，来看一道题</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> result = <span class="number">100</span> + <span class="literal">true</span> + <span class="number">21.2</span> + <span class="literal">null</span> + <span class="literal">undefined</span> + <span class="string">&quot;Tencent&quot;</span> + [] + <span class="literal">null</span> + <span class="number">9</span> + <span class="literal">false</span>;</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// NaNTencentnull9false</span></span><br></pre></td></tr></table></figure>



<h2 id="其他类型转换为布尔"><a href="#其他类型转换为布尔" class="headerlink" title="其他类型转换为布尔"></a>其他类型转换为布尔</h2><ul>
<li><p>![值]  转换为布尔并取反</p>
</li>
<li><p>!![值]  转换为布尔</p>
</li>
</ul>
<p><strong>除了以下几种结果都是false，剩余的都是true</strong></p>
<ul>
<li>NaN</li>
<li>0</li>
<li>“”</li>
<li>null</li>
<li>undefined</li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>数据类型转换</tag>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 原型继承</title>
    <url>/posts/3792d7db/</url>
    <content><![CDATA[<h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>继承机制使得不同的实例可以共享构造函数的原型对象的属性和方法</p>
<a id="more"></a>

<h3 id="原型链继承"><a href="#原型链继承" class="headerlink" title="原型链继承"></a>原型链继承</h3><blockquote>
<p>基本思想是利用原型让一个引用类型继承另一个引用类型的属性和方法。我们知道每个构造函数都有一个原型对象（<code>prototype</code>），原型对象都包含一个指向构造函数的指针（<code>constructor</code>），而实例都包含一个指向原型对象的内部指针（<code>__proto__</code>）</p>
<p>那么，如果让一个构造函数的原型对象等于另一个类型的实例，此时的原型对象将包含一个指向另一个原型的指针，相应地，另一个原型中也包含着一个指向另一个构造函数的指针</p>
</blockquote>
<ul>
<li><p>想要让 B 所有的实例继承 A 类私有和公有方法：</p>
<p>私有属性：使用构造函数时添加给实例的属性</p>
<p>公有属性：构造函数原型上的属性</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.a = <span class="string">&quot;a&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">A.prototype.getA = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.a);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">B</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.b = <span class="string">&quot;b&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 让 B 类的原型指向 A 类的实例</span></span><br><span class="line">B.prototype = <span class="keyword">new</span> A();</span><br><span class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> B();</span><br></pre></td></tr></table></figure>

<ul>
<li>让 B 类的原型（prototype）指向 A 类的实例，此时 B 类的原型是 A 类的实例（继承 A 类私有属性），同时 B 类的原型的 <code>__proto__</code> 指向 A 类的原型（继承 A 的公有属性）</li>
</ul>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/js-img/%E5%8E%9F%E5%9E%8B%E7%BB%A7%E6%89%BF.png" alt="原型继承"></p>
<p><strong>原型链继承的问题：</strong>通过原型链继承后，B 的原型继承了 A 的实例属性变成了 B 的原型属性，若继承 A 的实例属性里面有引用数据类型，更改 B 的实例属性 colors，后续 B 的实例的实例属性 colors 都会被修改</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.colors = [<span class="string">&quot;red&quot;</span>, <span class="string">&quot;green&quot;</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">B</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="comment">// new A()创建实例，实例拥有 colors 属性</span></span><br><span class="line"><span class="comment">// B 的原型改为该实例，则 B 的原型中添加 colors 属性</span></span><br><span class="line">B.prototype = <span class="keyword">new</span> A();</span><br><span class="line"><span class="keyword">var</span> arr1 = <span class="keyword">new</span> B();</span><br><span class="line">arr1.colors.push(<span class="string">&quot;yellow&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr1.colors); <span class="comment">// [ &#x27;red&#x27;, &#x27;green&#x27;, &#x27;yellow&#x27; ]</span></span><br><span class="line"><span class="keyword">var</span> arr2 = <span class="keyword">new</span> B();</span><br><span class="line"><span class="built_in">console</span>.log(arr2.colors); <span class="comment">// [ &#x27;red&#x27;, &#x27;green&#x27;, &#x27;yellow&#x27; ]</span></span><br></pre></td></tr></table></figure>

<p><strong>原型链继承的另一个问题：</strong>在创建子类型的实例时，不能向超类型的构造函数中传递参数。实践中很少会单独使用原型链继承</p>
<h3 id="中间类继承"><a href="#中间类继承" class="headerlink" title="中间类继承"></a>中间类继承</h3><p>某些实例不属于某些类，但是想要用这个类原型上的方法，可以手动的去更改实例的 <code>__proto__</code> ，让它指向这个类的原型，这样这个实例就可以使用这个类的原型上的方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">arguments</span>.__proto__ = <span class="built_in">Array</span>.prototype;</span><br><span class="line">    <span class="comment">// arguments 是一个对象，对象上没有 sort 方法会报错</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">arguments</span>.sort(<span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a - b;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(fn(<span class="number">5</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">4</span>)); <span class="comment">// Array &#123; &#x27;0&#x27;: 3, &#x27;1&#x27;: 4, &#x27;2&#x27;: 5, &#x27;3&#x27;: 6 &#125;</span></span><br></pre></td></tr></table></figure>



<h3 id="借用构造函数（call-继承）"><a href="#借用构造函数（call-继承）" class="headerlink" title="借用构造函数（call 继承）"></a>借用构造函数（call 继承）</h3><blockquote>
<p>基本思想：在子类型构造函数的内部调用超类型构造函数，通过 apply() 和 call() 方法可以在新创建的对象上执行构造函数</p>
</blockquote>
<p>B 类和 A 类，想要让 B 类的实例拥有 A 类的私有属性（但不拥有公有属性），我们可以让 A 当成普通函数执行，把里面的 this 指向改成 B 类的实例（往 B 的实例中添加属性）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.a = <span class="string">&quot;a&quot;</span>;</span><br><span class="line">    <span class="built_in">this</span>.x = <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">B</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 实例 b this</span></span><br><span class="line">    <span class="comment">// 去执行 A()，但A里this和B里this不是一个，需要用call绑定下this</span></span><br><span class="line">    A.call(<span class="built_in">this</span>)</span><br><span class="line">    <span class="built_in">this</span>.b = <span class="string">&quot;b&quot;</span>;</span><br><span class="line">    <span class="built_in">this</span>.y = <span class="number">200</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> B();</span><br></pre></td></tr></table></figure>

<p><strong>借用构造函数问题：</strong>因为方法都是在构造函数中定义，因此就没有函数复用。而且，超类型的原型中定义的方法，对子类型来说是不可见的（只能添加私有属性）。实践中很少会单独使用借用构造函数</p>
<h3 id="寄生组合继承"><a href="#寄生组合继承" class="headerlink" title="寄生组合继承"></a>寄生组合继承</h3><blockquote>
<p>基本思想：借用原型链实现对原型属性和方法的继承，通过借用构造函数来实现实例属性的继承。这样既通过原型上定义方法实现了函数的复用，又保证每个实例都有自己的属性</p>
</blockquote>
<p>需求：B 类要继承 A 类的私有属性和公有属性</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.a = <span class="string">&quot;a&quot;</span>;</span><br><span class="line">    <span class="built_in">this</span>.x = <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line">A.prototype.getA = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">B</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.b = <span class="string">&quot;b&quot;</span>;</span><br><span class="line">    <span class="built_in">this</span>.y = <span class="number">200</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>我们很容易就能想到最简单的方法：A、B类的原型指向同一个堆内存地址。但修改时会相互影响，耦合性高，不推荐这么做</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">B.prototype = A.prototype;</span><br><span class="line">B.prototype.getB = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ol>
<li>我们可以先用借用构造函数获取 A 类的私有属性</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">B</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    A.call(<span class="built_in">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>再用原型链继承获取 A 类公有属性</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 可以考虑用普通对象做中间件</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line">obj.__proto__ = A.prototype;</span><br><span class="line">B.prototype = obj;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 可以考虑用函数做中间件</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">F.prototype = A.prototype;</span><br><span class="line">B.prototype = <span class="keyword">new</span> F();</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>上述方法可以简写一下，需要使用如下方法：</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个空对象，并且让空对象的 __proto__ 指向参数</span></span><br><span class="line">B.prototype = <span class="built_in">Object</span>.create(A.prototype);</span><br></pre></td></tr></table></figure>

<ul>
<li>Object.create() 方法，它可以传入一个对象作为该方法返回的对象的原型对象，原理如下：</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Object</span>.create = <span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 版本1</span></span><br><span class="line">    <span class="keyword">var</span> o = &#123;&#125;;</span><br><span class="line">    o.__proto__ = obj;</span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 版本2</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">    F.prototype = obj;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> F();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>另一种方法</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">B</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 继承私有属性</span></span><br><span class="line">    A.call(<span class="built_in">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 继承公有属性</span></span><br><span class="line">B.prototype = <span class="keyword">new</span> A();</span><br><span class="line">B.prototype.constructor = B;</span><br></pre></td></tr></table></figure>

<ul>
<li>整理一下上述思路，合并一下代码</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.a = <span class="string">&quot;a&quot;</span>;</span><br><span class="line">    <span class="built_in">this</span>.x = <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line">A.prototype.getA = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">B</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 1.获取私有属性</span></span><br><span class="line">    A.call(<span class="built_in">this</span>);</span><br><span class="line">    <span class="built_in">this</span>.b = <span class="string">&quot;b&quot;</span>;</span><br><span class="line">    <span class="built_in">this</span>.y = <span class="number">200</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2.可以考虑用普通对象做中间件</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line">obj.__proto__ = A.prototype;</span><br><span class="line">B.prototype = obj;</span><br><span class="line"><span class="comment">// 2.可以考虑用函数做中间件</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">F.prototype = A.prototype;</span><br><span class="line">B.prototype = <span class="keyword">new</span> F();</span><br><span class="line"><span class="comment">// 2.使用 Object.create() 方法</span></span><br><span class="line">B.prototype = <span class="built_in">Object</span>.create(A.prototype);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.使用原型链继承</span></span><br><span class="line">B.prototype = <span class="keyword">new</span> A();</span><br><span class="line">B.prototype.constructor = B;</span><br><span class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> B();</span><br></pre></td></tr></table></figure>

<p>组合继承融合了原型链和借用构造函数的优点，而且 instanceof 也能用于识别基于组合继承创建的对象，所以实践中最常用组合继承</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>原型链继承</tag>
        <tag>借用构造函数</tag>
        <tag>寄生组合继承</tag>
        <tag>中间类继承</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 变量提升</title>
    <url>/posts/ea26882a/</url>
    <content><![CDATA[<p>当浏览器开辟出供 js 执行的栈内存之后，代码并不是立即自上而下执行，而是需要先做一些事情：把当前作用域中带 var 和 function 的关键字进行提前的声明和定义（变量提升）</p>
<ul>
<li>var：只声明，未定义（不赋值）</li>
<li>function：声明和定义（赋值）一起完成</li>
</ul>
<a id="more"></a>

<h2 id="作用域中的变量提升"><a href="#作用域中的变量提升" class="headerlink" title="作用域中的变量提升"></a>作用域中的变量提升</h2><p>作用域链查找原则：首先会在当前作用域中查找，如果没有的话会沿着作用域链向上查找， 直至全局作用域</p>
<ol>
<li>在全局作用域获取不到，报错：<code> ... is not defined</code></li>
<li>如果是赋值语句，就相当于给全局作用域添加了这样一个属性名和属性值</li>
</ol>
<h3 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h3><blockquote>
<p>在全局作用域（默认会提供一个最大的 window 对象）中声明的变量</p>
</blockquote>
<ul>
<li>函数没有形参，且函数体里没有 var 声明</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">6</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">    a = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">fn();</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br></pre></td></tr></table></figure>

<p>答案：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 6</span></span><br><span class="line"><span class="comment">// 1</span></span><br></pre></td></tr></table></figure>

<h3 id="私有变量"><a href="#私有变量" class="headerlink" title="私有变量"></a>私有变量</h3><blockquote>
<p>函数执行的时候形成的作用域是私有的，保护里面的变量不受外界干扰</p>
</blockquote>
<ul>
<li><p>形参</p>
<p>函数有形参，但没有传实参，且打印在赋值之前</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">6</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">    a = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">fn();</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br></pre></td></tr></table></figure>

<p>答案：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// undefined</span></span><br><span class="line"><span class="comment">// 6</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在私有作用域中声明的变量</p>
<p>函数没有形参，函数体里有 var 声明</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">  <span class="built_in">console</span>.log(a, b);</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">12</span>,</span><br><span class="line">      b = <span class="number">12</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 变量提升 var a；a 是私有的， b是 windows 全局作用域</span></span><br><span class="line">      <span class="built_in">console</span>.log(a, b);</span><br><span class="line">      <span class="comment">// 下面语句相当于 b=13; var a=b</span></span><br><span class="line">      <span class="keyword">var</span> a = b = <span class="number">13</span>;</span><br><span class="line">      <span class="built_in">console</span>.log(a, b);</span><br><span class="line">  &#125;</span><br><span class="line">  fn();</span><br><span class="line"><span class="built_in">console</span>.log(a, b);</span><br></pre></td></tr></table></figure>

<p>答案：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// undefined undefined</span></span><br><span class="line"><span class="comment">// undefined 12</span></span><br><span class="line"><span class="comment">// 13 13</span></span><br><span class="line"><span class="comment">// 12 13</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>复合（形参 + 私有作用域中声明变量）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    私有作用域 fn(a)</span></span><br><span class="line"><span class="comment">    1.形参赋值 a=12; a是私有的</span></span><br><span class="line"><span class="comment">    2.变量提升 var b; b是私有的</span></span><br><span class="line"><span class="comment">        只有 c 是全局作用域的</span></span><br><span class="line"><span class="comment">    3.代码自上而下执行</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">12</span>,</span><br><span class="line">    b = <span class="number">13</span>,</span><br><span class="line">    c = <span class="number">14</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a, b, c);</span><br><span class="line">    <span class="keyword">var</span> b = c = a = <span class="number">20</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(a, b, c);</span><br><span class="line">&#125;</span><br><span class="line">fn(a);</span><br><span class="line"><span class="built_in">console</span>.log(a, b, c);</span><br></pre></td></tr></table></figure>

<p>答案：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 12 undefined 14</span></span><br><span class="line"><span class="comment">// 20 20 20</span></span><br><span class="line"><span class="comment">// 12 13 20</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="块级作用域"><a href="#块级作用域" class="headerlink" title="块级作用域"></a>块级作用域</h3><ul>
<li>let 声明的变量不进行变量提升不能重复声明</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">10</span>,</span><br><span class="line">    b = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">let</span> fn = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// a 变成私有变量，这个私有作用域没有 b，需要向上级查找</span></span><br><span class="line">    <span class="keyword">let</span> a = b = <span class="number">20</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(a, b);</span><br><span class="line">&#125;;</span><br><span class="line">fn();</span><br><span class="line"><span class="built_in">console</span>.log(a, b);</span><br></pre></td></tr></table></figure>

<p>答案：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 20 20</span></span><br><span class="line"><span class="comment">// 10 20</span></span><br></pre></td></tr></table></figure>

<h3 id="引用类型数据问题"><a href="#引用类型数据问题" class="headerlink" title="引用类型数据问题"></a>引用类型数据问题</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    1.变量提升：fn -&gt; 0x111(全局)；arr -&gt; 0x222(全局)</span></span><br><span class="line"><span class="comment">    2.代码自上而下执行，执行 fn(arr)</span></span><br><span class="line"><span class="comment">        1.形参赋值 arr -&gt; 0x222[12, 13]</span></span><br><span class="line"><span class="comment">        2.重新赋值 arr[0]=100 -&gt; 0x222[100, 13]</span></span><br><span class="line"><span class="comment">        3.arr=[100] -&gt; 0x333[100](函数fn中)</span></span><br><span class="line"><span class="comment">        4.arr[0]=0 -&gt; 0x333[0]</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">12</span>, <span class="number">13</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(arr);</span><br><span class="line">    arr[<span class="number">0</span>] = <span class="number">100</span>;</span><br><span class="line">    arr = [<span class="number">100</span>];</span><br><span class="line">    arr[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(arr);</span><br><span class="line">&#125;</span><br><span class="line">fn(arr);</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br></pre></td></tr></table></figure>

<p>答案：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// [12,13]</span></span><br><span class="line"><span class="comment">// [0]</span></span><br><span class="line"><span class="comment">// [100,13]</span></span><br></pre></td></tr></table></figure>



<h2 id="变量提升特殊性"><a href="#变量提升特殊性" class="headerlink" title="变量提升特殊性"></a>变量提升特殊性</h2><h3 id="判断条件"><a href="#判断条件" class="headerlink" title="判断条件"></a>判断条件</h3><blockquote>
<p><strong>不论判断条件是否成立，都会进行变量提升</strong></p>
</blockquote>
<h4 id="条件不成立"><a href="#条件不成立" class="headerlink" title="条件不成立"></a>条件不成立</h4><p>var：<strong>只声明不定义</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 不管条件是否成立，都会进行变量提升，var a</span></span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">false</span>) &#123;</span><br><span class="line">    <span class="comment">// 条件不成立，无法赋值</span></span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br></pre></td></tr></table></figure>

<p>答案：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// undefined</span></span><br><span class="line"><span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>

<p>function：</p>
<ul>
<li><p>在老版本浏览器中：声明+定义</p>
</li>
<li><p>在新版本浏览器中：<strong>只声明不定义</strong></p>
<p>可以把它理解成函数表达式 <code>var fn = function()&#123;&#125;</code> ，只声明 <code>var fn</code> </p>
<p><code>delete fn</code> 返回 false（<code>var 变量</code> 无法使用 delete 删除）</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在新版本浏览器中，判断条件中的function相当于只声明未定义，所以undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(fn);</span><br><span class="line"><span class="built_in">console</span>.log(fn());</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">false</span>) &#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;lion&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(fn);</span><br></pre></td></tr></table></figure>

<p>答案：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// undefined</span></span><br><span class="line"><span class="comment">// TypeError: fn is not a function</span></span><br></pre></td></tr></table></figure>

<h4 id="条件成立"><a href="#条件成立" class="headerlink" title="条件成立"></a>条件成立</h4><ul>
<li><strong>判断条件成立，会对执行体中的 fn 进行变量提升</strong>（声明+赋值）</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(fn);</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(fn);</span><br><span class="line">    <span class="comment">// 全局作用域没有 fn ，给 fn 进行赋值</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(fn);</span><br></pre></td></tr></table></figure>

<p>答案：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// undefined</span></span><br><span class="line"><span class="comment">// [Function: fn]</span></span><br><span class="line"><span class="comment">// [Function: fn]</span></span><br></pre></td></tr></table></figure>

<h4 id="特殊情况"><a href="#特殊情况" class="headerlink" title="特殊情况"></a>特殊情况</h4><ul>
<li><p><strong>判断条件成立，如果有 function 定义的变量，在这个 function 函数后面更改变量的值，更改的都是私有变量</strong></p>
<p>可以把<code>if()&#123;&#125; 的 </code> <code>&#123; &#125;</code> 理解成块级作用域（特例： function(){} 的 <code>&#123; &#125;</code>是私有作用域）</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a);  <span class="comment">// [Function: a]</span></span><br><span class="line">    a = <span class="number">5</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">    a = <span class="number">7</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(a);  <span class="comment">// 7</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a);  <span class="comment">// 5</span></span><br></pre></td></tr></table></figure>

<h3 id="自执行函数"><a href="#自执行函数" class="headerlink" title="自执行函数"></a>自执行函数</h3><ul>
<li><strong>自执行函数在当前作用域下不进行变量提升</strong></li>
</ul>
<p>新版浏览器：</p>
<blockquote>
<ol>
<li>在全局作用域中，没有变量提升</li>
<li>代码自上而下执行，<code>window.f = function()&#123;&#125;</code> 和 <code>window.g = function()&#123;&#125;</code></li>
<li>进入自执行函数，走到 if 语句中，函数 g 声明提升，此时 g 只声明未定义，相当于 undefined，所以 g() 会报类型错误</li>
</ol>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">f = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br><span class="line">g = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br><span class="line">~(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (g() &amp;&amp; [] == ![]) &#123;</span><br><span class="line">        f = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">g</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="built_in">console</span>.log(f());</span><br><span class="line"><span class="built_in">console</span>.log(g());</span><br></pre></td></tr></table></figure>

<p>答案：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// TypeError: g is not a function</span></span><br></pre></td></tr></table></figure>

<p>老版浏览器：</p>
<blockquote>
<ol>
<li><p>在全局作用域中，没有变量提升</p>
</li>
<li><p>代码自上而下执行，<code>window.f = function()&#123;&#125;</code> 和 <code>window.g = function()&#123;&#125;</code></p>
</li>
<li><p>进入自执行函数，走到 if 语句中，函数 g 声明提升并定义，</p>
<p>g() 为 true，参考下图优先级顺序， <code>==</code> 优先级高于 <code>&amp;&amp;</code> </p>
<p><code>g() &amp;&amp; [] ==  ![]</code> ，![] 转换为 false，再转换为0；[] 转换为 0；<code>[] == ![]</code> 返回 true</p>
<p><code>true &amp;&amp; true</code> 返回 true，进入循环</p>
</li>
<li><p>f 进行重新赋值，f 指向 <code>function()&#123;return false&#125;</code>，g 已经声明，不会再重复声明， g没有被修改</p>
</li>
<li><p>答案：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// false</span></span><br><span class="line"><span class="comment">// false</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
</blockquote>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/js-img/JavaScript%E8%BF%90%E7%AE%97%E7%AC%A6%E4%BC%98%E5%85%88%E7%BA%A7.jpg" alt="JavaScript运算符优先级"></p>
<h3 id="赋值运算"><a href="#赋值运算" class="headerlink" title="赋值运算"></a>赋值运算</h3><ul>
<li><strong>只对等号左边进行变量提升</strong>（函数表达式）</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(fn);</span><br><span class="line"><span class="built_in">console</span>.log(fn(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line"><span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span> (<span class="params">n, m</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> n + m;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(fn(<span class="number">3</span>, <span class="number">4</span>));</span><br></pre></td></tr></table></figure>

<p>答案：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// undefined</span></span><br><span class="line"><span class="comment">// TypeError: fn is not a function</span></span><br></pre></td></tr></table></figure>

<h3 id="return-语句"><a href="#return-语句" class="headerlink" title="return 语句"></a>return 语句</h3><ul>
<li>return 下面的代码虽然不能执行，但是可以进行变量提升（f2 进行变量提升）</li>
<li>return 后面的代码不能进行变量提升（f1 不进行变量提升）</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(f2);</span><br><span class="line">    <span class="built_in">console</span>.log(f1);</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;bird&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">fn();</span><br></pre></td></tr></table></figure>

<p>答案：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// [Function: f2]</span></span><br><span class="line"><span class="comment">// ReferenceError: f1 is not defined</span></span><br></pre></td></tr></table></figure>

<h3 id="重复变量名"><a href="#重复变量名" class="headerlink" title="重复变量名"></a>重复变量名</h3><ul>
<li>var 不会进行重复声明，但会重新赋值</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">var</span> num = <span class="number">5</span>;</span><br><span class="line"><span class="built_in">console</span>.log(num); <span class="comment">// 5</span></span><br></pre></td></tr></table></figure>

<ul>
<li>function 在变量提升阶段 声明和定义是一同完成的，如果遇到重复声明定义的，会重新进行赋值</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1.变量提升：</span></span><br><span class="line"><span class="comment">    function fn = 0x111</span></span><br><span class="line"><span class="comment">                = 0x222</span></span><br><span class="line"><span class="comment">                = 0x333</span></span><br><span class="line"><span class="comment">                = 0x444</span></span><br><span class="line"><span class="comment">2.代码从上到下执行</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">fn();</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line">fn();</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">3</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// fn=100 给fn重新赋值</span></span><br><span class="line">fn = <span class="number">100</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">4</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// function 声明和定义早已完成， 100()则会报错</span></span><br><span class="line">fn();</span><br></pre></td></tr></table></figure>

<p>答案：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 4</span></span><br><span class="line"><span class="comment">// 4</span></span><br><span class="line"><span class="comment">// TypeError: fn is not a function</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>前端</tag>
        <tag>作用域</tag>
        <tag>变量提升特殊性</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 实现图片延迟加载（懒加载）</title>
    <url>/posts/399b5a63/</url>
    <content><![CDATA[<h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><ol>
<li>结构中，我们使用一个盒子包裹着图片（图片不显示的时候，可以先占据着这个位置，并且设置默认背景图或背景颜色）</li>
<li>最开始，img 的 src 设置默认背景图，并把图片真实地址放到自定义属性中（比如：data-src ）</li>
<li>当 JS 监听到该图片元素进入可视窗口时，将自定义属性中的地址放到 src 属性中，达到懒加载效果</li>
</ol>
<a id="more"></a>

<p><img data-src="https://img-blog.csdnimg.cn/20201220232703325.gif" alt="懒加载"></p>
<p><strong>作用：</strong></p>
<ol>
<li>防止页面一次性向服务器发送大量请求，导致页面卡顿</li>
<li>全部加载会耗费大量流量</li>
</ol>
<p><strong>预备知识：</strong></p>
<ol>
<li><code>clientHeight</code>：当前盒子可视区域的高度（height+上下padding）</li>
<li><code>offsetHeight</code>：获取当前盒子的总高度（height+上下padding+上下border）</li>
<li><code>offsetTop</code>：当前盒子距离父级参照物的上偏移量</li>
<li><code>offsetParent</code>：当前盒子的父级参照物</li>
<li><code>scrollTop</code>：获取和设置当前盒子纵向滚动条卷曲的高度</li>
</ol>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>为了显示更加明显，当图片的下边框 = 浏览器可视窗口的下边框时，显示图片真实路径</p>
<ul>
<li>图片下边框：图片距离 body 的上偏移量 + 图片自身的总高度</li>
<li>浏览器可视窗口下边框：浏览器滚动条卷曲高度 + 当前浏览器可视窗口的高度</li>
</ul>
<h3 id="单张图片懒加载"><a href="#单张图片懒加载" class="headerlink" title="单张图片懒加载"></a>单张图片懒加载</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>单张图片延时加载<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        * &#123;</span><br><span class="line">            margin: 0;</span><br><span class="line">            padding: 0;</span><br><span class="line">        &#125;</span><br><span class="line">        img &#123;</span><br><span class="line">            width: 100%;</span><br><span class="line">            height: 100%;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#box</span> &#123;</span></span><br><span class="line">            width: 300px;</span><br><span class="line">            height: 200px;</span><br><span class="line">            margin: 800px auto;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/default.jpg&quot;</span> <span class="attr">true-img</span>=<span class="string">&quot;img/1.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;utils.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> box = <span class="built_in">document</span>.getElementById(<span class="string">&quot;box&quot;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> img = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;img&quot;</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 让图片只加载一次</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (img.flag) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">        <span class="comment">// 当前图片盒子的总高度</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> boxH = box.offsetHeight;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 获取当前图片盒子距离 body 上偏移量</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> boxT = utils.offset(box).top;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 获取浏览器可视区域高度</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> winH = utils.win(<span class="string">&quot;clientHeight&quot;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 获取浏览器滚动条卷曲高度</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> winT = utils.win(<span class="string">&quot;scrollTop&quot;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (winH + winT &gt;= boxH + boxT) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 创建一个 img 标签</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> newImg = <span class="keyword">new</span> Image();</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> trueImg = img.getAttribute(<span class="string">&quot;true-img&quot;</span>);</span></span><br><span class="line">            newImg.src = trueImg;</span><br><span class="line"><span class="javascript">            <span class="comment">// 动态创建一个 img 标签用来检测当前的路径是否正确</span></span></span><br><span class="line"><span class="javascript">            newImg.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">// 如果路径正确，执行onload函数</span></span></span><br><span class="line">                img.src = trueImg;</span><br><span class="line"><span class="javascript">                img.flag = <span class="literal">true</span>;</span></span><br><span class="line"><span class="javascript">                newImg = <span class="literal">null</span>;</span></span><br><span class="line">            &#125;;</span><br><span class="line"><span class="javascript">            newImg.onerror = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">// 如果路径错误，执行onerror函数</span></span></span><br><span class="line"><span class="javascript">                img.src = <span class="string">&quot;img/2.jpg&quot;</span>;</span></span><br><span class="line"><span class="javascript">                img.flag = <span class="literal">true</span>;</span></span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onscroll = check;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="多张图片懒加载"><a href="#多张图片懒加载" class="headerlink" title="多张图片懒加载"></a>多张图片懒加载</h3><p>这里使用 <code>getElementsByClassName</code> ，这个具有映射关系，下面简单介绍一下这个映射关系：</p>
<blockquote>
<p><code>getElementsByClassName</code> 返回对象是动态的 HTMLCollection</p>
<ul>
<li><p>动态 添加/删除 元素 HTMLCollection 的长度会产生变化</p>
</li>
<li><ul>
<li>把最后一个 li，从 ul 中删除，lis的长度 -1</li>
</ul>
</li>
<li><ul>
<li>删除的属性，lis 中访问不到</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;lists&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;bg&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;end&quot;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> lis = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;li&quot;</span>);</span></span><br><span class="line"><span class="javascript">    lis[<span class="number">0</span>].classList.remove(<span class="string">&quot;bg&quot;</span>);</span></span><br><span class="line">    lists.removeChild(end);</span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(lis.length); <span class="comment">// 3</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(lis[<span class="number">0</span>].classList); <span class="comment">// DOMTokenList [value: &quot;&quot;]</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>uerySelectorAll</code> 返回对象是静态 NodeList</p>
<ul>
<li><p>动态 添加/删除 元素 NodeList 的长度不会产生变化</p>
</li>
<li><ul>
<li>把最后一个 li，从 ul 中删除，lis的长度并没有 -1</li>
</ul>
</li>
<li><ul>
<li>删除的属性，lis 中访问不到</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;lists&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;bg&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;end&quot;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> lis = <span class="built_in">document</span>.querySelectorAll(<span class="string">&quot;li&quot;</span>);</span></span><br><span class="line"><span class="javascript">    lis[<span class="number">0</span>].classList.remove(<span class="string">&quot;bg&quot;</span>);</span></span><br><span class="line">    lists.removeChild(end);</span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(lis.length); <span class="comment">// 4</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(lis[<span class="number">0</span>].classList); <span class="comment">// DOMTokenList [value: &quot;&quot;]</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        * &#123;</span><br><span class="line">            margin: 0;</span><br><span class="line">            padding: 0;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.box</span> &#123;</span></span><br><span class="line">            margin: 500px auto;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.box</span> <span class="selector-tag">img</span> &#123;</span></span><br><span class="line">            display: block;</span><br><span class="line">            margin: auto;</span><br><span class="line">            margin-bottom: 10px;</span><br><span class="line">            height: 200px;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/default.jpg&quot;</span> <span class="attr">class</span>=<span class="string">&quot;bg&quot;</span> <span class="attr">true-img</span>=<span class="string">&quot;img/1.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/default.jpg&quot;</span> <span class="attr">class</span>=<span class="string">&quot;bg&quot;</span> <span class="attr">true-img</span>=<span class="string">&quot;img/2.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/default.jpg&quot;</span> <span class="attr">class</span>=<span class="string">&quot;bg&quot;</span> <span class="attr">true-img</span>=<span class="string">&quot;img/3.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/default.jpg&quot;</span> <span class="attr">class</span>=<span class="string">&quot;bg&quot;</span> <span class="attr">true-img</span>=<span class="string">&quot;img/4.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/default.jpg&quot;</span> <span class="attr">class</span>=<span class="string">&quot;bg&quot;</span> <span class="attr">true-img</span>=<span class="string">&quot;img/5.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;utils.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 动态的 HTMLCollection 具有映射关系</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> imgs = <span class="built_in">document</span>.getElementsByClassName(<span class="string">&quot;bg&quot;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 判断每一张图片是否要加载</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">delay</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 当函数执行的时候，循环每一张图片，然后判断每一张图片是否需要加载</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; imgs.length; i++) &#123;</span></span><br><span class="line">            delayImg(imgs[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">delayImg</span>(<span class="params">img</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> imgH = img.offsetHeight;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> winH = utils.win(<span class="string">&quot;clientHeight&quot;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> imgT = utils.offset(img).top;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> winT = utils.win(<span class="string">&quot;scrollTop&quot;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (winT + winH &gt; imgH + imgT) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> trueSrc = img.getAttribute(<span class="string">&quot;true-img&quot;</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> newImg = <span class="keyword">new</span> Image();</span></span><br><span class="line">            newImg.src = trueSrc;</span><br><span class="line"><span class="javascript">            newImg.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line">                img.src = trueSrc;</span><br><span class="line"><span class="javascript">                img.className = <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="javascript">                newImg = <span class="literal">null</span>;</span></span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="comment">// 刚进界面把已经符合的图片显示出来</span></span></span><br><span class="line">    delay();</span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onscroll = delay;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;pratice2.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="utils"><a href="#utils" class="headerlink" title="utils"></a>utils</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> utils = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 获取盒子距离body的偏移量</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">offset</span>(<span class="params">el</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> left = el.offsetLeft;</span><br><span class="line">        <span class="keyword">let</span> top = el.offsetTop;</span><br><span class="line">        <span class="keyword">let</span> parent = el.offsetParent;</span><br><span class="line">        <span class="keyword">while</span> (parent !== <span class="built_in">document</span>.body) &#123;</span><br><span class="line">            left += parent.offsetLeft + parent.clientLeft;</span><br><span class="line">            top += parent.offsetTop + parent.clientTop;</span><br><span class="line">            parent = parent.offsetParent;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            left,</span><br><span class="line">            top,</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置或者获取浏览器的某些属性</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">win</span>(<span class="params">attr, val</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (val == <span class="literal">undefined</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">document</span>.documentElement[attr] || <span class="built_in">document</span>.body[attr];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">document</span>.documentElement[attr] = val;</span><br><span class="line">        <span class="built_in">document</span>.body[attr] = val;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        offset,</span><br><span class="line">        win,</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>延迟加载</tag>
        <tag>懒加载</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 垃圾回收与性能优化</title>
    <url>/posts/3344fd09/</url>
    <content><![CDATA[<p>JavaScript 通过自动内存管理实现内存分配和闲置资源回收，基本思路：确定哪个变量不会再使用，然后释放它占用的内存。这个过程是周期性的，即垃圾回收程序每隔一定时间就会自动运行。但是某块内是否还有用，属于“不可判断的”问题，意味着靠算法是解决不了的</p>
<a id="more"></a>

<h2 id="垃圾回收方法"><a href="#垃圾回收方法" class="headerlink" title="垃圾回收方法"></a>垃圾回收方法</h2><h3 id="标记清理"><a href="#标记清理" class="headerlink" title="标记清理"></a>标记清理</h3><p>JavaScript 最常用的垃圾回收策略是标记清理（mark-and-sweep）。当变量进入环境时就将其标记为<code>进入环境</code>，当变量离开环境时将其标记为<code>离开环境</code>。随后每隔一段时间就会检测一下当前作用域中的内存，是否被占用，如果没有被占用，在空闲的时候就将其释放掉</p>
<h3 id="引用计数"><a href="#引用计数" class="headerlink" title="引用计数"></a>引用计数</h3><p>思路是对每个值都记录它被引用的次数。当一个空间地址被占用一次，引用数 +1，如果不占用，就引用数 -1。当一个值引用数为 0时，说明已经没有被占用了，在空闲的时候就将其释放掉</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">problem</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> o1 = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">    <span class="keyword">let</span> o2 = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">    o1.A = o2;</span><br><span class="line">    o2.B = o1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>o1 和 o2 相互引用，意味着它们引用数都是 2，当函数结束后, o1 和 o2 还会存在，如果函数调用多次，会导致大量内存永远不被释放</p>
<h3 id="手动进行内存释放"><a href="#手动进行内存释放" class="headerlink" title="手动进行内存释放"></a>手动进行内存释放</h3><p>在IE8及以前的IE版本中，并非所有对象都是原生 JavaScript 对象，BOM 和 DOM 中的对象是 C++ 实现的组件对象模型（COM），而 COM 对象使用引用计数实现垃圾回收</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> el = <span class="built_in">document</span>.getElementById(<span class="string">&quot;div&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">o.el = el;</span><br><span class="line">el.obj = o;</span><br></pre></td></tr></table></figure>

<p>由于存在循环引用，因此 DOM 元素内存永远不会被回收，需要将变量设置为 null （解除引用），切断变量与其引用值之间的关系</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">o.el = <span class="literal">null</span>;</span><br><span class="line">el.obj = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure>

<p>IE9 把 BOM 和 DOM 对象都改成了 JavaScript 对象，也避免了存在两套垃圾回收算法而导致的问题</p>
<h2 id="提升性能"><a href="#提升性能" class="headerlink" title="提升性能"></a>提升性能</h2><h3 id="const-和-let-提升性能"><a href="#const-和-let-提升性能" class="headerlink" title="const 和 let 提升性能"></a>const 和 let 提升性能</h3><p>let 和 const 都以块（而非函数）为作用域，使用这两个关键字能更早让垃圾回收程序介入</p>
<h3 id="隐藏类和删除操作"><a href="#隐藏类和删除操作" class="headerlink" title="隐藏类和删除操作"></a>隐藏类和删除操作</h3><p>避免“先创建再补充” 式的动态属性赋值。在构造函数中一次声明所有属性。这样，两个实例基本就一样了，因此可以共享一个隐藏类，从而带来潜在的性能提升</p>
<ul>
<li>动态删除属性与动态添加属性导致后果一样，最好的方法时把不想要的属性设置为 null，这样可以保持隐藏类不变和继续共享，同时也能达到删除引用值提供垃圾回收的效果</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.age = <span class="number">12</span>;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> a1 = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="keyword">let</span> a2 = <span class="keyword">new</span> Person(<span class="string">&quot;lion&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 尽量不要这么做</span></span><br><span class="line"><span class="comment">// 此时 Person 实例就会有两个不同的隐藏类，根据操作频率和隐藏类的大小，可能对性能产生影响</span></span><br><span class="line">a2.name = <span class="string">&quot;lion&quot;</span></span><br><span class="line"><span class="comment">// 尽量不要这么做</span></span><br><span class="line"><span class="keyword">delete</span> a1.age;</span><br></pre></td></tr></table></figure>

<h3 id="避免内存泄露"><a href="#避免内存泄露" class="headerlink" title="避免内存泄露"></a>避免内存泄露</h3><p><strong>情况1：</strong></p>
<p>意外声明全局变量是最常见的内存泄露，解释器会把变量 name 当做 window 的属性来创建。在 window 对象上创建的属性，只要 window 本身不被清理就不会消失</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">say</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    name = <span class="string">&quot;lion&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在全局作用域声明 arr（fn() 里没传形参arr；在函数里没有声明 arr），arr 在全局作用域中赋值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">&#125;</span><br><span class="line">fn();</span><br></pre></td></tr></table></figure>

<p><strong>情况2：</strong></p>
<p>定时器也导致内存泄露，只要定时器一直运行，回调函数中引用的 name 就会一直占用内存</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">&quot;lion&quot;</span>;</span><br><span class="line"><span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(name);</span><br><span class="line">&#125;, <span class="number">100</span>);</span><br></pre></td></tr></table></figure>

<p><strong>情况3：</strong></p>
<p>调用 out() 会导致分配给 name 的内存被泄露，执行的时候创建一个内部闭包，只要返回的函数存在就不能清理 name，因为闭包一直在引用着它</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> out = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> name = <span class="string">&quot;lion&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>解除变量的引用不仅可以减少消除循环引用，而且对垃圾回收也有帮助。为促进内存回收，全局对象、全局对象的属性和循环引用都应该在不需要时解除引用</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>垃圾回收</tag>
        <tag>性能优化</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 实现奇偶行变色</title>
    <url>/posts/97acee74/</url>
    <content><![CDATA[<h1 id="JS实现奇偶行变色，鼠标滑上改变颜色，离开恢复颜色"><a href="#JS实现奇偶行变色，鼠标滑上改变颜色，离开恢复颜色" class="headerlink" title="JS实现奇偶行变色，鼠标滑上改变颜色，离开恢复颜色"></a>JS实现奇偶行变色，鼠标滑上改变颜色，离开恢复颜色</h1><blockquote>
<p>css 奇偶行变色是通过 <code>li:nth(odd)</code> 和 <code>li:nth(even)</code> 实现的，鼠标滑上改变颜色，离开恢复颜色是通过 <code>:hover</code> 实现的</p>
</blockquote>
<a id="more"></a>

<ul>
<li>首先搭一下基本结构</li>
</ul>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/js-img/%E9%9A%94%E8%A1%8C%E5%8F%98%E8%89%B2-%E5%9F%BA%E6%9C%AC%E6%A0%B7%E5%BC%8F.jpg" alt="隔行变色-基本样式"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;main&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span>走在前方不迷路，迷路就去找麋鹿<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span>走在前方不迷路，迷路就去找麋鹿<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span>走在前方不迷路，迷路就去找麋鹿<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span>走在前方不迷路，迷路就去找麋鹿<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> main = <span class="built_in">document</span>.getElementById(<span class="string">&quot;main&quot;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> lst = main.getElementsByTagName(<span class="string">&quot;li&quot;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; lst.length; i++) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> el = lst[i];</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="javascript">            el.style.background = <span class="string">&quot;lightblue&quot;</span>;</span></span><br><span class="line"><span class="javascript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">            el.style.background = <span class="string">&quot;lightgreen&quot;</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="错误示范"><a href="#错误示范" class="headerlink" title="错误示范"></a>错误示范</h2><ul>
<li><p>在 for 循环里添加如下代码（添加在尾部）</p>
<p>这里希望 <code>oldColor</code> 保存每一个 li 鼠标滑上之前的颜色</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> oldColor = el.style.background;</span><br><span class="line">el.onmouseover = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 鼠标滑上变色</span></span><br><span class="line">    <span class="built_in">this</span>.style.background = <span class="string">&quot;green&quot;</span>;</span><br><span class="line">&#125;;</span><br><span class="line">el.onmouseout = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 鼠标离开之后恢复原色</span></span><br><span class="line">    <span class="built_in">this</span>.style.background = oldColor;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li>测试一下效果，发现出现如下问题：鼠标滑过，所有 li 都变成最后一行 li 的颜色</li>
</ul>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/js-img/%E9%9A%94%E8%A1%8C%E5%8F%98%E8%89%B2-%E5%87%BA%E7%8E%B0%E9%97%AE%E9%A2%98.gif" alt="隔行变色-出现问题"></p>
<ul>
<li><p>剖析一下问题所在</p>
<p><strong>首先 for 循环会先执行一遍，并给每一个 li 添加鼠标滑上和离开事件，当鼠标滑上或离开时，此时 for 循环已经结束，此时调用的是每一个 li 已经添加上的事件</strong>。循环结束后 oldColor 已经变成最后一个 li 的颜色，所以触发离开事件更改的颜色永远是最后一个 li 的颜色，因此会出现如上问题</p>
</li>
</ul>
<h2 id="问题示范"><a href="#问题示范" class="headerlink" title="问题示范"></a>问题示范</h2><ul>
<li>与上面的问题，区别只在于奇偶行在赋值颜色时，是通过类添加的</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">	<span class="selector-class">.color1</span> &#123;</span></span><br><span class="line">        background: lightblue;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.color2</span> &#123;</span></span><br><span class="line">        background: lightgreen;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> main = <span class="built_in">document</span>.getElementById(<span class="string">&quot;main&quot;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> lst = main.getElementsByTagName(<span class="string">&quot;li&quot;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; lst.length; i++) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="javascript">            lst[i].style.background = <span class="string">&quot;lightblue&quot;</span>;</span></span><br><span class="line"><span class="javascript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">            lst[i].style.background = <span class="string">&quot;lightgreen&quot;</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>在 for 循环里添加如下代码（添加在尾部），发现这个效果是正常的</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> oldColor = lst[i].style.background;</span><br><span class="line">lst[i].onmouseover = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.style.background = <span class="string">&quot;green&quot;</span>;</span><br><span class="line">&#125;;</span><br><span class="line">lst[i].onmouseout = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.style.background = oldColor;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><img data-src="https://gitee.com/lilyn/pic/raw/master/js-img/%E9%9A%94%E8%A1%8C%E5%8F%98%E8%89%B2-%E6%AD%A3%E7%A1%AE%E6%98%BE%E7%A4%BA.gif" alt="隔行变色-正确显示"></p>
<ul>
<li><p>但是有一些问题</p>
<p><code>var oldColor = el.style.background</code> 这个只能获取行内样式</p>
<p>但是如上代码是<strong>通过添加类的方法去设置 li 的颜色，使用 style 属性没办法获取，所以 oldColor 实际存储的是一个空字符串</strong>。因此，鼠标滑上实际上是给 li 添加行内式代码，鼠标离开后，把行内代码变为 “” 去掉，就相当于没添加效果，此时采用的是内嵌样式（也是就通过类名添加的样式）</p>
</li>
</ul>
<h2 id="正确方法"><a href="#正确方法" class="headerlink" title="正确方法"></a>正确方法</h2><h3 id="方法一：给-this-添加新属性"><a href="#方法一：给-this-添加新属性" class="headerlink" title="方法一：给 this 添加新属性"></a>方法一：给 this 添加新属性</h3><p>给每个 li 上添加一个 bgColor 属性，鼠标离开时，只需访问这个 bgColor 查到值，恢复原有颜色即可</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 鼠标滑上li的时候，改变那个li的背景颜色</span></span><br><span class="line">lst[i].onmouseover = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 把原有的颜色绑定上去</span></span><br><span class="line">    <span class="built_in">this</span>.bgColor = <span class="built_in">this</span>.style.backgroundColor;</span><br><span class="line">    <span class="built_in">this</span>.style.background = <span class="string">&quot;green&quot;</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 鼠标离开的时候，恢复原有的颜色</span></span><br><span class="line">lst[i].onmouseout = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.style.background = <span class="built_in">this</span>.bgColor;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="方法二：闭包"><a href="#方法二：闭包" class="headerlink" title="方法二：闭包"></a>方法二：闭包</h3><p>手动添加一层作用域（用闭包形式），里面把鼠标事件赋值给 li 标签，被占用形成不销毁的作用域，x 是私有变量（形参），之后把私有变量 oldColor 存到闭包作用域中，当鼠标事件发生在 li 标签时，就会找到闭包作用域中的私有变量 oldColor</p>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/js-img/%E9%97%AD%E5%8C%85-%E9%9A%94%E8%A1%8C%E5%8F%98%E8%89%B2lst%5B1%5D.jpg" alt="闭包-隔行变色lst[1]"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> oldColor = lst[x].style.background;</span><br><span class="line">    lst[x].onmouseover = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.style.background = <span class="string">&quot;green&quot;</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    lst[x].onmouseout = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.style.background = oldColor;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;)(i);</span><br></pre></td></tr></table></figure>

<h3 id="方法三：let"><a href="#方法三：let" class="headerlink" title="方法三：let"></a>方法三：let</h3><ul>
<li>其实跟方法二是一样的，原理在剖析处</li>
</ul>
<p>在 for 循环里添加如下代码（添加在尾部），这里只需把 oldColor 前面的 var 改成 let 即可</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> oldColor = lst[i].style.background;</span><br><span class="line">lst[i].onmouseover = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.style.background = <span class="string">&quot;green&quot;</span>;</span><br><span class="line">&#125;;</span><br><span class="line">lst[i].onmouseout = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.style.background = oldColor;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>接下来<strong>剖析</strong>一下这个为什么会成功</p>
<p>在 for 循环中，<strong>变量 oldColor 是用 var 声明的，在全局范围都有效，所以全局只有一个变量 oldColor。每一次循环，变量 oldColor 的值都发生改变</strong>。也就是说，所有 li 的鼠标离开事件绑定的颜色都是最后一个 li 的颜色。我们可以小试验验证一下</p>
<p>方法：在 for 循环外面添加 <code>oldColor = &quot;red&quot;</code> ，发现鼠标离开后所有 li 都变成红色，证明每一次循环 oldColor 被改变后，前面几次循环， li 离开事件绑定的颜色也都发生了改变</p>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/js-img/%E9%9A%94%E8%A1%8C%E5%8F%98%E8%89%B2-%E5%B0%8F%E8%AF%95%E9%AA%8C.gif" alt="隔行变色-小试验"></p>
</li>
</ul>
<p>  而 <strong>let 声明的 oldColor 只在本轮循环中有效，所以每一次循环的 oldColor 其实都是一个新的变量</strong>，因此所有 li 的鼠标离开事件绑定的颜色都是当前 li 的颜色，所以效果会成功</p>
<p>  可以去 <a href="babeljs.cn/repl">babel</a> 网站，看一下 let 都做了什么</p>
<p>  <img data-src="https://gitee.com/lilyn/pic/raw/master/js-img/%E9%97%AD%E5%8C%85-%E9%9A%94%E8%A1%8C%E5%8F%98%E8%89%B2let.png" alt="闭包-隔行变色let"></p>
<hr>

<h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">            * &#123;</span><br><span class="line">                margin: 0;</span><br><span class="line">                padding: 0;</span><br><span class="line">            &#125;</span><br><span class="line">            body &#123;</span><br><span class="line">                background: darkturquoise;</span><br><span class="line">            &#125;</span><br><span class="line">            ul &#123;</span><br><span class="line">                list-style: none;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="css">            <span class="selector-id">#main</span> &#123;</span></span><br><span class="line">                width: 500px;</span><br><span class="line">                margin: auto;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="css">            <span class="selector-id">#main</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line">                height: 50px;</span><br><span class="line">                line-height: 50px;</span><br><span class="line">                text-align: center;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;main&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>走在前方不迷路，迷路就去找麋鹿<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>走在前方不迷路，迷路就去找麋鹿<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>走在前方不迷路，迷路就去找麋鹿<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>走在前方不迷路，迷路就去找麋鹿<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> main = <span class="built_in">document</span>.getElementById(<span class="string">&quot;main&quot;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> lst = main.getElementsByTagName(<span class="string">&quot;li&quot;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; lst.length; i++) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> el = lst[i];</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="javascript">            el.style.background = <span class="string">&quot;lightblue&quot;</span>;</span></span><br><span class="line"><span class="javascript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">            el.style.background = <span class="string">&quot;lightgreen&quot;</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> oldColor = el.style.background;</span></span><br><span class="line"><span class="javascript">        el.onmouseover = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.bgColor = <span class="built_in">this</span>.style.backgroundColor;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.style.background = <span class="string">&quot;green&quot;</span>;</span></span><br><span class="line">        &#125;;</span><br><span class="line"><span class="javascript">        el.onmouseout = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.style.background = <span class="built_in">this</span>.bgColor;</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img data-src="https://gitee.com/lilyn/pic/raw/master/js-img/%E9%9A%94%E8%A1%8C%E5%8F%98%E8%89%B2-%E6%AD%A3%E7%A1%AE%E6%98%BE%E7%A4%BA.gif" alt="隔行变色-正确显示"></p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>问题</tag>
        <tag>闭包</tag>
        <tag>this</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 数组去重的四种方法</title>
    <url>/posts/908d091d/</url>
    <content><![CDATA[<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol>
<li>双 for 循环去重</li>
<li>借用对象属性不能相同特点去重</li>
<li>新建数组去存储不同值（includes 与 indexOf 的区别）</li>
<li>ES6 Set去重</li>
</ol>
<a id="more"></a>

<h3 id="方法一：双-for-循环"><a href="#方法一：双-for-循环" class="headerlink" title="方法一：双 for 循环"></a>方法一：双 for 循环</h3><ul>
<li>原理：依次拿出数组中的每一项，和它后面的所有剩余项进行比较，如果有相同的就删除</li>
<li>NaN 与任何值都不相等，包括 NaN 本身</li>
<li><code>null==undefined(true)</code> </li>
<li>对象和对象比较的是空间地址：<code>&#123;&#125;==&#123;&#125;(false)</code></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, &#123;&#125;, &#123;&#125;, <span class="literal">NaN</span>, <span class="literal">NaN</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">undefined</span>, <span class="literal">undefined</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique1</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> el1 = arr[i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = i + <span class="number">1</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line">            <span class="keyword">var</span> el2 = arr[j];</span><br><span class="line">            <span class="keyword">if</span> (el1 == el2) &#123;</span><br><span class="line">                arr.splice(j, <span class="number">1</span>);</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(unique1(arr)); <span class="comment">// [ 1, 2, &#123;&#125;, &#123;&#125;, NaN, null]</span></span><br></pre></td></tr></table></figure>

<h3 id="方法二：借用对象属性不能相同特点去重"><a href="#方法二：借用对象属性不能相同特点去重" class="headerlink" title="方法二：借用对象属性不能相同特点去重"></a>方法二：借用对象属性不能相同特点去重</h3><ul>
<li>原理：创建一个空对象，去遍历数组中的每一项，把数组中的每项当成属性名和属性值，给此对象添加，在添加的过程中，如果此对象已经有此项，说明重复，在数组中删除此项</li>
<li>访问对象的属性如果属性不存在返回 undefined，<code>obj[null]</code> 返回 undefined</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, &#123;&#125;, &#123;&#125;, <span class="literal">NaN</span>, <span class="literal">NaN</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">undefined</span>, <span class="literal">undefined</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique2</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> el = arr[i];</span><br><span class="line">        <span class="comment">// typeof (obj[el]) != &quot;undefined&quot;</span></span><br><span class="line">        <span class="keyword">if</span> (obj[el] == el) &#123;</span><br><span class="line">            arr.splice(i, <span class="number">1</span>);</span><br><span class="line">            i--;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        obj[el] = el;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(unique2(arr)); <span class="comment">// [ 1, 2, &#123;&#125;, &#123;&#125;, NaN, NaN ]</span></span><br></pre></td></tr></table></figure>

<h3 id="方法三：新建数组去存储不同值"><a href="#方法三：新建数组去存储不同值" class="headerlink" title="方法三：新建数组去存储不同值"></a>方法三：新建数组去存储不同值</h3><ul>
<li>原理：创建一个新数组，去遍历数组中的每一项，如果新数组没有这个（利用 indexOf） push 进新数组</li>
<li>indexOf 比较参数与数组中的每一项时，会使用全等操作符（===）</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, &#123;&#125;, &#123;&#125;, <span class="literal">NaN</span>, <span class="literal">NaN</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">undefined</span>, <span class="literal">undefined</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique3</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> newArr = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> el = arr[i];</span><br><span class="line">        <span class="comment">// newArr.indexOf(el) &lt; 0 说明没有</span></span><br><span class="line">        <span class="keyword">if</span> (newArr.indexOf(el) == -<span class="number">1</span>) &#123;</span><br><span class="line">            newArr.push(el);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newArr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(unique3(arr)); <span class="comment">// [ 1, 2, &#123;&#125;, &#123;&#125;, NaN, NaN, null, undefined ]</span></span><br></pre></td></tr></table></figure>

<ul>
<li>原理：与上面那个同理</li>
<li>includes 可以去重 NaN</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, &#123;&#125;, &#123;&#125;, <span class="literal">NaN</span>, <span class="literal">NaN</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">undefined</span>, <span class="literal">undefined</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique4</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> newArr = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> el = arr[i];</span><br><span class="line">        <span class="keyword">if</span> (!newArr.includes(el)) &#123;</span><br><span class="line">            newArr.push(el);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newArr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(unique4(arr)); <span class="comment">// [ 1, 2, &#123;&#125;, &#123;&#125;, NaN, null, undefined ]</span></span><br></pre></td></tr></table></figure>

<p><strong>includes 与 indexOf 的区别</strong></p>
<ul>
<li>如果数组里只有 NaN，利用 indexOf 是无法判断的，必须使用 includes 方法</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="literal">NaN</span>]</span><br><span class="line">arr.indexOf(<span class="literal">NaN</span>)   <span class="comment">// -1</span></span><br><span class="line">arr.includes(<span class="literal">NaN</span>)  <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr1 = [<span class="literal">undefined</span>]</span><br><span class="line">arr1.indexOf(<span class="literal">undefined</span>)  <span class="comment">// 0</span></span><br><span class="line">arr1.includes(<span class="literal">undefined</span>) <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr2 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1</span>)</span><br><span class="line">arr2.indexOf(<span class="literal">undefined</span>)  <span class="comment">// -1</span></span><br><span class="line">arr2.includes(<span class="literal">undefined</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h3 id="方法四：ES6-Set去重"><a href="#方法四：ES6-Set去重" class="headerlink" title="方法四：ES6 Set去重"></a>方法四：ES6 Set去重</h3><ul>
<li>这种方法无法去掉 “{}” 空对象</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, &#123;&#125;, &#123;&#125;, <span class="literal">NaN</span>, <span class="literal">NaN</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">undefined</span>, <span class="literal">undefined</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique5</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Array</span>.from(<span class="keyword">new</span> <span class="built_in">Set</span>(arr));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(unique5(arr)); <span class="comment">// [ 1, 2, &#123;&#125;, &#123;&#125;, NaN, null, undefined ]</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>基础</tag>
        <tag>前端</tag>
        <tag>数组</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 深浅拷贝</title>
    <url>/posts/6362a5/</url>
    <content><![CDATA[<h3 id="JS基本数据类型"><a href="#JS基本数据类型" class="headerlink" title="JS基本数据类型"></a>JS基本数据类型</h3><ul>
<li>基础数据类型按值进行访问的，可以操作保存在变量中的实际值</li>
<li>引用数据类型，不允许直接访问值，不能直接操作对象的内存空间，在操作对象时，实际操作的是引用</li>
</ul>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/js-img/JS%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.jpg" alt="JS数据类型"></p>
<br>

<h3 id="存储方式"><a href="#存储方式" class="headerlink" title="存储方式"></a>存储方式</h3><p>再看一下存储方式，结合深浅拷贝的定义就会理解一些了</p>
<ul>
<li>基础类型存在栈中</li>
<li>引用类型同时保存在栈内存和堆内存</li>
</ul>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/js-img/JS%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%AD%98%E5%82%A8%E6%96%B9%E5%BC%8F.jpg" alt="存储方式"></p>
<br>

<h3 id="深拷贝-和-浅拷贝"><a href="#深拷贝-和-浅拷贝" class="headerlink" title="深拷贝 和 浅拷贝"></a>深拷贝 和 浅拷贝</h3><p><strong>浅拷贝方式</strong></p>
<ol>
<li><p>直接进行赋值</p>
<p>赋值引用 a 和 b 都指向同一个对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> b = a;</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果拷贝的是普通对象</p>
<ul>
<li><code>Object.assign(target, source)</code></li>
</ul>
<p>ES6 新增的对象方法，它可以实现第一层的“深拷贝”，但无法实现多层深拷贝</p>
<p>对于 a 对象所有的属性和方法都进行了深拷贝，但是 a 对象的属性 data 是对象，它拷贝的是地址，也就是浅拷贝</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123; <span class="attr">name</span>: <span class="string">&quot;lion&quot;</span>, <span class="attr">age</span>: <span class="number">6</span> &#125;</span><br><span class="line"><span class="keyword">var</span> c = &#123;&#125;;</span><br><span class="line"><span class="built_in">Object</span>.assign(c, a);</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果拷贝的是数组</p>
<ul>
<li><code>Array.prototype.concat()</code></li>
<li>ES6 扩展运算符</li>
<li><code>Array.prototype.slice()</code></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> b = a.concat();</span><br><span class="line"><span class="keyword">var</span> [...c] = a;</span><br><span class="line"><span class="keyword">var</span> d = a.slice();</span><br></pre></td></tr></table></figure>

</li>
</ol>
<br>

<p><strong>拷贝对象</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;</span><br><span class="line">    name: <span class="string">&quot;bird&quot;</span>,</span><br><span class="line">    data: &#123;<span class="attr">num</span>:<span class="number">10</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> b = a;</span><br><span class="line">b.name = <span class="string">&quot;lion&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a.name); <span class="comment">// lion</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c = &#123;&#125;;</span><br><span class="line"><span class="built_in">Object</span>.assign(c, a);</span><br><span class="line">c.name = <span class="string">&quot;cat&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a.name); <span class="comment">// lion，发现 a中的name并没有改变</span></span><br><span class="line">c.data.num = <span class="number">5</span>;</span><br><span class="line"><span class="built_in">console</span>.log(c.data.num); <span class="comment">// 5，说明 data 对象没有被深拷贝</span></span><br></pre></td></tr></table></figure>

<p><strong>拷贝数组</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// concat 不修改原数组，会浅拷贝原数组</span></span><br><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>,<span class="number">2</span>,&#123;<span class="attr">name</span>:<span class="string">&quot;bird&quot;</span>&#125;];</span><br><span class="line"><span class="keyword">var</span> b = a.concat();</span><br><span class="line">b[<span class="number">2</span>].name = <span class="string">&quot;cat&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a[<span class="number">2</span>].name); <span class="comment">// cat</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6扩展运算符</span></span><br><span class="line"><span class="keyword">var</span> [...c] = a;</span><br><span class="line"></span><br><span class="line"><span class="comment">// slice 不修改原数组，会浅拷贝原数组</span></span><br><span class="line"><span class="keyword">var</span> d = a.slice();</span><br></pre></td></tr></table></figure>

<br>

<p><strong>深拷贝方式</strong></p>
<ol>
<li>递归赋值</li>
<li><code>JSON.parse() 和 JSON.stringify</code></li>
</ol>
<br>

<p><strong>实例</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;</span><br><span class="line">    name: <span class="string">&quot;bird&quot;</span>,</span><br><span class="line">    data: &#123;<span class="attr">num</span>:<span class="number">10</span>&#125;,</span><br><span class="line">    say: <span class="function">()=&gt;</span><span class="built_in">console</span>.log(<span class="string">&quot;say&quot;</span>)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> b = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 递归赋值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepClone</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> objClone = <span class="built_in">Array</span>.isArray(obj) ? [] : &#123;&#125;;</span><br><span class="line">    <span class="keyword">if</span> (obj &amp;&amp; <span class="keyword">typeof</span> obj === <span class="string">&quot;object&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">            <span class="comment">// 判断是不是自有属性，而不是继承属性</span></span><br><span class="line">            <span class="keyword">if</span> (obj.hasOwnProperty(key)) &#123;</span><br><span class="line">                <span class="comment">// 判断 obj 子元素是否为对象或数组，如果是，递归复制</span></span><br><span class="line">                <span class="keyword">if</span> (obj[key] &amp;&amp; <span class="keyword">typeof</span> obj[key] === <span class="string">&quot;object&quot;</span>) &#123;</span><br><span class="line">                    objClone[key] = <span class="built_in">this</span>.deepClone(obj[key]);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// 如果不是，简单复制</span></span><br><span class="line">                    objClone[key] = obj[key];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> objClone;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> c = deepClone(a);</span><br><span class="line">c.name = <span class="string">&#x27;cat&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a.name); <span class="comment">// bird</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// JSON.parse 和 JSON.stringify()</span></span><br><span class="line"><span class="keyword">var</span> d = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(a));</span><br><span class="line">d.name = <span class="string">&quot;lion&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a.name); <span class="comment">// bird</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>数组</tag>
        <tag>深拷贝</tag>
        <tag>浅拷贝</tag>
        <tag>ES6方法</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 检测数据类型的四种方式</title>
    <url>/posts/5d2789f/</url>
    <content><![CDATA[<p>JavaScript 有八种数据类型：</p>
<p>基本数据类型：Boolean、Number、String、null、undefined、Symbol(ES6新增)、BigInt（ES2020引入）</p>
<p>引用数据类型：Object</p>
<blockquote>
<p>Symbol：表示独一无二的值</p>
<p>BigInt：用来解决 JavaScript 中数字只能到 53 个二进制位，大于这个范围的整数，无法精确表示</p>
</blockquote>
<a id="more"></a>

<h3 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a>typeof</h3><blockquote>
<p>底层原理：typeof 是按照”值”在计算机存储的”二进制”值来检测的，凡是以000开始的都认为是对象</p>
</blockquote>
<p>返回结果是一个字符串（全小写字母），可返回的类型有：</p>
<ul>
<li>“number”</li>
<li>“string”</li>
<li>“boolean”</li>
<li>“undefined”</li>
<li>“object”</li>
<li>“function”</li>
<li>“symbol”</li>
<li>“bigint”</li>
</ul>
<p><strong>注意：</strong><code>typeof null</code> 返回的是 “object”，<code>typeof 变量（不存在）</code> 返回的是 “undefined”</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="literal">null</span>;  <span class="comment">// &quot;object&quot;</span></span><br><span class="line"><span class="keyword">typeof</span> say;   <span class="comment">// &quot;undefined&quot;（上下文没有定义）</span></span><br></pre></td></tr></table></figure>

<p>ECMAScript 提供的内置类型在计算机底层是按照二进制存储的</p>
<ul>
<li>1：数字 010：浮点数</li>
<li>100：字符串</li>
<li>-2^30：undefined</li>
<li>000000：null</li>
<li>000：对象</li>
</ul>
<p>JS 最初为了性能考虑使用低位存储变量信息，000 开头代表对象，然而 null 表示全 0，所以将它错误的判断为 object</p>
<h3 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h3><blockquote>
<p>底层原理：首先查找 <code>Symbol.hasInstance</code>，如果存在，基于这个检测。如果没有，则基于原型链<code>__proto__</code>查找，只要出现这个类的原型，结果就是true</p>
</blockquote>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/js-img/dir(Function.prototype).jpg" alt="dir(Function.prototype)"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fn</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 基于ES6 class方式构建Symbol.hasInstance才会生效</span></span><br><span class="line">    <span class="keyword">static</span>[<span class="built_in">Symbol</span>.hasInstance]() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;OK&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> f = <span class="keyword">new</span> Fn;</span><br><span class="line"><span class="built_in">console</span>.log(f <span class="keyword">instanceof</span> Fn); <span class="comment">// OK false</span></span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong></p>
<ul>
<li>instanceof 不能正确判断基本数据类型</li>
<li>原型链可以重构，导致结果可能不准确</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">arr <span class="keyword">instanceof</span> <span class="built_in">Array</span>;   <span class="comment">// true</span></span><br><span class="line">arr <span class="keyword">instanceof</span> <span class="built_in">Object</span>;  <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="literal">null</span> <span class="keyword">instanceof</span> <span class="built_in">Object</span>;  <span class="comment">// false</span></span><br><span class="line"><span class="number">123</span> <span class="keyword">instanceof</span> <span class="built_in">Number</span>;   <span class="comment">// false</span></span><br><span class="line"><span class="string">&quot;&quot;</span> <span class="keyword">instanceof</span> <span class="built_in">String</span>;    <span class="comment">// false</span></span><br><span class="line"><span class="literal">true</span> <span class="keyword">instanceof</span> <span class="built_in">Boolean</span>; <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<h4 id="封装-instanceOf"><a href="#封装-instanceOf" class="headerlink" title="封装 instanceOf"></a>封装 instanceOf</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">instance_of</span>(<span class="params">target, ctor</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> tType = <span class="keyword">typeof</span> target,</span><br><span class="line">        cType = <span class="keyword">typeof</span> ctor;</span><br><span class="line">    <span class="comment">// 保证ctor是一个构造函数</span></span><br><span class="line">    <span class="keyword">if</span> (cType !== <span class="string">&quot;function&quot;</span> || !ctor.prototype) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">&quot;ctor is not a constructor!&quot;</span>);</span><br><span class="line">    <span class="comment">// 不处理原始值，排除null undefined 字面量</span></span><br><span class="line">    <span class="keyword">if</span> (target == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="regexp">/^(object|function)$/i</span>.test(tType)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">// 优先检测 Symbol.hasInstance</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> ctor[<span class="built_in">Symbol</span>.hasInstance] === <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> ctor[<span class="built_in">Symbol</span>.hasInstance](target);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 没有这个属性，再按照 ctor.prototype 是否出现在 example 的原型链上检测</span></span><br><span class="line">    <span class="keyword">let</span> prototype = <span class="built_in">Object</span>.getPrototypeOf(target);</span><br><span class="line">    <span class="keyword">while</span> (prototype) &#123;</span><br><span class="line">        <span class="keyword">if</span> (prototype == ctor.prototype) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        prototype = <span class="built_in">Object</span>.getPrototypeOf(prototype);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(instance_of([], <span class="built_in">Array</span>));  <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(instance_of([], <span class="built_in">RegExp</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(instance_of([], <span class="built_in">Object</span>)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>



<h3 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor"></a>constructor</h3><p>constructor 可以得知某个实例对象，到底是哪一个构造函数产生的</p>
<p><strong>注意：</strong>constructor 可以手动更改（如果手动更改原型指向，检测就不准确了）；如果修改了原型对象，一般也会同时修改 constructor。null 和 undefined 是无效的对象，所以不存在 constructor </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="literal">true</span>.constructor === <span class="built_in">Boolean</span>; <span class="comment">// true</span></span><br><span class="line"><span class="keyword">var</span> a = &#123;&#125;;</span><br><span class="line">a.constructor; <span class="comment">// Object()</span></span><br><span class="line">a.constructor = <span class="number">3</span>;</span><br><span class="line">a.constructor; <span class="comment">// 3</span></span><br></pre></td></tr></table></figure>

<h3 id="Object-prototype-toString-call"><a href="#Object-prototype-toString-call" class="headerlink" title="Object.prototype.toString.call()"></a>Object.prototype.toString.call()</h3><blockquote>
<p>底层原理：除了null/undefined，大部分数据类型所属类的原型上，都有toString方法；但是除了 Object.prototype.toString 用来检测数据类型，其余的都是转换为字符串的</p>
<ul>
<li>返回值：”[object ?]”<ul>
<li>先查找 [val] 的 <code>Symbol.toStringTag</code> （先找私有的，私有没有则向所属类原型上找），属性值就是”?”的值</li>
<li>没有，则内部是返回当前实例所属构造函数的名字 <code>“[object Number/String/Null/Undefined/Object/Array/Function/GeneratorFunction...]”</code></li>
</ul>
</li>
</ul>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fn</span> </span>&#123;&#125;</span><br><span class="line">Fn.prototype[<span class="built_in">Symbol</span>.toStringTag] = <span class="string">&#x27;Fn&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> f = <span class="keyword">new</span> Fn;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(f)); <span class="comment">// [object Fn]</span></span><br></pre></td></tr></table></figure>



<p>对于 Object，直接调用 toString 就可以返回 <code>&quot;[object Object]&quot;</code>。而对于其他对象，则需要通过 call/apply 来调用才能正确返回类型信息</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="literal">null</span>); <span class="comment">// &quot;[object Null]&quot;</span></span><br></pre></td></tr></table></figure>

<p>我们可以封装一个 isType 方法对类型进行判断</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> isType = <span class="function">(<span class="params">type, obj</span>) =&gt;</span></span><br><span class="line">    <span class="built_in">Object</span>.prototype.toString.call(obj) === <span class="string">`[object <span class="subst">$&#123;type&#125;</span>]`</span>;</span><br><span class="line"><span class="built_in">console</span>.log(isType(<span class="string">&quot;Number&quot;</span>, <span class="number">12</span>)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>



<p>思考：每次都写 <code>Object.prototype.toString</code> 是否可以简写？</p>
<ul>
<li>如果调用 toString 方法，obj 首先会在自己私有方法里找，如果没有则顺着原型链往上找，所以 prototype 可以省略</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line">obj.toString.call(<span class="literal">null</span>); <span class="comment">// &quot;[object Null]&quot;</span></span><br></pre></td></tr></table></figure>

<p>不过上面还是不够简洁，可否把 obj 直接省去？</p>
<ul>
<li>浏览器全局环境：window（是一个对象）</li>
<li>node全局环境：global（是一个对象）</li>
</ul>
<p>obj 省去的话，则默认是 window 调用 toString，我们来看一下 window 的原型链，最终指向 Object</p>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/js-img/window%E5%8E%9F%E5%9E%8B.jpg" alt="window原型"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">toString.call(<span class="literal">null</span>); <span class="comment">// 浏览器：&quot;[object Null]&quot;</span></span><br><span class="line">toString.call(<span class="literal">null</span>); <span class="comment">// node：[object Null]</span></span><br></pre></td></tr></table></figure>

<p>进一步验证一下，window 原型链上的 toString 是否和 Object.prototype 上的 toString 一致</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.toString === <span class="built_in">Object</span>.prototype.toString; <span class="comment">// 浏览器：true</span></span><br><span class="line"><span class="built_in">global</span>.toString === <span class="built_in">Object</span>.prototype.toString; <span class="comment">// node：true</span></span><br></pre></td></tr></table></figure>

<p>不过不推荐这么写，毕竟查找原型链还得花上一阵子时间</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>typeof</tag>
        <tag>instanceof</tag>
        <tag>constructor</tag>
        <tag>toString.call</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 类数组转数组的四种方法</title>
    <url>/posts/f0469b23/</url>
    <content><![CDATA[<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol>
<li>for 循环</li>
<li>[].slice.call() （calll方法：[].map.call()）</li>
<li>ES6语法：Array.from()</li>
<li>ES6语法：展开运算符</li>
</ol>
<a id="more"></a>

<p>原生 js 获取 DOM 元素集合是一个类数组对象，所以不能直接利用数组对象（比如：sort、forEach），需要转换为数组后，才可以使用</p>
<p>下述方法使用 arguments 当伪数组</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> res = toArr(<span class="built_in">arguments</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line">&#125;</span><br><span class="line">fn(<span class="string">&quot;A&quot;</span>, <span class="number">3</span>, <span class="number">5</span>); <span class="comment">// 返回 [ &#x27;A&#x27;, 3, 5 ]</span></span><br></pre></td></tr></table></figure>

<h3 id="1-for-循环"><a href="#1-for-循环" class="headerlink" title="1.for 循环"></a>1.for 循环</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toArr</span>(<span class="params">cArr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> arr = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; cArr.length; i++) &#123;</span><br><span class="line">        arr.push(cArr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-slice-call-call-方法"><a href="#2-slice-call-call-方法" class="headerlink" title="2.[].slice.call() call() 方法"></a>2.[].slice.call() <code>call() 方法</code></h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toArr</span>(<span class="params">cArr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [].slice.call(cArr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>arr.slice(start, end)</code> ：提取索引 start 复制到索引 end 的部分（不包括 end</li>
<li><code>Array.prototype.slice.call(arguments, 0)</code>，就是把 <code>arguments</code> 当做当前对象，要调用 <code>arguments</code> 的 <code>slice</code> 方法，<code>slice(0)</code>  获取所有项（不包含索引）</li>
<li>[] 是一个数组对象，会去原型链上找 <code>slice</code> 这个方法，所以可以简写成 <code>[].slice.call()</code></li>
</ul>
<p><code>call() </code> 方法可以搭配的比较广，这里再举个例子：可以用 map 方法，返回遍历的 item 即可</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toArr</span>(<span class="params">cArr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [].map.call(cArr, <span class="function">(<span class="params">item</span>) =&gt;</span> item);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-ES6语法：Array-from"><a href="#3-ES6语法：Array-from" class="headerlink" title="3.ES6语法：Array.from()"></a>3.ES6语法：Array.from()</h3><p>只要有 length 属性的对象，都可以用此方法转换成数组</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toArr</span>(<span class="params">cArr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Array</span>.from(cArr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-ES6语法：展开运算符"><a href="#4-ES6语法：展开运算符" class="headerlink" title="4.ES6语法：展开运算符"></a>4.ES6语法：展开运算符</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toArr</span>(<span class="params">cArr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [...cArr];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>数组</tag>
      </tags>
  </entry>
  <entry>
    <title>JS中出现undefined和null情况</title>
    <url>/posts/ea5004b1/</url>
    <content><![CDATA[<p>undefined：未定义</p>
<p>null：空值</p>
<a id="more"></a>

<h2 id="undefined"><a href="#undefined" class="headerlink" title="undefined"></a>undefined</h2><ul>
<li>变量提升阶段，只声明未定义，返回 undefined</li>
<li>函数没设置返回值（return），返回 undefined</li>
<li>函数有形参但没传实参，返回 undefined</li>
<li>获取对象不存在的属性，返回 undefined</li>
<li>typeof 一个不存在的变量，返回 undefined</li>
<li>JS 严格模式，调用函数但函数前面没有<code>.</code>（排除显示绑定），this 是 undefined</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="built_in">console</span>.log(fn1()); <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn2</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(name); <span class="comment">// undefined</span></span><br><span class="line">&#125;</span><br><span class="line">fn2()</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(obj.a); <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> b); <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&quot;use strict&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn3</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>); <span class="comment">// undefined</span></span><br><span class="line">&#125;</span><br><span class="line">fn3()</span><br></pre></td></tr></table></figure>



<h2 id="null"><a href="#null" class="headerlink" title="null"></a>null</h2><ul>
<li>手动设置变量的值或某一个属性值为 null</li>
<li>JS 获取 DOM 元素，如果没有获取到指定的元素对象，返回 null</li>
<li>正则捕获时，如果没有捕获到，返回 null</li>
<li><code>Object.prototype.__proto__</code> 的值是 null</li>
<li>document 和 body 很多属性都是 null，这里就不列举了</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="literal">null</span></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// null</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 页面中没有#box的元素</span></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&quot;box&quot;</span>) <span class="comment">// null</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;hello&quot;</span>.match(<span class="regexp">/\d/g</span>) <span class="comment">// null</span></span><br><span class="line">/\d/g.exec(<span class="string">&quot;hello&quot;</span>)  <span class="comment">// null</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.prototype.__proto__ <span class="comment">// null</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.body.offsetParent <span class="comment">// null</span></span><br><span class="line"><span class="built_in">document</span>.parentNode        <span class="comment">// null</span></span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>undefined</tag>
      </tags>
  </entry>
  <entry>
    <title>JS实现商城排序</title>
    <url>/posts/d2addf30/</url>
    <content><![CDATA[<h2 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h2><ul>
<li>根据上架时间/热度/价格进行升序/降序排序</li>
<li>上箭头亮代表升序，下箭头亮代表降序</li>
</ul>
<a id="more"></a>

<p><img data-src="https://img-blog.csdnimg.cn/20201220203345422.gif" alt="商城排序"></p>
<h3 id="渲染-li-标签"><a href="#渲染-li-标签" class="headerlink" title="渲染 li 标签"></a>渲染 li 标签</h3><ul>
<li>获取 ul 以便让每一个 li 渲染到页面</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> lists = <span class="built_in">document</span>.querySelector(<span class="string">&quot;.lists&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> lis = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>把每一个 li 渲染到页面上</p>
<p>这里为了操作方便，给每一个 li 绑定自定义属性，之后根据属性值获取其中内容 <code>li.getAttribute(...)</code> 即可</p>
<p>如果不这样做，则需要通过 <code>li.querySelector(...).innerText</code> 获取</p>
<p><strong>注意：</strong><code>querySelectorAll</code> 获取到的是类数组，因为需要进行排序，使用数组的 sort() 方法，所以需要用 <code>[].slice.call()</code> 或 <code>Array.from</code> 转换成数组</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Init</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> str = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; data.length; i++) &#123;</span><br><span class="line">        <span class="keyword">const</span> el = data[i];</span><br><span class="line">        str += <span class="string">`&lt;li time=&quot;<span class="subst">$&#123;el.time&#125;</span>&quot; hot=&quot;<span class="subst">$&#123;el.hot&#125;</span>&quot; price=&quot;<span class="subst">$&#123;el.price&#125;</span>&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;img src=&quot;<span class="subst">$&#123;el.img&#125;</span>&quot; alt=&quot;&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;p class=&quot;title&quot;&gt;<span class="subst">$&#123;el.title&#125;</span>&lt;/p&gt;</span></span><br><span class="line"><span class="string">        &lt;p class=&quot;time&quot;&gt;<span class="subst">$&#123;el.time&#125;</span>&lt;/p&gt;</span></span><br><span class="line"><span class="string">        &lt;p class=&quot;info&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;span class=&quot;price&quot;&gt;<span class="subst">$&#123;el.price&#125;</span>&lt;/span&gt;</span></span><br><span class="line"><span class="string">            &lt;span class=&quot;hot&quot;&gt;<span class="subst">$&#123;el.hot&#125;</span>&lt;/span&gt;</span></span><br><span class="line"><span class="string">        &lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;/li&gt;`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    lists.innerHTML = str;</span><br><span class="line">    lis = [].slice.call(lists.querySelectorAll(<span class="string">&quot;li&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="点击-a-标签进行排序"><a href="#点击-a-标签进行排序" class="headerlink" title="点击 a 标签进行排序"></a>点击 a 标签进行排序</h3><ul>
<li>获取 a 标签</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> links = <span class="built_in">document</span>.querySelectorAll(<span class="string">&quot;.top a&quot;</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li><p>给 a 标签添加鼠标点击事件</p>
<p>为实现每次排序都是上一次的倒序，需要给每一个 a 标签添加一个自定义属性作为标志 <code>links[i].flag = -1</code> ，flag 值为1代表升序，每次点击事件只需 flag 取反即可 <code>this.flag *= -1</code></p>
<p><strong>注意：</strong> sort() 方法中回调函数 this 指向 window，所以需要用一个变量存储 this <code>let that = this;</code></p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; links.length; i++) &#123;</span><br><span class="line">    links[i].flag = -<span class="number">1</span>;</span><br><span class="line">    links[i].onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.flag *= -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">let</span> that = <span class="built_in">this</span>;</span><br><span class="line">        <span class="keyword">let</span> sortFlag = <span class="built_in">this</span>.getAttribute(<span class="string">&quot;sortFlag&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (sortFlag == <span class="string">&quot;time&quot;</span>) &#123;</span><br><span class="line">            lis.sort(<span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> (a.getAttribute(sortFlag).replace(<span class="regexp">/-/g</span>, <span class="string">&quot;&quot;</span>) - b.getAttribute(sortFlag).replace(<span class="regexp">/-/g</span>, <span class="string">&quot;&quot;</span>)) * that.flag;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            lis.sort(<span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> (a.getAttribute(sortFlag) - b.getAttribute(sortFlag)) * that.flag;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; lis.length; i++) &#123;</span><br><span class="line">            lists.appendChild(lis[i])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="点击-a-标签点亮排序箭头"><a href="#点击-a-标签点亮排序箭头" class="headerlink" title="点击 a 标签点亮排序箭头"></a>点击 a 标签点亮排序箭头</h3><ul>
<li>升/降序高亮对应箭头字体图标</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arrows = <span class="built_in">this</span>.querySelectorAll(<span class="string">&quot;b&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> arrCur = <span class="built_in">document</span>.querySelectorAll(<span class="string">&quot;.top b.current&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arrCur.length; i++) &#123;</span><br><span class="line">    arrCur[i].classList.remove(<span class="string">&quot;current&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.flag == <span class="number">1</span>) &#123;</span><br><span class="line">    arrows[<span class="number">0</span>].classList.add(<span class="string">&quot;current&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    arrows[<span class="number">1</span>].classList.add(<span class="string">&quot;current&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><ul>
<li>for 每进行一次循环都会引起浏览器的回流，非常耗性能</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; lis.length; i++) &#123;</span><br><span class="line">    lists.appendChild(lis[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>可以使用 <code>DocumentFragment</code> 来创建一个新的空白的文档片段，把元素附加到这个文档片段中，之后通过这个文档片段附加到 DOM 树</p>
<p>因为<strong>文档片段存在内存中</strong>，并不在 DOM 树中，所以将子元素插入到文档片段时不会引起页面回流。因此，使用文档片段会带来更好的性能</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> frg = <span class="built_in">document</span>.createDocumentFragment();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; lis.length; i++) &#123;</span><br><span class="line">    frg.appendChild(lis[i]);</span><br><span class="line">&#125;</span><br><span class="line">lists.appendChild(frg)</span><br></pre></td></tr></table></figure>

<ul>
<li>如果希望点击完当前a标签，再点击其他a标签时都是升序排列的话，需要每次都将其他标签的flag设置为 -1</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; links.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (links[i] != <span class="built_in">this</span>) &#123;</span><br><span class="line">        links[i].flag = -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><h3 id="index-html（html-css）"><a href="#index-html（html-css）" class="headerlink" title="index.html（html+css）"></a>index.html（html+css）</h3><ul>
<li>创建 <code>index.html</code> 文件，粘贴如下代码</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>商城排序<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        * &#123;</span><br><span class="line">            margin: 0;</span><br><span class="line">            padding: 0;</span><br><span class="line">        &#125;</span><br><span class="line">        ul &#123;</span><br><span class="line">            list-style: none;</span><br><span class="line">        &#125;</span><br><span class="line">        a &#123;</span><br><span class="line">            text-decoration: none;</span><br><span class="line">        &#125;</span><br><span class="line">        body, html &#123;</span><br><span class="line">            background: lavender;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.main</span> &#123;</span></span><br><span class="line">            width: 1185px;</span><br><span class="line">            margin: 0 auto;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.main</span> <span class="selector-class">.topBar</span> &#123;</span></span><br><span class="line">            height: 50px;</span><br><span class="line"><span class="css">            <span class="selector-tag">background</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line">            display: flex;</span><br><span class="line">            align-items: center;</span><br><span class="line">            padding-left: 20px;</span><br><span class="line">            box-sizing: border-box;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.main</span> <span class="selector-class">.shortBtn</span> &#123;</span></span><br><span class="line">            display: flex;</span><br><span class="line">            align-items: center;</span><br><span class="line">            margin: 0 10px;</span><br><span class="line">            color: blue;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.main</span> <span class="selector-class">.shortBtn</span> <span class="selector-class">.arrows</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">color</span>: <span class="selector-id">#333</span>;</span></span><br><span class="line">            display: flex;</span><br><span class="line">            flex-direction: column;</span><br><span class="line">            margin-left: 10px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.main</span> <span class="selector-class">.shortBtn</span> <span class="selector-class">.iconfont</span> &#123;</span></span><br><span class="line">            font-size: 14px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.shortBtn</span><span class="selector-pseudo">:hover</span>&gt;<span class="selector-tag">span</span> &#123;</span></span><br><span class="line">            color: red;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.lists</span> &#123;</span></span><br><span class="line">            display: flex;</span><br><span class="line">            flex-wrap: wrap;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.lists</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line">            margin-top: 20px;</span><br><span class="line">            width: 225px;</span><br><span class="line"><span class="css">            <span class="selector-tag">background</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line">            padding: 20px;</span><br><span class="line">            box-sizing: border-box;</span><br><span class="line">            font-size: 14px;</span><br><span class="line">            margin-right: 15px;</span><br><span class="line">            line-height: 30px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.lists</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child(5n)</span>&#123;</span></span><br><span class="line">            margin-right: 0;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.lists</span> <span class="selector-tag">li</span> <span class="selector-tag">img</span> &#123;</span></span><br><span class="line">            width: 140px;</span><br><span class="line">            display: block;</span><br><span class="line">            margin: 0 auto;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.lists</span> <span class="selector-tag">li</span> <span class="selector-class">.numInfo</span> &#123;</span></span><br><span class="line">            display: flex;</span><br><span class="line">            justify-content: space-between;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.arrowUp</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">border</span>: 5<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#333</span>;</span></span><br><span class="line">            margin-bottom: 10px;</span><br><span class="line"><span class="css">            <span class="selector-tag">border-color</span>: <span class="selector-tag">transparent</span> <span class="selector-tag">transparent</span> <span class="selector-id">#333</span> <span class="selector-tag">transparent</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.arrowUp</span><span class="selector-class">.current</span> &#123;</span></span><br><span class="line">            border-color: transparent transparent red transparent;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.arrowDown</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">border</span>: 5<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#333</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">border-color</span>: <span class="selector-id">#333</span> <span class="selector-tag">transparent</span> <span class="selector-tag">transparent</span> <span class="selector-tag">transparent</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.arrowDown</span><span class="selector-class">.current</span> &#123;</span></span><br><span class="line">            border-color: red transparent transparent transparent;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;topBar&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>排序<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;shortBtn&quot;</span> <span class="attr">sortFlag</span>=<span class="string">&quot;time&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span>&gt;</span>上架时间<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;arrows&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">b</span> <span class="attr">class</span>=<span class="string">&quot;arrowUp&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">b</span> <span class="attr">class</span>=<span class="string">&quot;arrowDown&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;shortBtn&quot;</span> <span class="attr">sortFlag</span>=<span class="string">&quot;hot&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span>&gt;</span>热度<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;arrows&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">b</span> <span class="attr">class</span>=<span class="string">&quot;arrowUp&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">b</span> <span class="attr">class</span>=<span class="string">&quot;arrowDown&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;shortBtn&quot;</span> <span class="attr">sortFlag</span>=<span class="string">&quot;price&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span>&gt;</span>价格<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;arrows&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">b</span> <span class="attr">class</span>=<span class="string">&quot;arrowUp&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">b</span> <span class="attr">class</span>=<span class="string">&quot;arrowDown&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 图片列表 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;lists&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;index.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="data-json"><a href="#data-json" class="headerlink" title="data.json"></a>data.json</h3><ul>
<li>这里需要用 Ajax 请求一下如下 json 数据</li>
<li>创建 <code>data.json</code> ，粘贴如下数据</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;id&quot;</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="string">&quot;title&quot;</span>: <span class="string">&quot;HUAWEI全网通版（亮黑色）&quot;</span>,</span><br><span class="line">        <span class="string">&quot;price&quot;</span>: <span class="number">499</span>,</span><br><span class="line">        <span class="string">&quot;time&quot;</span>: <span class="string">&quot;2017-03-15&quot;</span>,</span><br><span class="line">        <span class="string">&quot;hot&quot;</span>: <span class="number">198</span>,</span><br><span class="line">        <span class="string">&quot;img&quot;</span>: <span class="string">&quot;img/1.jpg&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;id&quot;</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="string">&quot;title&quot;</span>: <span class="string">&quot;HUAWEI（曜石黑）&quot;</span>,</span><br><span class="line">        <span class="string">&quot;price&quot;</span>: <span class="number">129</span>,</span><br><span class="line">        <span class="string">&quot;time&quot;</span>: <span class="string">&quot;2017-02-08&quot;</span>,</span><br><span class="line">        <span class="string">&quot;hot&quot;</span>: <span class="number">25</span>,</span><br><span class="line">        <span class="string">&quot;img&quot;</span>: <span class="string">&quot;img/2.jpg&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;id&quot;</span>: <span class="number">3</span>,</span><br><span class="line">        <span class="string">&quot;title&quot;</span>: <span class="string">&quot;华为畅享7（香槟金）&quot;</span>,</span><br><span class="line">        <span class="string">&quot;price&quot;</span>: <span class="number">895</span>,</span><br><span class="line">        <span class="string">&quot;time&quot;</span>: <span class="string">&quot;2017-01-25&quot;</span>,</span><br><span class="line">        <span class="string">&quot;hot&quot;</span>: <span class="number">568</span>,</span><br><span class="line">        <span class="string">&quot;img&quot;</span>: <span class="string">&quot;img/3.jpg&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;id&quot;</span>: <span class="number">4</span>,</span><br><span class="line">        <span class="string">&quot;title&quot;</span>: <span class="string">&quot;HUAWEI全网通版（曜石黑）&quot;</span>,</span><br><span class="line">        <span class="string">&quot;price&quot;</span>: <span class="number">1895</span>,</span><br><span class="line">        <span class="string">&quot;time&quot;</span>: <span class="string">&quot;2016-12-30&quot;</span>,</span><br><span class="line">        <span class="string">&quot;hot&quot;</span>: <span class="number">20000</span>,</span><br><span class="line">        <span class="string">&quot;img&quot;</span>: <span class="string">&quot;img/4.jpg&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;id&quot;</span>: <span class="number">5</span>,</span><br><span class="line">        <span class="string">&quot;title&quot;</span>: <span class="string">&quot;HUAWEI全网通版（玫瑰金）&quot;</span>,</span><br><span class="line">        <span class="string">&quot;price&quot;</span>: <span class="number">3587</span>,</span><br><span class="line">        <span class="string">&quot;time&quot;</span>: <span class="string">&quot;2016-01-30&quot;</span>,</span><br><span class="line">        <span class="string">&quot;hot&quot;</span>: <span class="number">1032654</span>,</span><br><span class="line">        <span class="string">&quot;img&quot;</span>: <span class="string">&quot;img/5.jpg&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;id&quot;</span>: <span class="number">6</span>,</span><br><span class="line">        <span class="string">&quot;title&quot;</span>: <span class="string">&quot;华为畅享7（香槟金）&quot;</span>,</span><br><span class="line">        <span class="string">&quot;price&quot;</span>: <span class="number">992</span>,</span><br><span class="line">        <span class="string">&quot;time&quot;</span>: <span class="string">&quot;2018-01-01&quot;</span>,</span><br><span class="line">        <span class="string">&quot;hot&quot;</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="string">&quot;img&quot;</span>: <span class="string">&quot;img/6.jpg&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;id&quot;</span>: <span class="number">7</span>,</span><br><span class="line">        <span class="string">&quot;title&quot;</span>: <span class="string">&quot;HUAWEI全网通版（樱语粉）&quot;</span>,</span><br><span class="line">        <span class="string">&quot;price&quot;</span>: <span class="number">564</span>,</span><br><span class="line">        <span class="string">&quot;time&quot;</span>: <span class="string">&quot;2017-02-19&quot;</span>,</span><br><span class="line">        <span class="string">&quot;hot&quot;</span>: <span class="number">400</span>,</span><br><span class="line">        <span class="string">&quot;img&quot;</span>: <span class="string">&quot;img/7.jpg&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;id&quot;</span>: <span class="number">8</span>,</span><br><span class="line">        <span class="string">&quot;title&quot;</span>: <span class="string">&quot;HUAWEI全网通版（曜石黑）&quot;</span>,</span><br><span class="line">        <span class="string">&quot;price&quot;</span>: <span class="number">420</span>,</span><br><span class="line">        <span class="string">&quot;time&quot;</span>: <span class="string">&quot;2017-01-25&quot;</span>,</span><br><span class="line">        <span class="string">&quot;hot&quot;</span>: <span class="number">240</span>,</span><br><span class="line">        <span class="string">&quot;img&quot;</span>: <span class="string">&quot;img/8.jpg&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;id&quot;</span>: <span class="number">9</span>,</span><br><span class="line">        <span class="string">&quot;title&quot;</span>: <span class="string">&quot;HUAWEI P10（钻雕金）&quot;</span>,</span><br><span class="line">        <span class="string">&quot;price&quot;</span>: <span class="number">12</span>,</span><br><span class="line">        <span class="string">&quot;time&quot;</span>: <span class="string">&quot;2014-01-01&quot;</span>,</span><br><span class="line">        <span class="string">&quot;hot&quot;</span>: <span class="number">12345678</span>,</span><br><span class="line">        <span class="string">&quot;img&quot;</span>: <span class="string">&quot;img/9.jpg&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;id&quot;</span>: <span class="number">10</span>,</span><br><span class="line">        <span class="string">&quot;title&quot;</span>: <span class="string">&quot;HUAWEI全网通版（曜石黑）&quot;</span>,</span><br><span class="line">        <span class="string">&quot;price&quot;</span>: <span class="number">420</span>,</span><br><span class="line">        <span class="string">&quot;time&quot;</span>: <span class="string">&quot;2017-01-25&quot;</span>,</span><br><span class="line">        <span class="string">&quot;hot&quot;</span>: <span class="number">240</span>,</span><br><span class="line">        <span class="string">&quot;img&quot;</span>: <span class="string">&quot;img/8.jpg&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h3 id="index-js"><a href="#index-js" class="headerlink" title="index.js"></a>index.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取页面元素</span></span><br><span class="line"><span class="keyword">let</span> lists = <span class="built_in">document</span>.querySelector(<span class="string">&quot;.lists&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> links = <span class="built_in">document</span>.querySelectorAll(<span class="string">&quot;.topBar a&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> lis = lists.getElementsByTagName(<span class="string">&quot;li&quot;</span>);</span><br><span class="line"><span class="comment">// Ajax 请求数据</span></span><br><span class="line"><span class="keyword">let</span> data = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.数据请求 Ajax四部曲</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getData</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    xhr.open(<span class="string">&quot;get&quot;</span>, url);</span><br><span class="line">    xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (xhr.readyState == <span class="number">4</span> &amp;&amp; xhr.status == <span class="number">200</span>) &#123;</span><br><span class="line">            data = <span class="built_in">JSON</span>.parse(xhr.responseText);</span><br><span class="line">            BindHtml(data);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    xhr.send();</span><br><span class="line">&#125;</span><br><span class="line">getData(<span class="string">&quot;data/data.json&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.渲染li</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">BindHtml</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> str = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; data.length; i++) &#123;</span><br><span class="line">        <span class="keyword">const</span> el = data[i];</span><br><span class="line">        str += <span class="string">`&lt;li time=&quot;<span class="subst">$&#123;el.time&#125;</span>&quot; price=&quot;<span class="subst">$&#123;el.price&#125;</span>&quot; hot=&quot;<span class="subst">$&#123;el.hot&#125;</span>&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;img src=&quot;<span class="subst">$&#123;el.img&#125;</span>&quot; alt=&quot;&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;p class=&quot;title&quot;&gt;<span class="subst">$&#123;el.title&#125;</span>&lt;/p&gt;</span></span><br><span class="line"><span class="string">        &lt;p class=&quot;time&quot;&gt;<span class="subst">$&#123;el.time&#125;</span>&lt;/p&gt;</span></span><br><span class="line"><span class="string">        &lt;p class=&quot;numInfo&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;span class=&quot;price&quot;&gt;<span class="subst">$&#123;el.price&#125;</span>&lt;/span&gt;</span></span><br><span class="line"><span class="string">            &lt;span class=&quot;hot&quot;&gt;<span class="subst">$&#123;el.hot&#125;</span>&lt;/span&gt;</span></span><br><span class="line"><span class="string">        &lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;/li&gt;`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    lists.innerHTML = str;</span><br><span class="line">    lis = [].slice.call(lis);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 3.给link绑定事件</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; links.length; i++) &#123;</span><br><span class="line">    links[i].flag = -<span class="number">1</span>;</span><br><span class="line">    links[i].onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> that = <span class="built_in">this</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; links.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (links[i] != <span class="built_in">this</span>) &#123;</span><br><span class="line">                links[i].flag = -<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.flag *= -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">let</span> sortFlag = <span class="built_in">this</span>.getAttribute(<span class="string">&quot;sortFlag&quot;</span>);</span><br><span class="line">        <span class="keyword">let</span> arrows = <span class="built_in">this</span>.querySelectorAll(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">        <span class="keyword">let</span> arrCur = <span class="built_in">document</span>.querySelectorAll(<span class="string">&quot;b.current&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arrCur.length; i++) &#123;</span><br><span class="line">            arrCur[i].classList.remove(<span class="string">&quot;current&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.flag == <span class="number">1</span>) &#123;</span><br><span class="line">            arrows[<span class="number">0</span>].classList.add(<span class="string">&quot;current&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            arrows[<span class="number">1</span>].classList.add(<span class="string">&quot;current&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> frg = <span class="built_in">document</span>.createDocumentFragment();</span><br><span class="line">        <span class="keyword">if</span> (sortFlag == <span class="string">&quot;time&quot;</span>) &#123;</span><br><span class="line">            lis.sort(<span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> (a.getAttribute(sortFlag).replace(<span class="regexp">/-/g</span>, <span class="string">&quot;&quot;</span>) - b.getAttribute(sortFlag).replace(<span class="regexp">/-/g</span>, <span class="string">&quot;&quot;</span>)) * that.flag;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            lis.sort(<span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> (a.getAttribute(sortFlag) - b.getAttribute(sortFlag)) * that.flag;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; lis.length; i++) &#123;</span><br><span class="line">            frg.appendChild(lis[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        lists.appendChild(frg);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>DocumentFragment</tag>
        <tag>排序</tag>
      </tags>
  </entry>
  <entry>
    <title>获取文件夹下所有图片尺寸</title>
    <url>/posts/5a7a946b/</url>
    <content><![CDATA[<p>有时候我们爬取了一堆图片，需要知道这些图片尺寸大小或名字以便日后处理。一个一个弄很是费劲，我们可以用 python 批量获取一下并生成 csv</p>
<ul>
<li>如果图片后缀比较多（png jpg jpeg bmp），可以在 suffix里进行添加</li>
</ul>
<a id="more"></a>

<p>用法：输入文件夹地址即可生成 csv，不过需要预先安装一些环境，已经安好跳过即可</p>
<ul>
<li>PIL库python3.7版本前： <code>pip install PIL</code>  python3.7版本之后改名为 pillow <code>pip install pillow</code></li>
<li>openpyxl库 <code>pip install openpyxl</code></li>
</ul>
<h3 id="代码如下："><a href="#代码如下：" class="headerlink" title="代码如下："></a>代码如下：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">file_list = []</span><br><span class="line">width_list = []</span><br><span class="line">height_list = []</span><br><span class="line">root_path = <span class="built_in">input</span>(<span class="string">&#x27;请输入 图片 所在地址:&#x27;</span>)</span><br><span class="line">suffix = [<span class="string">&#x27;.jpg&#x27;</span>, <span class="string">&#x27;.png&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> dirpath, dirnames, files <span class="keyword">in</span> os.walk(root_path):</span><br><span class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">        file_path = os.path.join(dirpath, file)</span><br><span class="line">        <span class="keyword">for</span> suf <span class="keyword">in</span> suffix:</span><br><span class="line">            <span class="keyword">if</span> file.endswith(suf):</span><br><span class="line">                img = Image.<span class="built_in">open</span>(file_path)</span><br><span class="line">                file_list.append(file)</span><br><span class="line">                width_list.append(img.size[<span class="number">0</span>])</span><br><span class="line">                height_list.append(img.size[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">content_dict = &#123;</span><br><span class="line">    <span class="string">&#x27;dir_name&#x27;</span>:file_list,</span><br><span class="line">    <span class="string">&#x27;width&#x27;</span>:width_list,</span><br><span class="line">    <span class="string">&#x27;height&#x27;</span>:height_list</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(content_dict)</span><br><span class="line">csv_path = os.path.join(root_path,<span class="string">&#x27;image_size.csv&#x27;</span>)</span><br><span class="line">df.to_csv(csv_path, encoding=<span class="string">&#x27;utf_8_sig&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="生成-csv-效果图："><a href="#生成-csv-效果图：" class="headerlink" title="生成 csv 效果图："></a>生成 csv 效果图：</h3><p><img data-src="https://gitee.com/lilyn/pic/raw/master/python-img/%E8%8E%B7%E5%8F%96%E6%96%87%E4%BB%B6%E5%A4%B9%E6%89%80%E6%9C%89%E5%9B%BE%E7%89%87%E5%B0%BA%E5%AF%B8.jpg" alt="获取文件夹所有图片尺寸"></p>
<h3 id="生成Excel"><a href="#生成Excel" class="headerlink" title="生成Excel"></a>生成Excel</h3><p>如果要生成 Excel，可以使用 openpyxl 读一下生成的 csv，之后用<code>,</code> 分割转存为Excel，封装后的代码如下：</p>
<ul>
<li>不过所有数字类型数据都会转换成字符串类型，不希望这个可以写了 is_number 方法，在 append 之前修改数据类型</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> openpyxl <span class="keyword">import</span> Workbook</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">xls</span>(<span class="params">path</span>):</span></span><br><span class="line">    <span class="comment">#生成Excel文件</span></span><br><span class="line">    wb = Workbook()</span><br><span class="line">    ws = wb.active</span><br><span class="line">    first_row = []</span><br><span class="line">    datas = []</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(path,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        is_first_row = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">            line = line[:-<span class="number">1</span>]</span><br><span class="line">            <span class="comment">#存储第一行</span></span><br><span class="line">            <span class="keyword">if</span> is_first_row:</span><br><span class="line">                is_first_row = <span class="literal">False</span></span><br><span class="line">                first_row = line.split(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="comment">#存储第二行至max_row</span></span><br><span class="line">            datas.append(line.split(<span class="string">&#x27;,&#x27;</span>))</span><br><span class="line">    ws.append(first_row)</span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span> datas:</span><br><span class="line">        ws.append(data)</span><br><span class="line">    wb.save(xls_path)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>获取图片尺寸</tag>
        <tag>批处理</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 设计模式浅析</title>
    <url>/posts/f356c3f6/</url>
    <content><![CDATA[<blockquote>
<p>设计模式：在面向对象软件设计过程中针对特定问题的简洁而优雅的解决方案</p>
</blockquote>
<p>一般来说，设计模式（Pattern Design）就是<strong>创建不同类型的对象的套路</strong></p>
<a id="more"></a>

<p>常见设计模式：</p>
<ul>
<li>单例设计模式：一个类仅有一个一个实例</li>
<li>工厂模式：批量生产出具有相似属性和方法的对象</li>
<li>构造函数模式：可以理解为是工厂模式的另一种写法</li>
<li>发布订阅模式：定义对象间的一对多的关系</li>
</ul>
<h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><blockquote>
<p>单例模式：保证一个类仅有一个实例，并提供一个访问它的全局访问点</p>
</blockquote>
<p>简单来说：单例模式就是一个对象</p>
<h3 id="极简写法"><a href="#极简写法" class="headerlink" title="极简写法"></a>极简写法</h3><ul>
<li>成员暴露出来，初始化占用资源</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> utils = &#123;</span><br><span class="line">    num: <span class="number">6</span>,</span><br><span class="line">    method: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.num;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> obj = utils;</span><br><span class="line"><span class="built_in">console</span>.log(obj.method());</span><br></pre></td></tr></table></figure>

<h3 id="闭包方式"><a href="#闭包方式" class="headerlink" title="闭包方式"></a>闭包方式</h3><ul>
<li>解决成员暴露和初始化占用资源问题</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> utils = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">6</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.num;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        num: num,</span><br><span class="line">        method: fn,</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="keyword">var</span> obj = utils;</span><br><span class="line"><span class="built_in">console</span>.log(obj.method());</span><br></pre></td></tr></table></figure>

<p>应用：弹窗，无论点击多长次，弹窗只应该创建一次</p>
<h2 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h2><blockquote>
<p>工厂模式：像工厂一样批量生产相似属性和方法的对象。减少页面冗余代码，实现了“高耦合低内聚”</p>
</blockquote>
<p>简单来说，工厂模式就是函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        name: name,</span><br><span class="line">        age: age,</span><br><span class="line">        say: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p = Person(<span class="string">&quot;lion&quot;</span>, <span class="number">13</span>);</span><br><span class="line">p.say();</span><br></pre></td></tr></table></figure>

<h2 id="构造函数模式"><a href="#构造函数模式" class="headerlink" title="构造函数模式"></a>构造函数模式</h2><blockquote>
<p>构造函数模式：利用构造函数的方式创建对象。函数执行是，前面一旦加了 new，就变成构造函数</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> f = <span class="keyword">new</span> Person(<span class="string">&quot;cat&quot;</span>, <span class="number">17</span>);</span><br><span class="line">f.sayName();</span><br></pre></td></tr></table></figure>

<h2 id="发布订阅"><a href="#发布订阅" class="headerlink" title="发布订阅"></a>发布订阅</h2><p>DOM 0级事件和DOM 2级事件区别：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">box.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line">box.addEventListener(<span class="string">&quot;click&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li>DOM 0级就是给元素的某个属性绑定方法（有效绑定的方法只有一个）</li>
<li>DOM 2级是基于事件池机制完成，每增加一个绑定的方法，都会往事件池中存放一个…当事件池触发会依次执行事件池的事情（发布订阅其实就是模拟事件池机制）</li>
</ul>
<p>DOM 2级事件池机制：</p>
<ol>
<li>基于addEventListener/attachEvent（IE6<del>8）向事件池中追加方法 ：新版浏览器会根据元素和事件类型对新增的方法做重复校验，但是IE6</del>8不可以</li>
<li>当事件行为触发，会把事件池中的方法按照增加的顺序依次执行，但是IE6~8中执行的顺序是不固定的</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> _subscribe = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Sub：发布订阅类</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Sub</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="comment">// 创建一个事件池，用来存储后期需要的方法</span></span><br><span class="line">            <span class="built_in">this</span>.$pond = [];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 向事件池中追加方法（重复校验）</span></span><br><span class="line">        <span class="function"><span class="title">add</span>(<span class="params">func</span>)</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> flag = <span class="built_in">this</span>.$pond.some(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> item === func;</span><br><span class="line">            &#125;);</span><br><span class="line">            !flag ? <span class="built_in">this</span>.$pond.push(func) : <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 从事件池中移除方法</span></span><br><span class="line">        <span class="function"><span class="title">remove</span>(<span class="params">func</span>)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.$pond = <span class="built_in">this</span>.$pond.filter(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> item !== func;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 通知事件池中的方法，按照顺序依次执行</span></span><br><span class="line">        <span class="function"><span class="title">fire</span>(<span class="params">...args</span>)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.$pond.forEach(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="comment">// 在三个参数以上，call性能略优于apply</span></span><br><span class="line">                item.call(<span class="built_in">this</span>, ...args);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">subscribe</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Sub();</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>

<ul>
<li>如果要使用for循环，需要考虑数组塌陷问题</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 从事件池中移除方法</span></span><br><span class="line"><span class="function"><span class="title">remove</span>(<span class="params">func</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> $pond = <span class="built_in">this</span>.$pond;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; $pond.length; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> item = $pond[i];</span><br><span class="line">        <span class="keyword">if</span> (item === func) &#123;</span><br><span class="line">            $pond[i] = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 通知事件池中的方法，按照顺序依次执行</span></span><br><span class="line"><span class="function"><span class="title">fire</span>(<span class="params">...args</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> $pond = <span class="built_in">this</span>.$pond;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; $pond.length; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> item = $pond[i];</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> item !== <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">            $pond.splice(i, <span class="number">1</span>);</span><br><span class="line">            i--;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        item.call(<span class="built_in">this</span>, ...args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue 封装无限层级树形菜单组件（后台传的是扁平数组）</title>
    <url>/posts/9fef765/</url>
    <content><![CDATA[<p>项目原因，需要把一个扁平/线性数组转换成树形数组（符合 el-tree 数据要求）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> resData = [</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="string">&#x27;1&#x27;</span>, <span class="attr">label</span>: <span class="string">&#x27;动物&#x27;</span>, <span class="attr">parentId</span>: <span class="string">&#x27;&#x27;</span>, <span class="attr">icon</span>: <span class="string">&#x27;&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="string">&#x27;2&#x27;</span>, <span class="attr">label</span>: <span class="string">&#x27;狗&#x27;</span>, <span class="attr">parentId</span>: <span class="string">&#x27;1&#x27;</span>, <span class="attr">icon</span>: <span class="string">&#x27;icon-chongwutubiao13&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="string">&#x27;3&#x27;</span>, <span class="attr">label</span>: <span class="string">&#x27;哈士奇&#x27;</span>, <span class="attr">parentId</span>: <span class="string">&#x27;2&#x27;</span>, <span class="attr">icon</span>: <span class="string">&#x27;icon-hashiqi&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="string">&#x27;4&#x27;</span>, <span class="attr">label</span>: <span class="string">&#x27;柯基&#x27;</span>, <span class="attr">parentId</span>: <span class="string">&#x27;2&#x27;</span>, <span class="attr">icon</span>: <span class="string">&#x27;icon-keji-&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="string">&#x27;6&#x27;</span>, <span class="attr">label</span>: <span class="string">&#x27;猫&#x27;</span>, <span class="attr">parentId</span>: <span class="string">&#x27;1&#x27;</span>, <span class="attr">icon</span>: <span class="string">&#x27;icon-chongwutubiao04&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="string">&#x27;7&#x27;</span>, <span class="attr">label</span>: <span class="string">&#x27;植物&#x27;</span>, <span class="attr">parentId</span>: <span class="string">&#x27;&#x27;</span>, <span class="attr">icon</span>: <span class="string">&#x27;&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="string">&#x27;8&#x27;</span>, <span class="attr">label</span>: <span class="string">&#x27;微生物&#x27;</span>, <span class="attr">parentId</span>: <span class="string">&#x27;&#x27;</span>, <span class="attr">icon</span>: <span class="string">&#x27;&#x27;</span> &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h2 id="JS-代码：扁平数组转换成树形数组"><a href="#JS-代码：扁平数组转换成树形数组" class="headerlink" title="JS 代码：扁平数组转换成树形数组"></a>JS 代码：扁平数组转换成树形数组</h2><ul>
<li>直接上代码，不需要递归</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">transformData</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 深拷贝一份（以防连续调用出错）</span></span><br><span class="line">  <span class="keyword">const</span> cData = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(data))</span><br><span class="line">  <span class="keyword">const</span> map = &#123;&#125;</span><br><span class="line">  <span class="keyword">const</span> tData = []</span><br><span class="line">  <span class="comment">// 注意：这里item的引用地址指向cData</span></span><br><span class="line">  cData.forEach(<span class="function"><span class="params">item</span> =&gt;</span> (map[item.id] = item))</span><br><span class="line">  cData.forEach(<span class="function"><span class="params">child</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> mapItem = map[child.parentId]</span><br><span class="line">    <span class="keyword">if</span> (mapItem) &#123;</span><br><span class="line">      <span class="comment">// 注意：这里mapItem引用地址指向也是指向cData</span></span><br><span class="line">      <span class="keyword">if</span> (!mapItem.children) mapItem.children = []</span><br><span class="line">      mapItem.children.push(child)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 顶级节点</span></span><br><span class="line">      tData.push(child)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> tData</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="项目应用：el-tree-制作一个树形多级嵌套菜单栏"><a href="#项目应用：el-tree-制作一个树形多级嵌套菜单栏" class="headerlink" title="项目应用：el-tree 制作一个树形多级嵌套菜单栏"></a>项目应用：el-tree 制作一个树形多级嵌套菜单栏</h2><p>实现效果：</p>
<p><img data-src="https://img-blog.csdnimg.cn/img_convert/fd270ef62d9c02db91a340ae0b0a173f.png"></p>
<ul>
<li>Vue 代码</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-scrollbar</span> <span class="attr">wrap-class</span>=<span class="string">&quot;scrollbar-wrapper&quot;</span> <span class="attr">style</span>=<span class="string">&quot;height: 100%&quot;</span>&gt;</span></span><br><span class="line">    &lt;el-tree</span><br><span class="line">      ref=&quot;tree&quot;</span><br><span class="line">      v-loading=&quot;treeDataLoading&quot;</span><br><span class="line">      node-key=&quot;id&quot;</span><br><span class="line">      :data=&quot;treeData&quot;</span><br><span class="line">      :show-checkbox=&quot;showCheckBox&quot;</span><br><span class="line">      :default-expand-all=&quot;defaultExpandAll&quot;</span><br><span class="line">      style=&quot;height: 100%; padding-bottom: 20px&quot;</span><br><span class="line">    &gt;</span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">slot-scope</span>=<span class="string">&quot;&#123; node, data &#125;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;custom-tree-node&quot;</span>&gt;</span></span><br><span class="line">        &#123;&#123; node.label &#125;&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-if</span>=<span class="string">&quot;data.icon&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-tooltip</span> <span class="attr">effect</span>=<span class="string">&quot;dark&quot;</span> <span class="attr">:content</span>=<span class="string">&quot;data.label&quot;</span> <span class="attr">placement</span>=<span class="string">&quot;top-start&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">i</span> <span class="attr">:class</span>=<span class="string">&quot;[&#x27;iconfont&#x27;, data.icon]&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">el-tooltip</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-tree</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-scrollbar</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">  props: &#123;</span><br><span class="line"><span class="javascript">    <span class="comment">// 节点是否可被选择（显示前面的复选框）</span></span></span><br><span class="line">    showCheckBox: &#123;</span><br><span class="line"><span class="javascript">      type: <span class="built_in">Boolean</span>,</span></span><br><span class="line"><span class="javascript">      <span class="keyword">default</span>: <span class="literal">false</span>,</span></span><br><span class="line">    &#125;,</span><br><span class="line"><span class="javascript">    <span class="comment">// 是否默认展开所有节点</span></span></span><br><span class="line">    defaultExpandAll: &#123;</span><br><span class="line"><span class="javascript">      type: <span class="built_in">Boolean</span>,</span></span><br><span class="line"><span class="javascript">      <span class="keyword">default</span>: <span class="literal">false</span>,</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line">      treeData: [],</span><br><span class="line"><span class="javascript">      treeDataLoading: <span class="literal">false</span>,</span></span><br><span class="line">      resData: [</span><br><span class="line"><span class="javascript">        &#123; <span class="attr">id</span>: <span class="string">&#x27;1&#x27;</span>, <span class="attr">label</span>: <span class="string">&#x27;动物&#x27;</span>, <span class="attr">parentId</span>: <span class="string">&#x27;&#x27;</span>, <span class="attr">icon</span>: <span class="string">&#x27;&#x27;</span> &#125;,</span></span><br><span class="line"><span class="javascript">        &#123; <span class="attr">id</span>: <span class="string">&#x27;2&#x27;</span>, <span class="attr">label</span>: <span class="string">&#x27;狗&#x27;</span>, <span class="attr">parentId</span>: <span class="string">&#x27;1&#x27;</span>, <span class="attr">icon</span>: <span class="string">&#x27;icon-chongwutubiao13&#x27;</span> &#125;,</span></span><br><span class="line"><span class="javascript">        &#123; <span class="attr">id</span>: <span class="string">&#x27;3&#x27;</span>, <span class="attr">label</span>: <span class="string">&#x27;哈士奇&#x27;</span>, <span class="attr">parentId</span>: <span class="string">&#x27;2&#x27;</span>, <span class="attr">icon</span>: <span class="string">&#x27;icon-hashiqi&#x27;</span> &#125;,</span></span><br><span class="line"><span class="javascript">        &#123; <span class="attr">id</span>: <span class="string">&#x27;4&#x27;</span>, <span class="attr">label</span>: <span class="string">&#x27;柯基&#x27;</span>, <span class="attr">parentId</span>: <span class="string">&#x27;2&#x27;</span>, <span class="attr">icon</span>: <span class="string">&#x27;icon-keji-&#x27;</span> &#125;,</span></span><br><span class="line"><span class="javascript">        &#123; <span class="attr">id</span>: <span class="string">&#x27;6&#x27;</span>, <span class="attr">label</span>: <span class="string">&#x27;猫&#x27;</span>, <span class="attr">parentId</span>: <span class="string">&#x27;1&#x27;</span>, <span class="attr">icon</span>: <span class="string">&#x27;icon-chongwutubiao04&#x27;</span> &#125;,</span></span><br><span class="line"><span class="javascript">        &#123; <span class="attr">id</span>: <span class="string">&#x27;7&#x27;</span>, <span class="attr">label</span>: <span class="string">&#x27;植物&#x27;</span>, <span class="attr">parentId</span>: <span class="string">&#x27;&#x27;</span>, <span class="attr">icon</span>: <span class="string">&#x27;&#x27;</span> &#125;,</span></span><br><span class="line"><span class="javascript">        &#123; <span class="attr">id</span>: <span class="string">&#x27;8&#x27;</span>, <span class="attr">label</span>: <span class="string">&#x27;微生物&#x27;</span>, <span class="attr">parentId</span>: <span class="string">&#x27;&#x27;</span>, <span class="attr">icon</span>: <span class="string">&#x27;&#x27;</span> &#125;,</span></span><br><span class="line">      ],</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">init</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.treeDataLoading = <span class="literal">true</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// 发送数据请求（这里不发送请求以resData模拟）</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> tree = <span class="built_in">this</span>.resData</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.treeData = <span class="built_in">this</span>.transformData(tree)</span></span><br><span class="line">        res()</span><br><span class="line">      &#125;)</span><br><span class="line"><span class="javascript">        .catch(<span class="function">() =&gt;</span> &#123;&#125;)</span></span><br><span class="line"><span class="javascript">        .finally(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.treeDataLoading = <span class="literal">false</span></span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">transformData</span>(<span class="params">data, params = &#123;&#125;</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> cData = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(data))</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> map = &#123;&#125;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> tData = []</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> attr = &#123;</span></span><br><span class="line"><span class="javascript">        id: <span class="string">&#x27;id&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        parentId: <span class="string">&#x27;parentId&#x27;</span>,</span></span><br><span class="line">      &#125;</span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> arg = <span class="built_in">Object</span>.assign(&#123;&#125;, attr, params)</span></span><br><span class="line"><span class="javascript">      cData.forEach(<span class="function"><span class="params">item</span> =&gt;</span> (map[item[arg.id]] = item))</span></span><br><span class="line"><span class="javascript">      cData.forEach(<span class="function"><span class="params">child</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> mapItem = map[child[arg.parentId]]</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (mapItem) &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">if</span> (!mapItem.children) mapItem.children = []</span></span><br><span class="line">          mapItem.children.push(child)</span><br><span class="line"><span class="javascript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line">          tData.push(child)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> tData</span></span><br><span class="line">    &#125;,</span><br><span class="line"><span class="javascript">    <span class="comment">// 全选</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">checkAll</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.$refs.tree.setCheckedNodes(<span class="built_in">this</span>.treeData)</span></span><br><span class="line">    &#125;,</span><br><span class="line"><span class="javascript">    <span class="comment">// 取消全选</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">cancelAll</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.$refs.tree.setCheckedKeys([])</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;less&quot;</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-class">.scrollbar-wrapper</span> &#123;</span></span><br><span class="line">  overflow-x: hidden !important;</span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-class">.custom-tree-node</span> &#123;</span></span><br><span class="line">  font-size: 16px;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="父组件调用"><a href="#父组件调用" class="headerlink" title="父组件调用"></a>父组件调用</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tree-select</span> <span class="attr">ref</span>=<span class="string">&quot;tree&quot;</span> <span class="attr">defaultExpandAll</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> TreeSelect <span class="keyword">from</span> <span class="string">&#x27;./components/TreeSelect&#x27;</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">  components: &#123;</span><br><span class="line">    TreeSelect,</span><br><span class="line">  &#125;,</span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">this</span>.$refs[<span class="string">&#x27;tree&#x27;</span>].init()</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="还可以参考这篇文章，他使用的双-filter"><a href="#还可以参考这篇文章，他使用的双-filter" class="headerlink" title="还可以参考这篇文章，他使用的双 filter"></a>还可以参考这篇文章，他使用的双 filter</h2><p><a href="https://blog.csdn.net/Mr_JavaScript/article/details/82817177">js 实现无限层级树形数据结构（创新算法）</a></p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>Element</tag>
        <tag>树形菜单</tag>
        <tag>封装</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue 自定义指令应用场景</title>
    <url>/posts/13e591df/</url>
    <content><![CDATA[<h2 id="Vue-自定义指令应用场景"><a href="#Vue-自定义指令应用场景" class="headerlink" title="Vue 自定义指令应用场景"></a>Vue 自定义指令应用场景</h2><blockquote>
<p>这段是从官网 copy 过来的，相信应该都一看就明白的</p>
</blockquote>
<ul>
<li>bind: 只调用一次，指令第一次绑定到元素时调用。在这里可以进行一次性的初始化设置</li>
<li>inserted: 被绑定元素插入父节点时调用 (仅保证父节点存在，但不一定已被插入文档中)</li>
<li>update: 所在组件的 VNode 更新时调用，但是可能发生在其子 VNode 更新之前。指令的值可能发生了改变，也可能没有</li>
<li>componentUpdated：指令所在组件的 VNode 及其子 VNode 全部更新后调用</li>
<li>unbind: 只调用一次，指令与元素解绑时调用</li>
</ul>
<a id="more"></a>

<h3 id="1-权限校验-v-permission"><a href="#1-权限校验-v-permission" class="headerlink" title="1.权限校验 v-permission"></a>1.权限校验 v-permission</h3><p>权限校验一般分为页面级别和按钮级别，其两种思路基本一致</p>
<p>详细可以参考：<a href="https://juejin.cn/post/6844903478880370701">手摸手，带你用 vue 撸后台 系列二(登录权限篇)</a>，如下简单说一下</p>
<p><strong>页面级别：</strong></p>
<ol>
<li>最快想到的可能就是使用 beforeEach，首先把所有路由都注册，用户登录后拿到后端返回的权限信息，如果没有此权限统一个提示信息<br>不过大部分需求都不希望你这么做，没有权限就不显示</li>
<li>首先把所有路由都注册，不过上来给所有路由做一个标识（前后端约定一下），根据这个标识显示/隐藏</li>
<li>路由完全由后端负责，按照后端返回的信息生成最终用户可访问的路由表，最后通过 <code>router.addRoutes</code> 动态挂载</li>
</ol>
<p><strong>按钮级别：</strong></p>
<ol>
<li>逻辑比较简单，使用 v-if 根据权限显示/隐藏</li>
<li>逻辑稍微复杂一点，使用自定义指令显示/隐藏</li>
</ol>
<p><strong>思路：</strong></p>
<ol>
<li>自定义一个权限数组（这里我放到 vuex 中）</li>
<li>判断用户的权限是否在这个数组内，如果在就显示，不在就移除</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;@/store&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkPermission</span>(<span class="params">el, binding</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; value &#125; = binding</span><br><span class="line">  <span class="keyword">const</span> roles = store.getters &amp;&amp; store.getters.roles</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (value &amp;&amp; <span class="built_in">Array</span>.isArray(value)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (value.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> hasPermission = roles.some(<span class="function"><span class="params">role</span> =&gt;</span> value.includes(role))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!hasPermission) &#123;</span><br><span class="line">      el.parentNode &amp;&amp; el.parentNode.removeChild(el)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`please use such as v-permission=&quot;[&#x27;admin&#x27;, &#x27;editor&#x27;]&quot;`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Vue.directive(<span class="string">&#x27;permission&#x27;</span>, &#123;</span><br><span class="line">  <span class="function"><span class="title">inserted</span>(<span class="params">el, binding</span>)</span> &#123;</span><br><span class="line">    checkPermission(el, binding)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">update</span>(<span class="params">el, binding</span>)</span> &#123;</span><br><span class="line">    checkPermission(el, binding)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="2-复制指令"><a href="#2-复制指令" class="headerlink" title="2.复制指令"></a>2.复制指令</h3><p><strong>思路：</strong></p>
<ol>
<li>动态创建 <code>textarea</code> 标签，并设置 <code>readOnly</code> 属性，并将其移出可视区域</li>
<li>将要复制的值赋给 <code>textarea</code> 标签的 <code>value</code> 属性，并插入到 body</li>
<li>选中值 <code>textarea</code> 并复制</li>
<li>将 body 中插入的 <code>textarea</code> 移除</li>
<li>在第一次调用时绑定事件，在解绑时移除事件</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Message &#125; <span class="keyword">from</span> <span class="string">&#x27;element-ui&#x27;</span></span><br><span class="line"></span><br><span class="line">Vue.directive(<span class="string">&#x27;copy&#x27;</span>, &#123;</span><br><span class="line">  <span class="function"><span class="title">bind</span>(<span class="params">el, &#123; value &#125;</span>)</span> &#123;</span><br><span class="line">    el.$value = value</span><br><span class="line">    el.$handle = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">let</span> textValue = el.$value</span><br><span class="line">      <span class="keyword">if</span> (!text) &#123;</span><br><span class="line">        Message(&#123;</span><br><span class="line">          message: <span class="string">&#x27;复制内容不能为空&#x27;</span>,</span><br><span class="line">          type: <span class="string">&#x27;warning&#x27;</span>,</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 步骤1</span></span><br><span class="line">      <span class="keyword">const</span> textarea = <span class="built_in">document</span>.createElement(<span class="string">&#x27;textarea&#x27;</span>)</span><br><span class="line">      textarea.readOnly = <span class="string">&#x27;readonly&#x27;</span></span><br><span class="line">      textarea.style.cssText = <span class="string">&#x27;opacity:0;position:fixed;left:-9999px&#x27;</span></span><br><span class="line">      <span class="comment">// 步骤2</span></span><br><span class="line">      textarea.value = textValue</span><br><span class="line">      <span class="built_in">document</span>.body.appendChild(textarea)</span><br><span class="line">      <span class="comment">// 步骤3</span></span><br><span class="line">      textarea.select()</span><br><span class="line">      <span class="keyword">const</span> copyText = <span class="built_in">document</span>.execCommand(<span class="string">&#x27;copy&#x27;</span>)</span><br><span class="line">      <span class="keyword">if</span> (copyText) &#123;</span><br><span class="line">        Message(&#123;</span><br><span class="line">          message: <span class="string">&#x27;复制成功&#x27;</span>,</span><br><span class="line">          type: <span class="string">&#x27;success&#x27;</span>,</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 步骤4</span></span><br><span class="line">      <span class="built_in">document</span>.body.removeChild(textarea)</span><br><span class="line">    &#125;</span><br><span class="line">    el.addEventListener(<span class="string">&#x27;click&#x27;</span>, el.$handle)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 当传入进来的值更新的时候触发</span></span><br><span class="line">  <span class="function"><span class="title">componentUpdated</span>(<span class="params">el, &#123; value &#125;</span>)</span> &#123;</span><br><span class="line">    el.$value = value</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">unbind</span>(<span class="params">el</span>)</span> &#123;</span><br><span class="line">    el.removeEventListener(<span class="string">&#x27;click&#x27;</span>, el.$handle)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="3-防抖节流"><a href="#3-防抖节流" class="headerlink" title="3.防抖节流"></a>3.防抖节流</h3><p>钩子函数参数</p>
<ul>
<li><code>arg</code>：传给指令的参数，可选。例如 <code>v-my-directive:foo</code> 中，参数为 <code>&quot;foo&quot;</code></li>
<li><code>modifiers</code>：一个包含修饰符的对象。例如：<code>v-my-directive.foo.bar</code> 中，修饰符对象为 <code>&#123; foo: true, bar: true &#125;</code></li>
</ul>
<p><strong>思路：</strong></p>
<ul>
<li>通过 <code>addEventListener</code>监听事件</li>
<li>调用方式：<code>&lt;button v-debounce:300.immediate=&quot;fn&quot;&gt;click&lt;/button&gt;</code></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">func, wait, immediate</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> timer = <span class="literal">null</span>,</span><br><span class="line">        result;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">proxy</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> self = <span class="built_in">this</span>,</span><br><span class="line">            params = [].slice.call(<span class="built_in">arguments</span>),</span><br><span class="line">            callNow = !timer &amp;&amp; immediate;</span><br><span class="line">        <span class="keyword">if</span> (timer) <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">        timer = <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">            timer = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (!immediate) result = func.apply(self, params);</span><br><span class="line">        &#125;, wait);</span><br><span class="line">        <span class="keyword">if</span> (callNow) result = func.apply(self, params);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">func, wait</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> timer = <span class="literal">null</span>,</span><br><span class="line">        previous = <span class="number">0</span>,</span><br><span class="line">        result;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">proxy</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> self = <span class="built_in">this</span>,</span><br><span class="line">            params = [].slice.call(<span class="built_in">arguments</span>);</span><br><span class="line">        <span class="keyword">var</span> now = +<span class="keyword">new</span> <span class="built_in">Date</span>,</span><br><span class="line">            remaining = wait - (now - previous);</span><br><span class="line">        <span class="keyword">if</span> (remaining &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (timer) &#123;</span><br><span class="line">                <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">                timer = <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            previous = now;</span><br><span class="line">            result = func.apply(self, params);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!timer) &#123;</span><br><span class="line">            timer = <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">                timer = <span class="literal">null</span>;</span><br><span class="line">                previous = +<span class="keyword">new</span> <span class="built_in">Date</span>;</span><br><span class="line">                result = func.apply(self, params);</span><br><span class="line">            &#125;, remaining);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  <span class="function"><span class="title">bind</span>(<span class="params">el, binding</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> &#123; value &#125; = binding.value,</span><br><span class="line">      immediate = <span class="literal">false</span>,</span><br><span class="line">      wait = <span class="number">500</span>,</span><br><span class="line">      type = <span class="string">&#x27;click&#x27;</span>,</span><br><span class="line">      params = [],</span><br><span class="line">      func,</span><br><span class="line">      handle = binding.name === <span class="string">&#x27;debounce&#x27;</span> ? debounce : throttle</span><br><span class="line">    <span class="keyword">if</span> (value === <span class="literal">null</span>) <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> val !== <span class="string">&#x27;object&#x27;</span> &amp;&amp; <span class="keyword">typeof</span> value !== <span class="string">&#x27;function&#x27;</span>) <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">if</span> (binding.arg) wait = +binding.arg</span><br><span class="line">    <span class="keyword">if</span> (binding.modifiers &amp;&amp; binding.modifiers.immediate) immediate = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> value === <span class="string">&#x27;function&#x27;</span>) func = value</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> value === <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">      func = value.func || <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">      type = value.type || <span class="string">&#x27;click&#x27;</span></span><br><span class="line">      params = value.params || []</span><br><span class="line">    &#125;</span><br><span class="line">    el.$type = type</span><br><span class="line">    el.$handle = handle(</span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">proxy</span>(<span class="params">...arg</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> func.call(<span class="built_in">this</span>, ...params.concat(arg))</span><br><span class="line">      &#125;,</span><br><span class="line">      wait,</span><br><span class="line">      immediate</span><br><span class="line">    )</span><br><span class="line">    el.addEventListener(el.$type, el.$handle)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">unbind</span>(<span class="params">el</span>)</span> &#123;</span><br><span class="line">    el.removeEventListener(el.$type, el.$handle)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Vue.directive(<span class="string">&#x27;debounce&#x27;</span>, config)</span><br><span class="line">Vue.directive(<span class="string">&#x27;throttle&#x27;</span>, config)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>自定义指令</tag>
        <tag>权限校验</tag>
        <tag>复制</tag>
        <tag>防抖节流</tag>
      </tags>
  </entry>
  <entry>
    <title>Swiper使用案例</title>
    <url>/posts/47fd9c19/</url>
    <content><![CDATA[<p>官网链接：<a href="https://www.swiper.com.cn/">https://www.swiper.com.cn/</a></p>
<p>文档链接：<a href="https://www.swiper.com.cn/usage/index.html">Swiper使用方法</a> 、<a href="https://www.swiper.com.cn/api/index.html">Swiper的API文档</a></p>
<a id="more"></a>

<h3 id="引用Swiper"><a href="#引用Swiper" class="headerlink" title="引用Swiper"></a>引用Swiper</h3><p><a href="https://www.swiper.com.cn/download/index.html">下载 swiper</a> 或 <a href="https://www.swiper.com.cn/cdn/index.html">使用CDN</a></p>
<p>下面演示的案例使用的是 swiper4.3.3</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./swiper/css/swiper.css&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./swiper/js/swiper.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- swiper6 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://unpkg.com/swiper/swiper-bundle.min.css&quot;</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/swiper/swiper-bundle.min.js&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- swiper4.3.3 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/Swiper/4.3.3/css/swiper.min.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/Swiper/4.3.3/js/swiper.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>几点说明：</p>
<ul>
<li><p>为了让CSS代码层级关系更加明显，下面代码案例使用的是 Less</p>
</li>
<li><p>如果想清除浏览器默认效果，可以使用 <a href="https://sourl.cn/MiNzfr">CSS Tools: Reset CSS</a></p>
<p>但是这个可能并不太好，可以参考 <a href="http://www.zhangxinxu.com/wordpress/?p=758">CSS reset的重新审视 – 避免样式重置</a></p>
</li>
</ul>
<h3 id="轮播图"><a href="#轮播图" class="headerlink" title="轮播图"></a>轮播图</h3><ul>
<li><p><a href="https://sourl.cn/qSAcHh">图片下载链接（觅元素）</a></p>
</li>
<li><p>HTML 代码</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-banner&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-wrapper&quot;</span> <span class="attr">id</span>=<span class="string">&quot;swiper-1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-slide&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/1.jpg&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-slide&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/2.jpg&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-slide&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/3.jpg&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>Less 代码</li>
</ul>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@imgBannerWidth:</span> <span class="number">1920px</span>;</span><br><span class="line"><span class="variable">@imgBannerHeight:</span> <span class="number">600px</span>;</span><br><span class="line"><span class="selector-class">.img-banner</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="variable">@imgBannerWidth</span> / <span class="number">2</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="variable">@imgBannerHeight</span> / <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.swiper-banner</span> &#123;</span><br><span class="line">    <span class="selector-tag">&amp;</span><span class="selector-pseudo">:extend(.img-banner)</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="selector-id">#swiper-1</span> &#123;</span><br><span class="line">        <span class="selector-tag">img</span> &#123;</span><br><span class="line">            <span class="selector-tag">&amp;</span><span class="selector-pseudo">:extend(.img-banner)</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>JS 代码</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//初始化一个Swiper</span></span><br><span class="line"><span class="keyword">new</span> Swiper(<span class="string">&quot;.swiper-banner&quot;</span>, &#123;</span><br><span class="line">    speed: <span class="number">600</span>, <span class="comment">//切换速度</span></span><br><span class="line">    loop: <span class="literal">true</span>, <span class="comment">//循环模式</span></span><br><span class="line">    effect: <span class="string">&quot;cube&quot;</span>, <span class="comment">//切换效果：方块</span></span><br><span class="line">    autoplay: &#123;</span><br><span class="line">        delay: <span class="number">1000</span>, <span class="comment">//自动播放</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li>效果如下：</li>
</ul>
<p><img data-src="https://img-blog.csdnimg.cn/20200826152012303.gif#pic_center" alt="效果1"></p>
<h3 id="横屏滑动"><a href="#横屏滑动" class="headerlink" title="横屏滑动"></a>横屏滑动</h3><ul>
<li><p><a href="https://sourl.cn/L8Vem4">图片下载链接（iconfont）</a></p>
</li>
<li><p>HTML 代码</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-nav&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-wrapper&quot;</span> <span class="attr">id</span>=<span class="string">&quot;swiper-2&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-slide&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./img/凯旋门.png&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>凯旋门<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-slide&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./img/古罗马斗兽场.png&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>古罗马斗兽场<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-slide&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./img/大本钟.png&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>大本钟<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-slide&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./img/天坛.png&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>天坛<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-slide&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./img/巴黎圣母院.png&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>巴黎圣母院<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-slide&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./img/悉尼歌剧院.png&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>悉尼歌剧院<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-slide&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./img/比萨斜塔.png&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>比萨斜塔<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-slide&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./img/泰姬陵.png&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>泰姬陵<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>Less 代码</li>
</ul>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.flex-center</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.swiper-nav</span> &#123;</span><br><span class="line">    <span class="selector-id">#swiper-2</span> &#123;</span><br><span class="line">        <span class="selector-class">.swiper-slide</span> &#123;</span><br><span class="line">            <span class="selector-tag">&amp;</span><span class="selector-pseudo">:extend(.flex-center)</span>;</span><br><span class="line">            <span class="attribute">flex-direction</span>: column;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-tag">p</span> &#123;</span><br><span class="line">            <span class="attribute">text-align</span>: center;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>JS 代码</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Swiper(<span class="string">&quot;.swiper-nav&quot;</span>, &#123;</span><br><span class="line">	slidesPerView: <span class="number">4</span>, <span class="comment">//设置slider容器能够同时显示的slides数量</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li>效果如下：</li>
</ul>
<p><img data-src="https://img-blog.csdnimg.cn/20200826153547747.gif#pic_center" alt="效果2"></p>
<h3 id="数字下标（两种形式）"><a href="#数字下标（两种形式）" class="headerlink" title="数字下标（两种形式）"></a>数字下标（两种形式）</h3><ul>
<li>HTML 代码</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-img&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-wrapper&quot;</span> <span class="attr">id</span>=<span class="string">&quot;swiper-3&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-slide&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./img/凯旋门.png&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-slide&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./img/泰姬陵.png&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-slide&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./img/大本钟.png&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-slide&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./img/天坛.png&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 分页器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-pagination&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-img-click&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-wrapper&quot;</span> <span class="attr">id</span>=<span class="string">&quot;swiper-3&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-slide&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./img/凯旋门.png&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-slide&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./img/泰姬陵.png&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-slide&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./img/大本钟.png&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-slide&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./img/天坛.png&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 分页器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-pagination&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>Less 代码</li>
</ul>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@bgColorHover:</span> <span class="number">#ff2832</span>;</span><br><span class="line"><span class="variable">@bgColor:</span> <span class="number">#646464</span>;</span><br><span class="line"><span class="variable">@bgColorFont:</span> <span class="number">#fff</span>;</span><br><span class="line"><span class="variable">@imgIconWidth:</span> <span class="number">200px</span>;</span><br><span class="line"><span class="variable">@imgIconHeight:</span> <span class="number">200px</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.img-icon</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="variable">@imgIconWidth</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="variable">@imgIconHeight</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.swiper-img</span>,</span><br><span class="line"><span class="selector-class">.swiper-img-click</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="variable">@imgIconWidth</span> + <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="variable">@imgIconHeight</span> + <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">background</span>: lighten(<span class="variable">@bgColor</span>, <span class="number">40%</span>);</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="selector-id">#swiper-3</span> &#123;</span><br><span class="line">        <span class="selector-class">.swiper-slide</span> &#123;</span><br><span class="line">            <span class="selector-tag">&amp;</span><span class="selector-pseudo">:extend(.flex-center)</span>;</span><br><span class="line">            <span class="selector-tag">&amp;</span><span class="selector-pseudo">:extend(.img-icon)</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.swiper-pagination</span> &#123;</span><br><span class="line">        <span class="attribute">position</span>: relative;</span><br><span class="line">        <span class="attribute">bottom</span>: <span class="number">40px</span>;</span><br><span class="line">        <span class="selector-class">.swiper-pagination-bullet</span> &#123;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">20px</span>;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">20px</span>;</span><br><span class="line">            <span class="attribute">line-height</span>: <span class="number">20px</span>;</span><br><span class="line">            <span class="attribute">color</span>: <span class="variable">@bgColor</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-class">.swiper-pagination-bullet-active</span> &#123;</span><br><span class="line">            <span class="attribute">background</span>: <span class="variable">@bgColorHover</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>JS 代码</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Swiper(<span class="string">&quot;.swiper-img&quot;</span>, &#123;</span><br><span class="line">    loop: <span class="literal">true</span>,</span><br><span class="line">    autoplay: &#123;</span><br><span class="line">        delay: <span class="number">1000</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    pagination: &#123;</span><br><span class="line">        el: <span class="string">&quot;.swiper-pagination&quot;</span>,</span><br><span class="line">        type: <span class="string">&quot;fraction&quot;</span>, <span class="comment">//分式</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">new</span> Swiper(<span class="string">&quot;.swiper-img-click&quot;</span>, &#123;</span><br><span class="line">    loop: <span class="literal">true</span>,</span><br><span class="line">    autoplay: &#123;</span><br><span class="line">        delay: <span class="number">1000</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    pagination: &#123;</span><br><span class="line">        el: <span class="string">&quot;.swiper-pagination&quot;</span>,</span><br><span class="line">        clickable: <span class="literal">true</span>, <span class="comment">//点击分页器的指示点分页器会控制Swiper切换</span></span><br><span class="line">        renderBullet: <span class="function"><span class="keyword">function</span>(<span class="params">index, className</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;&lt;span class=&quot;&#x27;</span> + className + <span class="string">&#x27;&quot;&gt;&#x27;</span> + (index + <span class="number">1</span>) + <span class="string">&#x27;&lt;/span&gt;&#x27;</span>;</span><br><span class="line">        &#125;, <span class="comment">//渲染分页器小点</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li>效果如下：</li>
</ul>
<p><img data-src="https://img-blog.csdnimg.cn/20200826155510164.gif#pic_center" alt="效果三"></p>
<h3 id="缩略图显示（开启焦距功能）"><a href="#缩略图显示（开启焦距功能）" class="headerlink" title="缩略图显示（开启焦距功能）"></a>缩略图显示（开启焦距功能）</h3><ul>
<li><p><a href="https://sourl.cn/APX8pS">图片下载链接（官网案例）</a></p>
</li>
<li><p>HTML 代码</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;banner&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-focus&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-wrapper&quot;</span> <span class="attr">id</span>=<span class="string">&quot;swiper-4&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-slide&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-zoom-container&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/01.jpg&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-slide&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-zoom-container&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/02.jpg&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-slide&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-zoom-container&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/03.jpg&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-slide&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-zoom-container&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/04.jpg&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-pagination&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>Less 代码</li>
</ul>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#banner</span> &#123;</span><br><span class="line">    <span class="attribute">max-width</span>: <span class="number">1200px</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="selector-class">.swiper-focus</span>&#123;</span><br><span class="line">        <span class="selector-class">.swiper-slide</span> &#123;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">            <span class="selector-tag">img</span> &#123;</span><br><span class="line">                <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.swiper-pagination</span> &#123;</span><br><span class="line">        <span class="attribute">position</span>: relative;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="selector-class">.swiper-pagination-bullet</span> &#123;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">25%</span>;</span><br><span class="line">            <span class="attribute">height</span>: auto;</span><br><span class="line">            <span class="attribute">background</span>: none;</span><br><span class="line">            <span class="selector-tag">img</span> &#123;</span><br><span class="line">                <span class="attribute">font-size</span>: <span class="number">0</span>;</span><br><span class="line">                <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>JS 代码</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Swiper(<span class="string">&#x27;.swiper-focus&#x27;</span>, &#123;</span><br><span class="line">    loop: <span class="literal">true</span>,</span><br><span class="line">    pagination: &#123;</span><br><span class="line">        el: <span class="string">&#x27;.swiper-pagination&#x27;</span>,</span><br><span class="line">        clickable: <span class="literal">true</span>,</span><br><span class="line">        renderBullet: <span class="function"><span class="keyword">function</span>(<span class="params">index, className</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;&lt;span class=&quot;&#x27;</span> + className + <span class="string">&#x27;&quot;&gt;&lt;image src=&quot;img/0&#x27;</span> + (index + <span class="number">1</span>) + <span class="string">&#x27;.jpg&quot;&gt;&lt;/span&gt;&#x27;</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    zoom: <span class="literal">true</span>, <span class="comment">// 开启焦距功能：双击slide会放大/缩小</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li>效果如下：</li>
</ul>
<p><img data-src="https://img-blog.csdnimg.cn/2020082616193980.gif#pic_center" alt="效果4"></p>
]]></content>
      <categories>
        <category>前端插件</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>Swiper</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue + Element 国际化(i18n)路由页面切换语言</title>
    <url>/posts/82482c19/</url>
    <content><![CDATA[<h2 id="安装-i18n"><a href="#安装-i18n" class="headerlink" title="安装 i18n"></a>安装 i18n</h2><p><code>internationalization</code> 这个单词中，i 和 n 之间有 18 个字母</p>
<a id="more"></a>

<p><strong>注意：</strong>当前 i18n 最新版本为 9 版本，9 版本没有 VueI18n，<code>import VueI18n from &#39;vue-i18n&#39;</code> 解构会报错 <code>Cannot read property &#39;install&#39; of undefined</code></p>
<ul>
<li>这里为了让 Element 兼容，安装的是 8 版本的</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install vue-i18n@8</span><br></pre></td></tr></table></figure>

<h2 id="页面中使用国际化"><a href="#页面中使用国际化" class="headerlink" title="页面中使用国际化"></a>页面中使用国际化</h2><h3 id="i18n-文件夹下的-index-js-文件"><a href="#i18n-文件夹下的-index-js-文件" class="headerlink" title="i18n 文件夹下的 index.js 文件"></a>i18n 文件夹下的 index.js 文件</h3><p><code>require.context</code></p>
<blockquote>
<p>它允许传入一个目录进行搜索，一个标志指示是否应该搜索子目录，还有一个正则表达式来匹配文件</p>
</blockquote>
<ul>
<li>第一个参数：<code>directory</code> 要搜索的文件夹目录不能是变量，否则在编译阶段无法定位目录</li>
<li>第二个参数：<code>useSubdirectories</code> 是否搜索子目录</li>
<li>第三个参数：<code>regExp</code> 匹配文件的正则表达式</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">require</span>.context(<span class="string">&#x27;demo&#x27;</span>, <span class="literal">false</span>, <span class="regexp">/\.js$/</span>)</span><br></pre></td></tr></table></figure>

<p><code>function</code> 返回一个具有 resolve、keys、id 三属性的方法</p>
<ul>
<li><code>resolve</code> 返回请求被解析后得到的模板</li>
<li><code>keys</code> 返回一个数组，由所有符合上下文模板处理的请求组成</li>
<li><code>id</code> 是上下文模板里面所包含的模板，可能在你使用 <code>module.hot.accept</code> 的时候被调用到</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> VueI18n <span class="keyword">from</span> <span class="string">&#x27;vue-i18n&#x27;</span></span><br><span class="line"></span><br><span class="line">Vue.use(VueI18n)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> langFiles = <span class="built_in">require</span>.context(<span class="string">&#x27;./config&#x27;</span>, <span class="literal">false</span>, <span class="regexp">/\.js$/</span>)</span><br><span class="line"><span class="keyword">let</span> regExp = <span class="regexp">/\.\/([^\.\/]+)\.([^\.]+)$/</span></span><br><span class="line"><span class="keyword">let</span> messages = &#123;&#125;</span><br><span class="line"></span><br><span class="line">langFiles.keys().forEach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> prop = regExp.exec(key)[<span class="number">1</span>]</span><br><span class="line">  messages[prop] = langFiles(key).default</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getLanguage</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> locale = sessionStorage.getItem(<span class="string">&#x27;lang&#x27;</span>) || <span class="string">&#x27;zh&#x27;</span></span><br><span class="line">  <span class="keyword">return</span> locale</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> VueI18n(&#123;</span><br><span class="line">  locale: getLanguage(),</span><br><span class="line">  messages</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li>messages 对象</li>
</ul>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/company-img/%E5%9B%BD%E9%99%85%E5%8C%96%E4%BF%A1%E6%81%AF.jpg"></p>
<h3 id="main-js-引入"><a href="#main-js-引入" class="headerlink" title="main.js 引入"></a>main.js 引入</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> i18n <span class="keyword">from</span> <span class="string">&#x27;./i18n&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App),</span><br><span class="line">  i18n</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="展示页面"><a href="#展示页面" class="headerlink" title="展示页面"></a>展示页面</h3><p>效果图如下：</p>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/company-img/%E5%88%87%E6%8D%A2%E8%AF%AD%E8%A8%80.gif"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;el-dropdown</span><br><span class="line">      trigger&#x3D;&quot;click&quot;</span><br><span class="line">      class&#x3D;&quot;international&quot;</span><br><span class="line">      @command&#x3D;&quot;handleSetLanguage&quot;</span><br><span class="line">    &gt;</span><br><span class="line">      &lt;div&gt;&lt;i class&#x3D;&quot;el-icon-s-tools&quot; &#x2F;&gt;切换语言&lt;&#x2F;div&gt;</span><br><span class="line">      &lt;el-dropdown-menu slot&#x3D;&quot;dropdown&quot;&gt;</span><br><span class="line">        &lt;el-dropdown-item :disabled&#x3D;&quot;language &#x3D;&#x3D;&#x3D; &#39;zh&#39;&quot; command&#x3D;&quot;zh&quot;&gt;</span><br><span class="line">          中文</span><br><span class="line">        &lt;&#x2F;el-dropdown-item&gt;</span><br><span class="line">        &lt;el-dropdown-item :disabled&#x3D;&quot;language &#x3D;&#x3D;&#x3D; &#39;en&#39;&quot; command&#x3D;&quot;en&quot;&gt;</span><br><span class="line">          English</span><br><span class="line">        &lt;&#x2F;el-dropdown-item&gt;</span><br><span class="line">      &lt;&#x2F;el-dropdown-menu&gt;</span><br><span class="line">    &lt;&#x2F;el-dropdown&gt;</span><br><span class="line">    &lt;el-table :data&#x3D;&quot;tableData&quot; style&#x3D;&quot;width: 100%&quot;&gt;</span><br><span class="line">      &lt;el-table-column prop&#x3D;&quot;date&quot; :label&#x3D;&quot;$t(&#39;table.date&#39;)&quot; width&#x3D;&quot;180&quot;&gt;</span><br><span class="line">      &lt;&#x2F;el-table-column&gt;</span><br><span class="line">      &lt;el-table-column prop&#x3D;&quot;name&quot; :label&#x3D;&quot;$t(&#39;table.name&#39;)&quot; width&#x3D;&quot;180&quot;&gt;</span><br><span class="line">      &lt;&#x2F;el-table-column&gt;</span><br><span class="line">      &lt;el-table-column prop&#x3D;&quot;age&quot; :label&#x3D;&quot;$t(&#39;table.age&#39;)&quot;&gt; &lt;&#x2F;el-table-column&gt;</span><br><span class="line">    &lt;&#x2F;el-table&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      tableData: [</span><br><span class="line">        &#123;</span><br><span class="line">          date: &#39;2016-05-02&#39;,</span><br><span class="line">          name: &#39;王小虎&#39;,</span><br><span class="line">          age: &#39;23&#39;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          date: &#39;2016-05-04&#39;,</span><br><span class="line">          name: &#39;李小鸭&#39;,</span><br><span class="line">          age: &#39;14&#39;</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      language: sessionStorage.getItem(&#39;lang&#39;) || &#39;zh&#39;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    handleSetLanguage(lang) &#123;</span><br><span class="line">      this.$i18n.locale &#x3D; lang</span><br><span class="line">      this.language &#x3D; lang</span><br><span class="line">      sessionStorage.setItem(&#39;lang&#39;, lang)</span><br><span class="line">      location.reload();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="语言配置文件"><a href="#语言配置文件" class="headerlink" title="语言配置文件"></a>语言配置文件</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// en.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  table: &#123;</span><br><span class="line">    date: <span class="string">&#x27;Date&#x27;</span>,</span><br><span class="line">    name: <span class="string">&#x27;Name&#x27;</span>,</span><br><span class="line">    age: <span class="string">&#x27;Age&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// zh.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  table: &#123;</span><br><span class="line">    date: <span class="string">&#x27;日期&#x27;</span>,</span><br><span class="line">    name: <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">    age: <span class="string">&#x27;年龄&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="路由菜单国际化"><a href="#路由菜单国际化" class="headerlink" title="路由菜单国际化"></a>路由菜单国际化</h2><ul>
<li><p>首先需要处理一下标题名，如果这个名在语言配置文件中就直接返回，如果不在返回原信息中的标题</p>
<p><code>$te</code>这个方法用以判断需要翻译的<code>key</code>在你提供的<code>语言包(messages)</code>中是否存在</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">routeTitle</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> name = <span class="string">`route.<span class="subst">$&#123;item.path.substring(<span class="number">1</span>)&#125;</span>`</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">this</span>.$te(name)) &#123;</span><br><span class="line">    <span class="keyword">return</span> item.meta.title</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.$t(name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="展示页面中"><a href="#展示页面中" class="headerlink" title="展示页面中"></a>展示页面中</h3><p>把每一项传到处理标题的方法中</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in routesSystem&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">:index</span>=<span class="string">&quot;index.toString()&quot;</span>&gt;</span>&#123;&#123; routeTitle(item) &#125;&#125;<span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123; routeTitle &#125; <span class="keyword">from</span> <span class="string">&#x27;@/utils/get-page-title&#x27;</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    methods: &#123;</span><br><span class="line"><span class="javascript">        routeTitle <span class="comment">// 声明一下</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="配置语言文件"><a href="#配置语言文件" class="headerlink" title="配置语言文件"></a>配置语言文件</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// zh.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  route: &#123;</span><br><span class="line">    application: <span class="string">&#x27;总计划&#x27;</span>,</span><br><span class="line">    plan: <span class="string">&#x27;计划&#x27;</span>,</span><br><span class="line">    equipment: <span class="string">&#x27;设备&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// en.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  route: &#123;</span><br><span class="line">    application: <span class="string">&#x27;Application&#x27;</span>,</span><br><span class="line">    plan: <span class="string">&#x27;Plan&#x27;</span>,</span><br><span class="line">    equipment: <span class="string">&#x27;Equipment&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="路由表"><a href="#路由表" class="headerlink" title="路由表"></a>路由表</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        path: <span class="string">&#x27;/application&#x27;</span>,</span><br><span class="line">        meta: &#123; <span class="attr">title</span>: <span class="string">&#x27;总计划&#x27;</span> &#125;,</span><br><span class="line">	&#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        path: <span class="string">&#x27;/plan&#x27;</span>,</span><br><span class="line">        meta: &#123; <span class="attr">title</span>: <span class="string">&#x27;计划&#x27;</span> &#125;,</span><br><span class="line">	&#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        path: <span class="string">&#x27;/equipment&#x27;</span>,</span><br><span class="line">        meta: &#123; <span class="attr">title</span>: <span class="string">&#x27;设备&#x27;</span> &#125;,</span><br><span class="line">	&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h2 id="Element-国际化"><a href="#Element-国际化" class="headerlink" title="Element 国际化"></a>Element 国际化</h2><h3 id="main-js-引入-1"><a href="#main-js-引入-1" class="headerlink" title="main.js 引入"></a>main.js 引入</h3><ul>
<li>参考兼容 <code>vue-i18n@6.x</code> 的步骤（需要手动处理）</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> i18n <span class="keyword">from</span> <span class="string">&#x27;./i18n&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ElementUI <span class="keyword">from</span> <span class="string">&#x27;element-ui&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;element-ui/lib/theme-chalk/index.css&#x27;</span></span><br><span class="line"><span class="comment">// 因为是8版本需要这么使用</span></span><br><span class="line">Vue.use(ElementUI, &#123;</span><br><span class="line">  i18n: <span class="function">(<span class="params">key, value</span>) =&gt;</span> i18n.t(key, value),</span><br><span class="line">  size: <span class="string">&#x27;mini&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App),</span><br><span class="line">  i18n</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="语言配置文件-1"><a href="#语言配置文件-1" class="headerlink" title="语言配置文件"></a>语言配置文件</h3><ul>
<li>这样 Element 的国际化也就完成了</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// en.js</span></span><br><span class="line"><span class="keyword">import</span> enLocale <span class="keyword">from</span> <span class="string">&#x27;element-ui/lib/locale/lang/en&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  ...enLocale</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// zh.js</span></span><br><span class="line"><span class="keyword">import</span> zhLocale <span class="keyword">from</span> <span class="string">&#x27;element-ui/lib/locale/lang/zh-CN&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  ...zhLocale</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="推荐参考"><a href="#推荐参考" class="headerlink" title="推荐参考"></a>推荐参考</h2><p><a href="https://segmentfault.com/a/1190000008752459">前端国际化之Vue-i18n源码分析</a></p>
<p><a href="https://segmentfault.com/a/1190000016445415">vue中如何使用i18n实现国际化</a></p>
<p><a href="https://element.eleme.cn/#/zh-CN/component/i18n">Element国际化</a></p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>Element</tag>
        <tag>i18n</tag>
        <tag>切换语言</tag>
      </tags>
  </entry>
  <entry>
    <title>vscode造成电脑卡顿</title>
    <url>/posts/fc53734b/</url>
    <content><![CDATA[<h3 id="主流解决方案"><a href="#主流解决方案" class="headerlink" title="主流解决方案"></a>主流解决方案</h3><p>最近使用 Vscode 总是特别卡顿，网上大部分的解决方案如下（但是没有什么效果）</p>
<ul>
<li>search.followSymlinksd: false （控制是否在搜索中跟踪符号链接）</li>
<li>git.enabled: false （是否启用Git）</li>
<li>git.autorefresh: false （是否启用自动刷新）</li>
</ul>
<a id="more"></a>

<h3 id="语言设置问题"><a href="#语言设置问题" class="headerlink" title="语言设置问题"></a>语言设置问题</h3><p>都设置后还是很卡，很是头疼。去查看一下资源管理器，看一下哪个占用较多的cpu资源，发现是一个 Microsoft.Python.LanguageServer 的进程占用</p>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/Basics/python%E5%8D%A0%E7%94%A8%E8%BF%87%E9%AB%98.png" alt="cpu-python"></p>
<p>勾选 Jedi 不使用 Microsoft</p>
<ul>
<li>Python: Language Server: jedi</li>
</ul>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/Basics/%E4%BF%AE%E6%94%B9python%E8%AF%AD%E8%A8%80.png" alt="修改python语言"></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 最好在 settings.json 中加上这个，要不然可能随时变回 Microsoft</span></span><br><span class="line">&quot;python.languageServer&quot;: &quot;Jedi&quot;,</span><br></pre></td></tr></table></figure>

<p>同样， cpptools.exe 的进程占用也很高</p>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/Basics/C%E5%8D%A0%E7%94%A8%E8%BF%87%E9%AB%98.png" alt="cpu-c"></p>
<ul>
<li>C_Cpp: Intelli Sense Engine: disabled</li>
</ul>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/Basics/%E4%BF%AE%E6%94%B9c%E8%AF%AD%E8%A8%80.png" alt="修改c语言"></p>
<h3 id="插件问题"><a href="#插件问题" class="headerlink" title="插件问题"></a>插件问题</h3><p>都设置后，还是会时不时卡顿，再去查看资源管理器，发现有一些插件也会导致 CPU 过高</p>
<ul>
<li>Auto Rename Tag （其实按F2重构即可）</li>
</ul>
<p>你可以在命令面板（Ctrl + Shift + P）输入 <code>Developer: Startup Performance</code> 查看各个插件启动时间</p>
<p>可以参考 <a href="https://juejin.cn/post/6844904115798016008">那些你应该考虑卸载的 VSCode 扩展</a></p>
]]></content>
      <categories>
        <category>基础配置</category>
      </categories>
      <tags>
        <tag>问题</tag>
        <tag>电脑卡顿</tag>
        <tag>Vscode</tag>
      </tags>
  </entry>
  <entry>
    <title>jQuery 源码浅析</title>
    <url>/posts/6362a5/</url>
    <content><![CDATA[<p>JS 代码执行的环境：</p>
<ul>
<li>浏览器：PC端、移动端【webkit、gecko、trident、blink…】</li>
<li>Hybrid 混合APP开发，把H5页面嵌入native app（IOS/安卓）的webview中【webkit】</li>
<li>node，一个基于V8引擎，渲染和解析JS的环境。没有window，全局对象global</li>
<li>小程序</li>
</ul>
<h3 id="判断环境（闭包应用）"><a href="#判断环境（闭包应用）" class="headerlink" title="判断环境（闭包应用）"></a>判断环境（闭包应用）</h3><blockquote>
<p>为什么 jQuery 即能在浏览器中运行也能在 webpack 下运行</p>
</blockquote>
<ul>
<li><p>形参 A 检测大概是什么环境执行</p>
<p>如果 <code>A===window</code> 说明：浏览器、webview中运行</p>
<p>如果 <code>A!==window</code>  说明：在Node环境下运行，不过 A 可能是Global，也可能是当前模块</p>
</li>
<li><p>形参 B 返回 jQuery</p>
</li>
</ul>
<p>什么时候执行 B 函数呢？检测环境的时候执行函数 B（浏览器/Node环境）</p>
<ul>
<li><p><strong>Node</strong> 应用由模块组成，采用 CommonJS 模块规范，可以用 <code>module &amp;&amp; module.exports</code> 来检测</p>
<ul>
<li><p>如果支持 CommonJS 规范，需要再检测一下是否有 <code>window.document</code> ，比如：webpack 工程化环境</p>
</li>
<li><p>webpack 可能通过 import 导入，也可能通过 require 导入</p>
<p><code>import $ from &#39;jquery&#39;</code> <code>let $ = require(&#39;jquery&#39;)</code> </p>
</li>
<li><p><code>module.exports</code> 导出的是 <code>factory(global, true)</code>（函数 B）</p>
<p>所以：$-&gt;jQuery </p>
</li>
</ul>
</li>
<li><p>else 那一块，返回 window</p>
<p>浏览器导入jQuery：<code>&lt;script src=&#39;jquery.min.js&#39;&gt;&lt;/script&gt;</code> ，执行 <code>factory(global)</code> （函数 B），因为 <code>noGlobal === &quot;undefined&quot;</code> ，执行 <code>window.jQuery = window.$ = jQuery</code> ，所以在 window 下可以使用 jQuery 和 $</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> A = <span class="keyword">typeof</span> <span class="built_in">window</span> !== <span class="string">&quot;undefined&quot;</span> ? <span class="built_in">window</span> : <span class="built_in">this</span>;</span><br><span class="line"><span class="keyword">var</span> B = <span class="function"><span class="keyword">function</span> (<span class="params"><span class="built_in">window</span>, noGlobal</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 浏览器环境下执行这个函数</span></span><br><span class="line">    <span class="comment">//  window -&gt; window    noGlobal -&gt; undefined</span></span><br><span class="line">    <span class="comment">// webpack环境下导入执行</span></span><br><span class="line">    <span class="comment">//  window -&gt; window    noGlobal -&gt; true</span></span><br><span class="line"><span class="meta">    &quot;use strict&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> version = <span class="string">&quot;3.5.1&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> jQuery = <span class="function"><span class="keyword">function</span> (<span class="params">selector, context</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> jQuery.fn.init(selector, context);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> noGlobal === <span class="string">&quot;undefined&quot;</span>) &#123;</span><br><span class="line">        <span class="comment">// 浏览器直接导入</span></span><br><span class="line">        <span class="built_in">window</span>.jQuery = <span class="built_in">window</span>.$ = jQuery;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">return</span> jQuery;</span><br><span class="line">&#125;;</span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"><span class="built_in">global</span>, factory</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 支持 CommonJS 模块规范[node环境]</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">module</span> === <span class="string">&quot;object&quot;</span> &amp;&amp; <span class="keyword">typeof</span> <span class="built_in">module</span>.exports === <span class="string">&quot;object&quot;</span>) &#123;</span><br><span class="line">        <span class="built_in">module</span>.exports = <span class="built_in">global</span>.document ?</span><br><span class="line">            <span class="comment">// 有 window</span></span><br><span class="line">            factory(<span class="built_in">global</span>, <span class="literal">true</span>) :</span><br><span class="line">            <span class="comment">// 没有 window</span></span><br><span class="line">            <span class="function"><span class="keyword">function</span> (<span class="params">w</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (!w.document) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;jQuery requires a window with a document&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> factory(w);</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 不支持 CommonJS 规范的[浏览器环境]</span></span><br><span class="line">        <span class="comment">// global-&gt;window</span></span><br><span class="line">        factory(<span class="built_in">global</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;)(A, B);</span><br></pre></td></tr></table></figure>

<ul>
<li><p><strong>应用：暴露API</strong>（支持浏览器直接导入也支持webpack CommonJS模块导入）</p>
<p>如果你写了一个很好的库，既想在浏览器中使用，还想在 Node 中支持导入</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">window</span> !== <span class="string">&quot;undefined&quot;</span>) &#123;</span><br><span class="line">    <span class="built_in">window</span>.utils = utils;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">module</span> === <span class="string">&quot;object&quot;</span> &amp;&amp; <span class="keyword">typeof</span> <span class="built_in">module</span>.exports === <span class="string">&quot;object&quot;</span>) &#123;</span><br><span class="line">    <span class="built_in">module</span>.exports = utils;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="冲突处理"><a href="#冲突处理" class="headerlink" title="冲突处理"></a>冲突处理</h3><blockquote>
<p>有些 JavaScript 的库会使用 <code>$</code> 作为变量名（Zepto/jQuery），如果我们同时引用两个使用 <code>$</code> 作为变量名，或者引入两个不同版本的 jQuery 时，就可能会出现 <code>$</code> 冲突问题</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;node_modules/zepto/dist/zepto.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">    $ -&gt; Zepto</span></span><br><span class="line"><span class="comment">    Zepto -&gt; Zepto</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;node_modules/jquery/dist/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">    $ -&gt; jQuery</span></span><br><span class="line"><span class="comment">    jQuery -&gt; jQuery</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>先看一下 Zepto 的冲突处理，先看一下全局 <code>$</code> 有没有被占用，如果没有被占用 <code>window.$ = Zepto</code></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.Zepto = Zepto</span><br><span class="line"><span class="built_in">window</span>.$ === <span class="literal">undefined</span> &amp;&amp; (<span class="built_in">window</span>.$ = Zepto)</span><br></pre></td></tr></table></figure>

<ul>
<li>jQuery 可以使用 <code>jQuery.noConflict()</code> 来解决</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">factory</span>(<span class="params"><span class="built_in">window</span>, noGlobal</span>) </span>&#123;</span><br><span class="line"><span class="meta">    &quot;use strict&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> jQuery;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="comment">// 在没有暴露给 window之前，把当前 window的$存一下</span></span><br><span class="line">    <span class="keyword">var</span> _jQuery = <span class="built_in">window</span>.jQuery,</span><br><span class="line">        _$ = <span class="built_in">window</span>.$;</span><br><span class="line"></span><br><span class="line">    jQuery.noConflict = <span class="function"><span class="keyword">function</span> (<span class="params">deep</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">window</span>.$ === jQuery) &#123;</span><br><span class="line">            <span class="comment">// 转让使用权给 Zepto</span></span><br><span class="line">            <span class="built_in">window</span>.$ = _$;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (deep &amp;&amp; <span class="built_in">window</span>.jQuery === jQuery) &#123;</span><br><span class="line">            <span class="built_in">window</span>.jQuery = _jQuery;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> jQuery;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> noGlobal === <span class="string">&quot;undefined&quot;</span>) &#123;</span><br><span class="line">        <span class="comment">// 暴露给 window</span></span><br><span class="line">        <span class="built_in">window</span>.jQuery = <span class="built_in">window</span>.$ = jQuery;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> jQuery;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>源码分析</tag>
        <tag>JavaScript</tag>
        <tag>jQuery</tag>
        <tag>闭包应用</tag>
        <tag>冲突处理</tag>
      </tags>
  </entry>
  <entry>
    <title>Yapi安装部署（接口管理服务）</title>
    <url>/posts/bb3fd12a/</url>
    <content><![CDATA[<p><strong><code>Yapi</code></strong> 由 <code>YMFE</code>开源，旨在为开发、产品、测试人员提供更优雅的接口管理服务，可以帮助开发者轻松创建、发布、维护<code>API</code>。</p>
<p>官方文档：<a href="https://hellosean1025.github.io/yapi/devops/index.html">https://hellosean1025.github.io/yapi/devops/index.html</a></p>
<a id="more"></a>

<p><img data-src="https://gitee.com/lilyn/pic/raw/master/js-img/yapi%E7%95%8C%E9%9D%A2.jpg" alt="yapi界面"></p>
<h2 id="环境要求"><a href="#环境要求" class="headerlink" title="环境要求"></a>环境要求</h2><ul>
<li>nodejs（7.6+)</li>
<li>mongodb（2.6+）</li>
</ul>
<p><strong>安装Node注意：</strong>最好安装14版本之前的，推荐12版本的，不然可能Node版本过高，导致无法成功部署</p>
<p>下载链接：<a href="https://nodejs.org/download/release/v12.12.0/">Node v12.12.0/ (nodejs.org)</a></p>
<p><strong>安装MongoDB注意：</strong>选择 Custom：自定义安装路径。安装MongDB需要取消这个勾选，不然会死等…（剩下一路next）</p>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/js-img/install%20mongodb.png" alt="install mongodb"></p>
<p>下载链接：<a href="http://dl.mongodb.org/dl/win32/x86_64">Downloads for win32 (mongodb.org)</a></p>
<h3 id="配置Node淘宝源"><a href="#配置Node淘宝源" class="headerlink" title="配置Node淘宝源"></a>配置Node淘宝源</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>

<h3 id="配置MongoDB"><a href="#配置MongoDB" class="headerlink" title="配置MongoDB"></a>配置MongoDB</h3><p><img data-src="https://gitee.com/lilyn/pic/raw/master/js-img/mongodb%20config.jpg" alt="mongodb config"></p>
<p>在安装目录创建 <code>mongodb.config</code>，填入如下信息（需要修改安装目录：我安装在：<code>D:\MongoDB</code>）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改安装目录</span></span><br><span class="line">dbpath=D:\MongoDB\data\db <span class="comment"># 数据库路径</span></span><br><span class="line"><span class="comment"># 修改安装目录</span></span><br><span class="line">logpath=D:\MongoDB\<span class="built_in">log</span>\mongod.log <span class="comment">#日志输出文件路径</span></span><br><span class="line"></span><br><span class="line">logappend=<span class="literal">true</span> <span class="comment"># 错误日志采用追加模式</span></span><br><span class="line"></span><br><span class="line">journal=<span class="literal">true</span> <span class="comment">#启用日志文件，默认启用</span></span><br><span class="line"></span><br><span class="line">quiet=<span class="literal">true</span> <span class="comment">#过滤掉无用的日志信息，若需要调试使用请设置为false</span></span><br><span class="line"></span><br><span class="line">port=27017 <span class="comment">#端口号 默认为27017</span></span><br></pre></td></tr></table></figure>

<ul>
<li>在 data 文件夹中新建文件夹 db</li>
<li>在 log文 件夹中新建 logs文件夹，logs文件夹新建 log.txt</li>
</ul>
<p>在MongoDB文件夹的bin目录下，启动cmd命令窗口输入如下命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> D:/MongoDB</span><br><span class="line"><span class="comment"># 修改安装目录</span></span><br><span class="line">mongod --dbpath <span class="string">&quot;D:\MongoDB\data\db&quot;</span>  --logpath <span class="string">&quot;D:\MongoDB\logs\log.txt&quot;</span>  --install -serviceName <span class="string">&quot;MongoDB&quot;</span>  </span><br></pre></td></tr></table></figure>

<p>打开浏览器访问 <a href="http://localhost:27017/">http://localhost:27017/</a> 或者 <a href="http://127.0.0.1:27017/">http://127.0.0.1:27017/</a></p>
<p>显示如下信息：说明启动成功</p>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/js-img/mongodb%20success.jpg" alt="mongodb success"></p>
<ul>
<li>右击“我的电脑”-&gt;属性-&gt;高级系统设置-&gt;环境变量</li>
</ul>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/js-img/%E6%B7%BB%E5%8A%A0%E7%B3%BB%E7%BB%9F%E5%8F%98%E9%87%8F.jpg" alt="添加系统变量"></p>
<p>新增你的 MongoDB 的 bin 目录的路径-&gt;保存</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改安装目录，我的安装在D盘</span></span><br><span class="line">D:\MongoDB\bin</span><br></pre></td></tr></table></figure>

<ul>
<li>之后可以在cmd里输入mongo测试一下</li>
</ul>
<h2 id="安装yapi"><a href="#安装yapi" class="headerlink" title="安装yapi"></a>安装yapi</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g yapi-cli</span><br><span class="line"><span class="comment"># 或使用淘宝源安装</span></span><br><span class="line">npm install -g yapi-cli --registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>

<h3 id="启动yapi"><a href="#启动yapi" class="headerlink" title="启动yapi"></a>启动yapi</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动</span></span><br><span class="line">yapi server</span><br></pre></td></tr></table></figure>

<p>yapi server 执行后提示：在浏览器打开 <a href="http://0.0.0.0:9090/">http://0.0.0.0:9090</a> 访问。非本地服务器，请将 0.0.0.0 替换成指定的域名或你本机IP</p>
<p>在CMD中，可以用如下方法查询查询本机IP:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 找到无线局域网适配器 WLAN</span></span><br><span class="line">ipconfig</span><br></pre></td></tr></table></figure>

<ul>
<li>找到后，输入ip+:9090，进入网址即可，界面如下：</li>
</ul>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/js-img/yapi%E5%B9%B3%E5%8F%B0%E9%83%A8%E7%BD%B2.jpg" alt="yapi平台部署"></p>
<p>填写完信息后，点击开始部署。<strong>注意：</strong>需要记住这个<strong>部署路径</strong></p>
<p>成功部署后会显示如下：</p>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/js-img/%E9%83%A8%E7%BD%B2%E6%88%90%E5%8A%9F.jpg" alt="部署成功"></p>
<p>进入<strong>部署路径</strong>，输入如下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 切换到部署路径下启动</span></span><br><span class="line">node vendors/server/app.js</span><br></pre></td></tr></table></figure>

<ul>
<li><p>内网下可以通过本机IP+端口号，进行访问，界面如图：</p>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/js-img/yapi%E7%95%8C%E9%9D%A2.jpg" alt="yapi界面"></p>
</li>
</ul>
<h3 id="pm2方式管理进程"><a href="#pm2方式管理进程" class="headerlink" title="pm2方式管理进程"></a>pm2方式管理进程</h3><p>要保证后台保持进程，需要安装pm2，进入<strong>部署路径</strong>启动即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g pm2</span><br><span class="line"><span class="comment"># 切换到部署路径下启动</span></span><br><span class="line">pm2 start vendors/server/app.js --watch -i 1</span><br></pre></td></tr></table></figure>

<p><img data-src="https://gitee.com/lilyn/pic/raw/master/js-img/pm2%E5%90%AF%E5%8A%A8.jpg" alt="pm2启动"></p>
<p>这样以后就可以很方便的用pm2启动关闭就行了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动</span></span><br><span class="line">pm2 start vendors/server/app.js --watch -i 1</span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">pm2 list</span><br><span class="line"><span class="comment"># 停止</span></span><br><span class="line">pm2 stop vendors/server/app.js</span><br></pre></td></tr></table></figure>

<p>以后访问本机IP+端口号即可进入</p>
]]></content>
      <categories>
        <category>基础配置</category>
      </categories>
      <tags>
        <tag>Yapi</tag>
        <tag>接口服务</tag>
        <tag>环境部署</tag>
        <tag>pm2</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue 处理文件的下载和上传（FormData/Blob）</title>
    <url>/posts/4cfe3e8b/</url>
    <content><![CDATA[<h2 id="FormData-上传"><a href="#FormData-上传" class="headerlink" title="FormData 上传"></a>FormData 上传</h2><p>将本地数据上传或导入数据库，有时候需要使用 FormData 对象。FormData 接口提供了一种表示表单数据的键值对 <code>key/value</code> 的构造方式，组成一个 queryString 提交到后台</p>
<a id="more"></a>

<h3 id="创建一个-FormData-对象实例"><a href="#创建一个-FormData-对象实例" class="headerlink" title="创建一个 FormData 对象实例"></a>创建一个 FormData 对象实例</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// js中</span></span><br><span class="line"><span class="keyword">let</span> formDataJs = <span class="keyword">new</span> FormData()</span><br><span class="line"><span class="comment">// vue中</span></span><br><span class="line"><span class="keyword">let</span> formDataVue = <span class="keyword">new</span> <span class="built_in">window</span>.FormData()</span><br></pre></td></tr></table></figure>

<h3 id="FormData-常用方法"><a href="#FormData-常用方法" class="headerlink" title="FormData 常用方法"></a>FormData 常用方法</h3><p>formData 里存储的数据格式是 <code>key/value</code>形式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> formData = <span class="keyword">new</span> FormData()</span><br><span class="line"><span class="comment">// 获取值</span></span><br><span class="line">formData.get(<span class="string">&#x27;key&#x27;</span>)</span><br><span class="line"><span class="comment">// 添加数据</span></span><br><span class="line">formData.append(<span class="string">&#x27;key&#x27;</span>, value)</span><br><span class="line"><span class="comment">// 设置、修改数据</span></span><br><span class="line">formData.set(<span class="string">&#x27;key&#x27;</span>, value)</span><br><span class="line"><span class="comment">// 删除数据</span></span><br><span class="line">formData.delete(<span class="string">&#x27;key&#x27;</span>)</span><br><span class="line"><span class="comment">// 判断数据是否存在</span></span><br><span class="line">formData.has(<span class="string">&#x27;key&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="Vue-上传数据"><a href="#Vue-上传数据" class="headerlink" title="Vue 上传数据"></a>Vue 上传数据</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    &lt;input</span><br><span class="line">      ref=&quot;uploadFile&quot;</span><br><span class="line">      type=&quot;file&quot;</span><br><span class="line">      multiple</span><br><span class="line">      accept=&quot;.png&quot;</span><br><span class="line">      style=&quot;display: none&quot;</span><br><span class="line">      @change=&quot;upload($event)&quot;</span><br><span class="line">    /&gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">size</span>=<span class="string">&quot;small&quot;</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;$refs.uploadFile.click()&quot;</span></span></span><br><span class="line"><span class="tag">      &gt;</span>浏览&lt;/el-button</span><br><span class="line">    &gt;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    methods: &#123;</span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">upload</span>(<span class="params">e</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> files = e.target.files</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> suffix = <span class="string">&#x27;.png&#x27;</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> flag = <span class="literal">true</span></span></span><br><span class="line"><span class="javascript">        files.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">const</span> isSuffix = item.name.endsWith(suffix)</span></span><br><span class="line"><span class="javascript">          <span class="keyword">if</span> (!isSuffix) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.$message.error(</span></span><br><span class="line"><span class="javascript">              <span class="string">`<span class="subst">$&#123;item.name&#125;</span> 文件类型不符，请上传后缀名为 <span class="subst">$&#123;suffix&#125;</span> 的文件`</span></span></span><br><span class="line">            )</span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> (flag = <span class="literal">false</span>)</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (flag) &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">if</span> (files.length === <span class="number">0</span>) <span class="keyword">return</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">const</span> formData = <span class="keyword">new</span> <span class="built_in">window</span>.FormData()</span></span><br><span class="line"><span class="javascript">          files.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">            formData.append(<span class="string">&#x27;file&#x27;</span>, item)</span></span><br><span class="line">          &#125;)</span><br><span class="line"><span class="javascript">          <span class="keyword">const</span> config = &#123;</span></span><br><span class="line">            headers: &#123;</span><br><span class="line"><span class="javascript">              <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;multipart/form-data&#x27;</span>,</span></span><br><span class="line"><span class="javascript">              type: <span class="string">&#x27;file&#x27;</span>,</span></span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;</span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.$axios</span></span><br><span class="line"><span class="javascript">            .post(<span class="string">&#x27;····请求接口····&#x27;</span>, formData, config)</span></span><br><span class="line"><span class="javascript">            .then(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">              <span class="built_in">this</span>.$message.success(<span class="string">&#x27;导入成功!&#x27;</span>)</span></span><br><span class="line">            &#125;)</span><br><span class="line"><span class="javascript">            .catch(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">              <span class="built_in">this</span>.$message.error(<span class="string">&#x27;导入失败!&#x27;</span>)</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="Blob-下载"><a href="#Blob-下载" class="headerlink" title="Blob 下载"></a>Blob 下载</h2><p>Blob 通常用于存储大文件，典型的 Blob 内容是一张图片或一个音频</p>
<ol>
<li>默认情况下 axios 不会处理二进制数据，即请求可以正常被浏览器接收，但 axios 不会去处理。需要在请求的时候设置 <code>responseType: &#39;blob&#39;</code> 才可以</li>
<li>拿到文件流之后，需要生成一个 URL 才可以下载，可以通过<code>URL.createObjectURL()</code>方法生成一个链接</li>
<li>a 标签添加文件名<br>正常情况下，通过 <code>window.location = url</code> 就可以下载文件。浏览器判断这个链接是一个资源而不是页面的时候，就会下载文件<br>但是通过文件流生成的 url 对应的资源是没有文件名的，需要添加文件名。这时候可以用到 a 标签<br>，a 标签我们通常会用到 href 属性，但是其实还有一个 download 属性，这个属性就指定了下载的文件名</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> mimeMap = &#123;</span><br><span class="line">  xlsx: <span class="string">&#x27;application/vnd.openxmlformats-officedocument.spreadsheetml.sheet&#x27;</span>,</span><br><span class="line">  zip: <span class="string">&#x27;application/zip&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">downLoadZip</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">  axios</span><br><span class="line">    .get(&#123;</span><br><span class="line">      url: url,</span><br><span class="line">      responseType: <span class="string">&#x27;blob&#x27;</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">    .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">      resolveBlob(res, mimeMap.zip)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">resolveBlob</span>(<span class="params">res, mimeType</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 创建a标签，并处理二级制数据</span></span><br><span class="line">  <span class="keyword">const</span> aLink = <span class="built_in">document</span>.createElement(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> blob = <span class="keyword">new</span> Blob([res.data], &#123; <span class="attr">type</span>: mimeType &#125;)</span><br><span class="line">  <span class="comment">// 生成下载链接</span></span><br><span class="line">  <span class="keyword">const</span> URL = <span class="built_in">window</span>.URL || <span class="built_in">window</span>.webkitURL</span><br><span class="line">  aLink.href = URL.createObjectURL(blob)</span><br><span class="line">  <span class="comment">// 匹配出文件名</span></span><br><span class="line">  <span class="keyword">const</span> disposition = res.headers[<span class="string">&#x27;content-disposition&#x27;</span>]</span><br><span class="line">  <span class="keyword">const</span> fileName = <span class="regexp">/filename=&quot;([^;]+)&quot;/</span>.exec(a)[<span class="number">1</span>]</span><br><span class="line">  <span class="comment">// 设置下载文件名称并下载</span></span><br><span class="line">  aLink.setAttribute(<span class="string">&#x27;download&#x27;</span>, fileName)</span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(aLink)</span><br><span class="line">  aLink.click()</span><br><span class="line">  <span class="comment">// 释放URL对象</span></span><br><span class="line">  <span class="built_in">window</span>.URL.revokeObjectURL(aLink.href)</span><br><span class="line">  <span class="built_in">document</span>.body.removeChild(aLink)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>FormData</tag>
        <tag>Blob</tag>
      </tags>
  </entry>
  <entry>
    <title>前端 JS 加密常用方法（RSA MD5 SHA）</title>
    <url>/posts/9f5130f2/</url>
    <content><![CDATA[<h2 id="jsencrypt-进行-RSA-加密"><a href="#jsencrypt-进行-RSA-加密" class="headerlink" title="jsencrypt 进行 RSA 加密"></a>jsencrypt 进行 RSA 加密</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i jsencrypt</span><br></pre></td></tr></table></figure>

<p><a href="http://web.chacuo.net/netrsakeypair">生成 RSA 密钥对</a></p>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/company-img/rsa%E5%85%AC%E9%92%A5%E7%A7%81%E9%92%A5.jpg"></p>
<ul>
<li>将生产的公钥和私钥复制过来</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> JSEncrypt <span class="keyword">from</span> <span class="string">&#x27;jsencrypt/bin/jsencrypt&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> publicKey = <span class="string">`非对称加密公钥`</span></span><br><span class="line"><span class="keyword">const</span> privateKey = <span class="string">`非对称加密私钥`</span></span><br><span class="line"><span class="keyword">const</span> txt = <span class="string">&#x27;123&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 加密 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">encrypt</span>(<span class="params">pass</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> encryptor = <span class="keyword">new</span> JSEncrypt() <span class="comment">// 创建加密对象实例</span></span><br><span class="line">  encryptor.setPublicKey(publicKey) <span class="comment">// 设置公钥</span></span><br><span class="line">  <span class="keyword">return</span> encryptor.encrypt(pass) <span class="comment">// 对内容进行加密</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 解密 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">decrypt</span>(<span class="params">pass</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> decryptor = <span class="keyword">new</span> JSEncrypt() <span class="comment">// 创建解密对象实例</span></span><br><span class="line">  decryptor.setPrivateKey(privateKey) <span class="comment">// 设置私钥</span></span><br><span class="line">  <span class="keyword">return</span> decryptor.decrypt(pass) <span class="comment">// 拿私钥解密内容</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(decrypt(encrypt(txt))) <span class="comment">// &#x27;123&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="blueimp-md5-进行-MD5-加密"><a href="#blueimp-md5-进行-MD5-加密" class="headerlink" title="blueimp-md5 进行 MD5 加密"></a>blueimp-md5 进行 MD5 加密</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i blueimp-md5</span><br></pre></td></tr></table></figure>

<ul>
<li>使用 MD5 加密一般会结合处理字符串的方法</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> md5 <span class="keyword">from</span> <span class="string">&#x27;blueimp-md5&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> txt = <span class="string">&#x27;123&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">passTrans</span>(<span class="params">pass</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> md5(pass).substring(<span class="number">4</span>).split(<span class="string">&#x27;&#x27;</span>).reverse().join(<span class="string">&#x27;&#x27;</span>).substring(<span class="number">4</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(passTrans(txt)) <span class="comment">// 32d25170b469b57095ca269b</span></span><br></pre></td></tr></table></figure>

<h2 id="sha-进行-SHA-加密"><a href="#sha-进行-SHA-加密" class="headerlink" title="sha 进行 SHA 加密"></a>sha 进行 SHA 加密</h2><p>SHA 家族的五个算法，分别是 SHA-1、SHA-224、SHA-256、SHA-384，和 SHA-512，由美国国家安全局（NSA）所规划，并由美国国家规范与技能研究院（NIST）发布，这里只对 SHA-1 和 SHA-256 进行演示</p>
<ul>
<li>SHA-1</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install js-sha1</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sha1 <span class="keyword">from</span> <span class="string">&#x27;js-sha1&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> txt = <span class="string">&#x27;123&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">passTrans</span>(<span class="params">pass</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> sha1(pass)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(passTrans(txt)) <span class="comment">// 40bd001563085fc35165329ea1ff5c5ecbdbbeef</span></span><br></pre></td></tr></table></figure>

<ul>
<li>SHA-256</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install js-sha256</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; sha256 &#125; <span class="keyword">from</span> <span class="string">&#x27;js-sha256&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> txt = <span class="string">&#x27;123&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">passTrans</span>(<span class="params">pass</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> sha256(pass)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(passTrans(txt)) <span class="comment">// a665a45920422f9d417e4867efdc4fb8a04a1f3fff1fa07e998e86f7f7a27ae3</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>jsencrypt</tag>
        <tag>md5</tag>
        <tag>sha</tag>
      </tags>
  </entry>
  <entry>
    <title>原生 JS 封装数组方法</title>
    <url>/posts/995105eb/</url>
    <content><![CDATA[<h2 id="数组基本操作方法"><a href="#数组基本操作方法" class="headerlink" title="数组基本操作方法"></a>数组基本操作方法</h2><blockquote>
<p>以下方法<strong>均改变原数组</strong>，需要操作数组的 length 属性</p>
</blockquote>
<h3 id="Push"><a href="#Push" class="headerlink" title="Push"></a>Push</h3><ul>
<li>返回值：新数组的长度</li>
<li>思路：数组的长度等于 <code>arguments[i]</code></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.myPush = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">arguments</span>.length; i++) &#123;</span><br><span class="line">        <span class="built_in">this</span>[<span class="built_in">this</span>.length] = <span class="built_in">arguments</span>[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.length;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="Pop"><a href="#Pop" class="headerlink" title="Pop"></a>Pop</h3><ul>
<li>返回值：删除的项（如果空数组，返回 undefined）</li>
<li>思路：让数组长度 -1</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.myPop = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.length==<span class="number">0</span>?<span class="literal">undefined</span>:(<span class="built_in">this</span>[<span class="built_in">this</span>.length - <span class="number">1</span>],<span class="built_in">this</span>.length--);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="Shift"><a href="#Shift" class="headerlink" title="Shift"></a>Shift</h3><ul>
<li>返回值：删除的项</li>
<li>思路：让数组前一个值 <code>this[i]</code> 等于后一个值 <code>this[i + 1]</code> ，之后把数组长度 -1</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.myShift = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.length == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> del = <span class="built_in">this</span>[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">this</span>.length; i++) &#123;</span><br><span class="line">        <span class="built_in">this</span>[i] = <span class="built_in">this</span>[i + <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.length--;</span><br><span class="line">    <span class="keyword">return</span> del;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="Unshift"><a href="#Unshift" class="headerlink" title="Unshift"></a>Unshift</h3><ul>
<li>返回值：新数组的长度</li>
<li>思路：让数组后一个值 <code>this[i]</code> 等于前 n（<code>n=arguments.length</code>）个值 <code>this[i - arguments.length]</code> ，之后把前 n 个值填为 <code>arguments[i]</code></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.myUnshift = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.length += <span class="built_in">arguments</span>.length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="built_in">this</span>.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= <span class="built_in">arguments</span>.length) &#123;</span><br><span class="line">            <span class="built_in">this</span>[i] = <span class="built_in">this</span>[i - <span class="built_in">arguments</span>.length];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>[i] = <span class="built_in">arguments</span>[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.length;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li>ES6 方法实现能简单一些。其实就是拼接数组，之后把拼接的数组一项一项赋值给原数组</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.myUnshift = <span class="function"><span class="keyword">function</span> (<span class="params">...arg</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> newArr = [...arg, ...this];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; newArr.length; i++) &#123;</span><br><span class="line">        <span class="built_in">this</span>[i] = newArr[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.length;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="数组操作方法"><a href="#数组操作方法" class="headerlink" title="数组操作方法"></a>数组操作方法</h2><blockquote>
<p>以下方法除splice（改变原数组）<strong>均不改变原数组</strong></p>
</blockquote>
<h3 id="splice（特殊）"><a href="#splice（特殊）" class="headerlink" title="splice（特殊）"></a>splice（特殊）</h3><blockquote>
<p>因为 push 实现比较简单，这里用到了 push 方法，能简写一两行</p>
</blockquote>
<ul>
<li><p>返回值：删除的项（数组）</p>
</li>
<li><p>思路：按参数数量分别进行判定</p>
<ul>
<li>参数小于等于1个，从 start 开始添加到新数组，并把添加那项删除（数组长度也减少）</li>
<li>参数大于1个，先进行删除（跟上一步相同）再把数组分成三份，左边+中间被替换的项+右边，合并数组</li>
</ul>
<p>注意：</p>
<ol>
<li>第一个参数为负数：如果转换为正数，大于数组长度，直接转换为0；小于等于数组长度，需加上数组长度</li>
<li>第二个参数：如果小于0，直接转换为0</li>
<li>第三个参数起：要添加的项</li>
</ol>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.mySplice = <span class="function"><span class="keyword">function</span> (<span class="params">start, del</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> arr = [];</span><br><span class="line">    <span class="keyword">if</span> (start &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        start = -start &gt; <span class="built_in">this</span>.length ? <span class="number">0</span> : <span class="built_in">this</span>.length + start;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">arguments</span>.length &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = start; i &lt; <span class="built_in">this</span>.length; i++) &#123;</span><br><span class="line">            arr.push(<span class="built_in">this</span>[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.length = start;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        del = del &lt; <span class="number">0</span> ? <span class="number">0</span> : del;</span><br><span class="line">        <span class="comment">// 删除数组这一步</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; del; i++) &#123;</span><br><span class="line">            arr.push(<span class="built_in">this</span>[start + i]);</span><br><span class="line">            <span class="built_in">this</span>[start + i] = <span class="built_in">this</span>[start + i + del];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.length -= del;</span><br><span class="line">        <span class="keyword">let</span> lArr = [];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; start; i++) &#123;</span><br><span class="line">            lArr.push(<span class="built_in">this</span>[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">arguments</span>.length - <span class="number">2</span>; i++) &#123;</span><br><span class="line">            lArr.push(<span class="built_in">arguments</span>[i + <span class="number">2</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = start; i &lt; <span class="built_in">this</span>.length; i++) &#123;</span><br><span class="line">            lArr.push(<span class="built_in">this</span>[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; lArr.length; i++) &#123;</span><br><span class="line">            <span class="built_in">this</span>[i] = lArr[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li>删除数组那一步，我第一时间想到的是冒泡（把删除项一次一次冒到最后一位），最后出来的代码是下面这样（非常麻烦）</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> that = del;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = that; i &gt; <span class="number">0</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (that &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = start; j &lt; <span class="built_in">this</span>.length - <span class="number">1</span>; j++) &#123;</span><br><span class="line">        [<span class="built_in">this</span>[j], <span class="built_in">this</span>[j + <span class="number">1</span>]] = [<span class="built_in">this</span>[j + <span class="number">1</span>], <span class="built_in">this</span>[j]];</span><br><span class="line">    &#125;</span><br><span class="line">    arr.push(<span class="built_in">this</span>[<span class="built_in">this</span>.length - <span class="number">1</span>]);</span><br><span class="line">    <span class="built_in">this</span>.length--;</span><br><span class="line">    that--;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>大可不必这样，把删除项的下一位（不删除）往前挪一个一个覆盖要删除的项即可</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; del; i++) &#123;</span><br><span class="line">    arr.push(<span class="built_in">this</span>[start + i]);</span><br><span class="line">    <span class="built_in">this</span>[start + i] = <span class="built_in">this</span>[start + i + del];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">this</span>.length -= del;</span><br></pre></td></tr></table></figure>

<h3 id="concat"><a href="#concat" class="headerlink" title="concat"></a>concat</h3><ul>
<li>返回值：拼接后的新数组</li>
<li>思路：如果参数是数组需遍历后一个一个添加到新数组</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.myConcat = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> arr = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">this</span>.length; i++) &#123;</span><br><span class="line">        arr[i] = <span class="built_in">this</span>[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">arguments</span>.length; i++) &#123;</span><br><span class="line">        <span class="keyword">const</span> el = <span class="built_in">arguments</span>[i];</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(el)) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; el.length; i++) &#123;</span><br><span class="line">                arr[arr.length] = el[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            arr[arr.length] = el;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="slice"><a href="#slice" class="headerlink" title="slice"></a>slice</h3><ul>
<li>返回值：复制后的新数组</li>
<li>思路：如果传参是负数索引，需对其长度进行判定。如果大于数组长度，将其改为0；小于数组长度，将其改为<code>arr.length+(负数索引)</code></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.mySlice = <span class="function"><span class="keyword">function</span> (<span class="params">start = <span class="number">0</span>, end = <span class="built_in">this</span>.length</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> arr = [];</span><br><span class="line">    <span class="keyword">if</span> (start &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        start = -start &gt; <span class="built_in">this</span>.length ? <span class="number">0</span> : <span class="built_in">this</span>.length + start;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (end &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        end = -end &gt; <span class="built_in">this</span>.length ? <span class="number">0</span> : <span class="built_in">this</span>.length + end;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = start; i &lt; end; i++) &#123;</span><br><span class="line">        arr.push(<span class="built_in">this</span>[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="flat"><a href="#flat" class="headerlink" title="flat"></a>flat</h3><ul>
<li>返回值：扁平后的新数组</li>
<li>思路：递归（下面实现没有加上可以指定递归深度的参数，类似<code>arr.flat(Infinity)</code>）</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.myFlat = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> arr = [];</span><br><span class="line">    fn(<span class="built_in">this</span>);</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">ary</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; ary.length; i++) &#123;</span><br><span class="line">            <span class="keyword">const</span> item = ary[i];</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(item)) &#123;</span><br><span class="line">                fn(item);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                arr.push(item);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>.prototype.myFlat = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.toString().split(<span class="string">&quot;,&quot;</span>).map(<span class="function">(<span class="params">item</span>) =&gt;</span> <span class="built_in">Number</span>(item));</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h2 id="数组重排方法"><a href="#数组重排方法" class="headerlink" title="数组重排方法"></a>数组重排方法</h2><h3 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h3><ul>
<li>返回值：倒序后的数组</li>
<li>思路：第n个数和倒数第n个数两两对换</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.myReverse = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, j = <span class="built_in">this</span>.length - <span class="number">1</span>; j &gt; i; i++, j--) &#123;</span><br><span class="line">        <span class="keyword">var</span> temp = <span class="built_in">this</span>[i];</span><br><span class="line">        <span class="built_in">this</span>[i] = <span class="built_in">this</span>[j];</span><br><span class="line">        <span class="built_in">this</span>[j] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h3><ul>
<li>返回值：排序后的数组</li>
<li>思路：不传参的时候，两两比较 String(xxx) 的值；传参的时候判断 <code>callBack(a-b)</code> 是否大于 0 即可</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.mySort = <span class="function"><span class="keyword">function</span> (<span class="params">callBack</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.length &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> callBack === <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">this</span>.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; <span class="built_in">this</span>.length - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (callBack(<span class="built_in">this</span>[j], <span class="built_in">this</span>[j + <span class="number">1</span>]) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    [<span class="built_in">this</span>[j], <span class="built_in">this</span>[j + <span class="number">1</span>]] = [<span class="built_in">this</span>[j + <span class="number">1</span>], <span class="built_in">this</span>[j]];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> callBack === <span class="string">&quot;undefined&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">this</span>.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; <span class="built_in">this</span>.length - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">String</span>(<span class="built_in">this</span>[j]) &gt; <span class="built_in">String</span>(<span class="built_in">this</span>[j + <span class="number">1</span>])) &#123;</span><br><span class="line">                    [<span class="built_in">this</span>[j], <span class="built_in">this</span>[j + <span class="number">1</span>]] = [<span class="built_in">this</span>[j + <span class="number">1</span>], <span class="built_in">this</span>[j]];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;参数异常&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="数组位置方法"><a href="#数组位置方法" class="headerlink" title="数组位置方法"></a>数组位置方法</h2><blockquote>
<p>以下方法均<strong>不改变原数组</strong></p>
</blockquote>
<h3 id="indexOf"><a href="#indexOf" class="headerlink" title="indexOf"></a>indexOf</h3><ul>
<li>返回值：索引/-1</li>
<li>思路：遍历数组，第二个参数是从哪个索引开始。如果不传参，从头查到尾部</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.myIndexOf = <span class="function"><span class="keyword">function</span> (<span class="params">val, index = <span class="number">0</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (index &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        index = -index &gt; <span class="built_in">this</span>.length ? <span class="number">0</span> : index + <span class="built_in">this</span>.length;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = index; i &lt; <span class="built_in">this</span>.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>[i] === val) &#123;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="lastIndexOf"><a href="#lastIndexOf" class="headerlink" title="lastIndexOf"></a>lastIndexOf</h3><ul>
<li>返回值：索引/-1</li>
<li>思路：遍历数组，第二个参数是到哪个索引结束（从0开始到这个索引结束）。如果不传参，从头查到尾部</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.myLastIndexOf = <span class="function"><span class="keyword">function</span> (<span class="params">val, index = <span class="built_in">this</span>.length</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (index &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        index = -index &gt;= <span class="built_in">this</span>.length ? <span class="number">0</span> : index + <span class="built_in">this</span>.length;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = index; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>[i] === val) &#123;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="includes"><a href="#includes" class="headerlink" title="includes"></a>includes</h3><ul>
<li>返回值：true/false</li>
<li>思路：遍历数组</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.myIncludes = <span class="function"><span class="keyword">function</span> (<span class="params">val</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">this</span>.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>[i] === val) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="数组迭代方法"><a href="#数组迭代方法" class="headerlink" title="数组迭代方法"></a>数组迭代方法</h2><blockquote>
<p>以下方法均<strong>不改变原数组</strong></p>
</blockquote>
<h3 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h3><blockquote>
<p>回调函数内部 this 一般指向 window</p>
</blockquote>
<ul>
<li>返回值：undefined</li>
<li>思路：遍历数组</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.myForEach = <span class="function"><span class="keyword">function</span> (<span class="params">callBack</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">this</span>.length; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> index = i, item = <span class="built_in">this</span>[i];</span><br><span class="line">        callBack(item, index);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><ul>
<li>返回值：映射后的新数组</li>
<li>思路：遍历数组，把数组每以项经过运算后赋值给新数组</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.myMap = <span class="function"><span class="keyword">function</span> (<span class="params">callBack</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> arr = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">this</span>.length; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> index = i, item = <span class="built_in">this</span>[i];</span><br><span class="line">        arr[i] = callBack(item, index);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h3><ul>
<li>返回值：函数累计处理的结果</li>
<li>思路：initial 返回值在数组的每次迭代中被记住，最后成为最终的结果值</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.myReduce = <span class="function"><span class="keyword">function</span> (<span class="params">callBack, initial</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> callBack !== <span class="string">&quot;function&quot;</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">&quot;callBack must be function&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> initial === <span class="string">&quot;undefined&quot;</span>) &#123;</span><br><span class="line">        initial = <span class="built_in">this</span>[<span class="number">0</span>];</span><br><span class="line">        i = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (; i &lt; <span class="built_in">this</span>.length; i++) &#123;</span><br><span class="line">        initial = callBack(initial, <span class="built_in">this</span>[i], i)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> initial;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="find"><a href="#find" class="headerlink" title="find"></a>find</h3><ul>
<li>返回值：找到就返回符合的元素，没有返回 undefined</li>
<li>思路：遍历数组</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.myFind = <span class="function"><span class="keyword">function</span> (<span class="params">callBack</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">this</span>.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (callBack(<span class="built_in">this</span>[i], i)) <span class="keyword">return</span> <span class="built_in">this</span>[i]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="every"><a href="#every" class="headerlink" title="every"></a>every</h3><ul>
<li>返回值：只要有一个不符合返回false，如果都符合返回 true</li>
<li>思路：遍历数组，一假即假</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.myEvery = <span class="function"><span class="keyword">function</span> (<span class="params">callBack</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">this</span>.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!callBack(<span class="built_in">this</span>[i], i)) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="some"><a href="#some" class="headerlink" title="some"></a>some</h3><ul>
<li>返回值：只要有一个符合就返回 true，如果都符合返回 false</li>
<li>思路：遍历数组，一真即真</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.mySome = <span class="function"><span class="keyword">function</span> (<span class="params">callBack</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">this</span>.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (callBack(<span class="built_in">this</span>[i], i)) <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h3><ul>
<li>返回值：一个新数组，数组里面是符合条件的所有元素</li>
<li>思路：遍历数组</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.myFilter = <span class="function"><span class="keyword">function</span> (<span class="params">callBack</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">Array</span>.isArray(<span class="built_in">this</span>) || !<span class="built_in">this</span>.length || <span class="keyword">typeof</span> callback !== <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> arr = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">this</span>.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!callBack(<span class="built_in">this</span>[i], i)) &#123;</span><br><span class="line">            arr.push(<span class="built_in">this</span>[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>数组</tag>
        <tag>封装</tag>
      </tags>
  </entry>
  <entry>
    <title>手撕 Promise（内附then链实现）</title>
    <url>/posts/c7bac255/</url>
    <content><![CDATA[<h2 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h2><h3 id="了解-Promise"><a href="#了解-Promise" class="headerlink" title="了解  Promise"></a>了解  Promise</h3><p>Promise 是一个异步操作返回的对象，用来传递异步操作的消息</p>
<p><strong>可以解决的问题</strong></p>
<ol>
<li>解决回调地狱问题，不会导致难以维护</li>
<li>合并多个异步请求，节约时间</li>
</ol>
<a id="more"></a>

<p><strong>Promise 的三种状态</strong></p>
<ol>
<li>Pending 等待态</li>
<li>Fulfilled 成功态</li>
<li>Rejected 失败态</li>
</ol>
<h3 id="使用-Promise"><a href="#使用-Promise" class="headerlink" title="使用 Promise"></a>使用 Promise</h3><p><strong>Promise.resolve：将现有对象转为 Promise 对象，这个对象处于 resolve 状态</strong></p>
<p>作用：</p>
<ul>
<li>改状态</li>
<li>发布事件池子里的方法</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.resolve([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]).then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;); <span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure>



<p><strong>Promise.reject：将现有对象转为 Promise 对象，这个对象处于 reject 状态</strong></p>
<p>作用：</p>
<ul>
<li>改状态</li>
<li>发布事件池子里的方法</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.reject([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]).then(<span class="literal">null</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">&#125;); <span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure>



<p><strong>Promise.then：用来指定 Promise 对象的状态改变时要执行的操作</strong></p>
<ul>
<li>then 是同步的，then 里的回调函数是异步的</li>
</ul>
<p><strong>注意几点：</strong></p>
<ul>
<li>如果当前 then 中回调函数的执行结果是一个 Promise 实例，那当前这个实例的状态会接管下一个 then 中回调函数的执行</li>
<li>如果当前的 then 中的回调函数执行结果不是一个 Promise 实例，那下一个then中会默认执行成功的回调函数</li>
<li>当 Promise 的回调函数执行的时候出现了错误，那当前的实例会变成失败态</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    resolve(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">    <span class="comment">//reject(&#x27;fail&#x27;);</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">p.then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;data：&quot;</span>, data);</span><br><span class="line">    &#125;,<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;err：&quot;</span>, err);</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>



<p><strong>Promise.all：接收一个数组，数组内是 Promise 实例。必须全部成功才表示成功</strong></p>
<p><strong>Promise.race：接收一个数组，数组内是 Promise 实例。最早返回的对象成功，就变成成功态；如果失败了，就变成失败态</strong></p>
<h2 id="封装-Promise"><a href="#封装-Promise" class="headerlink" title="封装 Promise"></a>封装 Promise</h2><p>Promise 是一个 ES6 的内置类</p>
<ul>
<li>当 new Promise 的时候，会给当前实例增加状态（默认是 pending 等待态）和两个事件池（成功和失败的事件池）</li>
<li>还会给 Promise 的内部传递一个 executor 函数，此函数会立即执行，而且此函数会传递两个形参函数 resolve 和 reject，形参对应的实参函数在 Promise 内部，当执行任何一个函数的时候，都会做两件事<ol>
<li>去改变当前 Promise 实例的状态（<strong>改状态</strong>）</li>
<li><strong>发布对应池子里的事件</strong></li>
</ol>
</li>
<li>Promise 的类的原型上还有一个 then 方法，用来给当前的 Promise 实例的事件池子订阅方法，而且还会返回一个新的 Promise 实例</li>
</ul>
<h3 id="不考虑-then-链式调用"><a href="#不考虑-then-链式调用" class="headerlink" title="不考虑 then 链式调用"></a>不考虑 then 链式调用</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPromise</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">executor</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.state = <span class="string">&quot;pending&quot;</span>;</span><br><span class="line">        <span class="comment">// Promise实例可以多次then，为了保证then中方法按顺序执行，这里把then中成功的回调和失败的回调存放到数组内</span></span><br><span class="line">        <span class="built_in">this</span>.fulfilledEvent = [];</span><br><span class="line">        <span class="built_in">this</span>.rejectedEvent = [];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> resolve = <span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.state !== <span class="string">&quot;pending&quot;</span>) <span class="keyword">return</span>;</span><br><span class="line">            <span class="built_in">this</span>.state = <span class="string">&quot;resolved&quot;</span>;</span><br><span class="line">            <span class="comment">// resolve其实是一个微任务，这里宏任务替换一下</span></span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="comment">// 发布方法</span></span><br><span class="line">                <span class="built_in">this</span>.fulfilledEvent.forEach(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="keyword">typeof</span> item === <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">                        item(result);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;, <span class="number">0</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">let</span> reject = <span class="function">(<span class="params">reason</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.state !== <span class="string">&quot;pending&quot;</span>) <span class="keyword">return</span>;</span><br><span class="line">            <span class="built_in">this</span>.state = <span class="string">&quot;rejected&quot;</span>;</span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.rejectedEvent.forEach(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="keyword">typeof</span> item === <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">                        item(reason);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;, <span class="number">0</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            executor(resolve, reject);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">            reject(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">then</span>(<span class="params">onFulfilled, onRejected</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.state === <span class="string">&quot;resolved&quot;</span>) &#123;</span><br><span class="line">            <span class="comment">// 订阅方法</span></span><br><span class="line">            <span class="built_in">this</span>.fulfilledEvent.push(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">                onFulfilled(result);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.state === <span class="string">&quot;rejected&quot;</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.rejectedEvent.push(<span class="function">(<span class="params">reason</span>) =&gt;</span> &#123;</span><br><span class="line">                onRejected(reason);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>可以简单测试一下</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    resolve(<span class="number">100</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">p.then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;res: &quot;</span>, res);</span><br><span class="line">    &#125;,<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;err: &quot;</span>, err);</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br><span class="line"><span class="comment">// data: 100</span></span><br></pre></td></tr></table></figure>

<h3 id="then-链式调用"><a href="#then-链式调用" class="headerlink" title="then 链式调用"></a>then 链式调用</h3><ul>
<li><p>当我们连续调用 then 的时候（p1），如果当前 then 中的回调函数执行不返回一个 Promise 实例，那当前的 then（p1） 默认是成功态，然后去发布它的成功事件池子里的方法</p>
</li>
<li><p>如果当前 then 中的回调函数执行返回一个 Promise（p2） 实例，那这个 Promise（p2） 实例就会接管（p1）实例的状态，然后去影响（p1）事件池子里的方法发布</p>
<p>原理：把（p1）的 resolve 和 reject 放到 （p2） 的对应的事件池子里，然后（p2）去发布自己池子里的的方法时，（p1）的 resolve 和 reject 就会执行，从而达到间接的让 （p2）去发布（p1）池子里的方法</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPromise</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">executor</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.state = <span class="string">&quot;pending&quot;</span>;</span><br><span class="line">        <span class="built_in">this</span>.fulfilledEvent = [];</span><br><span class="line">        <span class="built_in">this</span>.rejectedEvent = [];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> resolve = <span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.state !== <span class="string">&quot;pending&quot;</span>) <span class="keyword">return</span>;</span><br><span class="line">            <span class="built_in">this</span>.state = <span class="string">&quot;resolved&quot;</span>;</span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.fulfilledEvent.forEach(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="keyword">typeof</span> item === <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">                        item(result);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;, <span class="number">0</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">let</span> reject = <span class="function">(<span class="params">reason</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.state !== <span class="string">&quot;pending&quot;</span>) <span class="keyword">return</span>;</span><br><span class="line">            <span class="built_in">this</span>.state = <span class="string">&quot;rejected&quot;</span>;</span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.rejectedEvent.forEach(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="keyword">typeof</span> item === <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">                        item(reason);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;, <span class="number">0</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            executor(resolve, reject);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">            reject(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    then(onFulfilled = <span class="function">() =&gt;</span> &#123;&#125;, onRejected = <span class="function">() =&gt;</span> &#123;&#125;) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.fulfilledEvent.push(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> fn = onFulfilled(result);</span><br><span class="line">                fn <span class="keyword">instanceof</span> MyPromise</span><br><span class="line">                    ? fn.then(resolve, reject)</span><br><span class="line">                    : resolve(result);</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="built_in">this</span>.rejectedEvent.push(<span class="function">(<span class="params">reason</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> fn = onRejected(reason);</span><br><span class="line">                fn <span class="keyword">instanceof</span> MyPromise</span><br><span class="line">                    ? fn.then(resolve, reject)</span><br><span class="line">                    : resolve(reason);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>可以简单测试一下</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    resolve(<span class="number">100</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p2 = p1.then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;p1 res: &quot;</span>, res);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            resolve(<span class="number">200</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;p1 err: &quot;</span>, err);</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">p2.then(res) =&gt; &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;p2 res: &quot;</span>, res);</span><br><span class="line">    &#125;,<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;p2 err: &quot;</span>, err);</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br><span class="line"><span class="comment">// p1 res:  100</span></span><br><span class="line"><span class="comment">// p2 res:  200</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>源码分析</tag>
        <tag>JavaScript</tag>
        <tag>Promise</tag>
        <tag>then链</tag>
      </tags>
  </entry>
  <entry>
    <title>手撕React.createElement和ReactDOM.render</title>
    <url>/posts/7e319c36/</url>
    <content><![CDATA[<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install create-react-app -g</span><br><span class="line">create-react-app demo</span><br><span class="line"><span class="built_in">cd</span> demo</span><br><span class="line">yarn start</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<ul>
<li>这时已经新建好了一个 react 项目，接下来 index.js 写入如下代码</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">console.log(</span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">&quot;h1&quot;</span> <span class="attr">className</span>=<span class="string">&quot;title&quot;</span> <span class="attr">key</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">    hello world</span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">color:</span> &#x27;<span class="attr">red</span>&#x27; &#125;&#125;&gt;</span>cat<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<ul>
<li>如下对象就是一个 React 对象，也就是虚拟 DOM</li>
</ul>
<p><img data-src="https://img-blog.csdnimg.cn/img_convert/723b629d0e10b5bd476871bed912c40b.png" alt="虚拟dom对象示例"></p>
<ul>
<li>接下来我们打开<a href="https://www.babeljs.cn/repl">babel 官网</a>，勾选 <code>react</code> ，粘贴上去。通过 babel 把 jsx 对象转换成 React 中的 createElement 函数</li>
</ul>
<p><img data-src="https://img-blog.csdnimg.cn/img_convert/c9c1436f832951ebbe63cb587d77585f.png" alt="babel_react"></p>
<ul>
<li>在项目中写入如下代码</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">&#x27;react-dom&#x27;</span></span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;h1 id=<span class="string">&quot;h1&quot;</span> className=<span class="string">&quot;title&quot;</span> key=<span class="string">&quot;1&quot;</span>&gt;</span><br><span class="line">    hello world</span><br><span class="line">    &lt;span style=&#123;&#123; <span class="attr">color</span>: <span class="string">&#x27;red&#x27;</span> &#125;&#125;&gt;cat&lt;/span&gt;</span><br><span class="line">  &lt;/h1&gt;,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<ul>
<li>效果图如下：</li>
</ul>
<p><img data-src="https://img-blog.csdnimg.cn/img_convert/1e643e0830b8155a555ee3261eed6a4a.png" alt="渲染示例"></p>
<p><strong>过程：</strong></p>
<ol>
<li>通过 babel（babel-preset-react-app）转换成 jsx 对象</li>
<li>默认会把 createElement 函数执行，得到 JSX 对象（虚拟 DOM 对象）<ul>
<li>第一个参数：type，后期要创建元素的标签名（或是组件）</li>
<li>第二个参数：props，属性对象，包含当前元素标签上设置的各个属性及属性值（不设置，props 值是 null）</li>
<li>第三个以后的参数：children，当前元素的所有子节点（没有写，则不存在这个参数），如果有，有几个就依次传递几个<ul>
<li>如果是文本节点，则直接传递文本内容</li>
<li>如果是元素节点，则把元素依次变为 createElement 格式，把执行的返回值，作为参数传递进来</li>
</ul>
</li>
</ul>
</li>
<li>ReactDOM.render，把虚拟 DOM 对象转换为真实 DOM 对象</li>
</ol>
<h3 id="React-中-createElement-函数"><a href="#React-中-createElement-函数" class="headerlink" title="React 中 createElement 函数"></a>React 中 createElement 函数</h3><p><strong>React.createElement 返回值</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  $$typeof: <span class="built_in">Symbol</span>(react.element),</span><br><span class="line">  key: <span class="literal">null</span>,</span><br><span class="line">  ref: <span class="literal">null</span>,</span><br><span class="line">  <span class="comment">// 存储的是传递给createElement的第一个参数</span></span><br><span class="line">  type: <span class="string">&#x27;h1&#x27;</span>,</span><br><span class="line">  <span class="comment">// 首先会把传递给createElement的属性对象，一项项的赋值给对象的props</span></span><br><span class="line">  props: &#123;</span><br><span class="line">    <span class="comment">// 并且返回对象的prop还包含children，记录当前元素的子节点（可能是一个值&#123;字符串或JSX返回的对象&#125;，如果有多个子节点，则其是一个数组）</span></span><br><span class="line">    children: <span class="string">&#x27;hello world&#x27;</span>,</span><br><span class="line">    className: <span class="string">&#x27;title&#x27;</span>,</span><br><span class="line">    id: <span class="string">&#x27;title&#x27;</span>,</span><br><span class="line">  &#125;, <span class="comment">// 即使没有传递任何属性，也没有任何的子节点，返回对象的props也是一个&#123;&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>这里需要注意，key 和 ref 虽然都在 props 里，但是这两个不在 props 里添加，而与 props 同级</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">React.createElement = <span class="function"><span class="keyword">function</span> <span class="title">createElement</span>(<span class="params">type, props, ...children</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> len = children.length,</span><br><span class="line">    obj = &#123;</span><br><span class="line">      type,</span><br><span class="line">      props: &#123;&#125;,</span><br><span class="line">      key: <span class="literal">null</span>,</span><br><span class="line">      ref: <span class="literal">null</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">// 处理传递进来的属性</span></span><br><span class="line">  <span class="keyword">if</span> (props !== <span class="literal">null</span> &amp;&amp; <span class="keyword">typeof</span> props === <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">    each(props, <span class="function">(<span class="params">value, key</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="regexp">/^(key|ref)$/</span>.test(key)) &#123;</span><br><span class="line">        obj[key] = value[key]</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      obj.props[key] = value[key]</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// for in 循环性能较差</span></span><br><span class="line">    <span class="comment">/* for (let key in props) &#123;</span></span><br><span class="line"><span class="comment">      if (!props.hasOwnProperty(key)) break</span></span><br><span class="line"><span class="comment">      if (/^(key|ref)$/.test(key)) &#123;</span></span><br><span class="line"><span class="comment">        obj[key] = props[key]</span></span><br><span class="line"><span class="comment">        continue</span></span><br><span class="line"><span class="comment">      &#125;</span></span><br><span class="line"><span class="comment">      obj.props[key] = props[key]</span></span><br><span class="line"><span class="comment">    &#125; */</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 处理子节点</span></span><br><span class="line">  <span class="keyword">if</span> (len &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    obj.props.children = len === <span class="number">1</span> ? children[<span class="number">0</span>] : children</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> obj</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>由于 <code>for...in...</code> 循环性能较差，这里稍微优化一下（封装一个 each 方法）</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> each = <span class="function"><span class="keyword">function</span> <span class="title">each</span>(<span class="params">obj, callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (obj == <span class="literal">null</span> || <span class="keyword">typeof</span> obj !== <span class="string">&#x27;object&#x27;</span>)</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">&#x27;obj must be an object&#x27;</span>)</span><br><span class="line">  <span class="keyword">let</span> keys = <span class="built_in">Object</span>.keys(obj),</span><br><span class="line">    key,</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">Symbol</span> !== <span class="string">&#x27;undefined&#x27;</span>) &#123;</span><br><span class="line">    keys = keys.concat(<span class="built_in">Object</span>.getOwnPropertySymbols(obj))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (; i &lt; keys.length; i++) &#123;</span><br><span class="line">    key = keys[i]</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> callback === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">      callback(obj[key], key)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="ReactDOM-中-render-函数"><a href="#ReactDOM-中-render-函数" class="headerlink" title="ReactDOM 中 render 函数"></a>ReactDOM 中 render 函数</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ReactDOM.render = <span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params">obj, container, callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> &#123; type, props &#125; = obj,</span><br><span class="line">    element</span><br><span class="line">  <span class="comment">// 核心思想：动态创建指定类型的元素，插入到指定容器当中</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> type === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">    element = <span class="built_in">document</span>.createElement(type)</span><br><span class="line">    each(props, <span class="function">(<span class="params">value, key</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (key === <span class="string">&#x27;className&#x27;</span>) &#123;</span><br><span class="line">        element.setAttribute(<span class="string">&#x27;class&#x27;</span>, value)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (key === <span class="string">&#x27;style&#x27;</span>) &#123;</span><br><span class="line">        <span class="comment">// 把style对象中的每一项分别给元素设置样式 value:style对象</span></span><br><span class="line">        each(value, <span class="function">(<span class="params">item, attr</span>) =&gt;</span> &#123;</span><br><span class="line">          element.style[attr] = item</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (key === <span class="string">&#x27;children&#x27;</span>) &#123;</span><br><span class="line">        <span class="comment">// 肯定有子节点 value:children属性值</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">Array</span>.isArray(value)) value = [value] <span class="comment">// 让它都是数组</span></span><br><span class="line">        value.forEach(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="comment">// item每个子节点</span></span><br><span class="line">          <span class="comment">// 1.文本子节点：直接创建一个文本节点，插入到element中</span></span><br><span class="line">          <span class="comment">// 2.元素子节点：新的jsx对象（createElement），我们需要把它也创建成为一个元素标签，插入到element中即可</span></span><br><span class="line">          <span class="keyword">if</span> (<span class="keyword">typeof</span> item === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> textNode = <span class="built_in">document</span>.createTextNode(item)</span><br><span class="line">            element.appendChild(textNode)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">// 递归处理</span></span><br><span class="line">          render(item, element)</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      element.setAttribute(key, value)</span><br><span class="line">    &#125;)</span><br><span class="line">    container.appendChild(element)</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> callback === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">      callback()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 如果type是一个组件，有不同的处理方案</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>源码分析</tag>
        <tag>React</tag>
        <tag>createElement</tag>
        <tag>render</tag>
      </tags>
  </entry>
  <entry>
    <title>检测公有属性的封装</title>
    <url>/posts/3c79077c/</url>
    <content><![CDATA[<h2 id="检测属性方法"><a href="#检测属性方法" class="headerlink" title="检测属性方法"></a>检测属性方法</h2><h3 id="in"><a href="#in" class="headerlink" title="in"></a>in</h3><ul>
<li><p>检测当前对象是否存在某个属性，不论是公有还是私有，只要有，返回 true</p>
<p><code>[attr] in [object]</code></p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.age = <span class="number">14</span>;</span><br><span class="line">    <span class="built_in">this</span>.name = <span class="string">&quot;lion&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">Fn.prototype.category = <span class="string">&quot;animal&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> f = <span class="keyword">new</span> Fn();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;name&quot;</span> <span class="keyword">in</span> f);     <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;category&quot;</span> <span class="keyword">in</span> f); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h3 id="hasOwnProperty-NaN"><a href="#hasOwnProperty-NaN" class="headerlink" title="hasOwnProperty"></a>hasOwnProperty</h3><ul>
<li><p>检测一个属性是不是这个对象的私有属性，如果是，返回true</p>
<p><code>[object].hasOwnProperty([attr])</code></p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.age = <span class="number">14</span>;</span><br><span class="line">    <span class="built_in">this</span>.name = <span class="string">&quot;lion&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">Fn.prototype.category = <span class="string">&quot;animal&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> f = <span class="keyword">new</span> Fn();</span><br><span class="line"><span class="built_in">console</span>.log(f.hasOwnProperty(<span class="string">&quot;name&quot;</span>));     <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(f.hasOwnProperty(<span class="string">&quot;category&quot;</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<h3 id="尝试封装检测公有属性"><a href="#尝试封装检测公有属性" class="headerlink" title="尝试封装检测公有属性"></a>尝试封装检测公有属性</h3><ul>
<li>了解了 <code>in</code> 和 <code>hasOwnProperty</code> 之后我们可以尝试封装检测公有属性的方法</li>
</ul>
<p>写出来大概是如下这样：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Object</span>.prototype.hasPubProperty = <span class="function"><span class="keyword">function</span> (<span class="params">attr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> attr <span class="keyword">in</span> obj &amp;&amp; !obj.hasOwnProperty(attr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>但是这个是有弊端的，比如：某个属性既是私有的，也是公有的，就检测不出来了</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Object</span>.prototype.hasPubProperty = <span class="function"><span class="keyword">function</span> (<span class="params">attr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> attr <span class="keyword">in</span> <span class="built_in">this</span> &amp;&amp; !<span class="built_in">this</span>.hasOwnProperty(attr);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.age = <span class="number">14</span>;</span><br><span class="line">    <span class="built_in">this</span>.name = <span class="string">&quot;lion&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">Fn.prototype.category = <span class="string">&quot;animal&quot;</span>;</span><br><span class="line">Fn.prototype.name = <span class="string">&quot;bird&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> f = <span class="keyword">new</span> Fn();</span><br><span class="line"><span class="comment">// name既是公有的也是私有的</span></span><br><span class="line"><span class="built_in">console</span>.log(f.hasPubProperty(<span class="string">&quot;name&quot;</span>));     <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(f.hasPubProperty(<span class="string">&quot;category&quot;</span>)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>这样肯定不行，有没有什么方法可以避免这个问题，接下来需要看一下 Object 的其它几个方法</p>
<h2 id="检测公有属性"><a href="#检测公有属性" class="headerlink" title="检测公有属性"></a>检测公有属性</h2><ul>
<li>期望结果如下：</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.age = <span class="number">14</span>;</span><br><span class="line">    <span class="built_in">this</span>[A] = <span class="number">100</span>;</span><br><span class="line">    <span class="built_in">this</span>.name = <span class="string">&quot;lion&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> A = <span class="built_in">Symbol</span>(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">Fn.prototype.name = <span class="string">&quot;bird&quot;</span>;</span><br><span class="line">Fn.prototype[A] = <span class="number">200</span>;</span><br><span class="line"><span class="keyword">let</span> f = <span class="keyword">new</span> Fn();</span><br><span class="line"></span><br><span class="line"><span class="comment">// age是私有方法</span></span><br><span class="line"><span class="built_in">console</span>.log(f.hasPubProperty(<span class="string">&quot;age&quot;</span>));      <span class="comment">// false</span></span><br><span class="line"><span class="comment">// name既是公有的也是私有的</span></span><br><span class="line"><span class="built_in">console</span>.log(f.hasPubProperty(<span class="string">&quot;name&quot;</span>));     <span class="comment">// true</span></span><br><span class="line"><span class="comment">// A(Symbol)既是公有的也是私有的</span></span><br><span class="line"><span class="built_in">console</span>.log(f.hasPubProperty(A));          <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h3 id="Object-getPrototypeOf"><a href="#Object-getPrototypeOf" class="headerlink" title="Object.getPrototypeOf"></a>Object.getPrototypeOf</h3><blockquote>
<p>如果了解前置知识，可直接跳到封装方法处</p>
</blockquote>
<h4 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h4><blockquote>
<p>ES5新增方法</p>
</blockquote>
<ul>
<li><code>Object.getPrototypeOf([object])</code> 方法返回指定<strong>对象自身的原型</strong></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Fn.prototype === <span class="built_in">Object</span>.getPrototypeOf(f); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h4 id="封装方法"><a href="#封装方法" class="headerlink" title="封装方法"></a>封装方法</h4><ul>
<li>借用原型链查找公有属性</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Object</span>.prototype.hasPubProperty = <span class="function"><span class="keyword">function</span> (<span class="params">attr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> self = <span class="built_in">this</span>,</span><br><span class="line">        prototype = <span class="built_in">Object</span>.getPrototypeOf(self);</span><br><span class="line">    <span class="keyword">while</span> (prototype) &#123;</span><br><span class="line">        <span class="comment">// 检测是否存在attr这个属性</span></span><br><span class="line">        <span class="keyword">if</span> (prototype.hasOwnProperty(attr)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">// 一直按照原型链查找</span></span><br><span class="line">        prototype = <span class="built_in">Object</span>.getPrototypeOf(prototype);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>因为用到了 <code>hasOwnProperty</code>，它不仅能检测可枚举属性还可以检测内置属性</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(f.hasPubProperty(<span class="string">&quot;toString&quot;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(f.hasPubProperty(<span class="string">&quot;valueOf&quot;</span>));  <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h3 id="Object-keys"><a href="#Object-keys" class="headerlink" title="Object.keys"></a>Object.keys</h3><blockquote>
<p>如果了解前置知识，可直接跳到封装方法处</p>
</blockquote>
<h4 id="前置知识-1"><a href="#前置知识-1" class="headerlink" title="前置知识"></a>前置知识</h4><blockquote>
<p>ES5新增方法</p>
</blockquote>
<ul>
<li><code>Object.keys([object])</code> 方法会返回一个数组，数组里面存放指定<strong>对象自身的可枚举属性</strong></li>
<li><code>Object.keys([object])</code> 方法返回<strong>非 Symbol 私有属性</strong>的数组</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Object</span>.prototype.xx = <span class="string">&quot;xx&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    name: <span class="string">&quot;lion&quot;</span>,</span><br><span class="line">    age: <span class="number">12</span>,</span><br><span class="line">    <span class="number">3</span>: <span class="number">200</span>,</span><br><span class="line">    <span class="number">0</span>: <span class="number">100</span>,</span><br><span class="line">    [<span class="built_in">Symbol</span>(<span class="string">&quot;a&quot;</span>)]: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.keys(obj)); <span class="comment">// [ &#x27;0&#x27;, &#x27;3&#x27;, &#x27;name&#x27;, &#x27;age&#x27; ]</span></span><br></pre></td></tr></table></figure>

<ul>
<li>如果想获取 Symbol 私有属性，可以使用 <code>Object.getOwnPropertySymbols(obj)</code></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getOwnPropertySymbols(obj)); <span class="comment">// [ Symbol(a) ]</span></span><br></pre></td></tr></table></figure>

<ul>
<li>如果想获取所有私有属性（包括Symbol）到一个数组中，可以这么写</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[...Object.keys(obj), ...Object.getOwnPropertySymbols(obj)];</span><br><span class="line"><span class="comment">// [&#x27;0&#x27;, &#x27;3&#x27;, &#x27;name&#x27;, &#x27;age&#x27;, Symbol(a)]</span></span><br></pre></td></tr></table></figure>

<h4 id="封装方法-1"><a href="#封装方法-1" class="headerlink" title="封装方法"></a>封装方法</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Object</span>.prototype.hasPubProperty = <span class="function"><span class="keyword">function</span> (<span class="params">attr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> self = <span class="built_in">this</span>,</span><br><span class="line">        prototype = <span class="built_in">Object</span>.getPrototypeOf(self);</span><br><span class="line">    <span class="keyword">while</span> (prototype) &#123;</span><br><span class="line">        <span class="comment">// 检测是否存在attr这个属性</span></span><br><span class="line">        <span class="keyword">var</span> keys = <span class="built_in">Object</span>.keys(prototype);</span><br><span class="line">        <span class="comment">// 检测浏览器是否支持Symbol</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">Symbol</span> !== <span class="string">&quot;undefined&quot;</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果支持，把Symbol属性合并到数组中</span></span><br><span class="line">            keys = keys.concat(<span class="built_in">Object</span>.getOwnPropertySymbols(prototype));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 一直按照原型链查找</span></span><br><span class="line">        prototype = <span class="built_in">Object</span>.getPrototypeOf(prototype);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>注意：内置属性不可以枚举，<code>Object.keys([object])</code> 方法检测不到内置属性</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(f.hasPubProperty(<span class="string">&quot;toString&quot;</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(f.hasPubProperty(<span class="string">&quot;valueOf&quot;</span>));  <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>封装</tag>
        <tag>公有属性</tag>
        <tag>私有属性</tag>
        <tag>Object方法</tag>
      </tags>
  </entry>
  <entry>
    <title>牛客网本地刷题环境部署</title>
    <url>/posts/bf596df5/</url>
    <content><![CDATA[<p>牛客网在线判题系统使用帮助：<a href="https://www.nowcoder.com/discuss/276">https://www.nowcoder.com/discuss/276</a></p>
<a id="more"></a>

<h2 id="JavaScript输入"><a href="#JavaScript输入" class="headerlink" title="JavaScript输入"></a>JavaScript输入</h2><p>【node.js】readline (逐行读取)：<a href="https://www.cnblogs.com/yujihang/p/7414169.html">https://www.cnblogs.com/yujihang/p/7414169.html</a></p>
<p>Javascript本地测试/笔试环境搭建：<a href="https://react.ctolib.com/wuyve-Javascript-test.html">https://react.ctolib.com/wuyve-Javascript-test.html</a></p>
<h3 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h3><ol>
<li><p>在代码处的文件夹 输入  <code>cnpm install readline-sync</code></p>
</li>
<li><p>在代码处的文件夹 添加一个JS文件，文件头部输入以下代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> __readline = <span class="built_in">require</span>(<span class="string">&#x27;readline-sync&#x27;</span>);</span><br><span class="line">__readline.setDefaultOptions(&#123;</span><br><span class="line">    prompt: <span class="string">&#x27;&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> read_line = __readline.prompt;</span><br><span class="line"><span class="keyword">var</span> print = <span class="built_in">console</span>.log;</span><br></pre></td></tr></table></figure>
</li>
<li><p>这样子，JS带输入输出就OK了</p>
</li>
</ol>
<h3 id="JavaScript-V8"><a href="#JavaScript-V8" class="headerlink" title="JavaScript(V8)"></a>JavaScript(V8)</h3><p>单行输入</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> __readline = <span class="built_in">require</span>(<span class="string">&#x27;readline-sync&#x27;</span>);</span><br><span class="line">__readline.setDefaultOptions(&#123;</span><br><span class="line">    prompt: <span class="string">&#x27;&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> read_line = __readline.prompt;</span><br><span class="line"><span class="keyword">var</span> print = <span class="built_in">console</span>.log;</span><br><span class="line"></span><br><span class="line"><span class="comment">//牛客网：readline</span></span><br><span class="line"><span class="comment">//赛码：read_line</span></span><br><span class="line"><span class="keyword">while</span>(line=read_line())&#123;</span><br><span class="line">    <span class="keyword">var</span> lines = line.split(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> a = <span class="built_in">parseInt</span>(lines[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">var</span> b = <span class="built_in">parseInt</span>(lines[<span class="number">1</span>]);</span><br><span class="line">    print(a+b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>多行输入</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> __readline = <span class="built_in">require</span>(<span class="string">&#x27;readline-sync&#x27;</span>);</span><br><span class="line">__readline.setDefaultOptions(&#123;</span><br><span class="line">    prompt: <span class="string">&#x27;&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> read_line = __readline.prompt;</span><br><span class="line"><span class="keyword">var</span> print = <span class="built_in">console</span>.log;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> countLine = <span class="built_in">parseInt</span>(read_line());</span><br><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; countLine; i++) &#123;</span><br><span class="line">    lines = read_line().split(<span class="string">&quot; &quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; lines.length; j++) &#123;</span><br><span class="line">        sum += <span class="built_in">parseInt</span>(lines[j]);</span><br><span class="line">    &#125;</span><br><span class="line">    print(sum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="JavaScript-Node"><a href="#JavaScript-Node" class="headerlink" title="JavaScript(Node)"></a>JavaScript(Node)</h3><p>单行输入</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> readline = <span class="built_in">require</span>(<span class="string">&#x27;readline&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> rl = readline.createInterface(&#123;</span><br><span class="line">    input: process.stdin,</span><br><span class="line">    output: process.stdout</span><br><span class="line">&#125;);</span><br><span class="line">rl.on(<span class="string">&#x27;line&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">line</span>) </span>&#123;</span><br><span class="line"> 	<span class="comment">// 注意：这里的line不论在shell中输入的是数字还是字符串，获取到的始终是字符串</span></span><br><span class="line">    <span class="keyword">var</span> tokens = line.split(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(tokens[<span class="number">0</span>]) + <span class="built_in">parseInt</span>(tokens[<span class="number">1</span>]));</span><br><span class="line">    <span class="comment">// 关闭node输入环境</span></span><br><span class="line">    rl.close();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>多行输入</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> print = <span class="built_in">console</span>.log;</span><br><span class="line"><span class="keyword">var</span> readline = <span class="built_in">require</span>(<span class="string">&#x27;readline&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> rl = readline.createInterface(&#123;</span><br><span class="line">    input: process.stdin,</span><br><span class="line">    output: process.stdout</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> countLine = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">var</span> index = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">rl.on(<span class="string">&#x27;line&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">line</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> lines = line.split(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; lines.length; i++) &#123;</span><br><span class="line">        sum += <span class="built_in">parseInt</span>(lines[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    index++;</span><br><span class="line">    <span class="keyword">if</span> (index == countLine) &#123;</span><br><span class="line">        print(sum);</span><br><span class="line">        <span class="comment">// 关闭node输入环境</span></span><br><span class="line">        rl.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">rl.on(<span class="string">&#x27;close&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    process.exit(<span class="number">0</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<h2 id="Python输入"><a href="#Python输入" class="headerlink" title="Python输入"></a>Python输入</h2><p>Python常用标准库之sys：<a href="https://www.jianshu.com/p/c1831232c391">https://www.jianshu.com/p/c1831232c391</a></p>
<h3 id="python-2"><a href="#python-2" class="headerlink" title="python 2+"></a>python 2+</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        line = sys.stdin.readline().strip()</span><br><span class="line">        <span class="keyword">if</span> line == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        lines = line.split()</span><br><span class="line">        <span class="built_in">print</span> <span class="built_in">int</span>(lines[<span class="number">0</span>]) + <span class="built_in">int</span>(lines[<span class="number">1</span>])</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>



<h3 id="python-3"><a href="#python-3" class="headerlink" title="python 3+"></a>python 3+</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys </span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> sys.stdin:</span><br><span class="line">    a = line.split()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> a:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    print(<span class="built_in">int</span>(a[<span class="number">0</span>]) + <span class="built_in">int</span>(a[<span class="number">1</span>]))</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>基础配置</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Python</tag>
        <tag>牛客网</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 实现轮播图（附jQuery版本）</title>
    <url>/posts/17652c6a/</url>
    <content><![CDATA[<h3 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h3><ul>
<li>多张图片自动轮播展示，对应分页器（小圆点）高亮显示</li>
<li>点击分页器（小圆点）切换对应图片</li>
<li>点击前进/后退按钮切换当前图片的前一张/后一张图片</li>
<li>图片无缝切换，第一张图片和最后一张图片无缝切换</li>
<li>鼠标滑入停止图片切换，鼠标移出开始图片切换</li>
<li>前进后退按钮防抖</li>
</ul>
<a id="more"></a>

<p><img data-src="https://img-blog.csdnimg.cn/20201219104627257.gif" alt="轮播图切换"></p>
<h3 id="index-html（html-css）"><a href="#index-html（html-css）" class="headerlink" title="index.html（html+css）"></a>index.html（html+css）</h3><ul>
<li>创建 <code>index.html</code> 文件，粘贴如下代码</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>轮播图<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        * &#123;</span><br><span class="line">            margin: 0;</span><br><span class="line">            padding: 0;</span><br><span class="line">        &#125;</span><br><span class="line">        ul &#123;</span><br><span class="line">            list-style: none;</span><br><span class="line">        &#125;</span><br><span class="line">        a &#123;</span><br><span class="line">            text-decoration: none;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#banner</span> &#123;</span></span><br><span class="line">            width: 1226px;</span><br><span class="line">            height: 460px;</span><br><span class="line">            margin: 100px auto;</span><br><span class="line">            overflow: hidden;</span><br><span class="line">            position: relative;</span><br><span class="line">            cursor: pointer;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#wrapper</span> &#123;</span></span><br><span class="line">            display: flex;</span><br><span class="line">            position: absolute;</span><br><span class="line">            left: 0;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#wrapper</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line">            width: 1226px;</span><br><span class="line">            height: 460px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#wrapper</span> <span class="selector-tag">li</span> <span class="selector-tag">img</span> &#123;</span></span><br><span class="line">            display: block;</span><br><span class="line">            width: 100%;</span><br><span class="line">            height: 100%;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#list</span> &#123;</span></span><br><span class="line">            position: absolute;</span><br><span class="line">            left: 50%;</span><br><span class="line">            display: flex;</span><br><span class="line">            align-items: center;</span><br><span class="line">            transform: translate(-50%, -50%);</span><br><span class="line">            bottom: 10px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#list</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line">            width: 10px;</span><br><span class="line">            height: 10px;</span><br><span class="line">            background: rgba(0, 0, 0, 0.4);</span><br><span class="line">            border: 3px solid rgba(255, 255, 255, 0.1);</span><br><span class="line">            border-radius: 50%;</span><br><span class="line">            margin: 0 5px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#list</span> <span class="selector-tag">li</span><span class="selector-class">.active</span> &#123;</span></span><br><span class="line">            background: rgba(255, 255, 255, 0.3);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#left</span>, <span class="selector-id">#right</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background</span>: <span class="selector-tag">url</span>(&quot;<span class="selector-tag">https</span>://<span class="selector-tag">i1</span><span class="selector-class">.mifile</span><span class="selector-class">.cn</span>/<span class="selector-tag">f</span>/<span class="selector-tag">i</span>/2014/<span class="selector-tag">cn</span>/<span class="selector-tag">icon</span>/<span class="selector-tag">icon-slides</span><span class="selector-class">.png</span>&quot;) <span class="selector-tag">no-repeat</span>;</span></span><br><span class="line">            width: 41px;</span><br><span class="line">            height: 69px;</span><br><span class="line">            position: absolute;</span><br><span class="line">            top: 50%;</span><br><span class="line">            transform: translate(0, -50%);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#left</span> &#123;</span></span><br><span class="line">            left: 0;</span><br><span class="line">            background-position: -84px 0;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#right</span> &#123;</span></span><br><span class="line">            right: 0;</span><br><span class="line">            background-position: -125px 0;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#left</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line">            background-position: 0 0;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#right</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line">            background-position: -42px 0;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;banner&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 图片 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.cnbj1.fds.api.mi-img.com/mi-mall/9ebff5f5c1f52f2dbdd611897adbefd4.jpg?thumb=1&amp;w=1226&amp;h=460&amp;f=webp&amp;q=90&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 分页器（小圆点） --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;active&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 前进按钮 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;left&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 后退按钮 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;right&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;index.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>不加 JS，静态界面应该是下图这样的</p>
<ul>
<li>如果图片没有请求到，可以换一个图片链接</li>
</ul>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/js-img/%E8%BD%AE%E6%92%AD%E5%9B%BE-mi-%E9%9D%99%E6%80%81%E7%95%8C%E9%9D%A2.jpg" alt="轮播图-mi-静态界面"></p>
<h3 id="banner-json"><a href="#banner-json" class="headerlink" title="banner.json"></a>banner.json</h3><ul>
<li>这里需要用 Ajax 请求一下如下 json 数据</li>
<li>创建 <code>banner.json</code> ，粘贴如下数据</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">&quot;id&quot;</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">&quot;img&quot;</span>: <span class="string">&quot;https://cdn.cnbj1.fds.api.mi-img.com/mi-mall/9ebff5f5c1f52f2dbdd611897adbefd4.jpg?thumb=1&amp;w=1226&amp;h=460&amp;f=webp&amp;q=90&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;desc&quot;</span>: <span class="string">&quot;banner1&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">&quot;id&quot;</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="attr">&quot;img&quot;</span>: <span class="string">&quot;https://cdn.cnbj1.fds.api.mi-img.com/mi-mall/0ef4160c861b998239bce9adb82341e7.jpg?thumb=1&amp;w=1226&amp;h=460&amp;f=webp&amp;q=90&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;desc&quot;</span>: <span class="string">&quot;banner2&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">&quot;id&quot;</span>: <span class="number">3</span>,</span><br><span class="line">        <span class="attr">&quot;img&quot;</span>: <span class="string">&quot;https://cdn.cnbj1.fds.api.mi-img.com/mi-mall/0e4acf11840c1d9600c34c46ffa73ec8.jpg?thumb=1&amp;w=1226&amp;h=460&amp;f=webp&amp;q=90&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;desc&quot;</span>: <span class="string">&quot;banner3&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">&quot;id&quot;</span>: <span class="number">4</span>,</span><br><span class="line">        <span class="attr">&quot;img&quot;</span>: <span class="string">&quot;https://cdn.cnbj1.fds.api.mi-img.com/mi-mall/d65e7bc110ca74b9d7fa7ce53a841971.jpg?w=2452&amp;h=920&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;desc&quot;</span>: <span class="string">&quot;banner4&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h3 id="index-js-（原生jS-）"><a href="#index-js-（原生jS-）" class="headerlink" title="index.js （原生jS ）"></a>index.js （原生jS ）</h3><ul>
<li>原理：图片平铺在一行，然后利用定时器计算偏移量实现定时轮播</li>
<li>切换动画效果函数可以使用正则把有效数组匹配出来 <code>/[+-]?(0|([1-9]\d+))(\.\d+)?/g</code> 或 把单位匹配出来 <code>/[^+-.\d]+/g</code>（还不太完善）</li>
<li><strong>注意：</strong>需要使用 live-server 启动</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取页面元素</span></span><br><span class="line"><span class="keyword">let</span> banner = <span class="built_in">document</span>.getElementById(<span class="string">&quot;banner&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> wrapper = <span class="built_in">document</span>.getElementById(<span class="string">&quot;wrapper&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> list = <span class="built_in">document</span>.getElementById(<span class="string">&quot;list&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> lis = list.getElementsByTagName(<span class="string">&quot;li&quot;</span>);</span><br><span class="line"><span class="comment">// Ajax 请求数据</span></span><br><span class="line"><span class="keyword">let</span> data = <span class="literal">null</span>;</span><br><span class="line"><span class="comment">// 接收定时器的返回值</span></span><br><span class="line"><span class="keyword">let</span> timer = <span class="literal">null</span>;</span><br><span class="line"><span class="comment">// 当前展示图片的索引</span></span><br><span class="line"><span class="keyword">let</span> step = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 0.切换动画效果（简单实现jQuery animate切换效果）</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">animate</span>(<span class="params">ele, target, duration</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> begin = &#123;&#125;</span><br><span class="line">    <span class="keyword">let</span> change = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> target) &#123;</span><br><span class="line">        begin[key] = <span class="built_in">parseFloat</span>(<span class="built_in">window</span>.getComputedStyle(ele)[key])</span><br><span class="line">        change[key] = target[key] - begin[key]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> time = <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> timers = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        time += <span class="number">20</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> target) &#123;</span><br><span class="line">            ele.style[key] = time / duration * change[key] + begin[key] + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (time &gt;= duration) &#123;</span><br><span class="line">            <span class="built_in">clearInterval</span>(timers);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="number">20</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.数据请求 Ajax四部曲</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getData</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    xhr.open(<span class="string">&quot;get&quot;</span>, url, <span class="literal">false</span>);</span><br><span class="line">    xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (xhr.readyState === <span class="number">4</span> &amp;&amp; xhr.status === <span class="number">200</span>) &#123;</span><br><span class="line">            data = <span class="built_in">JSON</span>.parse(xhr.responseText);</span><br><span class="line">            renderHtml(data);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    xhr.send();</span><br><span class="line">&#125;</span><br><span class="line">getData(<span class="string">&quot;./banner.json&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.渲染图片</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">renderHtml</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> imgs = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">let</span> lis = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    data.forEach(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">        imgs += <span class="string">`&lt;li&gt;&lt;img src=&quot;<span class="subst">$&#123;item.img&#125;</span>&quot; alt=&quot;&quot;&gt;&lt;/li&gt;`</span>;</span><br><span class="line">        lis += <span class="string">&quot;&lt;li&gt;&lt;/li&gt;&quot;</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 要实现无缝滚动，需要克隆第一张图片，放到最后一张的后面</span></span><br><span class="line">    imgs += <span class="string">`&lt;li&gt;&lt;img src=&quot;<span class="subst">$&#123;data[<span class="number">0</span>].img&#125;</span>&quot; alt=&quot;&quot;&gt;&lt;/li&gt;`</span>;</span><br><span class="line">    wrapper.innerHTML = imgs;</span><br><span class="line">    list.innerHTML = lis;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.实现自动轮播，每隔2000ms执行一次</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">autoMove</span>(<span class="params">index</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 图片索引自增（切换下一张图片）</span></span><br><span class="line">    step++;</span><br><span class="line">    <span class="comment">// 如果当前函数执行时没有传形参index，那就什么都不做，如果形参index有值，就把index赋值给step即可</span></span><br><span class="line">    <span class="keyword">typeof</span> index == <span class="string">&quot;undefined&quot;</span> ? <span class="literal">null</span> : step = index;</span><br><span class="line">    <span class="comment">// 如果当前的step&gt;=5说明已经运动到最后一张图片了，这时候需要马上把wrapper的left值改为0</span></span><br><span class="line">    <span class="keyword">if</span> (step &gt;= data.length + <span class="number">1</span>) &#123;</span><br><span class="line">        wrapper.style.left = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 这时step改为1，可以正常显示第二张</span></span><br><span class="line">        step = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    animate(wrapper, &#123;</span><br><span class="line">        left: -<span class="number">1226</span> * step</span><br><span class="line">    &#125;, <span class="number">500</span>);</span><br><span class="line">    changeFocus();</span><br><span class="line">&#125;</span><br><span class="line">timer = <span class="built_in">setInterval</span>(autoMove, <span class="number">2000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.鼠标划上图片停止轮播 鼠标离开继续轮播</span></span><br><span class="line">banner.onmouseover = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">clearInterval</span>(timer);</span><br><span class="line">&#125;</span><br><span class="line">banner.onmouseout = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">clearInterval</span>(timer);</span><br><span class="line">    timer = <span class="built_in">setInterval</span>(autoMove, <span class="number">2000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5.实现焦点跟随，显示哪一张图片，就给对应的焦点li加上类名active</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">changeFocus</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 循环所有的焦点，判断一下当前的step和哪个焦点的索引相等，和谁相等就给谁加上active类名，其余的清除active类名</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; lis.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i == step) &#123;</span><br><span class="line">            lis[i].classList.add(<span class="string">&quot;active&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            lis[i].classList.remove(<span class="string">&quot;active&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果当前的step是data.length，说明当前页面显示的是最后一张图片，它和第一张图公用一个焦点，这时让第一个焦点高亮即可</span></span><br><span class="line">    <span class="keyword">if</span> (step == data.length) &#123;</span><br><span class="line">        lis[<span class="number">0</span>].classList.add(<span class="string">&quot;active&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">changeFocus();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 6.点击分页器（小圆点），实现切换对应图片</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bindClick</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; lis.length; i++) &#123;</span><br><span class="line">        lis[i].onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            autoMove(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">bindClick();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 7.控制前进/后退按钮</span></span><br><span class="line">right.onclick = debounce(autoMove, <span class="number">300</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">lClick</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (step == <span class="number">0</span>) &#123;</span><br><span class="line">        step = data.length;</span><br><span class="line">        wrapper.style.left = (data.length) * -<span class="number">1226</span> + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    step--;</span><br><span class="line">    autoMove(step)</span><br><span class="line">&#125;</span><br><span class="line">left.onclick = debounce(lClick, <span class="number">300</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 8.防抖</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">fn, wait</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> timers = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">...args</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (timers) <span class="built_in">clearTimeout</span>(timers);</span><br><span class="line">        timers = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            result = fn.apply(<span class="built_in">this</span>, ...args);</span><br><span class="line">        &#125;, wait)</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="jQuery版本"><a href="#jQuery版本" class="headerlink" title="jQuery版本"></a>jQuery版本</h3><ul>
<li>只需替换JS部分即可</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://libs.baidu.com/jquery/1.11.3/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> timer = <span class="literal">null</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> url = <span class="string">&quot;./banner.json&quot;</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> step = <span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> lens = <span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 1.数据请求</span></span></span><br><span class="line"><span class="javascript">    $.ajax(&#123;</span></span><br><span class="line">        url: url,</span><br><span class="line"><span class="javascript">        <span class="keyword">async</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="javascript">        success: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span></span><br><span class="line">            bindHtml(res);</span><br><span class="line">            lens = res.length;</span><br><span class="line"><span class="javascript">            timer = <span class="built_in">setInterval</span>(autoMove, <span class="number">2000</span>);</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    <span class="comment">// 2.渲染图片</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">bindHtml</span>(<span class="params">data</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> imgs = <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> lis = <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="javascript">        $.each(data, <span class="function">(<span class="params">index, item</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">            imgs += `<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;$&#123;item.img&#125;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span>`;</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            lis += &quot;<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span>&quot;;</span></span></span><br><span class="line">        &#125;);</span><br><span class="line"><span class="handlebars"><span class="xml">        imgs += `<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;$&#123;data[0].img&#125;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span>`;</span></span></span><br><span class="line"><span class="javascript">        $(<span class="string">&quot;#wrapper&quot;</span>).html(imgs);</span></span><br><span class="line"><span class="javascript">        $(<span class="string">&quot;#list&quot;</span>).html(lis);</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="comment">// 3.实现自动轮播，每隔1000ms执行一次</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">autoMove</span>(<span class="params">index</span>) </span>&#123;</span></span><br><span class="line">        step++;</span><br><span class="line"><span class="javascript">        <span class="keyword">typeof</span> index == <span class="string">&quot;undefined&quot;</span> ? <span class="literal">null</span> : step = index;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (step &gt;= <span class="number">5</span>) &#123;</span></span><br><span class="line">            step = 1;</span><br><span class="line"><span class="javascript">            $(<span class="string">&quot;#wrapper&quot;</span>).animate(&#123;</span></span><br><span class="line"><span class="javascript">                left: <span class="string">&quot;0px&quot;</span></span></span><br><span class="line">            &#125;, 0)</span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">        $(<span class="string">&quot;#wrapper&quot;</span>).animate(&#123;</span></span><br><span class="line"><span class="javascript">            left: -$(<span class="string">&quot;#outer&quot;</span>).width() * step + <span class="string">&quot;px&quot;</span>,</span></span><br><span class="line">        &#125;, 1000)</span><br><span class="line">        changeFocus();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="comment">// 4.鼠标划上图片停止轮播 鼠标离开继续轮播</span></span></span><br><span class="line"><span class="javascript">    $(<span class="string">&quot;#outer&quot;</span>).hover(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">clearInterval</span>(timer);</span></span><br><span class="line"><span class="javascript">    &#125;, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        timer = <span class="built_in">setInterval</span>(autoMove, <span class="number">2000</span>);</span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    <span class="comment">// 5.实现焦点跟随，显示哪一张图片，就给对应的焦点li加上类名active</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">changeFocus</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">&quot;#list li&quot;</span>).eq(step).addClass(<span class="string">&quot;active&quot;</span>).siblings().removeClass(<span class="string">&quot;active&quot;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (step == lens) &#123;</span></span><br><span class="line"><span class="javascript">            $(<span class="string">&quot;#list li&quot;</span>).eq(<span class="number">0</span>).addClass(<span class="string">&quot;active&quot;</span>).siblings().removeClass(<span class="string">&quot;active&quot;</span>);</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    changeFocus();</span><br><span class="line"><span class="javascript">    <span class="comment">// 6.点击焦点，实现切换对应图片</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">bindClick</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">&quot;#list li&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            autoMove($(<span class="built_in">this</span>).index());</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    bindClick();</span><br><span class="line"><span class="javascript">    <span class="comment">// 7.控制箭头</span></span></span><br><span class="line"><span class="javascript">    $(<span class="string">&quot;#right&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line">        autoMove();</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    $(<span class="string">&quot;#left&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (step == <span class="number">0</span>) &#123;</span></span><br><span class="line">            step = lens;</span><br><span class="line"><span class="javascript">            $(<span class="string">&quot;#wrapper&quot;</span>).animate(&#123;</span></span><br><span class="line"><span class="javascript">                left: lens * -<span class="number">800</span> + <span class="string">&quot;px&quot;</span></span></span><br><span class="line">            &#125;, 0)</span><br><span class="line">        &#125;</span><br><span class="line">        step--;</span><br><span class="line">        autoMove(step);</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>jQuery</tag>
        <tag>防抖</tag>
      </tags>
  </entry>
  <entry>
    <title>Canvas 学习（时钟 绘图板）</title>
    <url>/posts/453bf97e/</url>
    <content><![CDATA[<h2 id="canvas画圆"><a href="#canvas画圆" class="headerlink" title="canvas画圆"></a>canvas画圆</h2><ul>
<li>为什么需要用canvas，如果用<code>onmousemove</code>，每一次移动都会进行DOM重绘，非常消耗性能，这时我们需要看一下 canvas</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;canvas&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    canvas.onmousemove = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> div = <span class="built_in">document</span>.createElement(<span class="string">&quot;div&quot;</span>);</span></span><br><span class="line"><span class="javascript">        div.style.position = <span class="string">&quot;absolute&quot;</span>;</span></span><br><span class="line"><span class="javascript">        div.style.left = e.clientX + <span class="string">&quot;px&quot;</span>;</span></span><br><span class="line"><span class="javascript">        div.style.top = e.clientY + <span class="string">&quot;px&quot;</span>;</span></span><br><span class="line"><span class="javascript">        div.style.width = <span class="string">&quot;6px&quot;</span>;</span></span><br><span class="line"><span class="javascript">        div.style.height = <span class="string">&quot;6px&quot;</span>;</span></span><br><span class="line"><span class="javascript">        div.style.marginLeft = <span class="string">&quot;-3px&quot;</span>;</span></span><br><span class="line"><span class="javascript">        div.style.marginRight = <span class="string">&quot;-3px&quot;</span>;</span></span><br><span class="line"><span class="javascript">        div.style.borderRadius = <span class="string">&quot;50%&quot;</span>;</span></span><br><span class="line"><span class="javascript">        div.style.backgroundColor = <span class="string">&quot;black&quot;</span>;</span></span><br><span class="line">        canvas.appendChild(div);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>我们现在已经给 canvas 设置一屏宽高，但还是出现滚动条，原因是 canvas 是 inline 元素，设置宽高不起作用，所以需要把它转换成块级元素（<strong>不要这样做，这样做会拉伸元素</strong>）</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">&quot;canvas&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-id">#canvas</span> &#123;</span></span><br><span class="line">        height: 100vh;</span><br><span class="line">        width: 100vw;</span><br><span class="line">        border: 1px solid red;</span><br><span class="line"><span class="css">        <span class="comment">/* display: block; */</span></span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>&lt;canvas&gt;</code> 标签只有两个属性<strong>——</strong> <code>width</code>和<code>height</code>，可以使用 JS 设置canvas 宽高，这里不能直接给 canvas 设置 <code>height: 100vh;</code> <code>width: 100vw;</code> </li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">&quot;canvas&quot;</span>);</span><br><span class="line">canvas.width = <span class="built_in">document</span>.documentElement.clientWidth;</span><br><span class="line">canvas.height = <span class="built_in">document</span>.documentElement.clientHeight;</span><br></pre></td></tr></table></figure>

<ul>
<li>canvas画圆</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> painting = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">let</span> ctx = canvas.getContext(<span class="string">&quot;2d&quot;</span>);</span><br><span class="line">ctx.fillStyle = <span class="string">&quot;black&quot;</span>;</span><br><span class="line">ctx.strokeStyle = <span class="string">&quot;none&quot;</span>;</span><br><span class="line"></span><br><span class="line">canvas.onmousedown = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    painting = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">canvas.onmousemove = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (painting === <span class="literal">true</span>) &#123;</span><br><span class="line">        ctx.beginPath();</span><br><span class="line">        ctx.arc(e.clientX, e.clientY, <span class="number">10</span>, <span class="number">0</span>, <span class="number">2</span> * <span class="built_in">Math</span>.PI);</span><br><span class="line">        ctx.stroke();</span><br><span class="line">        ctx.fill()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">canvas.onmouseup = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    painting = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Canvas"><a href="#Canvas" class="headerlink" title="Canvas"></a>Canvas</h2><h3 id="颜色、样式和阴影"><a href="#颜色、样式和阴影" class="headerlink" title="颜色、样式和阴影"></a>颜色、样式和阴影</h3><table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://www.w3school.com.cn/tags/canvas_fillstyle.asp">fillStyle</a></td>
<td>设置或返回用于填充绘画的颜色、渐变或模式</td>
</tr>
<tr>
<td><a href="https://www.w3school.com.cn/tags/canvas_strokestyle.asp">strokeStyle</a></td>
<td>设置或返回用于笔触的颜色、渐变或模式</td>
</tr>
<tr>
<td><a href="https://www.w3school.com.cn/tags/canvas_shadowcolor.asp">shadowColor</a></td>
<td>设置或返回用于阴影的颜色</td>
</tr>
<tr>
<td><a href="https://www.w3school.com.cn/tags/canvas_shadowblur.asp">shadowBlur</a></td>
<td>设置或返回用于阴影的模糊级别</td>
</tr>
<tr>
<td><a href="https://www.w3school.com.cn/tags/canvas_shadowoffsetx.asp">shadowOffsetX</a></td>
<td>设置或返回阴影距形状的水平距离</td>
</tr>
<tr>
<td><a href="https://www.w3school.com.cn/tags/canvas_shadowoffsety.asp">shadowOffsetY</a></td>
<td>设置或返回阴影距形状的垂直距离</td>
</tr>
</tbody></table>
<h3 id="线条样式"><a href="#线条样式" class="headerlink" title="线条样式"></a>线条样式</h3><table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://www.w3school.com.cn/tags/canvas_linecap.asp">lineCap</a></td>
<td>设置或返回线条的结束端点样式</td>
</tr>
<tr>
<td><a href="https://www.w3school.com.cn/tags/canvas_linejoin.asp">lineJoin</a></td>
<td>设置或返回两条线相交时，所创建的拐角类型</td>
</tr>
<tr>
<td><a href="https://www.w3school.com.cn/tags/canvas_linewidth.asp">lineWidth</a></td>
<td>设置或返回当前的线条宽度</td>
</tr>
<tr>
<td><a href="https://www.w3school.com.cn/tags/canvas_miterlimit.asp">miterLimit</a></td>
<td>设置或返回最大斜接长度</td>
</tr>
</tbody></table>
<h3 id="矩形"><a href="#矩形" class="headerlink" title="矩形"></a>矩形</h3><table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://www.w3school.com.cn/tags/canvas_rect.asp">rect()</a></td>
<td>创建矩形</td>
</tr>
<tr>
<td><a href="https://www.w3school.com.cn/tags/canvas_fillrect.asp">fillRect()</a></td>
<td>绘制“被填充”的矩形</td>
</tr>
<tr>
<td><a href="https://www.w3school.com.cn/tags/canvas_strokerect.asp">strokeRect()</a></td>
<td>绘制矩形（无填充）</td>
</tr>
<tr>
<td><a href="https://www.w3school.com.cn/tags/canvas_clearrect.asp">clearRect()</a></td>
<td>在给定的矩形内清除指定的像素</td>
</tr>
</tbody></table>
<h3 id="路径"><a href="#路径" class="headerlink" title="路径"></a>路径</h3><table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://www.w3school.com.cn/tags/canvas_fill.asp">fill()</a></td>
<td>填充当前绘图（路径）</td>
</tr>
<tr>
<td><a href="https://www.w3school.com.cn/tags/canvas_stroke.asp">stroke()</a></td>
<td>绘制已定义的路径</td>
</tr>
<tr>
<td><a href="https://www.w3school.com.cn/tags/canvas_beginpath.asp">beginPath()</a></td>
<td>起始一条路径，或重置当前路径</td>
</tr>
<tr>
<td><a href="https://www.w3school.com.cn/tags/canvas_moveto.asp">moveTo()</a></td>
<td>把路径移动到画布中的指定点，不创建线条</td>
</tr>
<tr>
<td><a href="https://www.w3school.com.cn/tags/canvas_closepath.asp">closePath()</a></td>
<td>创建从当前点回到起始点的路径</td>
</tr>
<tr>
<td><a href="https://www.w3school.com.cn/tags/canvas_lineto.asp">lineTo()</a></td>
<td>添加一个新点，然后在画布中创建从该点到最后指定点的线条</td>
</tr>
<tr>
<td><a href="https://www.w3school.com.cn/tags/canvas_clip.asp">clip()</a></td>
<td>从原始画布剪切任意形状和尺寸的区域</td>
</tr>
<tr>
<td><a href="https://www.w3school.com.cn/tags/canvas_quadraticcurveto.asp">quadraticCurveTo()</a></td>
<td>创建二次贝塞尔曲线</td>
</tr>
<tr>
<td><a href="https://www.w3school.com.cn/tags/canvas_beziercurveto.asp">bezierCurveTo()</a></td>
<td>创建三次方贝塞尔曲线</td>
</tr>
<tr>
<td><a href="https://www.w3school.com.cn/tags/canvas_arc.asp">arc()</a></td>
<td>创建弧/曲线（用于创建圆形或部分圆）</td>
</tr>
<tr>
<td><a href="https://www.w3school.com.cn/tags/canvas_arcto.asp">arcTo()</a></td>
<td>创建两切线之间的弧/曲线</td>
</tr>
<tr>
<td><a href="https://www.w3school.com.cn/tags/canvas_ispointinpath.asp">isPointInPath()</a></td>
<td>如果指定的点位于当前路径中，则返回 true，否则返回 false</td>
</tr>
</tbody></table>
<h3 id="转换"><a href="#转换" class="headerlink" title="转换"></a>转换</h3><table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://www.w3school.com.cn/tags/canvas_scale.asp">scale()</a></td>
<td>缩放当前绘图至更大或更小</td>
</tr>
<tr>
<td><a href="https://www.w3school.com.cn/tags/canvas_rotate.asp">rotate()</a></td>
<td>旋转当前绘图</td>
</tr>
<tr>
<td><a href="https://www.w3school.com.cn/tags/canvas_translate.asp">translate()</a></td>
<td>重新映射画布上的 (0,0) 位置</td>
</tr>
<tr>
<td><a href="https://www.w3school.com.cn/tags/canvas_transform.asp">transform()</a></td>
<td>替换绘图的当前转换矩阵</td>
</tr>
<tr>
<td><a href="https://www.w3school.com.cn/tags/canvas_settransform.asp">setTransform()</a></td>
<td>将当前转换重置为单位矩阵。然后运行 transform()</td>
</tr>
</tbody></table>
<h3 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h3><table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://www.w3school.com.cn/tags/canvas_font.asp">font</a></td>
<td>设置或返回文本内容的当前字体属性</td>
</tr>
<tr>
<td><a href="https://www.w3school.com.cn/tags/canvas_textalign.asp">textAlign</a></td>
<td>设置或返回文本内容的当前对齐方式</td>
</tr>
<tr>
<td><a href="https://www.w3school.com.cn/tags/canvas_textbaseline.asp">textBaseline</a></td>
<td>设置或返回在绘制文本时使用的当前文本基线</td>
</tr>
</tbody></table>
<h3 id="图像绘制"><a href="#图像绘制" class="headerlink" title="图像绘制"></a>图像绘制</h3><table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://www.w3school.com.cn/tags/canvas_drawimage.asp">drawImage()</a></td>
<td>向画布上绘制图像、画布或视频</td>
</tr>
</tbody></table>
<h3 id="像素操作"><a href="#像素操作" class="headerlink" title="像素操作"></a>像素操作</h3><table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>width</td>
<td>返回 ImageData 对象的宽度</td>
</tr>
<tr>
<td>height</td>
<td>返回 ImageData 对象的高度</td>
</tr>
<tr>
<td>data</td>
<td>返回一个对象，其包含指定的 ImageData 对象的图像数据</td>
</tr>
</tbody></table>
<h2 id="Canvas练习"><a href="#Canvas练习" class="headerlink" title="Canvas练习"></a>Canvas练习</h2><h3 id="绘制圆形和文本"><a href="#绘制圆形和文本" class="headerlink" title="绘制圆形和文本"></a>绘制圆形和文本</h3><ul>
<li>绘制线段</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ctx.beginPath();</span><br><span class="line"><span class="comment">// 设置绘制的起始点</span></span><br><span class="line">ctx.moveTo(<span class="number">50</span>, <span class="number">50</span>);</span><br><span class="line"><span class="comment">// 设置经过某个位置</span></span><br><span class="line">ctx.lineTo(<span class="number">50</span>, <span class="number">300</span>);</span><br><span class="line">ctx.lineTo(<span class="number">300</span>, <span class="number">100</span>);</span><br><span class="line"><span class="comment">// 设置绘制的结束点</span></span><br><span class="line">ctx.closePath();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 起始路径的线段边缘设置为圆角</span></span><br><span class="line">ctx.lineCap = <span class="string">&quot;round&quot;</span>;</span><br><span class="line"><span class="comment">// 转折处的线段设置为圆角</span></span><br><span class="line">ctx.lineJoin = <span class="string">&quot;round&quot;</span></span><br><span class="line"><span class="comment">// 设置颜色样式</span></span><br><span class="line">ctx.strokeStyle = <span class="string">&quot;aqua&quot;</span>;</span><br><span class="line">ctx.lineWidth = <span class="number">20</span>;</span><br><span class="line">ctx.stroke()</span><br></pre></td></tr></table></figure>

<ul>
<li>绘制圆</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 默认为false，顺时针，true逆时针</span></span><br><span class="line"><span class="comment">// ctx,arc(x, y, radius, startAngle, endAngle, anticlockwise)</span></span><br><span class="line">ctx.arc(<span class="number">300</span>, <span class="number">300</span>, <span class="number">100</span>, <span class="number">0</span>, <span class="number">2</span> * <span class="built_in">Math</span>.PI, <span class="literal">true</span>);</span><br><span class="line">ctx.fillStyle = <span class="string">&quot;bisque&quot;</span>;</span><br><span class="line">ctx.fill();</span><br><span class="line">ctx.stroke();</span><br></pre></td></tr></table></figure>

<ul>
<li>弹幕字体</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ctx.font = <span class="string">&quot;50px sans-serif&quot;</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="number">1200</span>;</span><br><span class="line"><span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    ctx.clearRect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">1200</span>, <span class="number">1200</span>);</span><br><span class="line">    x -= <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">if</span> (x &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        x = <span class="number">1200</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ctx.fillText(<span class="string">&quot;hello&quot;</span>, x, <span class="number">100</span>);</span><br><span class="line">    ctx.strokeText(<span class="string">&quot;world&quot;</span>, x, <span class="number">200</span>);</span><br><span class="line">&#125;, <span class="number">40</span>)</span><br></pre></td></tr></table></figure>

<h3 id="绘制图形"><a href="#绘制图形" class="headerlink" title="绘制图形"></a>绘制图形</h3><ul>
<li>绘制图像（同一图片）</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> img = <span class="keyword">new</span> Image();</span><br><span class="line">img.src = <span class="string">&quot;./imgs/2.jpg&quot;</span>;</span><br><span class="line">img.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    ctx.drawImage(img, <span class="number">50</span>, <span class="number">100</span>, <span class="number">480</span>, <span class="number">270</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> img2 = <span class="keyword">new</span> Image();</span><br><span class="line">img2.src = <span class="string">&quot;./imgs/3.jpg&quot;</span>;</span><br><span class="line">img2.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    ctx.drawImage(img2, <span class="number">400</span>, <span class="number">400</span>, <span class="number">480</span>, <span class="number">270</span>, <span class="number">100</span>, <span class="number">400</span>, <span class="number">480</span>, <span class="number">270</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>绘制图像（视频抽帧）</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> video = <span class="built_in">document</span>.querySelector(<span class="string">&quot;video&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> interval = <span class="literal">null</span>;</span><br><span class="line">video.onplay = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    interval = <span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        ctx.drawImage(video, <span class="number">0</span>, <span class="number">800</span>, <span class="number">800</span>, <span class="number">400</span>)</span><br><span class="line">    &#125;, <span class="number">32</span>)</span><br><span class="line">&#125;</span><br><span class="line">video.onpause = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">clearInterval</span>(interval);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="绘制时钟"><a href="#绘制时钟" class="headerlink" title="绘制时钟"></a>绘制时钟</h2><p>ES6版本参考这个（附带效果）：<a href="https://github.com/llwodexue/clock">https://github.com/llwodexue/clock</a></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> canvas1 = <span class="built_in">document</span>.querySelector(<span class="string">&quot;#canvas1&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> ctx = canvas1.getContext(<span class="string">&quot;2d&quot;</span>);</span><br><span class="line">ctx.clearRect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">800</span>, <span class="number">600</span>);</span><br><span class="line">ctx.save();</span><br><span class="line">ctx.translate(<span class="number">400</span>, <span class="number">300</span>);</span><br><span class="line">ctx.rotate(-<span class="built_in">Math</span>.PI / <span class="number">2</span>);</span><br><span class="line"><span class="comment">// 绘制表盘</span></span><br><span class="line">ctx.beginPath();</span><br><span class="line">ctx.arc(<span class="number">0</span>, <span class="number">0</span>, <span class="number">200</span>, <span class="number">0</span>, <span class="number">2</span> * <span class="built_in">Math</span>.PI);</span><br><span class="line">ctx.strokeStyle = <span class="string">&quot;darkgrey&quot;</span>;</span><br><span class="line">ctx.lineWidth = <span class="number">10</span>;</span><br><span class="line">ctx.stroke();</span><br><span class="line">ctx.closePath();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">renderClock</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    ctx.clearRect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">800</span>, <span class="number">600</span>);</span><br><span class="line">    ctx.save();</span><br><span class="line">    ctx.translate(<span class="number">400</span>, <span class="number">300</span>);</span><br><span class="line">    ctx.rotate(-<span class="built_in">Math</span>.PI / <span class="number">2</span>);</span><br><span class="line">    <span class="comment">// 绘制表盘</span></span><br><span class="line">    ctx.beginPath();</span><br><span class="line">    ctx.arc(<span class="number">0</span>, <span class="number">0</span>, <span class="number">200</span>, <span class="number">0</span>, <span class="number">2</span> * <span class="built_in">Math</span>.PI);</span><br><span class="line">    ctx.strokeStyle = <span class="string">&quot;darkgrey&quot;</span>;</span><br><span class="line">    ctx.lineWidth = <span class="number">10</span>;</span><br><span class="line">    ctx.stroke();</span><br><span class="line">    ctx.closePath();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">drawLine</span>(<span class="params">&#123; count, start, end, width, color &#125;</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (; i &lt; count; i++) &#123;</span><br><span class="line">            ctx.beginPath();</span><br><span class="line">            ctx.rotate((<span class="number">2</span> * <span class="built_in">Math</span>.PI) / count);</span><br><span class="line">            ctx.moveTo(start, <span class="number">0</span>);</span><br><span class="line">            ctx.lineTo(end, <span class="number">0</span>);</span><br><span class="line">            ctx.lineWidth = width;</span><br><span class="line">            ctx.strokeStyle = color;</span><br><span class="line">            ctx.stroke();</span><br><span class="line">            ctx.closePath();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 绘制分针刻度线</span></span><br><span class="line">    drawLine(&#123;</span><br><span class="line">        count: <span class="number">60</span>,</span><br><span class="line">        start: <span class="number">180</span>,</span><br><span class="line">        end: <span class="number">190</span>,</span><br><span class="line">        width: <span class="number">2</span>,</span><br><span class="line">        color: <span class="string">&quot;orangered&quot;</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 绘制时针刻度线</span></span><br><span class="line">    drawLine(&#123;</span><br><span class="line">        count: <span class="number">12</span>,</span><br><span class="line">        start: <span class="number">180</span>,</span><br><span class="line">        end: <span class="number">200</span>,</span><br><span class="line">        width: <span class="number">10</span>,</span><br><span class="line">        color: <span class="string">&quot;darkgrey&quot;</span>,</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> time = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    <span class="keyword">let</span> min = time.getMinutes();</span><br><span class="line">    <span class="keyword">let</span> sec = time.getSeconds();</span><br><span class="line">    <span class="keyword">let</span> hour = time.getHours();</span><br><span class="line">    hour = hour &gt; <span class="number">12</span> ? hour - <span class="number">12</span> : hour;</span><br><span class="line">    <span class="comment">// 绘制秒针</span></span><br><span class="line">    ctx.save();</span><br><span class="line">    ctx.beginPath();</span><br><span class="line">    ctx.rotate(((<span class="number">2</span> * <span class="built_in">Math</span>.PI) / <span class="number">60</span>) * sec);</span><br><span class="line">    ctx.moveTo(-<span class="number">30</span>, <span class="number">0</span>);</span><br><span class="line">    ctx.lineTo(<span class="number">170</span>, <span class="number">0</span>);</span><br><span class="line">    ctx.lineWidth = <span class="number">2</span>;</span><br><span class="line">    ctx.strokeStyle = <span class="string">&quot;red&quot;</span>;</span><br><span class="line">    ctx.stroke();</span><br><span class="line">    ctx.closePath();</span><br><span class="line">    ctx.restore();</span><br><span class="line">    <span class="comment">// 绘制分针</span></span><br><span class="line">    ctx.save();</span><br><span class="line">    ctx.beginPath();</span><br><span class="line">    ctx.rotate(((<span class="number">2</span> * <span class="built_in">Math</span>.PI) / <span class="number">60</span>) * min + ((<span class="number">2</span> * <span class="built_in">Math</span>.PI) / <span class="number">3600</span>) * sec);</span><br><span class="line">    ctx.moveTo(-<span class="number">20</span>, <span class="number">0</span>);</span><br><span class="line">    ctx.lineTo(<span class="number">150</span>, <span class="number">0</span>);</span><br><span class="line">    ctx.lineWidth = <span class="number">4</span>;</span><br><span class="line">    ctx.strokeStyle = <span class="string">&quot;darkblue&quot;</span>;</span><br><span class="line">    ctx.stroke();</span><br><span class="line">    ctx.closePath();</span><br><span class="line">    ctx.restore();</span><br><span class="line">    <span class="comment">// 绘制时针</span></span><br><span class="line">    ctx.save();</span><br><span class="line">    ctx.beginPath();</span><br><span class="line">    ctx.rotate(</span><br><span class="line">        ((<span class="number">2</span> * <span class="built_in">Math</span>.PI) / <span class="number">12</span>) * hour +</span><br><span class="line">            ((<span class="number">2</span> * <span class="built_in">Math</span>.PI) / <span class="number">12</span> / <span class="number">60</span>) * min +</span><br><span class="line">            ((<span class="number">2</span> * <span class="built_in">Math</span>.PI) / <span class="number">12</span> / <span class="number">60</span> / <span class="number">60</span>) * sec</span><br><span class="line">    );</span><br><span class="line">    ctx.moveTo(-<span class="number">10</span>, <span class="number">0</span>);</span><br><span class="line">    ctx.lineTo(<span class="number">130</span>, <span class="number">0</span>);</span><br><span class="line">    ctx.lineWidth = <span class="number">6</span>;</span><br><span class="line">    ctx.strokeStyle = <span class="string">&quot;darkgrey&quot;</span>;</span><br><span class="line">    ctx.stroke();</span><br><span class="line">    ctx.closePath();</span><br><span class="line">    ctx.restore();</span><br><span class="line">    <span class="comment">// 绘制表圈</span></span><br><span class="line">    ctx.beginPath();</span><br><span class="line">    ctx.arc(<span class="number">0</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">2</span> * <span class="built_in">Math</span>.PI);</span><br><span class="line">    ctx.fillStyle = <span class="string">&quot;deepskyblue&quot;</span>;</span><br><span class="line">    ctx.fill();</span><br><span class="line">    ctx.closePath();</span><br><span class="line">    ctx.restore();</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    renderClock();</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure>

<h2 id="Canvas-绘图板"><a href="#Canvas-绘图板" class="headerlink" title="Canvas 绘图板"></a>Canvas 绘图板</h2><p>绘图板参考（附带效果）： <a href="https://github.com/llwodexue/canvas_painting">https://github.com/llwodexue/canvas_painting</a></p>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/company-img/%E7%BB%98%E5%9B%BE%E6%9D%BF.gif"></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.jianshu.com/p/266b4fa2c446">Fira Code | 为写程序而生的字体</a></p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Canvas_API/Tutorial">Canvas教程</a></p>
<p><a href="https://stackoverflow.com/questions/3974827/detecting-touch-screen-devices-with-javascript">Detecting touch screen devices with Javascript</a></p>
<p><a href="https://www.w3school.com.cn/tags/html_ref_canvas.asp">HTML 5 Canvas 参考手册</a></p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Canvas</tag>
      </tags>
  </entry>
  <entry>
    <title>免安装版 MySQL（附带 SQLyog 安装包）</title>
    <url>/posts/5a7a946b/</url>
    <content><![CDATA[<h2 id="MySQL-免安装包"><a href="#MySQL-免安装包" class="headerlink" title="MySQL 免安装包"></a>MySQL 免安装包</h2><p>链接：<a href="https://pan.baidu.com/s/1T0m9hKmVAfEBRpOTbfTTHg">https://pan.baidu.com/s/1T0m9hKmVAfEBRpOTbfTTHg</a><br>提取码：1234 </p>
<ul>
<li><p>里面有 32 位安装包和 64 位安装包</p>
<h2 id="SQLyog-免安装包"><a href="#SQLyog-免安装包" class="headerlink" title="SQLyog 免安装包"></a>SQLyog 免安装包</h2><p>链接：<a href="https://pan.baidu.com/s/1v6jNPZID2vlIfdUsRbR5rw">https://pan.baidu.com/s/1v6jNPZID2vlIfdUsRbR5rw</a><br>提取码：1234 </p>
</li>
<li><p>里面有 32 位安装包和 64 位安装包，直接点击exe文件安装，最后输入破解序列号即可永久使用</p>
</li>
</ul>
<a id="more"></a>
<h2 id="MySQL-配置"><a href="#MySQL-配置" class="headerlink" title="MySQL 配置"></a>MySQL 配置</h2><ol>
<li>以<strong>管理员身份</strong>打开命令行，否则后续命令行部分命令需要权限，出现错误</li>
</ol>
<p><img data-src="https://img-blog.csdnimg.cn/img_convert/ac5ca3564e090872c1f6603b2d77c741.png"></p>
<ol start="2">
<li>切换目录。切换到 MySQL 的 bin 目录下，我把 MySQL 放到 E 盘里了： <code>cd E:\mysql-5.7.15-winx64\bin &amp;&amp; e:</code></li>
</ol>
<p><img data-src="https://img-blog.csdnimg.cn/img_convert/6b0e8acb85a135e7a851332ebd4d7575.png"></p>
<ol start="3">
<li>安装 MySQL的服务：<code>mysqld --install</code></li>
</ol>
<p><img data-src="https://img-blog.csdnimg.cn/img_convert/0b71b2ba5aa1519011bc3813aa3fda03.png"></p>
<ol start="4">
<li>初始化 MySQL，初始化会产生一个随机密码，<strong>需要记住这个密码</strong>，后续会用到：<code>mysqld --initialize --console</code></li>
</ol>
<p><img data-src="https://img-blog.csdnimg.cn/img_convert/9679d8276c66f91db7c42fa185b37f75.png"></p>
<ol start="5">
<li>开启 MySQL 服务：<code>net start mysql</code></li>
</ol>
<p><img data-src="https://img-blog.csdnimg.cn/img_convert/bd059673886450637521774116d49b11.png"></p>
<ol start="6">
<li>登录验证。注意：这里的密码是初始化（步骤4）产生的随机密码；一定要先开启服务，再登录验证，不然会提示拒绝访问</li>
</ol>
<p><img data-src="https://img-blog.csdnimg.cn/img_convert/5b145a5f42335bf2b07604070ee93b79.png"></p>
<ol start="7">
<li><p>修改密码。由于初始化的随机密码太复杂，不便于我们登录（记得结尾加 <code>;</code> ）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SET PASSWORD = PASSWORD(<span class="string">&#x27;123456&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p><img data-src="https://img-blog.csdnimg.cn/img_convert/777541fe2e82111e0cf0a3ee999d6051.png"></p>
</li>
</ol>
<h2 id="环境变量设置"><a href="#环境变量设置" class="headerlink" title="环境变量设置"></a>环境变量设置</h2><p>点击 “我的电脑” –&gt; “属性” –&gt; ‘’高级系统设置’’ –&gt; ‘’环境变量’’</p>
<p><img data-src="https://img-blog.csdnimg.cn/img_convert/ba4c3eabda8a6f4f04de19904ae56d28.png"></p>
<p>配置完成之后，每当我们想要用命令行使用 mysql 时，只需要登录即可使用</p>
<p><img data-src="https://img-blog.csdnimg.cn/img_convert/ff609eee38ff3da7be13555747104899.png"></p>
<p>在 mysql 目录下新建一个 <code>my.init</code> 文件，在里面粘贴如下代码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">character-set-server=utf8mb4</span><br><span class="line">bind-address=0.0.0.0</span><br><span class="line">port=3306</span><br><span class="line">default-storage-engine=INNODB</span><br><span class="line">[mysql]</span><br><span class="line">default-character-set=utf8mb4</span><br><span class="line">[client]</span><br><span class="line">default-character-set=utf8mb4</span><br></pre></td></tr></table></figure>

<p>这样，免安装版的 MySQL 就安装并配置完成了</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>SQL</tag>
        <tag>SQLyog</tag>
        <tag>安装步骤</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue 大量数据展示 卡顿解决方案（滚动展示）</title>
    <url>/posts/b05a9b29/</url>
    <content><![CDATA[<h2 id="需求分析（长列表展示）"><a href="#需求分析（长列表展示）" class="headerlink" title="需求分析（长列表展示）"></a>需求分析（长列表展示）</h2><p>页面某处需要渲染 <strong>1w+</strong> 条数据，并需要<strong>滚动展示</strong>，这时如果直接把这些数据渲染到页面上，会导致系统内存大量被占用，导致页面卡顿或崩溃</p>
<p>我们都知道，每次 DOM 修改，浏览器都会重新计算元素布局，再重新渲染（回流 / 重绘）。如果数据量很大，页面计算时间就会加成，造成页面卡顿</p>
<a id="more"></a>

<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><ul>
<li>根源：DOM 元素太多</li>
<li>思路：限制元素数量 / 虚拟DOM</li>
</ul>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/company-img/bigData.gif"></p>
<p>后台数据格式：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        checked: <span class="number">0</span>，</span><br><span class="line">        data: <span class="string">&quot;xxx&quot;</span>，</span><br><span class="line">        label: <span class="string">&quot;xxx&quot;</span>，</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>Vue 中就有一个现成的轮子可以解决这个问题：<a href="https://github.com/Akryum/vue-virtual-scroller#recyclescroller">vue-virtual-scroller</a></p>
<ol>
<li>安装 <code>vue-virtual-scroller</code> 插件</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save vue-virtual-scroller</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>在 <code>main.js</code> 引入</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 注意：别忘了引用这个css</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;vue-virtual-scroller/dist/vue-virtual-scroller.css&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; RecycleScroller &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-virtual-scroller&#x27;</span></span><br><span class="line"></span><br><span class="line">Vue.component(<span class="string">&#x27;RecycleScroller&#x27;</span>, RecycleScroller)</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>在组件里使用<ul>
<li><code>items</code>：呈现数据</li>
<li><code>item-size</code>：呈现数据的大小 / 高度</li>
<li><code>key-filed</code>：如果 <code>items</code> 是对象，需要用这个做唯一标识</li>
</ul>
</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;RecycleScroller</span><br><span class="line">  style=&quot;height: 200px; overflow: auto&quot;</span><br><span class="line">  class=&quot;scroller&quot;</span><br><span class="line">  :items=&quot;listItem&quot;</span><br><span class="line">  :item-size=&quot;20&quot;</span><br><span class="line">  key-field=&quot;data&quot;</span><br><span class="line">&gt;</span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot</span>=<span class="string">&quot;&#123; item &#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-checkbox</span> <span class="attr">:key</span>=<span class="string">&quot;item.data&quot;</span> <span class="attr">:label</span>=<span class="string">&quot;item.label&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">RecycleScroller</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">	<span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line">            listItem: []</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>使用  <code>vue-virtual-scroller</code> 插件展示大量数据，是可以比较流畅的渲染 / 滚动的</p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>滚动展示</tag>
        <tag>大数据</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 实现 sizeOf 函数，计算 object 占用了多少个 bytes</title>
    <url>/posts/9cad4e3f/</url>
    <content><![CDATA[<h2 id="实现-sizeOf-函数，传入一个-object，计算这个-Object-占用了多少个-bytes"><a href="#实现-sizeOf-函数，传入一个-object，计算这个-Object-占用了多少个-bytes" class="headerlink" title="实现 sizeOf 函数，传入一个 object，计算这个 Object 占用了多少个 bytes"></a>实现 sizeOf 函数，传入一个 object，计算这个 Object 占用了多少个 bytes</h2><p>可以参考：<a href="https://github.com/miktam/sizeof">https://github.com/miktam/sizeof</a></p>
<ul>
<li>Number：一个数字 8 字节（64 位存储）</li>
<li>String：一个字符 2 字节</li>
<li>Boolean：4 个字节</li>
</ul>
<a id="more"></a>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> same = &#123;&#125;</span><br><span class="line"><span class="keyword">const</span> testData = &#123;</span><br><span class="line">  a: <span class="number">111</span>,</span><br><span class="line">  b: <span class="string">&#x27;ccc&#x27;</span>,</span><br><span class="line">  <span class="number">222</span>: <span class="literal">false</span>,</span><br><span class="line">  c: same,</span><br><span class="line">  d: same,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> seen = <span class="keyword">new</span> <span class="built_in">WeakSet</span>()</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sizeOfObj</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (obj === <span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> bytes = <span class="number">0</span></span><br><span class="line">  <span class="comment">// 对象里的key也是占用内存空间的</span></span><br><span class="line">  <span class="keyword">const</span> props = <span class="built_in">Object</span>.keys(obj)</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; props.length; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> key = props[i]</span><br><span class="line">    <span class="comment">// 无论value是否重复，都需要计算key</span></span><br><span class="line">    bytes += calculator(key)</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> obj[key] === <span class="string">&#x27;object&#x27;</span> &amp;&amp; obj[key] !== <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="comment">// 这里需要注意value使用相同内存空间（只需计算一次内存）</span></span><br><span class="line">      <span class="keyword">if</span> (seen.has(obj[key])) <span class="keyword">continue</span></span><br><span class="line">      seen.add(obj[key])</span><br><span class="line">    &#125;</span><br><span class="line">    bytes += calculator(obj[key])</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> bytes</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">calculator</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> objType = <span class="keyword">typeof</span> obj</span><br><span class="line">  <span class="keyword">switch</span> (objType) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;string&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> obj.length * <span class="number">2</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;boolean&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="number">4</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;number&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="number">8</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;object&#x27;</span>:</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(obj)) &#123;</span><br><span class="line">        <span class="comment">// 数组处理 [1,2] [&#123;x:1&#125;,&#123;y:2&#125;]</span></span><br><span class="line">        <span class="keyword">return</span> obj.map(calculator).reduce(<span class="function">(<span class="params">res, cur</span>) =&gt;</span> res + cur, <span class="number">0</span>)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 对象处理</span></span><br><span class="line">        <span class="keyword">return</span> sizeOfObj(obj)</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(calculator(testData)) <span class="comment">// 32</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>字节数</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTP网络层性能优化</title>
    <url>/posts/2623edef/</url>
    <content><![CDATA[<h2 id="客户端和服务端之间的信息通信"><a href="#客户端和服务端之间的信息通信" class="headerlink" title="客户端和服务端之间的信息通信"></a>客户端和服务端之间的信息通信</h2><ul>
<li>ajax / fetch 数据交互</li>
<li>跨域处理方案：ajax、fetch、jsonp、postMessage</li>
<li>资源获取【html|、css、js、image、音视频】</li>
<li>webscoket</li>
</ul>
<a id="more"></a>

<p>请求：客户端把信息传递给服务器或者向服务器发送请求</p>
<p>响应：服务器接受客户端信息并且返回给客户端相关的内容</p>
<p>HTTP 报文：客户端和服务器之间的传输的所有内容</p>
<ul>
<li><p>起始行：基本信息【包含 HTTP 的版本等】</p>
<p>请求起始行：GET【请求方式】 xxx【请求地址】 HTTP/1.1【HTTP 版本号】</p>
<p>响应起始行：HTTP/1.1【HTTP 版本】 200【HTTP 响应状态码】 OK【状态码描述】</p>
</li>
<li><p>首部（头）：请求头【客户端-&gt;服务器】、响应头【服务器-&gt;客户端】</p>
</li>
<li><p>主体：请求主体【客户端-&gt;服务器】、响应主体【服务器-&gt;客户端】</p>
</li>
</ul>
<p>客户端和服务器之间的数据传输，依托于网络【通信模式 TCP/IP… 传输协议 HTTP/HTTPS/FTP…】</p>
<h2 id="从输入-URL-地址到看到页面，中间的经历"><a href="#从输入-URL-地址到看到页面，中间的经历" class="headerlink" title="从输入 URL 地址到看到页面，中间的经历"></a>从输入 URL 地址到看到页面，中间的经历</h2><ol>
<li>URL 解析</li>
<li>检查缓存【强缓存、协商缓存（针对资源文件请求）；本地缓存（针对数据请求）】</li>
<li>DNS 服务器解析【域名解析：根据域名解析出服务器外网 IP】</li>
<li>TCP 三次握手【建立客户端和服务器之间的网络连接通道】</li>
<li>基于 HTTP/HTTPS 等协议，实现客户端和服务端之间的信息通信</li>
<li>TCP 四次挥手【把建立好的网络通道释放掉】</li>
<li>客户端渲染【呈现出页面和效果】</li>
</ol>
<h3 id="URL-解析"><a href="#URL-解析" class="headerlink" title="URL 解析"></a>URL 解析</h3><p><img data-src="https://gitee.com/lilyn/pic/raw/master/js-img/URL%E8%A7%A3%E6%9E%90.jpg" alt="URL解析"></p>
<p>URI：统一资源标识符</p>
<ul>
<li>URL：统一资源定位符</li>
<li>URN：统一资源名称</li>
</ul>
<p><strong>传输协议：</strong>用什么样的协议负责客户端和服务端的信息传输</p>
<ul>
<li><p>HTTP：超文本传输协议</p>
<p>除了传输文本还可以传输其余的信息，例如：文件流、二进制或者 Buffer 格式或者 BASE64 格式的数据</p>
</li>
<li><p>HTTPS：HTTP + SSL（TSL） 更安全的 HTTP，传输的内容经过加密</p>
</li>
<li><p>FTP：文件的上传下载</p>
</li>
</ul>
<p><strong>域名：</strong>对服务器外网 IP 的一个重命名</p>
<p><code>www.baidu.com</code></p>
<ul>
<li>顶级域名 <code>baidu.com</code></li>
<li>一级域名 <code>www.baidu.com</code></li>
<li>二级域名 <code>video.baidu.com</code></li>
<li>三级域名 <code>image.video.baidu.com</code></li>
</ul>
<p>域名和服务器购买完后，需要在 DNS 服务器生成一条解析记录，用于以后的 DNS 解析</p>
<p><strong>端口号：</strong>区分同一台服务器上不同的服务的</p>
<ul>
<li><p>取值范围：0~65535 之间</p>
</li>
<li><p>默认端口号：浏览器会根据输入的协议，给与默认端口号</p>
<p>HTTP -&gt; 80</p>
<p>HTTPS -&gt; 443</p>
<p>FTP -&gt; 21</p>
</li>
</ul>
<p><strong>请求资源的路径名称：</strong>基于路径找到客户端需要的资源文件</p>
<p>看到的 URL 地址可能是重写后的【看到的地址在文件目录不存在】</p>
<ul>
<li><p>ajax 数据请求 <code>/api/list</code></p>
</li>
<li><p>url 重写</p>
<p>动态网址，页面中的内容是无法被搜索引擎收录的（不利于 SEO 优化）</p>
<p>静态化地址 <code>https://item.jd.com/....</code>，通过 URL 重写为 <code>https://item.jd.com/detail.jsp?id=...</code></p>
<p><code>https://item.jd.com/info/100000</code> 路径参数【导航】</p>
<p><code>https://www.baidu.com/info?id=100000</code></p>
</li>
</ul>
<p><strong>问号传参：</strong></p>
<ul>
<li><p>把信息参数传递给服务器，GET 系列请求一般都是这样传递参数</p>
<p><code>xxx=xxx&amp;xxx=xxx</code> -&gt; x-www-form-urlencoded 格式</p>
</li>
<li><p>如果是页面跳转，把信息传递给另一个页面</p>
</li>
</ul>
<p><strong>HASH 值：</strong></p>
<ul>
<li>锚点定位</li>
<li>HASH 路由</li>
</ul>
<p>URL 编译问题：</p>
<ul>
<li>encodeURI decodeURI：编译空格和中文，一般编译整个 URL 中的信息（前后端都支持的 API）</li>
<li>encodeURIComponent decodeURIComponent：编译空格和中文以及一些特殊符号，所以一般只用来编译传递的信息的值，而不是整个 URL（前后端都支持的 API）</li>
<li>escape unescape（用于客户端页面信息传递或一些信息的编译【cookie 中的中文内容编译】）</li>
<li>也可以基于自己设定的加密机制规则处理（对称加密）</li>
<li>对于某些数据，需要采用不可解密的（非对称加密），例如：md5</li>
</ul>
<h3 id="缓存检测"><a href="#缓存检测" class="headerlink" title="缓存检测"></a>缓存检测</h3><p><strong>缓存处理是基于 HTTP 网络层进行优化的一个非常重要的手段</strong>【针对资源文件请求】</p>
<p>强缓存还是协商缓存都是服务器设置的，客户端浏览器自己会根据返回的一些信息，进行相关处理，无需前端单独设置东西</p>
<p><strong>缓存位置：</strong></p>
<ul>
<li>Memory Cache : 内存缓存（页面没有关闭，只是刷新）</li>
<li>Disk Cache：硬盘缓存（页面关闭后重新打开）</li>
</ul>
<p>打开网页：查找硬盘缓存中是否有匹配，如有则使用，如没有则发送网络请求</p>
<p>普通刷新（F5）：因 TAB 没关闭，因此内存缓存是可用的，会被优先使用，其次才是硬盘缓存</p>
<p>强制刷新（Ctrl + F5）：浏览器不使用缓存，因此发送的请求头均带有 <code>Cache-Control: no-cache</code>，服务器直接返回 200 和最新内容</p>
<p><strong>强缓存：</strong> <code>Expires / Cache-Control</code></p>
<blockquote>
<p>Expires：缓存过期时间，用来指定资源到期的事件（HTTP/1.0）</p>
<p>Cache-Control：<code>cache-control: public, max-age=2592000</code> 第一次拿到资源后的 2592000 秒内（30 天），再次发生请求，读取缓存中的信息（HTTP/1.1）</p>
</blockquote>
<ul>
<li>如果获取的是强缓存信息，HTTP 状态码是 <strong>200</strong></li>
<li>如果是从服务器成功重新获取，HTTP 状态码也是 <strong>200</strong></li>
</ul>
<p>问题：本地缓存了文件，但是服务对应的资源文件更新了，如何保证获取的是最新的内容？</p>
<ol>
<li>所有请求的资源文件（css / js / 图片）后面都带一个时间戳</li>
<li>每一次资源的更新，基于 webpack 生成不同的资源名称（HASH 值）</li>
</ol>
<p>所以 HTML 永远不会做强缓存，资源文件一般会使用 强缓存+协商缓存</p>
<p><strong>协商缓存：</strong> <code>Last-Modified / ETag</code></p>
<blockquote>
<p>Last-Modified：记录服务器资源文件最后一次更新的时间（HTTP/1.0）请求头： <code>If-Modified-Since</code></p>
<p>ETag：只要服务器资源文件改变，会生成一个不同的标识（HTTP/1.1）请求头： <code>If-None-Match</code></p>
</blockquote>
<p>当强缓存失效（不存在）【html 可以做协商缓存】，会校验协商缓存，每一次都会向服务器校验资源是否更新</p>
<ul>
<li>如果没有更新，返回 <strong>304</strong> 通知客户端读取缓存信息，从本地缓存中获取内容进行渲染</li>
<li>如果有更新，返回 <strong>200</strong> 及最新资源信息，直接渲染，并把最新的 Last-Modified / ETag 和最新的资源信息缓存到本地</li>
</ul>
<p><strong>数据缓存：</strong></p>
<p>没有缓存数据，从服务器拉取最新数据；有缓存数据，直接读取缓存数据【减少和服务器之间的交互频率，降低服务器压力，也可以提高页面的渲染速度】</p>
<ul>
<li>页面不刷新，某些内容频繁操作，但是数据不是需要实时更新，可以做缓存【不经常更新的数据】</li>
<li>页面只要不关闭，直接读取缓存，如果页面关闭，重新打开我们也可以读取缓存中的数据【数据更新频率更低，可以设置过期时间】</li>
</ul>
<p>客户端存储数据的方案：</p>
<ol>
<li>（全局）变量存储【vuex / redux】：页面刷新或关闭后打开，之前存储的数据都没有（内存释放）</li>
<li>cookie</li>
<li>webStorage：LocalStorage SessionStorage</li>
<li>IndexedDB 浏览器数据库存储</li>
<li>Cache</li>
<li>Manifest 离线存储</li>
</ol>
<p><strong>LocalStorage V.S. SessionStorage</strong></p>
<ul>
<li>LocalStorage 持久化本地存储（没有过期时间），页面关闭存储内容也是存在的，除非用户手动清除 <code>removeItem clear</code></li>
<li>SessionStorage 会话存储，页面关闭后，存储的信息会消息【页面刷新不消失】</li>
</ul>
<p><strong>Cookie V.S. LocalStorage</strong></p>
<ul>
<li><p>Cookie 只允许一个源下最多存储 4KB 内容，所以不能存储太多的数据</p>
<p>本地存储的数据是由同源访问限制的，只允许读取本源下存储的内容</p>
</li>
<li><p>LocalStorage 可以在同源下存储 5MB 内容</p>
<br>
</li>
<li><p>Cookie 需要设置过期时间，超过时间就失效，并且有路径限制</p>
</li>
<li><p>LocalStorage 持久化存储，没有过期时间，除非手动清除</p>
<br>
</li>
<li><p>Cookie 不稳定</p>
<p>基于安全卫士或浏览器自带的清除操作，会把 Cookie 删除掉，开启无痕浏览，不能存储 Cookie</p>
</li>
<li><p>LocalStorage 不受这些操作影响</p>
<br>
</li>
<li><p>Cookie 兼容低版本浏览器</p>
</li>
<li><p>LocalStorage HTML5 新增的 API【不兼容 IE8 以下浏览器】</p>
<br>
</li>
<li><p>Cookie 不算严格本地存储</p>
<p>客户端向服务器发送请求，会默认把本地的 Cookie 基于请求头发送给服务器，并且服务器返回的响应头中有 Set-Cookie 字段，浏览器会默认把这些信息种在客户端本地中</p>
</li>
<li><p>LocalStorage 严格本地存储，默认情况下和服务器没有任何关系</p>
</li>
</ul>
<p>想要基于 ajax 获取数据，必须要保证当前页面的运行是在 http/https 协议下，file 文件协议不行</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getData</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">    xhr.open(<span class="string">&#x27;get&#x27;</span>, <span class="string">&#x27;./data.json&#x27;</span>)</span><br><span class="line">    xhr.onreadystatechange = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (xhr.status === <span class="number">200</span> &amp;&amp; xhr.readyState === <span class="number">4</span>) &#123;</span><br><span class="line">        resolve(<span class="built_in">JSON</span>.parse(xhr.responseText))</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    xhr.send()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">;(<span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> cache_data = <span class="built_in">localStorage</span>.getItem(<span class="string">&#x27;cache-data&#x27;</span>)</span><br><span class="line">  <span class="keyword">if</span> (cache_data) &#123;</span><br><span class="line">    cache_data = <span class="built_in">JSON</span>.parse(cache_data)</span><br><span class="line">    <span class="keyword">if</span> (+<span class="keyword">new</span> <span class="built_in">Date</span>() - cache_data.time &lt;= <span class="number">10000</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> result = <span class="keyword">await</span> getData()</span><br><span class="line">  <span class="built_in">localStorage</span>.setItem(</span><br><span class="line">    <span class="string">&#x27;cache-data&#x27;</span>,</span><br><span class="line">    <span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">      time: +<span class="keyword">new</span> <span class="built_in">Date</span>(),</span><br><span class="line">      data: result,</span><br><span class="line">    &#125;)</span><br><span class="line">  )</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure>

<h3 id="DNS-解析"><a href="#DNS-解析" class="headerlink" title="DNS 解析"></a>DNS 解析</h3><ul>
<li>递归查询</li>
</ul>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/company-img/DNS%E8%A7%A3%E6%9E%90-%E9%80%92%E5%BD%92%E6%9F%A5%E8%AF%A2.jpg"></p>
<ul>
<li>迭代查询</li>
</ul>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/company-img/DNS%E8%A7%A3%E6%9E%90-%E8%BF%AD%E4%BB%A3%E6%9F%A5%E8%AF%A2.jpg"></p>
<p>多服务器部署</p>
<ul>
<li>弊端：增加了 DNS 解析次数</li>
<li>优势：资源合理利用、抗压能力增强、提高 HTTP 并发性【同源并发 HTTP 5~7 个】</li>
</ul>
<p>每一次 DNS 解析时间预计在 20~120 毫秒</p>
<ul>
<li>减少 DNS 请求次数</li>
<li>DNS 预获取（DNS Prefetch）</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;meta http-equiv=<span class="string">&quot;x-dns-prefetch-control&quot;</span> content=<span class="string">&quot;on&quot;</span>&gt;</span><br><span class="line">&lt;link rel=<span class="string">&quot;dns-prefetch&quot;</span> href=<span class="string">&quot;//static.360buyimg.com&quot;</span>/&gt;</span><br></pre></td></tr></table></figure>

<h3 id="TCP-三次握手"><a href="#TCP-三次握手" class="headerlink" title="TCP 三次握手"></a>TCP 三次握手</h3><ul>
<li>seq 序号，用来标识从 TCP 源端向目的端发送的字节流，发起方发送数据时对此进行标记</li>
<li>ack 确认序号，只有 ACK 标识为 1 时，确认序号字段才有效，ack=seq+1</li>
<li>标识位<ul>
<li>ACK：确认序号有效（acknowledge）</li>
<li>RST：重置连接 （reset）</li>
<li>SYN：发起一个新连接（synchronous）</li>
<li>FIN：释放一个新连接（finish）</li>
<li>seq：序号（sequence）</li>
</ul>
</li>
</ul>
<p><img data-src="https://img-blog.csdnimg.cn/20200430211404285.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4Njg5Mzk1,size_16,color_FFFFFF,t_70#pic_center" alt="三次握手"></p>
<p>TCP 三次握手通俗理解，C→S：在不在，S→C：我在你在不在，C→S：我在</p>
<p><strong>三次握手为什么不用两次或四次？</strong></p>
<ul>
<li>TCP 作为一种可靠传输控制协议，其核心思想：<strong>既要保证数据可靠传输，又要提高传输的效率</strong></li>
<li>两次握手只能保证客户端给服务器端的信息收到了，不能保证服务端给客户端的信息收到了（不够稳定）</li>
<li>四次握手就多余了，因为服务端已经知道客户端收到信息了，再给客户端发信息就没有意义了</li>
</ul>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/company-img/OSI%20TCP.png"></p>
<p>UDP(User Datagram Protocol) 连接没有三次握手机制</p>
<ol>
<li>相对于 TCP 来讲快</li>
<li>不稳定可靠</li>
</ol>
<h3 id="数据传输"><a href="#数据传输" class="headerlink" title="数据传输"></a>数据传输</h3><p>HTTP 报文</p>
<ul>
<li>请求报文</li>
<li>响应报文</li>
</ul>
<p>响应状态码</p>
<ul>
<li>200 OK：请求已成功</li>
<li>202 Accepted：服务器已接受请求，但尚未处理（异步）</li>
<li>204 No Content：服务器成功处理了请求，但不需要返回任何实体内容</li>
<li>301 Moved Permanently：永久重定向</li>
<li>302 Move Temporarily：临时重定向</li>
<li>304 Not Modified：文档内容没有改变，走协商缓存</li>
<li>400 Bad Request : 请求参数有误</li>
<li>401 Unauthorized：请求需要权限验证</li>
<li>404 Not Found：请求失败，服务器没有这个资源</li>
<li>405 Method Not Allowed：请求方法不能由于请求相应资源</li>
<li>500 Internal Server Error：服务器未知错误</li>
<li>502 Bad Gateway：网关有误</li>
<li>503 Service Unavailable：服务器维护或过载，无法处理请求</li>
</ul>
<h3 id="TCP-四次挥手"><a href="#TCP-四次挥手" class="headerlink" title="TCP 四次挥手"></a>TCP 四次挥手</h3><p>服务受到信息和标识后</p>
<ol>
<li>准备客户端需要的东西【需要时间】</li>
<li>把信息返回给客户端</li>
</ol>
<p>但是为了保证消息的及时反馈，此时需要立即告诉客户端：我收到你的东西了，我现在开始准备等我一会</p>
<p><img data-src="https://img-blog.csdnimg.cn/20200430211431423.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4Njg5Mzk1,size_16,color_FFFFFF,t_70#pic_center" alt="四次握手"></p>
<p>TCP 四次挥手通俗理解，C→S：我要走了，S→C：等下，我看看还有没有数据要传输，C→S：好了，没事了，挂了吧（已经挂了），C→S：挂了</p>
<p><strong>为什么连接的时候是三次握手，关闭的时候却是四次挥手？</strong></p>
<ul>
<li>服务端收到客户端的 SYN 连接请求，可以直接发送 SYN+ACK 报文</li>
<li>但关闭连接时，当服务器收到 FIN 报文时，很可能并不会立即关闭连接，所以只能先回复以一个 ACK 报文，告诉客户端：你发的 FIN 报文我收到了，只有等到服务端所有的报文都发送完了，才能发送 FIN 报文，因此不能一起发送，故需要四次握手</li>
</ul>
<p><strong>为了减少 TCP 握手和挥手的时间，一般都使用 <code>Connection: keep-alive</code></strong></p>
<p>数据请求：</p>
<ul>
<li>长轮询：设置定时器，每隔多久发送一次请求，拿到最新数据</li>
<li>长连接：如果数据没有更新则连接不中断（服务器挂起），监听数据改变</li>
</ul>
<h3 id="页面渲染"><a href="#页面渲染" class="headerlink" title="页面渲染"></a>页面渲染</h3><h2 id="性能优化汇总"><a href="#性能优化汇总" class="headerlink" title="性能优化汇总"></a>性能优化汇总</h2><ol>
<li><p>利用缓存</p>
<ul>
<li>对于静态资源文件实现强缓存和协商缓存（扩展：文件有更新，如何保证及时刷新？）</li>
<li>对于不经常更新的接口数据采用本地存储做数据缓存（扩展：cookie / localStorage / vuex|redux 区别？）</li>
</ul>
</li>
<li><p>DNS 优化</p>
<ul>
<li>分服务器部署，增加 HTTP 并发性（导致 DNS 解析变慢）</li>
<li>DNS Prefetch</li>
</ul>
</li>
<li><p>TCP 的三次握手和四次挥手</p>
<ul>
<li>Connection: keep-alive</li>
</ul>
</li>
<li><p>数据传输</p>
<ul>
<li><p>减少数据传输的大小</p>
<p>内容或者数据压缩（webpack 等）</p>
<p>服务器端一定要开启 GZIP 压缩（一般能压缩 60%左右）</p>
<p>大批量数据分批次请求（例如：下拉刷新或者分页，保证首次加载请求数据少）</p>
</li>
<li><p>减少 HTTP 请求的次数</p>
<p>资源文件合并处理</p>
<p>字体图标</p>
<p>雪碧图 CSS-Sprit</p>
<p>图片的 BASE64</p>
</li>
</ul>
</li>
<li><p>CDN 服务器“地域分布式“</p>
</li>
<li><p>采用 HTTP2.0</p>
</li>
</ol>
<p>网络优化是前端性能优化的中的重点内容，因为大部分的消耗都发生在网络层，尤其是第一次页面加载，如何减少等待时间很重要“减少白屏的效果和时间”</p>
<ul>
<li>loading 人性化体验</li>
<li>骨架屏：客户端骨屏 + 服务器骨架屏</li>
<li>图片延迟加载</li>
</ul>
<h2 id="HTTP1-0-VS-HTTP1-1-VS-HTTP2-0"><a href="#HTTP1-0-VS-HTTP1-1-VS-HTTP2-0" class="headerlink" title="HTTP1.0 VS HTTP1.1 VS HTTP2.0"></a>HTTP1.0 VS HTTP1.1 VS HTTP2.0</h2><h3 id="HTTP1-0-VS-HTTP1-1-区别："><a href="#HTTP1-0-VS-HTTP1-1-区别：" class="headerlink" title="HTTP1.0 VS HTTP1.1 区别："></a>HTTP1.0 VS HTTP1.1 区别：</h3><ul>
<li><strong>缓存处理：</strong>HTTP1.0 中主要使用 Last-Modified、Expires 来做缓存判断标准，HTTP1.1 则引入了更多的缓存控制策略：ETag、Cache-Control…</li>
<li><strong>带宽优化及网络连接的使用：</strong>HTTP1.1 支持断点续传，即返回码是 206（Partial Content）</li>
<li><strong>长连接：</strong>HTTP1.1 中默认开启 <code>Connection: keep-alive</code>，一定程度上弥补了 HTTP1.0 每次请求都要创建连接的缺点</li>
<li><strong>错误通知的管理：</strong>在 HTTP1.1 中新增了 24 个错误状态响应码，如 409（Conflict）表示请求的资源与资源的当前状态发生冲突；410（Gone）表示服务器上的某个资源被永久性的删除…</li>
<li><strong>Host 头处理：</strong>在 HTTP1.0 中认为每台服务器都绑定一个唯一的 IP 地址，因此，请求消息中的 URL 并没有传递主机名（hostname）。但随着虚拟主机技术的发展，在一台物理服务器上可以存在多个虚拟主机（Multi-homed Web Servers），并且它们共享一个 IP 地址。HTTP1.1 的请求消息和响应消息都应支持 Host 头域，且请求消息中如果没有 Host 头域会报告一个错误（400 Bad Request）</li>
</ul>
<h3 id="HTTP2-0-VS-HTTP1-x-的新特性："><a href="#HTTP2-0-VS-HTTP1-x-的新特性：" class="headerlink" title="HTTP2.0 VS HTTP1.x 的新特性："></a>HTTP2.0 VS HTTP1.x 的新特性：</h3><ul>
<li><p><strong>新的二进制格式（Binary Format）：</strong>HTTP1.x 的解析是基于文本，基于文本协议的格式解析存在天然缺陷，文本的表现形式有多样性，要做到健壮性考虑的场景必然很多，二进制则不同，只认 0 和 1 的组合，基于这种考虑 HTTP2.0 的协议解析决定采用二进制格式，实现方便且健壮</p>
</li>
<li><p><strong>header 压缩：</strong>HTTP1.x 的 header 带有大量信息，而且每次都要重复发送，HTTP2.0 使用 encoder 来减少需要传输的 header 大小，通讯双方各自 cache 一份 header fields 表，既避免了重复 header 的传输，又减小了需要传输的大小</p>
</li>
<li><p><strong>服务端推送（server push）：</strong>例如我的网页有一个 sytle.css 的请求，在客户端收到 sytle.css 数据的同时，服务端会将 sytle.js 的文件推送给客户端，当客户端再次尝试获取 sytle.js 时就可以直接从缓存中获取到，不用再发请求了</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">Link: <span class="tag">&lt;/<span class="name">styles.css</span>&gt;</span>; rel=preload; as=style, <span class="tag">&lt;/<span class="name">example.png</span>&gt;</span>; rel=preload; as=image</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>多路复用（MultiPlexing）</strong></p>
<p>HTTP/1.0 每次请求响应，建立一个 TCP 连接，用完关闭</p>
<p>HTTP/1.1 「长连接」 若干个请求排队串行化单线程处理，后面的请求等待前面请求的返回才能获得执行机会，一旦有某请求超时等，后续请求只能被阻塞，毫无办法，也就是人们常说的线头阻塞；</p>
<p>HTTP/2.0 「多路复用」多个请求可同时在一个连接上并行执行，某个请求任务耗时严重，不会影响到其它连接的正常执行；</p>
</li>
</ul>
]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>性能优化</tag>
        <tag>HTTP网络层</tag>
      </tags>
  </entry>
</search>
