<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>JS 不同数据类型的相互转换规则</title>
    <url>/posts/8a7b4226/</url>
    <content><![CDATA[<p><strong>对象和对象进行比较的时候：比较的是空间地址</strong>，如果空间地址相同就是 true，不同就是 false</p>
<ul>
<li><code>&#123;&#125;==&#123;&#125;(false)</code></li>
</ul>
<p>不同的数据类型再进行比较的时候，<strong>除了以下的，剩下的都是先转换为数字在比较</strong>：</p>
<ul>
<li>对象和字符串进行比较的时候，把对象转换为字符串，再进行比较</li>
<li>null 和 undefined 永远不等于任何一种数据类型，但是 <code>null==undefined(true)</code> <code>null===undefined(false)</code></li>
<li><strong>NaN 永远不等于任何一种数据类型，包括它自己</strong></li>
</ul>
<a id="more"></a>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">![] == <span class="literal">true</span>       <span class="comment">// false ![]=&gt;false转为布尔取反</span></span><br><span class="line">![] == []         <span class="comment">// true  ![]=&gt;false=&gt;Number(false)=&gt;0 Number([].toString())=&gt;0</span></span><br><span class="line">[] = <span class="literal">false</span>        <span class="comment">// true</span></span><br><span class="line">![] == <span class="literal">false</span>      <span class="comment">// true</span></span><br><span class="line"><span class="literal">NaN</span> == <span class="literal">NaN</span>        <span class="comment">// false</span></span><br><span class="line"><span class="literal">null</span> == <span class="literal">undefined</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure>



<h3 id="Number"><a href="#Number" class="headerlink" title="Number"></a>Number</h3><ul>
<li><p>字符串：</p>
</li>
<li><ul>
<li>如果是空字符穿，转换结果 0</li>
</ul>
</li>
<li><ul>
<li>如果说字符串中包含非有效数字，转换结果就是 NaN</li>
</ul>
</li>
<li><p>布尔类型</p>
</li>
<li><ul>
<li>true：转换为1</li>
</ul>
</li>
<li><ul>
<li>false：转换为0</li>
</ul>
</li>
<li><p><strong>null：转换为0</strong></p>
</li>
<li><p><strong>undefined：NaN</strong></p>
</li>
<li><p>对象：<strong>如果是引用数据类型转换数字，会隐式先调用 toString() 这个方法，然后再用 Number 转数字</strong></p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Number</span>(<span class="string">&quot;123px&quot;</span>)     <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="literal">undefined</span>)   <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="literal">false</span>)       <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="literal">true</span>)        <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="literal">null</span>)        <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="string">&quot;&quot;</span>)          <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Number</span>(&#123;<span class="attr">age</span>: <span class="number">14</span>&#125;)   <span class="comment">// NaN</span></span><br><span class="line"><span class="comment">// Number(obj) ==&gt; obj.toString() ==&gt; &quot;[object Object]&quot; ==&gt; Number(&quot;[object Object]&quot;) ==&gt; NaN</span></span><br><span class="line"><span class="built_in">Number</span>([])          <span class="comment">// 0</span></span><br><span class="line"><span class="comment">// Number([]) ==&gt; [].toString() ==&gt; &quot;&quot; ==&gt; Number(&quot;&quot;) ==&gt; 0</span></span><br></pre></td></tr></table></figure>



<h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><ul>
<li><p>数据.toString()<br><strong>null、undefined 没有 toString() 这个方法</strong>，用了会报错</p>
</li>
<li><p>String(数据)<br><code>String(null)</code> 返回结果 “null”<br><code>String(undefined)</code> 返回结果 “undefined “</p>
</li>
</ul>
<h3 id="Boolean"><a href="#Boolean" class="headerlink" title="Boolean"></a>Boolean</h3><ul>
<li><p>![值]  转换为布尔并取反</p>
</li>
<li><p>!![值]  转换为布尔</p>
</li>
</ul>
<p><strong>除了以下几种结果都是false，剩余的都是true</strong></p>
<ul>
<li>NaN</li>
<li>0</li>
<li>“”</li>
<li>null</li>
<li>undefined</li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>基础</tag>
        <tag>前端</tag>
        <tag>数据类型转换</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 变量提升</title>
    <url>/posts/ea26882a/</url>
    <content><![CDATA[<p>当浏览器开辟出供 js 执行的栈内存之后，代码并不是立即自上而下执行，而是需要先做一些事情：把当前作用域中带 var 和 function 的关键字进行提前的声明和定义（变量提升）</p>
<ul>
<li>var：只声明，未定义（不赋值）</li>
<li>function：声明和定义（赋值）一起完成</li>
</ul>
<a id="more"></a>

<h2 id="作用域中的变量提升"><a href="#作用域中的变量提升" class="headerlink" title="作用域中的变量提升"></a>作用域中的变量提升</h2><p>作用域链查找原则：首先会在当前作用域中查找，如果没有的话会沿着作用域链向上查找， 直至全局作用域</p>
<ol>
<li>在全局作用域获取不到，报错：<code> ... is not defined</code></li>
<li>如果是赋值语句，就相当于给全局作用域添加了这样一个属性名和属性值</li>
</ol>
<h3 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h3><blockquote>
<p>在全局作用域（默认会提供一个最大的 window 对象）中声明的变量</p>
</blockquote>
<ul>
<li>函数没有形参，且函数体里没有 var 声明</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">6</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">    a = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">fn();</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br></pre></td></tr></table></figure>

<p>答案：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 6</span></span><br><span class="line"><span class="comment">// 1</span></span><br></pre></td></tr></table></figure>

<h3 id="私有变量"><a href="#私有变量" class="headerlink" title="私有变量"></a>私有变量</h3><blockquote>
<p>函数执行的时候形成的作用域是私有的，保护里面的变量不受外界干扰</p>
</blockquote>
<ul>
<li><p>形参</p>
<p>函数有形参，但没有传实参，且打印在赋值之前</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">6</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">    a = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">fn();</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br></pre></td></tr></table></figure>

<p>答案：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// undefined</span></span><br><span class="line"><span class="comment">// 6</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在私有作用域中声明的变量</p>
<p>函数没有形参，函数体里有 var 声明</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">  <span class="built_in">console</span>.log(a, b);</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">12</span>,</span><br><span class="line">      b = <span class="number">12</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 变量提升 var a；a 是私有的， b是 windows 全局作用域</span></span><br><span class="line">      <span class="built_in">console</span>.log(a, b);</span><br><span class="line">      <span class="comment">// 下面语句相当于 b=13; var a=b</span></span><br><span class="line">      <span class="keyword">var</span> a = b = <span class="number">13</span>;</span><br><span class="line">      <span class="built_in">console</span>.log(a, b);</span><br><span class="line">  &#125;</span><br><span class="line">  fn();</span><br><span class="line"><span class="built_in">console</span>.log(a, b);</span><br></pre></td></tr></table></figure>

<p>答案：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// undefined undefined</span></span><br><span class="line"><span class="comment">// undefined 12</span></span><br><span class="line"><span class="comment">// 13 13</span></span><br><span class="line"><span class="comment">// 12 13</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>复合（形参 + 私有作用域中声明变量）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    私有作用域 fn(a)</span></span><br><span class="line"><span class="comment">    1.形参赋值 a=12; a是私有的</span></span><br><span class="line"><span class="comment">    2.变量提升 var b; b是私有的</span></span><br><span class="line"><span class="comment">        只有 c 是全局作用域的</span></span><br><span class="line"><span class="comment">    3.代码自上而下执行</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">12</span>,</span><br><span class="line">    b = <span class="number">13</span>,</span><br><span class="line">    c = <span class="number">14</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a, b, c);</span><br><span class="line">    <span class="keyword">var</span> b = c = a = <span class="number">20</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(a, b, c);</span><br><span class="line">&#125;</span><br><span class="line">fn(a);</span><br><span class="line"><span class="built_in">console</span>.log(a, b, c);</span><br></pre></td></tr></table></figure>

<p>答案：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 12 undefined 14</span></span><br><span class="line"><span class="comment">// 20 20 20</span></span><br><span class="line"><span class="comment">// 12 13 20</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="块级作用域"><a href="#块级作用域" class="headerlink" title="块级作用域"></a>块级作用域</h3><ul>
<li>let 声明的变量不进行变量提升不能重复声明</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">10</span>,</span><br><span class="line">    b = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">let</span> fn = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// a 变成私有变量，这个私有作用域没有 b，需要向上级查找</span></span><br><span class="line">    <span class="keyword">let</span> a = b = <span class="number">20</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(a, b);</span><br><span class="line">&#125;;</span><br><span class="line">fn();</span><br><span class="line"><span class="built_in">console</span>.log(a, b);</span><br></pre></td></tr></table></figure>

<p>答案：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 20 20</span></span><br><span class="line"><span class="comment">// 10 20</span></span><br></pre></td></tr></table></figure>

<h3 id="引用类型数据问题"><a href="#引用类型数据问题" class="headerlink" title="引用类型数据问题"></a>引用类型数据问题</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    1.变量提升：fn -&gt; 0x111(全局)；arr -&gt; 0x222(全局)</span></span><br><span class="line"><span class="comment">    2.代码自上而下执行，执行 fn(arr)</span></span><br><span class="line"><span class="comment">        1.形参赋值 arr -&gt; 0x222[12, 13]</span></span><br><span class="line"><span class="comment">        2.重新赋值 arr[0]=100 -&gt; 0x222[100, 13]</span></span><br><span class="line"><span class="comment">        3.arr=[100] -&gt; 0x333[100](函数fn中)</span></span><br><span class="line"><span class="comment">        4.arr[0]=0 -&gt; 0x333[0]</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">12</span>, <span class="number">13</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(arr);</span><br><span class="line">    arr[<span class="number">0</span>] = <span class="number">100</span>;</span><br><span class="line">    arr = [<span class="number">100</span>];</span><br><span class="line">    arr[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(arr);</span><br><span class="line">&#125;</span><br><span class="line">fn(arr);</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br></pre></td></tr></table></figure>

<p>答案：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// [12,13]</span></span><br><span class="line"><span class="comment">// [0]</span></span><br><span class="line"><span class="comment">// [100,13]</span></span><br></pre></td></tr></table></figure>



<h2 id="变量提升特殊性"><a href="#变量提升特殊性" class="headerlink" title="变量提升特殊性"></a>变量提升特殊性</h2><h3 id="判断条件"><a href="#判断条件" class="headerlink" title="判断条件"></a>判断条件</h3><blockquote>
<p><strong>不论判断条件是否成立，都会进行变量提升</strong></p>
</blockquote>
<h4 id="条件不成立"><a href="#条件不成立" class="headerlink" title="条件不成立"></a>条件不成立</h4><p>var：<strong>只声明不定义</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 不管条件是否成立，都会进行变量提升，var a</span></span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">false</span>) &#123;</span><br><span class="line">    <span class="comment">// 条件不成立，无法赋值</span></span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br></pre></td></tr></table></figure>

<p>答案：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// undefined</span></span><br><span class="line"><span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>

<p>function：</p>
<ul>
<li><p>在老版本浏览器中：声明+定义</p>
</li>
<li><p>在新版本浏览器中：<strong>只声明不定义</strong></p>
<p>可以把它理解成函数表达式 <code>var fn = function()&#123;&#125;</code> ，只声明 <code>var fn</code> </p>
<p><code>delete fn</code> 返回 false（<code>var 变量</code> 无法使用 delete 删除）</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在新版本浏览器中，判断条件中的function相当于只声明未定义，所以undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(fn);</span><br><span class="line"><span class="built_in">console</span>.log(fn());</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">false</span>) &#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;lion&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(fn);</span><br></pre></td></tr></table></figure>

<p>答案：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// undefined</span></span><br><span class="line"><span class="comment">// TypeError: fn is not a function</span></span><br></pre></td></tr></table></figure>

<h4 id="条件成立"><a href="#条件成立" class="headerlink" title="条件成立"></a>条件成立</h4><ul>
<li><strong>判断条件成立，会对执行体中的 fn 进行变量提升</strong>（声明+赋值）</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(fn);</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(fn);</span><br><span class="line">    <span class="comment">// 全局作用域没有 fn ，给 fn 进行赋值</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(fn);</span><br></pre></td></tr></table></figure>

<p>答案：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// undefined</span></span><br><span class="line"><span class="comment">// [Function: fn]</span></span><br><span class="line"><span class="comment">// [Function: fn]</span></span><br></pre></td></tr></table></figure>

<h4 id="特殊情况"><a href="#特殊情况" class="headerlink" title="特殊情况"></a>特殊情况</h4><ul>
<li><p><strong>判断条件成立，如果有 function 定义的变量，在这个 function 函数后面更改变量的值，更改的都是私有变量</strong></p>
<p>可以把<code>if()&#123;&#125; 的 </code> <code>&#123; &#125;</code> 理解成块级作用域（特例： function(){} 的 <code>&#123; &#125;</code>是私有作用域）</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a);  <span class="comment">// [Function: a]</span></span><br><span class="line">    a = <span class="number">5</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">    a = <span class="number">7</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(a);  <span class="comment">// 7</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a);  <span class="comment">// 5</span></span><br></pre></td></tr></table></figure>

<h3 id="自执行函数"><a href="#自执行函数" class="headerlink" title="自执行函数"></a>自执行函数</h3><ul>
<li><strong>自执行函数在当前作用域下不进行变量提升</strong></li>
</ul>
<p>新版浏览器：</p>
<blockquote>
<ol>
<li>在全局作用域中，没有变量提升</li>
<li>代码自上而下执行，<code>window.f = function()&#123;&#125;</code> 和 <code>window.g = function()&#123;&#125;</code></li>
<li>进入自执行函数，走到 if 语句中，函数 g 声明提升，此时 g 只声明未定义，相当于 undefined，所以 g() 会报类型错误</li>
</ol>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">f = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br><span class="line">g = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br><span class="line">~(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (g() &amp;&amp; [] == ![]) &#123;</span><br><span class="line">        f = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">g</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="built_in">console</span>.log(f());</span><br><span class="line"><span class="built_in">console</span>.log(g());</span><br></pre></td></tr></table></figure>

<p>答案：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// TypeError: g is not a function</span></span><br></pre></td></tr></table></figure>

<p>老版浏览器：</p>
<blockquote>
<ol>
<li><p>在全局作用域中，没有变量提升</p>
</li>
<li><p>代码自上而下执行，<code>window.f = function()&#123;&#125;</code> 和 <code>window.g = function()&#123;&#125;</code></p>
</li>
<li><p>进入自执行函数，走到 if 语句中，函数 g 声明提升并定义，</p>
<p>g() 为 true，参考下图优先级顺序， <code>==</code> 优先级高于 <code>&amp;&amp;</code> </p>
<p><code>g() &amp;&amp; [] ==  ![]</code> ，![] 转换为 false，再转换为0；[] 转换为 0；<code>[] == ![]</code> 返回 true</p>
<p><code>true &amp;&amp; true</code> 返回 true，进入循环</p>
</li>
<li><p>f 进行重新赋值，f 指向 <code>function()&#123;return false&#125;</code>，g 已经声明，不会再重复声明， g没有被修改</p>
</li>
<li><p>答案：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// false</span></span><br><span class="line"><span class="comment">// false</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
</blockquote>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/js-img/JavaScript%E8%BF%90%E7%AE%97%E7%AC%A6%E4%BC%98%E5%85%88%E7%BA%A7.jpg" alt="JavaScript运算符优先级"></p>
<h3 id="赋值运算"><a href="#赋值运算" class="headerlink" title="赋值运算"></a>赋值运算</h3><ul>
<li><strong>只对等号左边进行变量提升</strong>（函数表达式）</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(fn);</span><br><span class="line"><span class="built_in">console</span>.log(fn(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line"><span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span> (<span class="params">n, m</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> n + m;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(fn(<span class="number">3</span>, <span class="number">4</span>));</span><br></pre></td></tr></table></figure>

<p>答案：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// undefined</span></span><br><span class="line"><span class="comment">// TypeError: fn is not a function</span></span><br></pre></td></tr></table></figure>

<h3 id="return-语句"><a href="#return-语句" class="headerlink" title="return 语句"></a>return 语句</h3><ul>
<li>return 下面的代码虽然不能执行，但是可以进行变量提升（f2 进行变量提升）</li>
<li>return 后面的代码不能进行变量提升（f1 不进行变量提升）</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(f2);</span><br><span class="line">    <span class="built_in">console</span>.log(f1);</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;bird&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">fn();</span><br></pre></td></tr></table></figure>

<p>答案：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// [Function: f2]</span></span><br><span class="line"><span class="comment">// ReferenceError: f1 is not defined</span></span><br></pre></td></tr></table></figure>

<h3 id="重复变量名"><a href="#重复变量名" class="headerlink" title="重复变量名"></a>重复变量名</h3><ul>
<li>var 不会进行重复声明，但会重新赋值</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">var</span> num = <span class="number">5</span>;</span><br><span class="line"><span class="built_in">console</span>.log(num); <span class="comment">// 5</span></span><br></pre></td></tr></table></figure>

<ul>
<li>function 在变量提升阶段 声明和定义是一同完成的，如果遇到重复声明定义的，会重新进行赋值</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1.变量提升：</span></span><br><span class="line"><span class="comment">    function fn = 0x111</span></span><br><span class="line"><span class="comment">                = 0x222</span></span><br><span class="line"><span class="comment">                = 0x333</span></span><br><span class="line"><span class="comment">                = 0x444</span></span><br><span class="line"><span class="comment">2.代码从上到下执行</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">fn();</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line">fn();</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">3</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// fn=100 给fn重新赋值</span></span><br><span class="line">fn = <span class="number">100</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">4</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// function 声明和定义早已完成， 100()则会报错</span></span><br><span class="line">fn();</span><br></pre></td></tr></table></figure>

<p>答案：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 4</span></span><br><span class="line"><span class="comment">// 4</span></span><br><span class="line"><span class="comment">// TypeError: fn is not a function</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>前端</tag>
        <tag>作用域</tag>
        <tag>变量提升特殊性</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 垃圾回收与性能优化</title>
    <url>/posts/3344fd09/</url>
    <content><![CDATA[<p>JavaScript 通过自动内存管理实现内存分配和闲置资源回收，基本思路：确定哪个变量不会再使用，然后释放它占用的内存。这个过程是周期性的，即垃圾回收程序每隔一定时间就会自动运行。但是某块内是否还有用，属于“不可判断的”问题，意味着靠算法是解决不了的</p>
<a id="more"></a>

<h2 id="垃圾回收方法"><a href="#垃圾回收方法" class="headerlink" title="垃圾回收方法"></a>垃圾回收方法</h2><h3 id="标记清理"><a href="#标记清理" class="headerlink" title="标记清理"></a>标记清理</h3><p>JavaScript 最常用的垃圾回收策略是标记清理（mark-and-sweep）。当变量进入环境时就将其标记为<code>进入环境</code>，当变量离开环境时将其标记为<code>离开环境</code>。随后每隔一段时间就会检测一下当前作用域中的内存，是否被占用，如果没有被占用，在空闲的时候就将其释放掉</p>
<h3 id="引用计数"><a href="#引用计数" class="headerlink" title="引用计数"></a>引用计数</h3><p>思路是对每个值都记录它被引用的次数。当一个空间地址被占用一次，引用数 +1，如果不占用，就引用数 -1。当一个值引用数为 0时，说明已经没有被占用了，在空闲的时候就将其释放掉</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">problem</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> o1 = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">    <span class="keyword">let</span> o2 = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">    o1.A = o2;</span><br><span class="line">    o2.B = o1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>o1 和 o2 相互引用，意味着它们引用数都是 2，当函数结束后, o1 和 o2 还会存在，如果函数调用多次，会导致大量内存永远不被释放</p>
<h3 id="手动进行内存释放"><a href="#手动进行内存释放" class="headerlink" title="手动进行内存释放"></a>手动进行内存释放</h3><p>在IE8及以前的IE版本中，并非所有对象都是原生 JavaScript 对象，BOM 和 DOM 中的对象是 C++ 实现的组件对象模型（COM），而 COM 对象使用引用计数实现垃圾回收</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> el = <span class="built_in">document</span>.getElementById(<span class="string">&quot;div&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">o.el = el;</span><br><span class="line">el.obj = o;</span><br></pre></td></tr></table></figure>

<p>由于存在循环引用，因此 DOM 元素内存永远不会被回收，需要将变量设置为 null （解除引用），切断变量与其引用值之间的关系</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">o.el = <span class="literal">null</span>;</span><br><span class="line">el.obj = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure>

<p>IE9 把 BOM 和 DOM 对象都改成了 JavaScript 对象，也避免了存在两套垃圾回收算法而导致的问题</p>
<h2 id="提升性能"><a href="#提升性能" class="headerlink" title="提升性能"></a>提升性能</h2><h3 id="const-和-let-提升性能"><a href="#const-和-let-提升性能" class="headerlink" title="const 和 let 提升性能"></a>const 和 let 提升性能</h3><p>let 和 const 都以块（而非函数）为作用域，使用这两个关键字能更早让垃圾回收程序介入</p>
<h3 id="隐藏类和删除操作"><a href="#隐藏类和删除操作" class="headerlink" title="隐藏类和删除操作"></a>隐藏类和删除操作</h3><p>避免“先创建再补充” 式的动态属性赋值。在构造函数中一次声明所有属性。这样，两个实例基本就一样了，因此可以共享一个隐藏类，从而带来潜在的性能提升</p>
<ul>
<li>动态删除属性与动态添加属性导致后果一样，最好的方法时把不想要的属性设置为 null，这样可以保持隐藏类不变和继续共享，同时也能达到删除引用值提供垃圾回收的效果</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.age = <span class="number">12</span>;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> a1 = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="keyword">let</span> a2 = <span class="keyword">new</span> Person(<span class="string">&quot;lion&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 尽量不要这么做</span></span><br><span class="line"><span class="comment">// 此时 Person 实例就会有两个不同的隐藏类，根据操作频率和隐藏类的大小，可能对性能产生影响</span></span><br><span class="line">a2.name = <span class="string">&quot;lion&quot;</span></span><br><span class="line"><span class="comment">// 尽量不要这么做</span></span><br><span class="line"><span class="keyword">delete</span> a1.age;</span><br></pre></td></tr></table></figure>

<h3 id="避免内存泄露"><a href="#避免内存泄露" class="headerlink" title="避免内存泄露"></a>避免内存泄露</h3><p><strong>情况1：</strong></p>
<p>意外声明全局变量是最常见的内存泄露，解释器会把变量 name 当做 window 的属性来创建。在 window 对象上创建的属性，只要 window 本身不被清理就不会消失</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">say</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    name = <span class="string">&quot;lion&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在全局作用域声明 arr（fn() 里没传形参arr；在函数里没有声明 arr），arr 在全局作用域中赋值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">&#125;</span><br><span class="line">fn();</span><br></pre></td></tr></table></figure>

<p><strong>情况2：</strong></p>
<p>定时器也导致内存泄露，只要定时器一直运行，回调函数中引用的 name 就会一直占用内存</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">&quot;lion&quot;</span>;</span><br><span class="line"><span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(name);</span><br><span class="line">&#125;, <span class="number">100</span>);</span><br></pre></td></tr></table></figure>

<p><strong>情况3：</strong></p>
<p>调用 out() 会导致分配给 name 的内存被泄露，执行的时候创建一个内部闭包，只要返回的函数存在就不能清理 name，因为闭包一直在引用着它</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> out = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> name = <span class="string">&quot;lion&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>解除变量的引用不仅可以减少消除循环引用，而且对垃圾回收也有帮助。为促进内存回收，全局对象、全局对象的属性和循环引用都应该在不需要时解除引用</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>前端</tag>
        <tag>垃圾回收</tag>
        <tag>性能优化</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 实现奇偶行变色</title>
    <url>/posts/97acee74/</url>
    <content><![CDATA[<h1 id="JS实现奇偶行变色，鼠标滑上改变颜色，离开恢复颜色"><a href="#JS实现奇偶行变色，鼠标滑上改变颜色，离开恢复颜色" class="headerlink" title="JS实现奇偶行变色，鼠标滑上改变颜色，离开恢复颜色"></a>JS实现奇偶行变色，鼠标滑上改变颜色，离开恢复颜色</h1><blockquote>
<p>css 奇偶行变色是通过 <code>li:nth(odd)</code> 和 <code>li:nth(even)</code> 实现的，鼠标滑上改变颜色，离开恢复颜色是通过 <code>:hover</code> 实现的</p>
</blockquote>
<a id="more"></a>

<ul>
<li>首先搭一下基本结构</li>
</ul>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/js-img/%E9%9A%94%E8%A1%8C%E5%8F%98%E8%89%B2-%E5%9F%BA%E6%9C%AC%E6%A0%B7%E5%BC%8F.jpg" alt="隔行变色-基本样式"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;main&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span>走在前方不迷路，迷路就去找麋鹿<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span>走在前方不迷路，迷路就去找麋鹿<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span>走在前方不迷路，迷路就去找麋鹿<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span>走在前方不迷路，迷路就去找麋鹿<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> main = <span class="built_in">document</span>.getElementById(<span class="string">&quot;main&quot;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> lst = main.getElementsByTagName(<span class="string">&quot;li&quot;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; lst.length; i++) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> el = lst[i];</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="javascript">            el.style.background = <span class="string">&quot;lightblue&quot;</span>;</span></span><br><span class="line"><span class="javascript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">            el.style.background = <span class="string">&quot;lightgreen&quot;</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="错误示范"><a href="#错误示范" class="headerlink" title="错误示范"></a>错误示范</h2><ul>
<li><p>在 for 循环里添加如下代码（添加在尾部）</p>
<p>这里希望 <code>oldColor</code> 保存每一个 li 鼠标滑上之前的颜色</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> oldColor = el.style.background;</span><br><span class="line">el.onmouseover = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 鼠标滑上变色</span></span><br><span class="line">    <span class="built_in">this</span>.style.background = <span class="string">&quot;green&quot;</span>;</span><br><span class="line">&#125;;</span><br><span class="line">el.onmouseout = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 鼠标离开之后恢复原色</span></span><br><span class="line">    <span class="built_in">this</span>.style.background = oldColor;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li>测试一下效果，发现出现如下问题：鼠标滑过，所有 li 都变成最后一行 li 的颜色</li>
</ul>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/js-img/%E9%9A%94%E8%A1%8C%E5%8F%98%E8%89%B2-%E5%87%BA%E7%8E%B0%E9%97%AE%E9%A2%98.gif" alt="隔行变色-出现问题"></p>
<ul>
<li><p>剖析一下问题所在</p>
<p><strong>首先 for 循环会先执行一遍，并给每一个 li 添加鼠标滑上和离开事件，当鼠标滑上或离开时，此时 for 循环已经结束，此时调用的是每一个 li 已经添加上的事件</strong>。循环结束后 oldColor 已经变成最后一个 li 的颜色，所以触发离开事件更改的颜色永远是最后一个 li 的颜色，因此会出现如上问题</p>
</li>
</ul>
<h2 id="问题示范"><a href="#问题示范" class="headerlink" title="问题示范"></a>问题示范</h2><ul>
<li>与上面的问题，区别只在于奇偶行在赋值颜色时，是通过类添加的</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">	<span class="selector-class">.color1</span> &#123;</span></span><br><span class="line">        background: lightblue;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.color2</span> &#123;</span></span><br><span class="line">        background: lightgreen;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> main = <span class="built_in">document</span>.getElementById(<span class="string">&quot;main&quot;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> lst = main.getElementsByTagName(<span class="string">&quot;li&quot;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; lst.length; i++) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="javascript">            lst[i].style.background = <span class="string">&quot;lightblue&quot;</span>;</span></span><br><span class="line"><span class="javascript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">            lst[i].style.background = <span class="string">&quot;lightgreen&quot;</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>在 for 循环里添加如下代码（添加在尾部），发现这个效果是正常的</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> oldColor = lst[i].style.background;</span><br><span class="line">lst[i].onmouseover = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.style.background = <span class="string">&quot;green&quot;</span>;</span><br><span class="line">&#125;;</span><br><span class="line">lst[i].onmouseout = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.style.background = oldColor;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><img data-src="https://gitee.com/lilyn/pic/raw/master/js-img/%E9%9A%94%E8%A1%8C%E5%8F%98%E8%89%B2-%E6%AD%A3%E7%A1%AE%E6%98%BE%E7%A4%BA.gif" alt="隔行变色-正确显示"></p>
<ul>
<li><p>但是有一些问题</p>
<p><code>var oldColor = el.style.background</code> 这个只能获取行内样式</p>
<p>但是如上代码是<strong>通过添加类的方法去设置 li 的颜色，使用 style 属性没办法获取，所以 oldColor 实际存储的是一个空字符串</strong>。因此，鼠标滑上实际上是给 li 添加行内式代码，鼠标离开后，把行内代码变为 “” 去掉，就相当于没添加效果，此时采用的是内嵌样式（也是就通过类名添加的样式）</p>
</li>
</ul>
<h2 id="正确方法"><a href="#正确方法" class="headerlink" title="正确方法"></a>正确方法</h2><h3 id="方法一：给-this-添加新属性"><a href="#方法一：给-this-添加新属性" class="headerlink" title="方法一：给 this 添加新属性"></a>方法一：给 this 添加新属性</h3><p>给每个 li 上添加一个 bgColor 属性，鼠标离开时，只需访问这个 bgColor 查到值，恢复原有颜色即可</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 鼠标滑上li的时候，改变那个li的背景颜色</span></span><br><span class="line">lst[i].onmouseover = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 把原有的颜色绑定上去</span></span><br><span class="line">    <span class="built_in">this</span>.bgColor = <span class="built_in">this</span>.style.backgroundColor;</span><br><span class="line">    <span class="built_in">this</span>.style.background = <span class="string">&quot;green&quot;</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 鼠标离开的时候，恢复原有的颜色</span></span><br><span class="line">lst[i].onmouseout = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.style.background = <span class="built_in">this</span>.bgColor;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="方法二：闭包"><a href="#方法二：闭包" class="headerlink" title="方法二：闭包"></a>方法二：闭包</h3><p>手动添加一层作用域（用闭包形式），里面把鼠标事件赋值给 li 标签，被占用形成不销毁的作用域，x 是私有变量（形参），之后把私有变量 oldColor 存到闭包作用域中，当鼠标事件发生在 li 标签时，就会找到闭包作用域中的私有变量 oldColor</p>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/js-img/%E9%97%AD%E5%8C%85-%E9%9A%94%E8%A1%8C%E5%8F%98%E8%89%B2lst%5B1%5D.jpg" alt="闭包-隔行变色lst[1]"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> oldColor = lst[x].style.background;</span><br><span class="line">    lst[x].onmouseover = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.style.background = <span class="string">&quot;green&quot;</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    lst[x].onmouseout = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.style.background = oldColor;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;)(i);</span><br></pre></td></tr></table></figure>

<h3 id="方法三：let"><a href="#方法三：let" class="headerlink" title="方法三：let"></a>方法三：let</h3><ul>
<li>其实跟方法二是一样的，原理在剖析处</li>
</ul>
<p>在 for 循环里添加如下代码（添加在尾部），这里只需把 oldColor 前面的 var 改成 let 即可</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> oldColor = lst[i].style.background;</span><br><span class="line">lst[i].onmouseover = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.style.background = <span class="string">&quot;green&quot;</span>;</span><br><span class="line">&#125;;</span><br><span class="line">lst[i].onmouseout = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.style.background = oldColor;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>接下来<strong>剖析</strong>一下这个为什么会成功</p>
<p>在 for 循环中，<strong>变量 oldColor 是用 var 声明的，在全局范围都有效，所以全局只有一个变量 oldColor。每一次循环，变量 oldColor 的值都发生改变</strong>。也就是说，所有 li 的鼠标离开事件绑定的颜色都是最后一个 li 的颜色。我们可以小试验验证一下</p>
<p>方法：在 for 循环外面添加 <code>oldColor = &quot;red&quot;</code> ，发现鼠标离开后所有 li 都变成红色，证明每一次循环 oldColor 被改变后，前面几次循环， li 离开事件绑定的颜色也都发生了改变</p>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/js-img/%E9%9A%94%E8%A1%8C%E5%8F%98%E8%89%B2-%E5%B0%8F%E8%AF%95%E9%AA%8C.gif" alt="隔行变色-小试验"></p>
</li>
</ul>
<p>  而 <strong>let 声明的 oldColor 只在本轮循环中有效，所以每一次循环的 oldColor 其实都是一个新的变量</strong>，因此所有 li 的鼠标离开事件绑定的颜色都是当前 li 的颜色，所以效果会成功</p>
<p>  可以去 <a href="babeljs.cn/repl">babel</a> 网站，看一下 let 都做了什么</p>
<p>  <img data-src="https://gitee.com/lilyn/pic/raw/master/js-img/%E9%97%AD%E5%8C%85-%E9%9A%94%E8%A1%8C%E5%8F%98%E8%89%B2let.png" alt="闭包-隔行变色let"></p>
<hr>

<h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">            * &#123;</span><br><span class="line">                margin: 0;</span><br><span class="line">                padding: 0;</span><br><span class="line">            &#125;</span><br><span class="line">            body &#123;</span><br><span class="line">                background: darkturquoise;</span><br><span class="line">            &#125;</span><br><span class="line">            ul &#123;</span><br><span class="line">                list-style: none;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="css">            <span class="selector-id">#main</span> &#123;</span></span><br><span class="line">                width: 500px;</span><br><span class="line">                margin: auto;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="css">            <span class="selector-id">#main</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line">                height: 50px;</span><br><span class="line">                line-height: 50px;</span><br><span class="line">                text-align: center;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;main&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>走在前方不迷路，迷路就去找麋鹿<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>走在前方不迷路，迷路就去找麋鹿<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>走在前方不迷路，迷路就去找麋鹿<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>走在前方不迷路，迷路就去找麋鹿<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> main = <span class="built_in">document</span>.getElementById(<span class="string">&quot;main&quot;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> lst = main.getElementsByTagName(<span class="string">&quot;li&quot;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; lst.length; i++) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> el = lst[i];</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="javascript">            el.style.background = <span class="string">&quot;lightblue&quot;</span>;</span></span><br><span class="line"><span class="javascript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">            el.style.background = <span class="string">&quot;lightgreen&quot;</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> oldColor = el.style.background;</span></span><br><span class="line"><span class="javascript">        el.onmouseover = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.bgColor = <span class="built_in">this</span>.style.backgroundColor;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.style.background = <span class="string">&quot;green&quot;</span>;</span></span><br><span class="line">        &#125;;</span><br><span class="line"><span class="javascript">        el.onmouseout = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.style.background = <span class="built_in">this</span>.bgColor;</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img data-src="https://gitee.com/lilyn/pic/raw/master/js-img/%E9%9A%94%E8%A1%8C%E5%8F%98%E8%89%B2-%E6%AD%A3%E7%A1%AE%E6%98%BE%E7%A4%BA.gif" alt="隔行变色-正确显示"></p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>前端</tag>
        <tag>问题</tag>
        <tag>闭包</tag>
        <tag>this</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 数组去重的四种方法</title>
    <url>/posts/908d091d/</url>
    <content><![CDATA[<h3 id="方法一：双-for-循环"><a href="#方法一：双-for-循环" class="headerlink" title="方法一：双 for 循环"></a>方法一：双 for 循环</h3><ul>
<li>原理：依次拿出数组中的每一项，和它后面的所有剩余项进行比较，如果有相同的就删除</li>
<li>NaN 与任何值都不相等，包括 NaN 本身</li>
<li><code>null==undefined(true)</code> </li>
<li>对象和对象比较的是空间地址：<code>&#123;&#125;==&#123;&#125;(false)</code></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, &#123;&#125;, &#123;&#125;, <span class="literal">NaN</span>, <span class="literal">NaN</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">undefined</span>, <span class="literal">undefined</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique1</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> el1 = arr[i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = i + <span class="number">1</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line">            <span class="keyword">var</span> el2 = arr[j];</span><br><span class="line">            <span class="keyword">if</span> (el1 == el2) &#123;</span><br><span class="line">                arr.splice(j, <span class="number">1</span>);</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(unique1(arr)); <span class="comment">// [ 1, 2, &#123;&#125;, &#123;&#125;, NaN, null]</span></span><br></pre></td></tr></table></figure>

<h3 id="方法二：借用对象属性不能相同特点去重"><a href="#方法二：借用对象属性不能相同特点去重" class="headerlink" title="方法二：借用对象属性不能相同特点去重"></a>方法二：借用对象属性不能相同特点去重</h3><ul>
<li>原理：创建一个空对象，去遍历数组中的每一项，把数组中的每项当成属性名和属性值，给此对象添加，在添加的过程中，如果此对象已经有此项，说明重复，在数组中删除此项</li>
<li>访问对象的属性如果属性不存在返回 undefined，<code>obj[null]</code> 返回 undefined</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, &#123;&#125;, &#123;&#125;, <span class="literal">NaN</span>, <span class="literal">NaN</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">undefined</span>, <span class="literal">undefined</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique2</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> el = arr[i];</span><br><span class="line">        <span class="comment">// typeof (obj[el]) != &quot;undefined&quot;</span></span><br><span class="line">        <span class="keyword">if</span> (obj[el] == el) &#123;</span><br><span class="line">            arr.splice(i, <span class="number">1</span>);</span><br><span class="line">            i--;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        obj[el] = el;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(unique2(arr)); <span class="comment">// [ 1, 2, &#123;&#125;, &#123;&#125;, NaN, NaN ]</span></span><br></pre></td></tr></table></figure>

<h3 id="方法三：新建数组去存储不同值"><a href="#方法三：新建数组去存储不同值" class="headerlink" title="方法三：新建数组去存储不同值"></a>方法三：新建数组去存储不同值</h3><ul>
<li>原理：创建一个新数组，去遍历数组中的每一项，如果新数组没有这个（利用 indexOf） push 进新数组</li>
<li>indexOf 比较参数与数组中的每一项时，会使用全等操作符（===）</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, &#123;&#125;, &#123;&#125;, <span class="literal">NaN</span>, <span class="literal">NaN</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">undefined</span>, <span class="literal">undefined</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique3</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> newArr = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> el = arr[i];</span><br><span class="line">        <span class="comment">// newArr.indexOf(el) &lt; 0 说明没有</span></span><br><span class="line">        <span class="keyword">if</span> (newArr.indexOf(el) == -<span class="number">1</span>) &#123;</span><br><span class="line">            newArr.push(el);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newArr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(unique3(arr)); <span class="comment">// [ 1, 2, &#123;&#125;, &#123;&#125;, NaN, NaN, null, undefined ]</span></span><br></pre></td></tr></table></figure>

<ul>
<li>原理：与上面那个同理</li>
<li>includes 可以去重 NaN</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, &#123;&#125;, &#123;&#125;, <span class="literal">NaN</span>, <span class="literal">NaN</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">undefined</span>, <span class="literal">undefined</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique4</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> newArr = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> el = arr[i];</span><br><span class="line">        <span class="keyword">if</span> (!newArr.includes(el)) &#123;</span><br><span class="line">            newArr.push(el);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newArr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(unique4(arr)); <span class="comment">// [ 1, 2, &#123;&#125;, &#123;&#125;, NaN, null, undefined ]</span></span><br></pre></td></tr></table></figure>

<p><strong>includes 与 indexOf 的区别</strong></p>
<ul>
<li>如果数组里只有 NaN，利用 indexOf 是无法判断的，必须使用 includes 方法</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="literal">NaN</span>]</span><br><span class="line">arr.indexOf(<span class="literal">NaN</span>)   <span class="comment">// -1</span></span><br><span class="line">arr.includes(<span class="literal">NaN</span>)  <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr1 = [<span class="literal">undefined</span>]</span><br><span class="line">arr1.indexOf(<span class="literal">undefined</span>)  <span class="comment">// 0</span></span><br><span class="line">arr1.includes(<span class="literal">undefined</span>) <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr2 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1</span>)</span><br><span class="line">arr2.indexOf(<span class="literal">undefined</span>)  <span class="comment">// -1</span></span><br><span class="line">arr2.includes(<span class="literal">undefined</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h3 id="方法四：ES6-Set去重"><a href="#方法四：ES6-Set去重" class="headerlink" title="方法四：ES6 Set去重"></a>方法四：ES6 Set去重</h3><ul>
<li>这种方法无法去掉 “{}” 空对象</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, &#123;&#125;, &#123;&#125;, <span class="literal">NaN</span>, <span class="literal">NaN</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">undefined</span>, <span class="literal">undefined</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique5</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Array</span>.from(<span class="keyword">new</span> <span class="built_in">Set</span>(arr));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(unique5(arr)); <span class="comment">// [ 1, 2, &#123;&#125;, &#123;&#125;, NaN, null, undefined ]</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>基础</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>Swiper使用案例</title>
    <url>/posts/47fd9c19/</url>
    <content><![CDATA[<p>官网链接：<a href="https://www.swiper.com.cn/">https://www.swiper.com.cn/</a></p>
<p>文档链接：<a href="https://www.swiper.com.cn/usage/index.html">Swiper使用方法</a> 、<a href="https://www.swiper.com.cn/api/index.html">Swiper的API文档</a></p>
<a id="more"></a>

<h3 id="引用Swiper"><a href="#引用Swiper" class="headerlink" title="引用Swiper"></a>引用Swiper</h3><p><a href="https://www.swiper.com.cn/download/index.html">下载 swiper</a> 或 <a href="https://www.swiper.com.cn/cdn/index.html">使用CDN</a></p>
<p>下面演示的案例使用的是 swiper4.3.3</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./swiper/css/swiper.css&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./swiper/js/swiper.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- swiper6 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://unpkg.com/swiper/swiper-bundle.min.css&quot;</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/swiper/swiper-bundle.min.js&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- swiper4.3.3 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/Swiper/4.3.3/css/swiper.min.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/Swiper/4.3.3/js/swiper.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>几点说明：</p>
<ul>
<li><p>为了让CSS代码层级关系更加明显，下面代码案例使用的是 Less</p>
</li>
<li><p>如果想清除浏览器默认效果，可以使用 <a href="https://sourl.cn/MiNzfr">CSS Tools: Reset CSS</a></p>
<p>但是这个可能并不太好，可以参考 <a href="http://www.zhangxinxu.com/wordpress/?p=758">CSS reset的重新审视 – 避免样式重置</a></p>
</li>
</ul>
<h3 id="轮播图"><a href="#轮播图" class="headerlink" title="轮播图"></a>轮播图</h3><ul>
<li><p><a href="https://sourl.cn/qSAcHh">图片下载链接（觅元素）</a></p>
</li>
<li><p>HTML 代码</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-banner&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-wrapper&quot;</span> <span class="attr">id</span>=<span class="string">&quot;swiper-1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-slide&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/1.jpg&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-slide&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/2.jpg&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-slide&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/3.jpg&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>Less 代码</li>
</ul>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@imgBannerWidth:</span> <span class="number">1920px</span>;</span><br><span class="line"><span class="variable">@imgBannerHeight:</span> <span class="number">600px</span>;</span><br><span class="line"><span class="selector-class">.img-banner</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="variable">@imgBannerWidth</span> / <span class="number">2</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="variable">@imgBannerHeight</span> / <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.swiper-banner</span> &#123;</span><br><span class="line">    <span class="selector-tag">&amp;</span><span class="selector-pseudo">:extend(.img-banner)</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="selector-id">#swiper-1</span> &#123;</span><br><span class="line">        <span class="selector-tag">img</span> &#123;</span><br><span class="line">            <span class="selector-tag">&amp;</span><span class="selector-pseudo">:extend(.img-banner)</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>JS 代码</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//初始化一个Swiper</span></span><br><span class="line"><span class="keyword">new</span> Swiper(<span class="string">&quot;.swiper-banner&quot;</span>, &#123;</span><br><span class="line">    speed: <span class="number">600</span>, <span class="comment">//切换速度</span></span><br><span class="line">    loop: <span class="literal">true</span>, <span class="comment">//循环模式</span></span><br><span class="line">    effect: <span class="string">&quot;cube&quot;</span>, <span class="comment">//切换效果：方块</span></span><br><span class="line">    autoplay: &#123;</span><br><span class="line">        delay: <span class="number">1000</span>, <span class="comment">//自动播放</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li>效果如下：</li>
</ul>
<p><img data-src="https://img-blog.csdnimg.cn/20200826152012303.gif#pic_center" alt="效果1"></p>
<h3 id="横屏滑动"><a href="#横屏滑动" class="headerlink" title="横屏滑动"></a>横屏滑动</h3><ul>
<li><p><a href="https://sourl.cn/L8Vem4">图片下载链接（iconfont）</a></p>
</li>
<li><p>HTML 代码</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-nav&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-wrapper&quot;</span> <span class="attr">id</span>=<span class="string">&quot;swiper-2&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-slide&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./img/凯旋门.png&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>凯旋门<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-slide&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./img/古罗马斗兽场.png&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>古罗马斗兽场<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-slide&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./img/大本钟.png&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>大本钟<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-slide&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./img/天坛.png&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>天坛<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-slide&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./img/巴黎圣母院.png&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>巴黎圣母院<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-slide&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./img/悉尼歌剧院.png&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>悉尼歌剧院<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-slide&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./img/比萨斜塔.png&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>比萨斜塔<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-slide&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./img/泰姬陵.png&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>泰姬陵<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>Less 代码</li>
</ul>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.flex-center</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.swiper-nav</span> &#123;</span><br><span class="line">    <span class="selector-id">#swiper-2</span> &#123;</span><br><span class="line">        <span class="selector-class">.swiper-slide</span> &#123;</span><br><span class="line">            <span class="selector-tag">&amp;</span><span class="selector-pseudo">:extend(.flex-center)</span>;</span><br><span class="line">            <span class="attribute">flex-direction</span>: column;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-tag">p</span> &#123;</span><br><span class="line">            <span class="attribute">text-align</span>: center;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>JS 代码</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Swiper(<span class="string">&quot;.swiper-nav&quot;</span>, &#123;</span><br><span class="line">	slidesPerView: <span class="number">4</span>, <span class="comment">//设置slider容器能够同时显示的slides数量</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li>效果如下：</li>
</ul>
<p><img data-src="https://img-blog.csdnimg.cn/20200826153547747.gif#pic_center" alt="效果2"></p>
<h3 id="数字下标（两种形式）"><a href="#数字下标（两种形式）" class="headerlink" title="数字下标（两种形式）"></a>数字下标（两种形式）</h3><ul>
<li>HTML 代码</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-img&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-wrapper&quot;</span> <span class="attr">id</span>=<span class="string">&quot;swiper-3&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-slide&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./img/凯旋门.png&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-slide&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./img/泰姬陵.png&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-slide&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./img/大本钟.png&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-slide&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./img/天坛.png&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 分页器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-pagination&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-img-click&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-wrapper&quot;</span> <span class="attr">id</span>=<span class="string">&quot;swiper-3&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-slide&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./img/凯旋门.png&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-slide&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./img/泰姬陵.png&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-slide&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./img/大本钟.png&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-slide&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./img/天坛.png&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 分页器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-pagination&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>Less 代码</li>
</ul>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@bgColorHover:</span> <span class="number">#ff2832</span>;</span><br><span class="line"><span class="variable">@bgColor:</span> <span class="number">#646464</span>;</span><br><span class="line"><span class="variable">@bgColorFont:</span> <span class="number">#fff</span>;</span><br><span class="line"><span class="variable">@imgIconWidth:</span> <span class="number">200px</span>;</span><br><span class="line"><span class="variable">@imgIconHeight:</span> <span class="number">200px</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.img-icon</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="variable">@imgIconWidth</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="variable">@imgIconHeight</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.swiper-img</span>,</span><br><span class="line"><span class="selector-class">.swiper-img-click</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="variable">@imgIconWidth</span> + <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="variable">@imgIconHeight</span> + <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">background</span>: lighten(<span class="variable">@bgColor</span>, <span class="number">40%</span>);</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="selector-id">#swiper-3</span> &#123;</span><br><span class="line">        <span class="selector-class">.swiper-slide</span> &#123;</span><br><span class="line">            <span class="selector-tag">&amp;</span><span class="selector-pseudo">:extend(.flex-center)</span>;</span><br><span class="line">            <span class="selector-tag">&amp;</span><span class="selector-pseudo">:extend(.img-icon)</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.swiper-pagination</span> &#123;</span><br><span class="line">        <span class="attribute">position</span>: relative;</span><br><span class="line">        <span class="attribute">bottom</span>: <span class="number">40px</span>;</span><br><span class="line">        <span class="selector-class">.swiper-pagination-bullet</span> &#123;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">20px</span>;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">20px</span>;</span><br><span class="line">            <span class="attribute">line-height</span>: <span class="number">20px</span>;</span><br><span class="line">            <span class="attribute">color</span>: <span class="variable">@bgColor</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-class">.swiper-pagination-bullet-active</span> &#123;</span><br><span class="line">            <span class="attribute">background</span>: <span class="variable">@bgColorHover</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>JS 代码</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Swiper(<span class="string">&quot;.swiper-img&quot;</span>, &#123;</span><br><span class="line">    loop: <span class="literal">true</span>,</span><br><span class="line">    autoplay: &#123;</span><br><span class="line">        delay: <span class="number">1000</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    pagination: &#123;</span><br><span class="line">        el: <span class="string">&quot;.swiper-pagination&quot;</span>,</span><br><span class="line">        type: <span class="string">&quot;fraction&quot;</span>, <span class="comment">//分式</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">new</span> Swiper(<span class="string">&quot;.swiper-img-click&quot;</span>, &#123;</span><br><span class="line">    loop: <span class="literal">true</span>,</span><br><span class="line">    autoplay: &#123;</span><br><span class="line">        delay: <span class="number">1000</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    pagination: &#123;</span><br><span class="line">        el: <span class="string">&quot;.swiper-pagination&quot;</span>,</span><br><span class="line">        clickable: <span class="literal">true</span>, <span class="comment">//点击分页器的指示点分页器会控制Swiper切换</span></span><br><span class="line">        renderBullet: <span class="function"><span class="keyword">function</span>(<span class="params">index, className</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;&lt;span class=&quot;&#x27;</span> + className + <span class="string">&#x27;&quot;&gt;&#x27;</span> + (index + <span class="number">1</span>) + <span class="string">&#x27;&lt;/span&gt;&#x27;</span>;</span><br><span class="line">        &#125;, <span class="comment">//渲染分页器小点</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li>效果如下：</li>
</ul>
<p><img data-src="https://img-blog.csdnimg.cn/20200826155510164.gif#pic_center" alt="效果三"></p>
<h3 id="缩略图显示（开启焦距功能）"><a href="#缩略图显示（开启焦距功能）" class="headerlink" title="缩略图显示（开启焦距功能）"></a>缩略图显示（开启焦距功能）</h3><ul>
<li><p><a href="https://sourl.cn/APX8pS">图片下载链接（官网案例）</a></p>
</li>
<li><p>HTML 代码</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;banner&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-focus&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-wrapper&quot;</span> <span class="attr">id</span>=<span class="string">&quot;swiper-4&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-slide&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-zoom-container&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/01.jpg&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-slide&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-zoom-container&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/02.jpg&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-slide&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-zoom-container&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/03.jpg&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-slide&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-zoom-container&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/04.jpg&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-pagination&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>Less 代码</li>
</ul>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#banner</span> &#123;</span><br><span class="line">    <span class="attribute">max-width</span>: <span class="number">1200px</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="selector-class">.swiper-focus</span>&#123;</span><br><span class="line">        <span class="selector-class">.swiper-slide</span> &#123;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">            <span class="selector-tag">img</span> &#123;</span><br><span class="line">                <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.swiper-pagination</span> &#123;</span><br><span class="line">        <span class="attribute">position</span>: relative;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="selector-class">.swiper-pagination-bullet</span> &#123;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">25%</span>;</span><br><span class="line">            <span class="attribute">height</span>: auto;</span><br><span class="line">            <span class="attribute">background</span>: none;</span><br><span class="line">            <span class="selector-tag">img</span> &#123;</span><br><span class="line">                <span class="attribute">font-size</span>: <span class="number">0</span>;</span><br><span class="line">                <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>JS 代码</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Swiper(<span class="string">&#x27;.swiper-focus&#x27;</span>, &#123;</span><br><span class="line">    loop: <span class="literal">true</span>,</span><br><span class="line">    pagination: &#123;</span><br><span class="line">        el: <span class="string">&#x27;.swiper-pagination&#x27;</span>,</span><br><span class="line">        clickable: <span class="literal">true</span>,</span><br><span class="line">        renderBullet: <span class="function"><span class="keyword">function</span>(<span class="params">index, className</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;&lt;span class=&quot;&#x27;</span> + className + <span class="string">&#x27;&quot;&gt;&lt;image src=&quot;img/0&#x27;</span> + (index + <span class="number">1</span>) + <span class="string">&#x27;.jpg&quot;&gt;&lt;/span&gt;&#x27;</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    zoom: <span class="literal">true</span>, <span class="comment">// 开启焦距功能：双击slide会放大/缩小</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li>效果如下：</li>
</ul>
<p><img data-src="https://img-blog.csdnimg.cn/2020082616193980.gif#pic_center" alt="效果4"></p>
]]></content>
      <categories>
        <category>前端插件</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>Swiper</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>vscode造成电脑卡顿</title>
    <url>/posts/fc53734b/</url>
    <content><![CDATA[<h3 id="主流解决方案"><a href="#主流解决方案" class="headerlink" title="主流解决方案"></a>主流解决方案</h3><p>最近使用 Vscode 总是特别卡顿，网上大部分的解决方案如下（但是没有什么效果）</p>
<ul>
<li>search.followSymlinksd: false （控制是否在搜索中跟踪符号链接）</li>
<li>git.enabled: false （是否启用Git）</li>
<li>git.autorefresh: false （是否启用自动刷新）</li>
</ul>
<a id="more"></a>

<h3 id="语言设置问题"><a href="#语言设置问题" class="headerlink" title="语言设置问题"></a>语言设置问题</h3><p>都设置后还是很卡，很是头疼。去查看一下资源管理器，看一下哪个占用较多的cpu资源，发现是一个 Microsoft.Python.LanguageServer 的进程占用</p>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/Basics/python%E5%8D%A0%E7%94%A8%E8%BF%87%E9%AB%98.png" alt="cpu-python"></p>
<p>勾选 Jedi 不使用 Microsoft</p>
<ul>
<li>Python: Language Server: jedi</li>
</ul>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/Basics/%E4%BF%AE%E6%94%B9python%E8%AF%AD%E8%A8%80.png" alt="修改python语言"></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 最好在 settings.json 中加上这个，要不然可能随时变回 Microsoft</span></span><br><span class="line">&quot;python.languageServer&quot;: &quot;Jedi&quot;,</span><br></pre></td></tr></table></figure>

<p>同样， cpptools.exe 的进程占用也很高</p>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/Basics/C%E5%8D%A0%E7%94%A8%E8%BF%87%E9%AB%98.png" alt="cpu-c"></p>
<ul>
<li>C_Cpp: Intelli Sense Engine: disabled</li>
</ul>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/Basics/%E4%BF%AE%E6%94%B9c%E8%AF%AD%E8%A8%80.png" alt="修改c语言"></p>
<h3 id="插件问题"><a href="#插件问题" class="headerlink" title="插件问题"></a>插件问题</h3><p>都设置后，还是会时不时卡顿，再去查看资源管理器，发现有一些插件也会导致 CPU 过高</p>
<ul>
<li>Auto Rename Tag （其实按F2重构即可）</li>
</ul>
<p>你可以在命令面板（Ctrl + Shift + P）输入 <code>Developer: Startup Performance</code> 查看各个插件启动时间</p>
<p>可以参考 <a href="https://juejin.cn/post/6844904115798016008">那些你应该考虑卸载的 VSCode 扩展</a></p>
]]></content>
      <categories>
        <category>基础配置</category>
      </categories>
      <tags>
        <tag>Vscode问题</tag>
        <tag>电脑卡顿</tag>
        <tag>插件问题</tag>
      </tags>
  </entry>
  <entry>
    <title>圣杯布局和双飞翼布局</title>
    <url>/posts/6669e648/</url>
    <content><![CDATA[<p>圣杯布局和双飞翼布局，虽然两者的实现方法略有差异，不过都遵循了以下要点：</p>
<ul>
<li>两侧宽度固定，中间宽度自适应</li>
<li>中间部分在 DOM 结构上优先，以便先行渲染</li>
<li>允许三列中的任意一列成为最高列</li>
</ul>
<a id="more"></a>

<h2 id="圣杯布局"><a href="#圣杯布局" class="headerlink" title="圣杯布局"></a>圣杯布局</h2><ul>
<li>页面分为左中右3个部分，其中左右两侧固定宽度，而中间部分自适应</li>
</ul>
<p>html结构</p>
<ul>
<li>这里把 center 部分放在最前面，然后是 left、right</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;center&quot;</span>&gt;</span>中间自适应<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span>左侧固定宽度<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span>右侧固定宽度<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="左右浮动-中间-100-宽度"><a href="#左右浮动-中间-100-宽度" class="headerlink" title="左右浮动 + 中间 100% 宽度"></a>左右浮动 + 中间 100% 宽度</h3><ul>
<li>将三列都设置 <code>float: left</code> 使其在同一排显示</li>
<li>left 和 right 设置固定宽度</li>
<li>由于 center 宽度为 100% 将父元素占满了，因此 left 和 right 只能换行显示</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.container</span> &#123;</span></span><br><span class="line">    	padding: 0 150px 0 200px;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.container</span>&gt;<span class="selector-tag">div</span> &#123;</span></span><br><span class="line">        height: 200px;</span><br><span class="line">        float: left;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.center</span> &#123;</span></span><br><span class="line">        background: aqua;</span><br><span class="line">        width: 100%;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.left</span> &#123;</span></span><br><span class="line">        width: 200px;</span><br><span class="line">        background: lightblue;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.right</span> &#123;</span></span><br><span class="line">        width: 150px;</span><br><span class="line">        background: lightgreen;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img data-src="https://gitee.com/lilyn/pic/raw/master/css-img/%E5%9C%A3%E6%9D%AF%E5%B8%83%E5%B1%80-%E9%83%BD%E8%AE%BE%E4%B8%BA%E6%B5%AE%E5%8A%A8,%E4%B8%AD%E9%97%B4%E5%AE%BD%E8%AE%BE%E4%B8%BA100%.jpg" alt="圣杯布局-都设为浮动,中间宽设为100%"></p>
<ul>
<li>设置 left <code>margin-left: -100%</code>，使其上移到 center 一行，并与 center 重叠  </li>
<li>设置 right <code>margin-right: -150px</code>，使其上移到 center 一行，并与 center 重叠</li>
</ul>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/css-img/%E5%9C%A3%E6%9D%AF%E5%B8%83%E5%B1%80-%E8%AE%BE%E7%BD%AEmargin-left.jpg" alt="圣杯布局-设置margin-left"></p>
<ul>
<li>设置 left <code>position: relative; left: -200px</code></li>
<li>设置 left <code>position: relative; left: 150px</code></li>
</ul>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/css-img/%E5%9C%A3%E6%9D%AF%E5%B8%83%E5%B1%80-%E8%AE%BE%E7%BD%AE%E5%AE%9A%E4%BD%8D.jpg" alt="圣杯布局-设置定位"></p>
<ul>
<li>如果宽度无法容下3个盒子会换行显示，设置 <code>min-width: 600px</code>，可以解决</li>
</ul>
<p><img data-src="https://gitee.com/lilyn/pic/raw/master/css-img/%E5%9C%A3%E6%9D%AF%E5%B8%83%E5%B1%80-%E5%B0%BA%E5%AF%B8%E4%B8%8D%E5%A4%9F%E6%97%B6%E4%BC%9A%E6%8D%A2%E8%A1%8C%E6%98%BE%E7%A4%BA.jpg" alt="圣杯布局-尺寸不够时会换行显示"></p>
<h3 id="flex"><a href="#flex" class="headerlink" title="flex"></a>flex</h3><ul>
<li>将 container 设置为弹性布局，container 变为了 flex 容器，子元素 center、left、right 变为了 flex 项目</li>
<li>设置 left 的 order 属性来调整位置，默认为0，值越小越靠前</li>
<li>left 和 right 设置为固定宽度，使用 width 或 flex-basis</li>
<li>让 center 自动填充剩余空间，使用 flex-grow（默认为0） 或 flex 即可</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">media</span>=<span class="string">&quot;screen&quot;</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.container</span> &#123;</span></span><br><span class="line">        display: flex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.container</span>&gt;<span class="selector-tag">div</span> &#123;</span></span><br><span class="line">        height: 200px;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.center</span> &#123;</span></span><br><span class="line">        background: aqua;</span><br><span class="line"><span class="css">        <span class="selector-tag">flex-grow</span><span class="selector-pseudo">:1</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.left</span> &#123;</span></span><br><span class="line">        flex-basis: 200px;</span><br><span class="line">        background: lightblue;</span><br><span class="line">        order: -1;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.right</span> &#123;</span></span><br><span class="line">        flex-basis: 150px;</span><br><span class="line">        background: lightgreen;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="双飞翼布局"><a href="#双飞翼布局" class="headerlink" title="双飞翼布局"></a>双飞翼布局</h2><p>html结构</p>
<ul>
<li>center 是鸟的身体，left 和 right 是鸟的翅膀，先把 center 放好，再将翅膀移动到合适的位置</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;inner&quot;</span>&gt;</span>中间自适应<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span>左侧固定宽度<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span>右侧固定宽度<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>把之前给 container 的 padding 加给 center，并把它转换成 IE 盒模型</li>
<li>再给 left 和 right <code>margin-left</code> 即可</li>
</ul>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>圣杯布局</tag>
        <tag>双飞翼布局</tag>
      </tags>
  </entry>
  <entry>
    <title>获取文件夹下所有图片尺寸</title>
    <url>/posts/5a7a946b/</url>
    <content><![CDATA[<p>有时候我们爬取了一堆图片，需要知道这些图片尺寸大小或名字以便日后处理。一个一个弄很是费劲，我们可以用 python 批量获取一下并生成 csv</p>
<ul>
<li>如果图片后缀比较多（png jpg jpeg bmp），可以在 suffix里进行添加</li>
</ul>
<a id="more"></a>

<p>用法：输入文件夹地址即可生成 csv，不过需要预先安装一些环境，已经安好跳过即可</p>
<ul>
<li>PIL库python3.7版本前： <code>pip install PIL</code>  python3.7版本之后改名为 pillow <code>pip install pillow</code></li>
<li>openpyxl库 <code>pip install openpyxl</code></li>
</ul>
<h3 id="代码如下："><a href="#代码如下：" class="headerlink" title="代码如下："></a>代码如下：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">file_list = []</span><br><span class="line">width_list = []</span><br><span class="line">height_list = []</span><br><span class="line">root_path = <span class="built_in">input</span>(<span class="string">&#x27;请输入 图片 所在地址:&#x27;</span>)</span><br><span class="line">suffix = [<span class="string">&#x27;.jpg&#x27;</span>, <span class="string">&#x27;.png&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> dirpath, dirnames, files <span class="keyword">in</span> os.walk(root_path):</span><br><span class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">        file_path = os.path.join(dirpath, file)</span><br><span class="line">        <span class="keyword">for</span> suf <span class="keyword">in</span> suffix:</span><br><span class="line">            <span class="keyword">if</span> file.endswith(suf):</span><br><span class="line">                img = Image.<span class="built_in">open</span>(file_path)</span><br><span class="line">                file_list.append(file)</span><br><span class="line">                width_list.append(img.size[<span class="number">0</span>])</span><br><span class="line">                height_list.append(img.size[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">content_dict = &#123;</span><br><span class="line">    <span class="string">&#x27;dir_name&#x27;</span>:file_list,</span><br><span class="line">    <span class="string">&#x27;width&#x27;</span>:width_list,</span><br><span class="line">    <span class="string">&#x27;height&#x27;</span>:height_list</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(content_dict)</span><br><span class="line">csv_path = os.path.join(root_path,<span class="string">&#x27;image_size.csv&#x27;</span>)</span><br><span class="line">df.to_csv(csv_path, encoding=<span class="string">&#x27;utf_8_sig&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="生成-csv-效果图："><a href="#生成-csv-效果图：" class="headerlink" title="生成 csv 效果图："></a>生成 csv 效果图：</h3><p><img data-src="https://gitee.com/lilyn/pic/raw/master/python-img/%E8%8E%B7%E5%8F%96%E6%96%87%E4%BB%B6%E5%A4%B9%E6%89%80%E6%9C%89%E5%9B%BE%E7%89%87%E5%B0%BA%E5%AF%B8.jpg" alt="获取文件夹所有图片尺寸"></p>
<h3 id="生成Excel"><a href="#生成Excel" class="headerlink" title="生成Excel"></a>生成Excel</h3><p>如果要生成 Excel，可以使用 openpyxl 读一下生成的 csv，之后用<code>,</code> 分割转存为Excel，封装后的代码如下：</p>
<ul>
<li>不过所有数字类型数据都会转换成字符串类型，不希望这个可以写了 is_number 方法，在 append 之前修改数据类型</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> openpyxl <span class="keyword">import</span> Workbook</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">xls</span>(<span class="params">path</span>):</span></span><br><span class="line">    <span class="comment">#生成Excel文件</span></span><br><span class="line">    wb = Workbook()</span><br><span class="line">    ws = wb.active</span><br><span class="line">    first_row = []</span><br><span class="line">    datas = []</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(path,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        is_first_row = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">            line = line[:-<span class="number">1</span>]</span><br><span class="line">            <span class="comment">#存储第一行</span></span><br><span class="line">            <span class="keyword">if</span> is_first_row:</span><br><span class="line">                is_first_row = <span class="literal">False</span></span><br><span class="line">                first_row = line.split(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="comment">#存储第二行至max_row</span></span><br><span class="line">            datas.append(line.split(<span class="string">&#x27;,&#x27;</span>))</span><br><span class="line">    ws.append(first_row)</span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span> datas:</span><br><span class="line">        ws.append(data)</span><br><span class="line">    wb.save(xls_path)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>获取图片尺寸</tag>
        <tag>批处理</tag>
        <tag>写入到csv</tag>
      </tags>
  </entry>
  <entry>
    <title>牛客网本地刷题环境部署</title>
    <url>/posts/bf596df5/</url>
    <content><![CDATA[<p>牛客网在线判题系统使用帮助：<a href="https://www.nowcoder.com/discuss/276">https://www.nowcoder.com/discuss/276</a></p>
<a id="more"></a>

<h2 id="JavaScript输入"><a href="#JavaScript输入" class="headerlink" title="JavaScript输入"></a>JavaScript输入</h2><p>【node.js】readline (逐行读取)：<a href="https://www.cnblogs.com/yujihang/p/7414169.html">https://www.cnblogs.com/yujihang/p/7414169.html</a></p>
<p>Javascript本地测试/笔试环境搭建：<a href="https://react.ctolib.com/wuyve-Javascript-test.html">https://react.ctolib.com/wuyve-Javascript-test.html</a></p>
<h3 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h3><ol>
<li><p>在代码处的文件夹 输入  <code>cnpm install readline-sync</code></p>
</li>
<li><p>在代码处的文件夹 添加一个JS文件，文件头部输入以下代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> __readline = <span class="built_in">require</span>(<span class="string">&#x27;readline-sync&#x27;</span>);</span><br><span class="line">__readline.setDefaultOptions(&#123;</span><br><span class="line">    prompt: <span class="string">&#x27;&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> read_line = __readline.prompt;</span><br><span class="line"><span class="keyword">var</span> print = <span class="built_in">console</span>.log;</span><br></pre></td></tr></table></figure>
</li>
<li><p>这样子，JS带输入输出就OK了</p>
</li>
</ol>
<h3 id="JavaScript-V8"><a href="#JavaScript-V8" class="headerlink" title="JavaScript(V8)"></a>JavaScript(V8)</h3><p>单行输入</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> __readline = <span class="built_in">require</span>(<span class="string">&#x27;readline-sync&#x27;</span>);</span><br><span class="line">__readline.setDefaultOptions(&#123;</span><br><span class="line">    prompt: <span class="string">&#x27;&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> read_line = __readline.prompt;</span><br><span class="line"><span class="keyword">var</span> print = <span class="built_in">console</span>.log;</span><br><span class="line"></span><br><span class="line"><span class="comment">//牛客网：readline</span></span><br><span class="line"><span class="comment">//赛码：read_line</span></span><br><span class="line"><span class="keyword">while</span>(line=read_line())&#123;</span><br><span class="line">    <span class="keyword">var</span> lines = line.split(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> a = <span class="built_in">parseInt</span>(lines[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">var</span> b = <span class="built_in">parseInt</span>(lines[<span class="number">1</span>]);</span><br><span class="line">    print(a+b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>多行输入</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> __readline = <span class="built_in">require</span>(<span class="string">&#x27;readline-sync&#x27;</span>);</span><br><span class="line">__readline.setDefaultOptions(&#123;</span><br><span class="line">    prompt: <span class="string">&#x27;&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> read_line = __readline.prompt;</span><br><span class="line"><span class="keyword">var</span> print = <span class="built_in">console</span>.log;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> countLine = <span class="built_in">parseInt</span>(read_line());</span><br><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; countLine; i++) &#123;</span><br><span class="line">    lines = read_line().split(<span class="string">&quot; &quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; lines.length; j++) &#123;</span><br><span class="line">        sum += <span class="built_in">parseInt</span>(lines[j]);</span><br><span class="line">    &#125;</span><br><span class="line">    print(sum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="JavaScript-Node"><a href="#JavaScript-Node" class="headerlink" title="JavaScript(Node)"></a>JavaScript(Node)</h3><p>单行输入</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> readline = <span class="built_in">require</span>(<span class="string">&#x27;readline&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> rl = readline.createInterface(&#123;</span><br><span class="line">    input: process.stdin,</span><br><span class="line">    output: process.stdout</span><br><span class="line">&#125;);</span><br><span class="line">rl.on(<span class="string">&#x27;line&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">line</span>) </span>&#123;</span><br><span class="line"> 	<span class="comment">// 注意：这里的line不论在shell中输入的是数字还是字符串，获取到的始终是字符串</span></span><br><span class="line">    <span class="keyword">var</span> tokens = line.split(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(tokens[<span class="number">0</span>]) + <span class="built_in">parseInt</span>(tokens[<span class="number">1</span>]));</span><br><span class="line">    <span class="comment">// 关闭node输入环境</span></span><br><span class="line">    rl.close();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>多行输入</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> print = <span class="built_in">console</span>.log;</span><br><span class="line"><span class="keyword">var</span> readline = <span class="built_in">require</span>(<span class="string">&#x27;readline&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> rl = readline.createInterface(&#123;</span><br><span class="line">    input: process.stdin,</span><br><span class="line">    output: process.stdout</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> countLine = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">var</span> index = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">rl.on(<span class="string">&#x27;line&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">line</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> lines = line.split(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; lines.length; i++) &#123;</span><br><span class="line">        sum += <span class="built_in">parseInt</span>(lines[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    index++;</span><br><span class="line">    <span class="keyword">if</span> (index == countLine) &#123;</span><br><span class="line">        print(sum);</span><br><span class="line">        <span class="comment">// 关闭node输入环境</span></span><br><span class="line">        rl.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">rl.on(<span class="string">&#x27;close&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    process.exit(<span class="number">0</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<h2 id="Python输入"><a href="#Python输入" class="headerlink" title="Python输入"></a>Python输入</h2><p>Python常用标准库之sys：<a href="https://www.jianshu.com/p/c1831232c391">https://www.jianshu.com/p/c1831232c391</a></p>
<h3 id="python-2"><a href="#python-2" class="headerlink" title="python 2+"></a>python 2+</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        line = sys.stdin.readline().strip()</span><br><span class="line">        <span class="keyword">if</span> line == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        lines = line.split()</span><br><span class="line">        <span class="built_in">print</span> <span class="built_in">int</span>(lines[<span class="number">0</span>]) + <span class="built_in">int</span>(lines[<span class="number">1</span>])</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>



<h3 id="python-3"><a href="#python-3" class="headerlink" title="python 3+"></a>python 3+</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys </span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> sys.stdin:</span><br><span class="line">    a = line.split()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> a:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    print(<span class="built_in">int</span>(a[<span class="number">0</span>]) + <span class="built_in">int</span>(a[<span class="number">1</span>]))</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>基础配置</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Python</tag>
        <tag>牛客网</tag>
      </tags>
  </entry>
</search>
